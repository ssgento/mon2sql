[
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# asset_parts ( part_id, * )\n# fault_log ( fault_log_entry_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, * )\n# assets ( asset_details, asset_make, asset_model, other_asset_details, * )\n# fault_log_parts ( fault_log_entry_id, fault_status, * )\n#  fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id\n#  fault_log.asset_id = assets.asset_id \n#  asset_parts.asset_id = assets.asset_id \n#\n### Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assets ( asset_id, asset_details, asset_make, asset_model, * )\n# maintenance_contracts ( maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details, * )\n# asset_parts ( part_id, * )\n# parts ( part_name, chargeable_yn, chargeable_amount, other_part_details, * )\n#  asset_parts.part_id = parts.part_id\n#  asset_parts.asset_id = assets.asset_id \n#  assets.maintenance_contract_id = maintenance_contracts.maintenance_contract_id \n#\n### How many assets does each maintenance contract contain? List the number and the contract id.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assets ( asset_id, maintenance_contract_id, asset_details, asset_make, * )\n# third_party_companies ( company_name, company_type, other_company_details, company_address, * )\n# asset_parts ( part_id, * )\n# maintenance_engineers ( engineer_id, first_name, last_name, other_details, * )\n#  maintenance_engineers.company_id = third_party_companies.company_id\n#  asset_parts.asset_id = assets.asset_id \n#  assets.supplier_company_id = third_party_companies.company_id \n#\n### How many assets does each third party company supply? List the count and the company id.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# maintenance_engineers ( engineer_id, first_name, last_name, other_details, * )\n# third_party_companies ( company_name, company_type, other_company_details, company_address, * )\n# maintenance_contracts ( maintenance_contract_id, contract_start_date, contract_end_date, other_contract_details, * )\n# asset_parts ( part_id, * )\n#  maintenance_engineers.company_id = third_party_companies.company_id\n#  maintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id \n#\n### Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# fault_log ( fault_log_entry_id, asset_id, fault_log_entry_datetime, fault_description, * )\n# staff ( staff_name, gender, other_staff_details, * )\n# engineer_visits ( fault_log_entry_id, engineer_id, engineer_visit_id, fault_status, * )\n# asset_parts ( part_id, * )\n#  engineer_visits.fault_log_entry_id = fault_log.fault_log_entry_id\n#  engineer_visits.contact_staff_id = staff.staff_id \n#  fault_log.recorded_by_staff_id = staff.staff_id \n#\n### What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# engineer_visits ( contact_staff_id, engineer_visit_id, visit_start_datetime, fault_log_entry_id, * )\n# maintenance_engineers ( first_name, last_name, company_id, other_details, * )\n# engineer_skills ( skill_id, * )\n# third_party_companies ( company_type, company_name, company_address, other_company_details, * )\n#  engineer_visits.engineer_id = maintenance_engineers.engineer_id\n#  engineer_skills.engineer_id = maintenance_engineers.engineer_id \n#  maintenance_engineers.company_id = third_party_companies.company_id \n#\n### Which engineer has visited the most times? Show the engineer id, first name and last name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# part_faults ( part_fault_id, fault_short_name, fault_description, other_fault_details, * )\n# parts ( part_name, chargeable_yn, chargeable_amount, other_part_details, * )\n# fault_log_parts ( fault_log_entry_id, fault_status, * )\n# asset_parts ( part_id, * )\n#  fault_log_parts.part_fault_id = part_faults.part_fault_id\n#  part_faults.part_id = parts.part_id \n#  asset_parts.part_id = parts.part_id \n#\n### Which parts have more than 2 faults? Show the part name and id.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# skills ( skill_id, skill_code, * )\n# maintenance_engineers ( last_name, other_details, engineer_id, company_id, * )\n# engineer_skills ( engineer_id, * )\n# skills_required_to_fix ( part_fault_id, * )\n#  skills_required_to_fix.skill_id = skills.skill_id\n#  engineer_skills.engineer_id = maintenance_engineers.engineer_id \n#  engineer_skills.skill_id = skills.skill_id \n#\n### List all every engineer's first name, last name, details and coresponding skill description.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# skills ( skill_id, skill_code, * )\n# skills_required_to_fix ( part_fault_id, * )\n# part_faults ( part_fault_id, fault_description, fault_short_name, other_fault_details, * )\n# parts ( part_name, chargeable_yn, chargeable_amount, other_part_details, * )\n#  skills_required_to_fix.part_fault_id = part_faults.part_fault_id\n#  skills_required_to_fix.skill_id = skills.skill_id \n#  part_faults.part_id = parts.part_id \n#\n### For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# asset_parts ( asset_id, * )\n# parts ( part_id, chargeable_yn, chargeable_amount, other_part_details, * )\n# assets ( asset_details, asset_make, asset_model, asset_acquired_date, * )\n# part_faults ( part_fault_id, fault_short_name, fault_description, other_fault_details, * )\n#  part_faults.part_id = parts.part_id\n#  asset_parts.part_id = parts.part_id \n#  asset_parts.asset_id = assets.asset_id \n#\n### How many assets can each parts be used in? List the part name and the number.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# fault_log ( fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, * )\n# fault_log_parts ( fault_log_entry_id, part_fault_id, * )\n# part_faults ( part_fault_id, part_id, fault_short_name, other_fault_details, * )\n# engineer_visits ( fault_log_entry_id, engineer_visit_id, contact_staff_id, engineer_id, * )\n#  fault_log_parts.part_fault_id = part_faults.part_fault_id\n#  fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id \n#  engineer_visits.fault_log_entry_id = fault_log.fault_log_entry_id \n#\n### What are all the fault descriptions and the fault status of all the faults recoreded in the logs?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# engineer_visits ( engineer_id, visit_start_datetime, engineer_visit_id, contact_staff_id, * )\n# fault_log ( fault_log_entry_datetime, asset_id, recorded_by_staff_id, fault_description, * )\n# fault_log_parts ( part_fault_id, fault_status, * )\n# part_faults ( part_id, fault_short_name, fault_description, other_fault_details, * )\n#  fault_log_parts.part_fault_id = part_faults.part_fault_id\n#  fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id \n#  engineer_visits.fault_log_entry_id = fault_log.fault_log_entry_id \n#\n### How many engineer visits are required at most for a single fault log? List the number and the log entry id.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# maintenance_engineers ( engineer_id, company_id, first_name, other_details, * )\n# engineer_skills ( skill_id, * )\n# skills_required_to_fix ( skill_id, * )\n# engineer_visits ( engineer_visit_id, contact_staff_id, fault_log_entry_id, fault_status, * )\n#  engineer_visits.engineer_id = maintenance_engineers.engineer_id\n#  engineer_skills.engineer_id = maintenance_engineers.engineer_id \n#\n### What are all the distinct last names of all the engineers?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# fault_log_parts ( fault_log_entry_id, part_fault_id, * )\n# fault_log ( asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, * )\n# asset_parts ( part_id, * )\n# part_faults ( part_id, fault_short_name, fault_description, other_fault_details, * )\n#  fault_log_parts.part_fault_id = part_faults.part_fault_id\n#  fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id \n#\n### How many fault status codes are recorded in the fault log parts table?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# maintenance_engineers ( last_name, engineer_id, company_id, other_details, * )\n# engineer_visits ( contact_staff_id, engineer_visit_id, fault_log_entry_id, visit_start_datetime, * )\n# assets ( maintenance_contract_id, asset_details, asset_make, asset_model, * )\n# asset_parts ( part_id, * )\n#  engineer_visits.engineer_id = maintenance_engineers.engineer_id\n#  asset_parts.asset_id = assets.asset_id \n#\n### Which engineers have never visited to maintain the assets? List the engineer first name and last name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assets ( asset_id, asset_details, asset_model, other_asset_details, * )\n# asset_parts ( part_id, * )\n# fault_log ( fault_log_entry_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, * )\n# fault_log_parts ( part_fault_id, fault_status, * )\n#  fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id\n#  fault_log.asset_id = assets.asset_id \n#  asset_parts.asset_id = assets.asset_id \n#\n### List the asset id, details, make and model for every asset.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assets ( asset_id, asset_details, asset_disposed_date, maintenance_contract_id, * )\n# asset_parts ( part_id, * )\n# skills_required_to_fix ( skill_id, * )\n# maintenance_engineers ( company_id, first_name, last_name, other_details, * )\n#  asset_parts.asset_id = assets.asset_id\n#\n### When was the first asset acquired?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# skills_required_to_fix ( skill_id, * )\n# parts ( part_name, chargeable_yn, chargeable_amount, other_part_details, * )\n# part_faults ( part_fault_id, fault_short_name, fault_description, other_fault_details, * )\n# skills ( skill_code, skill_description, * )\n#  skills_required_to_fix.part_fault_id = part_faults.part_fault_id\n#  skills_required_to_fix.skill_id = skills.skill_id \n#  part_faults.part_id = parts.part_id \n#\n### Which part fault requires the most number of skills to fix? List part id and name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# part_faults ( part_fault_id, fault_short_name, fault_description, other_fault_details, * )\n# parts ( part_id, chargeable_yn, chargeable_amount, other_part_details, * )\n# fault_log_parts ( fault_log_entry_id, fault_status, * )\n# asset_parts ( part_id, * )\n#  fault_log_parts.part_fault_id = part_faults.part_fault_id\n#  part_faults.part_id = parts.part_id \n#  asset_parts.part_id = parts.part_id \n#\n### Which kind of part has the least number of faults? List the part name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# engineer_visits ( contact_staff_id, engineer_visit_id, fault_log_entry_id, fault_status, * )\n# maintenance_engineers ( first_name, last_name, company_id, other_details, * )\n# engineer_skills ( skill_id, * )\n# asset_parts ( part_id, * )\n#  engineer_visits.engineer_id = maintenance_engineers.engineer_id\n#  engineer_skills.engineer_id = maintenance_engineers.engineer_id \n#\n### Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_name, gender, other_staff_details, * )\n# engineer_visits ( engineer_id, fault_log_entry_id, engineer_visit_id, fault_status, * )\n# maintenance_engineers ( first_name, last_name, company_id, other_details, * )\n# engineer_skills ( skill_id, * )\n#  engineer_visits.engineer_id = maintenance_engineers.engineer_id\n#  engineer_visits.contact_staff_id = staff.staff_id \n#  engineer_skills.engineer_id = maintenance_engineers.engineer_id \n#\n### Which staff have contacted which engineers? List the staff name and the engineer first name and last name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# fault_log ( fault_description, fault_log_entry_id, recorded_by_staff_id, asset_id, * )\n# fault_log_parts ( part_fault_id, fault_status, * )\n# part_faults ( part_id, fault_short_name, fault_description, other_fault_details, * )\n# parts ( part_name, chargeable_yn, chargeable_amount, other_part_details, * )\n#  fault_log_parts.part_fault_id = part_faults.part_fault_id\n#  fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id \n#  part_faults.part_id = parts.part_id \n#\n### Which fault log included the most number of faulty parts? List the fault log id, description and record time.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# skills ( skill_description, skill_code, * )\n# skills_required_to_fix ( part_fault_id, * )\n# engineer_skills ( engineer_id, * )\n# part_faults ( part_id, fault_short_name, fault_description, other_fault_details, * )\n#  skills_required_to_fix.part_fault_id = part_faults.part_fault_id\n#  skills_required_to_fix.skill_id = skills.skill_id \n#  engineer_skills.skill_id = skills.skill_id \n#\n### Which skill is used in fixing the most number of faults? List the skill id and description.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assets ( asset_id, asset_details, asset_disposed_date, asset_acquired_date, * )\n# asset_parts ( part_id, * )\n# skills_required_to_fix ( skill_id, * )\n# fault_log_parts ( part_fault_id, fault_status, * )\n#  asset_parts.asset_id = assets.asset_id\n#\n### What are all the distinct asset models?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assets ( asset_disposed_date, asset_details, asset_make, other_asset_details, * )\n# asset_parts ( part_id, * )\n# fault_log_parts ( part_fault_id, fault_status, * )\n# skills_required_to_fix ( skill_id, * )\n#  asset_parts.asset_id = assets.asset_id\n#\n### List the all the assets make, model, details by the disposed date ascendingly.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# parts ( part_id, chargeable_yn, part_name, other_part_details, * )\n# asset_parts ( part_id, * )\n# part_faults ( part_id, fault_short_name, fault_description, other_fault_details, * )\n# fault_log_parts ( fault_log_entry_id, fault_status, * )\n#  fault_log_parts.part_fault_id = part_faults.part_fault_id\n#  part_faults.part_id = parts.part_id \n#  asset_parts.part_id = parts.part_id \n#\n### Which part has the least chargeable amount? List the part id and amount.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# maintenance_contracts ( contract_start_date, maintenance_contract_id, contract_end_date, other_contract_details, * )\n# third_party_companies ( company_name, company_type, company_address, other_company_details, * )\n# maintenance_engineers ( engineer_id, first_name, last_name, other_details, * )\n# assets ( asset_disposed_date, maintenance_contract_id, supplier_company_id, asset_details, * )\n#  maintenance_engineers.company_id = third_party_companies.company_id\n#  assets.maintenance_contract_id = maintenance_contracts.maintenance_contract_id \n#  assets.supplier_company_id = third_party_companies.company_id \n#  maintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id \n#\n### Which company started the earliest the maintenance contract? Show the company name.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# third_party_companies ( company_id, company_name, company_address, other_company_details, * )\n# maintenance_contracts ( contract_end_date, maintenance_contract_company_id, maintenance_contract_id, other_contract_details, * )\n# maintenance_engineers ( engineer_id, first_name, last_name, other_details, * )\n# asset_parts ( part_id, * )\n#  maintenance_engineers.company_id = third_party_companies.company_id\n#  maintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id \n#\n### What is the description of the type of the company who concluded its contracts most recently?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_id, staff_name, other_staff_details, * )\n# skills_required_to_fix ( skill_id, * )\n# maintenance_engineers ( company_id, first_name, last_name, other_details, * )\n# fault_log_parts ( part_fault_id, fault_status, * )\n#\n### Which gender makes up the majority of the staff?\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_name, gender, other_staff_details, * )\n# engineer_visits ( engineer_id, fault_log_entry_id, engineer_visit_id, fault_status, * )\n# maintenance_engineers ( company_id, first_name, last_name, other_details, * )\n# skills_required_to_fix ( skill_id, * )\n#  engineer_visits.engineer_id = maintenance_engineers.engineer_id\n#  engineer_visits.contact_staff_id = staff.staff_id \n#\n### How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.\nSELECT"
    },
    {
        "db_id": "assets_maintenance",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assets ( asset_model, asset_details, asset_make, asset_acquired_date, * )\n# fault_log ( fault_log_entry_id, fault_log_entry_datetime, recorded_by_staff_id, fault_description, * )\n# asset_parts ( part_id, * )\n# fault_log_parts ( part_fault_id, fault_status, * )\n#  fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id\n#  fault_log.asset_id = assets.asset_id \n#  asset_parts.asset_id = assets.asset_id \n#\n### Which assets did not incur any fault log? List the asset model.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# book ( book_id, title, issues, * )\n# publication ( price, publication_id, publisher, publication_date, * )\n#  publication.book_id = book.book_id\n#\n### How many books are there?\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# book ( book_id, title, issues, * )\n# publication ( publisher, price, publication_id, publication_date, * )\n#  publication.book_id = book.book_id\n#\n### List the writers of the books in ascending alphabetical order.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# book ( issues, writer, book_id, * )\n# publication ( price, publication_id, publisher, publication_date, * )\n#  publication.book_id = book.book_id\n#\n### List the titles of the books in ascending order of issues.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# book ( title, book_id, issues, * )\n# publication ( price, publication_id, publisher, publication_date, * )\n#  publication.book_id = book.book_id\n#\n### What are the titles of the books whose writer is not \"Elaine Lee\"?\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# book ( issues, writer, book_id, * )\n# publication ( price, publication_id, publisher, publication_date, * )\n#  publication.book_id = book.book_id\n#\n### What are the title and issues of the books?\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publisher, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### What are the dates of publications in descending order of price?\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publication_date, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### What are the distinct publishers of publications with price higher than 5000000?\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, book_id, publication_id, publication_date, * )\n# book ( book_id, title, issues, * )\n#  publication.book_id = book.book_id\n#\n### List the publisher of the publication with the highest price.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publisher, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### List the publication dates of publications with 3 lowest prices.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( book_id, price, publication_id, publisher, * )\n# book ( title, writer, issues, * )\n#  publication.book_id = book.book_id\n#\n### Show the title and publication dates of books.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publisher, publication_id, publication_date, * )\n# book ( writer, title, issues, * )\n#  publication.book_id = book.book_id\n#\n### Show writers who have published a book with price more than 4000000.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, publisher, publication_date, * )\n# book ( book_id, writer, issues, * )\n#  publication.book_id = book.book_id\n#\n### Show the titles of books in descending order of publication price.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publication_date, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### Show publishers that have more than one publication.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publication_date, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### Show different publishers together with the number of publications they have.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publisher, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### Please show the most common publication date.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# book ( book_id, title, issues, * )\n# publication ( price, publication_id, publisher, publication_date, * )\n#  publication.book_id = book.book_id\n#\n### List the writers who have written more than one book.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# book ( title, writer, issues, * )\n# publication ( price, publication_id, publisher, publication_date, * )\n#  publication.book_id = book.book_id\n#\n### List the titles of books that are not published.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_date, publication_id, book_id, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publisher, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### What is the number of distinct publication dates?\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publisher, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### How many distinct publication dates are there in our record?\nSELECT"
    },
    {
        "db_id": "book_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# publication ( price, publication_id, book_id, publication_date, * )\n# book ( title, issues, book_id, * )\n#  publication.book_id = book.book_id\n#\n### Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"\nSELECT"
    },
    {
        "db_id": "company_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( mgr_start_date, dnumber, mgr_ssn, * )\n# dept_locations ( dlocation, * )\n# works_on ( essn, pno, * )\n# employee ( address, sex, fname, lname, * )\n#\n### List all department names ordered by their starting date.\nSELECT"
    },
    {
        "db_id": "company_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# dependent ( relationship, essn, sex, bdate, * )\n# employee ( ssn, address, sex, fname, * )\n# works_on ( essn, pno, * )\n# dept_locations ( dlocation, * )\n#\n### find all dependent names who have a spouse relation with some employee.\nSELECT"
    },
    {
        "db_id": "company_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# dependent ( dependent_name, relationship, essn, bdate, * )\n# employee ( minit, address, fname, lname, * )\n# dept_locations ( dlocation, * )\n# works_on ( essn, pno, * )\n#\n### how many female dependents are there?\nSELECT"
    },
    {
        "db_id": "company_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# dept_locations ( dnumber, * )\n# department ( dnumber, mgr_ssn, mgr_start_date, * )\n# works_on ( essn, pno, * )\n# employee ( address, sex, fname, lname, * )\n#\n### Find the names of departments that are located in Houston.\nSELECT"
    },
    {
        "db_id": "company_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( lname, salary, minit, address, * )\n# works_on ( essn, pno, * )\n# dept_locations ( dlocation, * )\n# dependent ( relationship, essn, dependent_name, bdate, * )\n#\n### Return the first names and last names of employees who earn more than 30000 in salary.\nSELECT"
    },
    {
        "db_id": "company_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( sex, minit, address, fname, * )\n# works_on ( essn, pno, * )\n# dept_locations ( dlocation, * )\n# dependent ( relationship, essn, dependent_name, bdate, * )\n#\n### Find the number of employees of each gender whose salary is lower than 50000.\nSELECT"
    },
    {
        "db_id": "company_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( bdate, fname, address, minit, * )\n# dept_locations ( dlocation, * )\n# works_on ( essn, pno, * )\n# dependent ( relationship, essn, dependent_name, bdate, * )\n#\n### list the first and last names, and the addresses of all employees in the ascending order of their birth date.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### How many teachers are there?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What is the total count of teachers?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, teacher_id, hometown, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### List the names of teachers in ascending order of age.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, teacher_id, hometown, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the teachers ordered by ascending age?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, name, teacher_id, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the age and hometown of teachers?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, name, teacher_id, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What is the age and hometown of every teacher?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, teacher_id, age, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### List the name of teachers whose hometown is not `` Little Lever Urban District '' .\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, teacher_id, age, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, teacher_id, hometown, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show the name of teachers aged either 32 or 33?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, teacher_id, hometown, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the teachers who are aged either 32 or 33?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, name, teacher_id, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What is the hometown of the youngest teacher?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( age, name, teacher_id, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Where is the youngest teacher from?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, teacher_id, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show different hometown of teachers and the number of teachers from each hometown.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( teacher_id, name, age, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### For each hometown, how many teachers are there?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, teacher_id, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### List the most common hometown of teachers.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, teacher_id, * )\n# course_arrange ( grade, course_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What is the most commmon hometowns for teachers?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( teacher_id, name, age, * )\n# course_arrange ( course_id, teacher_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show the hometowns shared by at least two teachers.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( teacher_id, name, age, * )\n# course_arrange ( grade, course_id, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the towns from which at least two teachers come from?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_arrange ( course_id, grade, * )\n# teacher ( name, age, hometown, * )\n# course ( course, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show names of teachers and the courses they are arranged to teach.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course ( course, staring_date, * )\n# course_arrange ( course_id, grade, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What is the name of each teacher and what course they teach?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_arrange ( course_id, grade, * )\n# teacher ( name, age, hometown, * )\n# course ( course, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_arrange ( course_id, grade, * )\n# teacher ( name, age, hometown, * )\n# course ( course, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( course, staring_date, * )\n# teacher ( name, age, hometown, * )\n# course_arrange ( teacher_id, grade, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show the name of the teacher for the math course.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course ( course_id, staring_date, * )\n# course_arrange ( course_id, grade, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the people who teach math courses?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course_arrange ( course_id, grade, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show names of teachers and the number of courses they teach.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course_arrange ( course_id, grade, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the teachers and how many courses do they teach?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course_arrange ( course_id, grade, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### Show names of teachers that teach at least two courses.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teacher ( name, age, hometown, * )\n# course_arrange ( course_id, grade, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the teachers who teach at least two courses?\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_arrange ( course_id, grade, * )\n# teacher ( name, age, hometown, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### List the names of teachers who have not been arranged to teach courses.\nSELECT"
    },
    {
        "db_id": "course_teach",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_arrange ( course_id, grade, * )\n# teacher ( name, age, hometown, * )\n# course ( course_id, staring_date, * )\n#  course_arrange.course_id = course.course_id\n#  course_arrange.teacher_id = teacher.teacher_id \n#\n### What are the names of the teachers whose courses have not been arranged?\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( member_id, name, country, * )\n# college ( college_id, leader_name, college_location, * )\n# round ( member_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### How many members are there?\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( member_id, country, college_id, * )\n# college ( college_id, leader_name, college_location, * )\n# round ( member_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### List the names of members in ascending alphabetical order.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( country, college_id, member_id, * )\n# college ( college_id, leader_name, college_location, * )\n# round ( member_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### What are the names and countries of members?\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( name, member_id, college_id, * )\n# college ( college_id, leader_name, college_location, * )\n# round ( member_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the names of members whose country is \"United States\" or \"Canada\".\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( college_id, name, member_id, * )\n# college ( college_id, leader_name, college_location, * )\n# round ( member_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the different countries and the number of members from each.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( college_id, member_id, name, * )\n# round ( round_id, decoration_theme, rank_in_round, * )\n# college ( college_id, leader_name, college_location, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the most common country across members.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( college_id, name, member_id, * )\n# college ( college_id, leader_name, college_location, * )\n# round ( member_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Which countries have more than two members?\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# college ( college_location, name, college_id, * )\n# member ( country, member_id, college_id, * )\n# round ( member_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the leader names and locations of colleges.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( name, member_id, country, * )\n# college ( name, leader_name, college_location, * )\n# round ( round_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the names of members and names of colleges they go to.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# college ( college_id, name, leader_name, * )\n# member ( name, member_id, country, * )\n# round ( round_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# college ( leader_name, name, college_location, * )\n# member ( college_id, member_id, name, * )\n# round ( round_id, decoration_theme, rank_in_round, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the distinct leader names of colleges associated with members from country \"Canada\".\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# round ( decoration_theme, round_id, rank_in_round, * )\n# member ( name, country, college_id, * )\n# college ( college_id, leader_name, college_location, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the names of members and the decoration themes they have.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# round ( rank_in_round, round_id, decoration_theme, * )\n# member ( name, country, college_id, * )\n# college ( college_id, leader_name, college_location, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the names of members that have a rank in round higher than 3.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# round ( rank_in_round, round_id, decoration_theme, * )\n# member ( name, country, college_id, * )\n# college ( college_id, leader_name, college_location, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### Show the names of members in ascending order of their rank in rounds.\nSELECT"
    },
    {
        "db_id": "decoration_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member ( name, college_id, country, * )\n# round ( round_id, decoration_theme, rank_in_round, * )\n# college ( college_id, leader_name, college_location, * )\n#  round.member_id = member.member_id\n#  member.college_id = college.college_id \n#\n### List the names of members who did not participate in any round.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( place, election_id, representative_id, votes, * )\n# representative ( state, party, representative_id, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### How many elections are there?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( date, place, election_id, representative_id, * )\n# representative ( state, party, representative_id, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### List the votes of elections in descending order.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( date, place, election_id, representative_id, * )\n# representative ( state, party, representative_id, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### List the dates and vote percents of elections.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( date, place, election_id, representative_id, * )\n# representative ( state, party, representative_id, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the minimum and maximum vote percents of elections?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( party, representative_id, state, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the names and parties of representatives?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( name, representative_id, state, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the names of representatives whose party is not \"Republican\"?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( lifespan, representative_id, name, party, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the life spans of representatives from New York state or Indiana state?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( date, place, election_id, votes, * )\n# representative ( name, state, party, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the names of representatives and the dates of elections they participated in.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( votes, date, place, election_id, * )\n# representative ( name, state, party, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the names of representatives with more than 10000 votes in election?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( votes, date, place, election_id, * )\n# representative ( name, state, party, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the names of representatives in descending order of votes?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( votes, date, place, election_id, * )\n# representative ( party, name, state, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### What is the party of the representative that has the smallest number of votes.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( representative_id, name, state, party, * )\n# election ( representative_id, date, place, election_id, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the lifespans of representatives in descending order of vote percent?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( representative_id, name, state, lifespan, * )\n# election ( representative_id, date, place, election_id, * )\n#  election.representative_id = representative.representative_id\n#\n### What is the average number of votes of representatives from party \"Republican\"?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( representative_id, name, state, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### What are the different parties of representative? Show the party name and the number of representatives in each party.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( representative_id, name, state, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### What is the party that has the largest number of representatives?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( representative_id, name, state, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### What parties have at least three representatives?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( representative_id, name, party, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### What states have at least two representatives?\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# election ( date, place, election_id, votes, * )\n# representative ( name, state, party, lifespan, * )\n#  election.representative_id = representative.representative_id\n#\n### List the names of representatives that have not participated in elections listed here.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( party, representative_id, name, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### Show the parties that have both representatives in New York state and representatives in Pennsylvania state.\nSELECT"
    },
    {
        "db_id": "election_representative",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# representative ( representative_id, name, state, lifespan, * )\n# election ( date, place, election_id, votes, * )\n#  election.representative_id = representative.representative_id\n#\n### How many distinct parties are there for representatives?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_name, capital, official_native_language, * )\n# match_season ( player, position, country, college, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### How many countries are there in total?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_name, capital, official_native_language, * )\n# match_season ( player, position, country, college, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Count the number of countries.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( capital, country_id, official_native_language, * )\n# match_season ( player, position, college, country, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the country name and capital of all countries.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( capital, country_id, official_native_language, * )\n# match_season ( player, position, college, country, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the names and capitals of each country?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_id, country_name, capital, * )\n# match_season ( player, position, college, country, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show all official native languages that contain the word \"English\".\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_id, country_name, capital, * )\n# match_season ( player, position, college, country, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the official native languages that contain the string \"English\".\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, college, country, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show all distinct positions of matches.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, college, country, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the different positions for match season?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, years_played, total_wl, * )\n# match_season ( player, team, country, season, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the players from college UCLA.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, years_played, total_wl, * )\n# match_season ( player, team, country, season, * )\n# team ( name, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Who are the players from UCLA?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( position, player, season, team, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the distinct position of players from college UCLA or Duke.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( position, player, season, team, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the different positions of players from UCLA or Duke colleges?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( draft_pick_number, draft_class, player, college, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the draft pick numbers and draft classes of players whose positions are defenders.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( draft_pick_number, draft_class, player, team, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the draft pick numbers and draft classes for players who play the Defender position?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, position, country, * )\n# team ( name, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### How many distinct teams are involved in match seasons?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, position, country, * )\n# team ( name, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Count the number of different teams involved in match season.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, player_id, total_wl, singles_wl, * )\n# match_season ( player, position, college, country, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the players and the years played.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, team, player_id, total_wl, * )\n# match_season ( player, position, college, country, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Who are the different players and how many years has each played?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# team ( team_id, * )\n# match_season ( player, position, team, college, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show all team names.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# team ( team_id, * )\n# match_season ( player, position, team, college, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the names of all teams?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, position, college, * )\n# country ( country_name, capital, official_native_language, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the season, the player, and the name of the country that player belongs to.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, years_played, total_wl, * )\n# match_season ( player, season, team, position, * )\n# country ( country_name, capital, official_native_language, * )\n# team ( name, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### For each player, what are their name, season, and country that they belong to?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, years_played, total_wl, * )\n# country ( country_id, capital, official_native_language, * )\n# match_season ( country, season, position, team, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Which players are from Indonesia?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, years_played, total_wl, * )\n# country ( country_id, capital, official_native_language, * )\n# match_season ( country, season, position, team, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Who are the players from Indonesia?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_id, country_name, official_native_language, * )\n# match_season ( country, player, season, team, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the distinct positions of the players from a country whose capital is Dublin?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_id, country_name, official_native_language, * )\n# match_season ( country, player, season, team, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( name, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Give the different positions of players who play for the country with the capital Dublin.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( official_native_language, country_name, capital, * )\n# match_season ( college, player, team, season, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the official languages of the countries of players from Maryland or Duke college?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( official_native_language, country_name, capital, * )\n# match_season ( college, player, team, season, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Return the official native languages of countries who have players from Maryland or Duke colleges.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( official_native_language, country_name, capital, * )\n# match_season ( country, player, season, team, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### How many distinct official languages are there among countries of players whose positions are defenders.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( official_native_language, country_name, capital, * )\n# match_season ( country, player, team, season, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( name, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Count the number of different official languages corresponding to countries that players who play Defender are from.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, player_id, years_played, total_wl, * )\n# team ( name, * )\n# match_season ( season, player, position, country, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the season, the player, and the name of the team that players belong to.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, player_id, years_played, total_wl, * )\n# match_season ( season, player, country, position, * )\n# team ( name, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Who are the different players, what season do they play in, and what is the name of the team they are on?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# team ( team_id, * )\n# player ( player, player_id, years_played, total_wl, * )\n# match_season ( player, team, season, country, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the positions of the players from the team with name \"Ryley Goldner\".\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# team ( name, * )\n# player ( player, player_id, years_played, total_wl, * )\n# match_season ( team, player, season, college, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Return the positions of players on the team Ryley Goldner.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# team ( team_id, * )\n# player ( player, player_id, years_played, total_wl, * )\n# match_season ( college, player, country, season, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### How many distinct colleges are associated with players from the team with name \"Columbus Crew\".\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# team ( name, * )\n# player ( player, player_id, years_played, total_wl, * )\n# match_season ( college, player, country, season, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Count the number of different colleges that players who play for Columbus Crew are from.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player, player_id, total_wl, * )\n# team ( name, * )\n# match_season ( season, position, team, college, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the players and years played for players from team \"Columbus Crew\".\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player, player_id, total_wl, * )\n# team ( name, * )\n# match_season ( team, season, position, country, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the players who played for Columbus Crew, and how many years did each play for?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( player, season, country, team, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the position of players and the corresponding number of players.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( player, season, team, college, * )\n# player ( team, singles_wl, player_id, years_played, * )\n# team ( name, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### How many players played each position?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_id, capital, official_native_language, * )\n# player ( team, player_id, years_played, total_wl, * )\n# match_season ( country, season, position, team, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the country names and the corresponding number of players.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, years_played, total_wl, * )\n# country ( country_name, capital, official_native_language, * )\n# match_season ( country, team, season, position, * )\n# team ( name, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### How many players are from each country?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, singles_wl, player_id, years_played, * )\n# match_season ( player, team, country, season, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Return all players sorted by college in ascending alphabetical order.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( player, season, country, position, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are all the players who played in match season, sorted by college in ascending alphabetical order?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( player, season, college, country, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the most common position of players in match seasons.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( player, season, college, country, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What is the position that is most common among players in match seasons?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, position, country, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the top 3 most common colleges of players in match seasons.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( player, team, country, season, * )\n# player ( team, player_id, years_played, total_wl, * )\n# team ( name, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the three colleges from which the most players are from?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, total_wl, singles_wl, * )\n# match_season ( player, team, country, season, * )\n# team ( name, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the name of colleges that have at least two players.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player_id, years_played, total_wl, * )\n# match_season ( player, team, country, season, * )\n# team ( name, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the names of all colleges that have two or more players?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, singles_wl, doubles_wl, player_id, * )\n# match_season ( player, season, team, country, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Show the name of colleges that have at least two players in descending alphabetical order.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, singles_wl, doubles_wl, player_id, * )\n# match_season ( player, country, team, season, * )\n# team ( name, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the names of colleges that have two or more players, listed in descending alphabetical order?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, position, country, * )\n# team ( team_id, * )\n# player ( team, player_id, years_played, total_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the names of teams that do no have match season record?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( season, player, position, country, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Return the names of teams that have no match season record.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_name, capital, official_native_language, * )\n# match_season ( country, player, season, team, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### What are the names of countries that have both players with position forward and players with position defender?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( country_name, capital, official_native_language, * )\n# match_season ( country, player, season, team, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# team ( team_id, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( college, player, team, season, * )\n# team ( team_id, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Which college have both players with position midfielder and players with position defender?\nSELECT"
    },
    {
        "db_id": "match_season",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match_season ( college, player, season, team, * )\n# player ( player_id, years_played, total_wl, singles_wl, * )\n# team ( team_id, * )\n# country ( country_id, country_name, official_native_language, * )\n#  player.team = team.team_id\n#  match_season.country = country.country_id \n#  match_season.team = team.team_id \n#\n### Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( date, year, location, country, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### How many perpetrators are there?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( killed, people_id, year, location, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### List the date of perpetrators in descending order of the number of people killed.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( people_id, date, year, location, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### List the number of people injured by perpetrators in ascending order.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( people_id, date, year, location, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What is the average number of people injured by all perpetrators?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( killed, injured, people_id, date, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What is the location of the perpetrator with the largest kills.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, people_id, weight, home town, * )\n# perpetrator ( year, location, country, killed, * )\n#  perpetrator.people_id = people.people_id\n#\n### What are the names of people in ascending order of height?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( date, year, location, country, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What are the names of perpetrators?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( country, date, year, location, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What are the names of perpetrators whose country is not \"China\"?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, weight, height, home town, * )\n# perpetrator ( perpetrator_id, date, year, location, * )\n#  perpetrator.people_id = people.people_id\n#\n### What is the name of the perpetrator with the biggest weight.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( killed, date, year, location, * )\n# people ( height, name, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What is the total kills of the perpetrators with height more than 1.84.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( country, date, year, location, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What are the names of perpetrators in country \"China\" or \"Japan\"?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, name, weight, home town, * )\n# perpetrator ( people_id, date, year, location, * )\n#  perpetrator.people_id = people.people_id\n#\n### What are the heights of perpetrators in descending order of the number of people they injured?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( date, year, location, killed, * )\n# people ( height, weight, people_id, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( people_id, date, year, location, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What is the country that has the most perpetrators?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( people_id, date, year, location, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### What are the countries that have at least two perpetrators?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( year, date, location, country, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### List the names of perpetrators in descending order of the year.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, height, weight, home town, * )\n# perpetrator ( date, year, location, country, * )\n#  perpetrator.people_id = people.people_id\n#\n### List the names of people that are not perpetrators.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( country, people_id, date, year, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( date, year, country, killed, * )\n# people ( height, weight, people_id, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### How many distinct locations of perpetrators are there?\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, name, weight, home town, * )\n# perpetrator ( date, year, location, country, * )\n#  perpetrator.people_id = people.people_id\n#\n### Show the date of the tallest perpetrator.\nSELECT"
    },
    {
        "db_id": "perpetrator",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# perpetrator ( people_id, date, location, country, * )\n# people ( name, height, weight, home town, * )\n#  perpetrator.people_id = people.people_id\n#\n### In which year did the most recent crime happen?\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( services, id, network_name, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n# train ( origin, destination, time, interval, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### list the local authorities and services provided by all stations.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( name, time, interval, origin, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n# station ( id, network_name, local_authority, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### show all train numbers and names ordered by their time from early to late.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( origin, time, destination, id, * )\n# route ( train_id, * )\n# station ( services, network_name, local_authority, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Give me the times and numbers of all trains that go to Chennai, ordered by time.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( id, train_number, origin, destination, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n# route ( station_id, * )\n# station ( id, network_name, local_authority, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### How many trains have 'Express' in their names?\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( origin, destination, time, id, * )\n# route ( station_id, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n# station ( id, network_name, local_authority, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find the number and time of the train that goes from Chennai to Guruvayur.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( id, name, destination, time, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n# station ( id, network_name, local_authority, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find the number of trains starting from each origin.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# route ( station_id, * )\n# train ( name, train_number, origin, destination, * )\n# station ( services, network_name, local_authority, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find the name of the train whose route runs through greatest number of stations.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( services, id, local_authority, * )\n# train ( name, origin, destination, time, * )\n# route ( train_id, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find the number of trains for each station, as well as the station network name and services.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# weekly_weather ( high_temperature, station_id, low_temperature, precipitation, * )\n# train ( origin, destination, time, interval, * )\n# station ( id, network_name, local_authority, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### What is the average high temperature for each day of week?\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# weekly_weather ( precipitation, station_id, high_temperature, day_of_week, * )\n# station ( network_name, services, local_authority, * )\n# train ( origin, destination, time, interval, * )\n# route ( train_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Give me the maximum low temperature and average precipitation at the Amersham station.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( name, time, train_number, origin, * )\n# station ( local_authority, services, network_name, * )\n# route ( station_id, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find names and times of trains that run through stations for the local authority Chiltern.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( id, network_name, local_authority, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n# train ( origin, destination, time, interval, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### How many different services are provided by all stations?\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( local_authority, services, network_name, * )\n# weekly_weather ( station_id, wind_speed_mph, day_of_week, low_temperature, * )\n# train ( origin, destination, time, interval, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find the id and local authority of the station with has the highest average high temperature.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( local_authority, services, network_name, * )\n# weekly_weather ( station_id, wind_speed_mph, day_of_week, high_temperature, * )\n# train ( origin, destination, time, interval, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find the id and local authority of the station whose maximum precipitation is higher than 50.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# weekly_weather ( low_temperature, station_id, high_temperature, day_of_week, * )\n# train ( origin, destination, time, interval, * )\n# station ( id, network_name, local_authority, * )\n# route ( station_id, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### show the lowest low temperature and highest wind speed in miles per hour.\nSELECT"
    },
    {
        "db_id": "station_weather",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( id, name, destination, time, * )\n# weekly_weather ( day_of_week, high_temperature, low_temperature, precipitation, * )\n# route ( station_id, * )\n# station ( id, network_name, local_authority, * )\n#  weekly_weather.station_id = station.id\n#  route.train_id = train.id \n#  route.station_id = station.id \n#\n### Find the origins from which more than 1 train starts.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( church_id, name, organized_by, continuation_of, * )\n# wedding ( church_id, male_id, female_id, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### How many churches opened before 1850 are there?\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( open_date, name, church_id, continuation_of, * )\n# people ( country, age, people_id, is_male, * )\n# wedding ( church_id, male_id, female_id, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the name, open date, and organizer for all churches.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( name, church_id, organized_by, continuation_of, * )\n# people ( country, age, people_id, is_male, * )\n# wedding ( church_id, male_id, female_id, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### List all church names in descending order of opening date.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( church_id, name, organized_by, continuation_of, * )\n# wedding ( church_id, male_id, female_id, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the opening year in whcih at least two churches opened.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( open_date, name, continuation_of, church_id, * )\n# wedding ( year, male_id, female_id, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the organizer and name for churches that opened between 1830 and 1840.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( church_id, name, organized_by, continuation_of, * )\n# wedding ( church_id, male_id, female_id, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show all opening years and the number of churches that opened in that year.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( name, church_id, organized_by, continuation_of, * )\n# wedding ( church_id, male_id, female_id, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the name and opening year for three churches that opened most recently.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( age, people_id, name, country, * )\n# wedding ( male_id, female_id, year, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### How many female people are older than 30 in our record?\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( age, name, people_id, is_male, * )\n# wedding ( church_id, male_id, female_id, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the country where people older than 30 and younger than 25 are from.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( people_id, name, country, is_male, * )\n# wedding ( church_id, male_id, female_id, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the minimum, maximum, and average age for all people.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( country, age, people_id, is_male, * )\n# wedding ( church_id, male_id, female_id, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the name and country for all people whose age is smaller than the average.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# wedding ( male_id, year, church_id, * )\n# people ( is_male, name, country, age, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the pair of male and female names in all weddings after year 2014\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( is_male, name, age, country, * )\n# wedding ( female_id, church_id, year, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the name and age for all male people who don't have a wedding.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# wedding ( year, male_id, female_id, * )\n# church ( name, organized_by, open_date, continuation_of, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show all church names except for those that had a wedding in year 2015.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# wedding ( female_id, year, male_id, * )\n# church ( name, continuation_of, organized_by, open_date, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show all church names that have hosted least two weddings.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# wedding ( male_id, year, church_id, * )\n# people ( country, name, is_male, age, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the names for all females from Canada having a wedding in year 2016.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# wedding ( church_id, male_id, female_id, * )\n# people ( country, age, people_id, is_male, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### How many weddings are there in year 2016?\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# church ( name, organized_by, open_date, continuation_of, * )\n# people ( age, name, country, is_male, * )\n# wedding ( female_id, male_id, year, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show the church names for the weddings of all people older than 30.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, age, people_id, is_male, * )\n# wedding ( church_id, male_id, female_id, * )\n# church ( church_id, organized_by, open_date, continuation_of, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### Show all countries and the number of people from each country.\nSELECT"
    },
    {
        "db_id": "wedding",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# wedding ( church_id, male_id, female_id, * )\n# church ( name, organized_by, open_date, continuation_of, * )\n# people ( country, age, people_id, is_male, * )\n#  wedding.church_id = church.church_id\n#  wedding.male_id = people.people_id \n#  wedding.female_id = people.people_id \n#\n### How many churches have a wedding in year 2016?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, sex, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many faculty do we have?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, sex, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What is the total number of faculty members?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What ranks do we have for faculty?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Find the list of distinct ranks for faculty.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( room, facid, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show all the distinct buildings that have faculty rooms.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, rank, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What buildings have faculty offices?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, rank, facid, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( fname, age, sex, major, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the rank, first name, and last name for all the faculty.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, rank, facid, sex, * )\n# student ( fname, stuid, age, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the rank, first name, and last name of the faculty members?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, sex, phone, facid, * )\n# student ( lname, fname, stuid, age, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the first name, last name, and phone number for all female faculty members.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, sex, phone, facid, * )\n# student ( fname, lname, stuid, age, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the first name, last name, and phone number of all the female faculty members?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( sex, rank, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show ids for all the male faculty.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( sex, rank, phone, room, * )\n# faculty_participates_in ( actid, * )\n# student ( stuid, age, major, lname, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the faculty ids of all the male faculty members?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, phone, room, * )\n# student ( stuid, age, major, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many female Professors do we have?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, phone, room, * )\n# student ( stuid, age, major, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Count the number of female Professors we have.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( phone, room, building, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the phone, room, and building for the faculty named Jerry Prince.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, phone, room, building, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the phone, room, and building of the faculty member called Jerry Prince?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many Professors are in building NEB?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Count the number of Professors who have office in building NEB.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, rank, facid, sex, * )\n# student ( lname, stuid, age, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the first name and last name for all the instructors.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, rank, facid, sex, * )\n# student ( fname, stuid, age, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the first name and last name of all the instructors?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, rank, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show all the buildings along with the number of faculty members the buildings have.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, rank, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many faculty members does each building have? List the result with the name of the building.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, rank, sex, phone, * )\n# student ( sex, major, stuid, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Which building has most faculty members?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, rank, sex, phone, * )\n# student ( sex, major, stuid, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Find the building that has the largest number of faculty members.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show all the buildings that have at least 10 professors.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### In which buildings are there at least ten professors?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### For each faculty rank, show the number of faculty members who have it.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( sex, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many faculty members do we have for each faculty rank?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( sex, facid, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( age, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show all the ranks and the number of male and female faculty for each rank.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( sex, facid, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n# student ( age, major, stuid, lname, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many faculty members do we have for each rank and gender?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# student ( sex, major, stuid, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Which rank has the smallest number of faculty members?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# student ( age, sex, major, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Find the faculty rank that has the least members.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, phone, room, * )\n# student ( stuid, age, major, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the number of male and female assistant professors.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, phone, room, * )\n# student ( stuid, age, major, lname, * )\n# participates_in ( actid, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many male and female assistant professors do we have?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, advisor, stuid, age, * )\n# faculty ( facid, fname, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the first name and last name of Linda Smith's advisor?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, advisor, stuid, age, * )\n# faculty ( facid, fname, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Who is the advisor of Linda Smith? Give me the first name and last name.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# faculty ( facid, sex, phone, room, * )\n# participates_in ( actid, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the ids of students whose advisors are professors.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# faculty ( rank, sex, phone, room, * )\n# participates_in ( actid, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Which students have professors as their advisors? Find their student ids.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, advisor, stuid, age, * )\n# faculty ( fname, facid, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show first name and last name for all the students advised by Michael Goodrich.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, advisor, stuid, age, * )\n# faculty ( fname, facid, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Which students are advised by Michael Goodrich? Give me their first and last names.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# faculty ( fname, sex, lname, rank, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the faculty id of each faculty member, along with the number of students he or she advises.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( sex, rank, phone, room, * )\n# student ( age, sex, major, lname, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the faculty id and the number of students each faculty has?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# student ( stuid, age, sex, major, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show all the faculty ranks and the number of students advised by each rank.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# student ( stuid, age, sex, major, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### How many students are advised by each rank of faculty? List the rank and the number of students.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, facid, rank, sex, * )\n# student ( fname, stuid, age, sex, * )\n# participates_in ( actid, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the first and last name of the faculty who has the most students?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, facid, rank, sex, * )\n# student ( fname, lname, stuid, age, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Give me the the first and last name of the faculty who advises the most students.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( sex, rank, phone, room, * )\n# student ( age, sex, major, lname, * )\n# participates_in ( actid, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the ids for all the faculty members who have at least 2 students.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# faculty ( sex, rank, phone, room, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Which faculty members advise two ore more students? Give me their faculty ids.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( sex, rank, phone, room, * )\n# student ( stuid, age, sex, major, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show ids for the faculty members who don't advise any student.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, sex, phone, room, * )\n# student ( stuid, age, sex, major, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are the ids of the faculty members who do not advise any student.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( actid, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### What activities do we have?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( actid, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### List all the activities we have.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### How many activities do we have?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Find the number of activities available.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( actid, * )\n# faculty ( rank, sex, phone, room, * )\n# participates_in ( stuid, * )\n# activity ( activity_name, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### How many faculty members participate in an activity?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( actid, * )\n# faculty ( rank, sex, phone, room, * )\n# participates_in ( actid, * )\n# activity ( activity_name, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Give me the number of faculty members who participate in an activity\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( actid, * )\n# faculty ( rank, sex, phone, room, * )\n# participates_in ( actid, * )\n# activity ( activity_name, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Show the ids of the faculty who don't participate in any activity.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( actid, * )\n# faculty ( rank, sex, phone, room, * )\n# participates_in ( actid, * )\n# activity ( activity_name, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Which faculty do not participate in any activity? Find their faculty ids.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( actid, * )\n# student ( stuid, age, sex, major, * )\n# participates_in ( actid, * )\n# faculty ( rank, sex, phone, room, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the ids of all the faculty members who participate in an activity and advise a student.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( actid, * )\n# student ( stuid, age, sex, major, * )\n# participates_in ( actid, * )\n# faculty ( rank, sex, phone, room, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### What are ids of the faculty members who not only participate in an activity but also advise a student.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participates_in ( actid, * )\n# student ( stuid, lname, age, sex, * )\n# faculty ( lname, fname, rank, sex, * )\n# activity ( activity_name, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### How many activities does Mark Giuliano participate in?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participates_in ( actid, * )\n# student ( stuid, lname, age, sex, * )\n# faculty ( fname, lname, rank, sex, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Find the number of activities Mark Giuliano is involved in.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( actid, * )\n# student ( stuid, lname, age, sex, * )\n# participates_in ( actid, * )\n# faculty ( facid, lname, rank, sex, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### Show the names of all the activities Mark Giuliano participates in.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# participates_in ( actid, * )\n# student ( fname, lname, age, sex, * )\n# faculty ( facid, lname, rank, sex, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### What are the names of the activities Mark Giuliano is involved in\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( lname, fname, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# student ( stuid, fname, age, sex, * )\n# participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( lname, fname, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# student ( stuid, lname, age, sex, * )\n# activity ( activity_name, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#\n### What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( facid, * )\n# activity ( activity_name, * )\n# participates_in ( stuid, * )\n# faculty ( rank, sex, phone, room, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Show all the activity names and the number of faculty involved in each activity.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty_participates_in ( facid, * )\n# activity ( activity_name, * )\n# participates_in ( stuid, * )\n# faculty ( rank, sex, phone, room, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### How many faculty members participate in each activity? Return the activity names and the number of faculty members.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( lname, fname, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# activity ( activity_name, * )\n# student ( lname, fname, age, sex, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#\n### What is the first and last name of the faculty participating in the most activities?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( lname, fname, rank, sex, * )\n# faculty_participates_in ( actid, * )\n# activity ( activity_name, * )\n# participates_in ( stuid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Find the first and last name of the faculty who is involved in the largest number of activities.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( actid, * )\n# faculty_participates_in ( facid, * )\n# participates_in ( stuid, * )\n# faculty ( rank, sex, phone, room, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### What is the name of the activity that has the most faculty members involved in?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# faculty_participates_in ( facid, * )\n# participates_in ( stuid, * )\n# faculty ( rank, sex, phone, room, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Which activity has the most faculty members participating in? Find the activity name.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participates_in ( actid, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the ids of the students who don't participate in any activity.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participates_in ( actid, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n# activity ( activity_name, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### What are the ids of the students who are not involved in any activity\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participates_in ( actid, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( actid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  participates_in.stuid = student.stuid \n#\n### Show the ids for all the students who participate in an activity and are under 20.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participates_in ( actid, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n# activity ( activity_name, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### What are the ids of the students who are under 20 years old and are involved in at least one activity.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, stuid, age, sex, * )\n# participates_in ( actid, * )\n# activity ( activity_name, * )\n# faculty ( lname, fname, rank, sex, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### What is the first and last name of the student participating in the most activities?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, stuid, age, sex, * )\n# participates_in ( actid, * )\n# activity ( activity_name, * )\n# faculty_participates_in ( facid, * )\n#  faculty_participates_in.actid = activity.actid\n#  participates_in.stuid = student.stuid \n#  participates_in.actid = activity.actid \n#\n### Tell me the first and last name of the student who has the most activities.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( actid, * )\n# participates_in ( stuid, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( facid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### What is the name of the activity with the most students?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( actid, * )\n# participates_in ( stuid, * )\n# faculty ( sex, phone, room, building, * )\n# faculty_participates_in ( facid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Find the name of the activity that has the largest number of student participants.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# faculty_participates_in ( actid, * )\n# faculty ( fname, rank, sex, phone, * )\n# participates_in ( stuid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Find the first names of the faculty members who are playing Canoeing or Kayaking.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# faculty ( fname, rank, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( stuid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, rank, sex, phone, * )\n# activity ( actid, * )\n# faculty_participates_in ( facid, * )\n# participates_in ( stuid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Find the first names of professors who are not playing Canoeing or Kayaking.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, rank, sex, phone, * )\n# activity ( actid, * )\n# faculty_participates_in ( facid, * )\n# participates_in ( stuid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### What are the first names of the professors who do not play Canoeing or Kayaking as activities?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# faculty ( fname, rank, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( stuid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### Find the first names of the faculty members who participate in Canoeing and Kayaking.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# faculty ( fname, rank, sex, phone, * )\n# faculty_participates_in ( actid, * )\n# participates_in ( stuid, * )\n#  faculty_participates_in.facid = faculty.facid\n#  faculty_participates_in.actid = activity.actid \n#  participates_in.actid = activity.actid \n#\n### What are the first names of the faculty members playing both Canoeing and Kayaking?\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# participates_in ( actid, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### Find the ids of the students who participate in Canoeing and Kayaking.\nSELECT"
    },
    {
        "db_id": "activity_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# activity ( activity_name, * )\n# participates_in ( actid, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n#  participates_in.stuid = student.stuid\n#  participates_in.actid = activity.actid \n#\n### Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### How many body builders are there?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( people_id, body_builder_id, snatch, clean_jerk, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### List the total scores of body builders in ascending order.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( clean_jerk, people_id, total, body_builder_id, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### List the snatch score and clean jerk score of body builders in ascending order of snatch score.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( people_id, total, body_builder_id, clean_jerk, * )\n# people ( height, weight, people_id, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What is the average snatch score of body builders?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, people_id, body_builder_id, snatch, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the clean and jerk score of the body builder with the highest total score?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, people_id, name, weight, * )\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the birthdays of people in ascending order of height?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the names of body builders?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the names of body builders whose total score is higher than 300?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, weight, height, birth_date, * )\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### What is the name of the body builder with the greatest body weight?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( birth_date, birth_place, name, height, * )\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the birth date and birth place of the body builder with the highest total points?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n# people ( height, name, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the heights of body builders with total score smaller than 315?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n# people ( height, name, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What is the average total score of body builders with height bigger than 200?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the names of body builders in descending order of total scores?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, height, weight, people_id, * )\n# body_builder ( body_builder_id, people_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### List each birth place along with the number of people from there.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, height, weight, people_id, * )\n# body_builder ( body_builder_id, people_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### What is the most common birth place of people?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( people_id, name, height, weight, * )\n# body_builder ( body_builder_id, people_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the birth places that are shared by at least two people?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( weight, people_id, name, birth_date, * )\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### List the height and weight of people in descending order of height.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( body_builder_id, total, snatch, clean_jerk, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### Show all information about each body builder.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, height, weight, birth_date, * )\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### List the names and origins of people who are not body builders.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, height, weight, people_id, * )\n# body_builder ( body_builder_id, people_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### How many distinct birth places are there?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n# people ( name, height, weight, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### How many persons are not body builders?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, weight, name, birth_date, * )\n# body_builder ( snatch, total, body_builder_id, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( birth_date, name, height, weight, * )\n# body_builder ( total, body_builder_id, snatch, clean_jerk, * )\n#  body_builder.people_id = people.people_id\n#\n### What are the total scores of the body builders whose birthday contains the string \"January\" ?\nSELECT"
    },
    {
        "db_id": "body_builder",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# body_builder ( people_id, total, body_builder_id, clean_jerk, * )\n# people ( height, weight, people_id, birth_date, * )\n#  body_builder.people_id = people.people_id\n#\n### What is the minimum snatch score?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### How many candidates are there?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### Count the number of candidates.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( date, candidate_id, people_id, support_rate, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### Which poll resource provided the most number of candidate information?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( people_id, date, candidate_id, support_rate, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### Return the poll resource associated with the most candidates.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( people_id, date, candidate_id, poll_source, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### what are the top 3 highest support rates?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( people_id, date, candidate_id, poll_source, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### Return the top 3 greatest support rates.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( oppose_rate, people_id, date, poll_source, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### Find the id of the candidate who got the lowest oppose rate.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( oppose_rate, people_id, date, poll_source, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### What is the id of the candidate with the lowest oppose rate?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( consider_rate, oppose_rate, unsure_rate, people_id, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( consider_rate, oppose_rate, unsure_rate, people_id, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( oppose_rate, people_id, date, candidate_id, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### which poll source does the highest oppose rate come from?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( oppose_rate, date, candidate_id, people_id, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### Return the poll source corresponding to the candidate who has the oppose rate.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, people_id, sex, height, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### List all people names in the order of their date of birth from old to young.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, sex, height, weight, * )\n# candidate ( candidate_id, people_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### What are the names of all people, ordered by their date of birth?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, weight, people_id, name, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### Find the average height and weight for all males (sex is M).\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, weight, people_id, name, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### What are the average height and weight across males (sex is M)?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, people_id, sex, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### find the names of people who are taller than 200 or lower than 190.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, people_id, sex, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### What are the names of people who have a height greater than 200 or less than 190?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( sex, people_id, name, height, * )\n# candidate ( candidate_id, people_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### Find the average and minimum weight for each gender.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( weight, people_id, name, height, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### What are the average and minimum weights for people of each sex?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( support_rate, date, candidate_id, poll_source, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### Find the name and gender of the candidate who got the highest support rate.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( support_rate, candidate_id, date, poll_source, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### What is the name and sex of the candidate with the highest support rate?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( oppose_rate, date, unsure_rate, candidate_id, * )\n# people ( name, sex, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### Find the name of the candidates whose oppose percentage is the lowest for each sex.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( people_id, date, candidate_id, poll_source, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### For each sex, what is the name and sex of the candidate with the oppose rate for their sex?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( people_id, name, height, weight, * )\n# candidate ( people_id, consider_rate, oppose_rate, date, * )\n#  candidate.people_id = people.people_id\n#\n### which gender got the highest average uncertain ratio.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( people_id, date, candidate_id, poll_source, * )\n# people ( sex, name, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### What is the sex of the candidate who had the highest unsure rate?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, sex, height, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### what are the names of people who did not participate in the candidate election.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( name, sex, height, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### Give the names of people who did not participate in the candidate election.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( oppose_rate, people_id, date, candidate_id, * )\n# people ( name, sex, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### Find the names of the candidates whose support percentage is lower than their oppose rate.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( support_rate, oppose_rate, date, candidate_id, * )\n# people ( name, sex, height, weight, * )\n#  candidate.people_id = people.people_id\n#\n### What are the names of candidates who have a lower support rate than oppose rate?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( sex, people_id, name, height, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### how many people are there whose weight is higher than 85 for each gender?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( weight, people_id, name, height, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### Count the number of people of each sex who have a weight higher than 85.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( consider_rate, oppose_rate, date, unsure_rate, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### find the highest support percentage, lowest consider rate and oppose rate of all candidates.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate ( consider_rate, oppose_rate, people_id, date, * )\n# people ( name, height, weight, people_id, * )\n#  candidate.people_id = people.people_id\n#\n### Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( sex, name, height, weight, * )\n# candidate ( candidate_id, date, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### list all female (sex is F) candidate names in the alphabetical order.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( sex, name, height, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### What are the names of all female candidates in alphabetical order (sex is F)?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, people_id, sex, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### find the name of people whose height is lower than the average.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( height, people_id, sex, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### What are the names of people who are shorter than average?\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( sex, name, height, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### List all info about all people.\nSELECT"
    },
    {
        "db_id": "candidate_poll",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( sex, name, height, weight, * )\n# candidate ( date, candidate_id, poll_source, support_rate, * )\n#  candidate.people_id = people.people_id\n#\n### What is all the information about all people?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city_id, hanzi, hanyu_pinyin, regional_population, * )\n# match ( date, venue, score, result, * )\n# temperature ( jan, feb, mar, apr, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What is id of the city that hosted events in the most recent year?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( date, venue, score, result, * )\n# temperature ( jan, feb, mar, apr, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Find the city that hosted some events in the most recent year. What is the id of this city?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( host_city, year, * )\n# match ( match_id, date, venue, score, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# temperature ( feb, mar, apr, jun, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match ( competition, date, venue, score, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# city ( city_id, hanzi, hanyu_pinyin, regional_population, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What is the match id of the competition called \"1994 FIFA World Cup qualification\"?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Find the cities which were once a host city after 2010?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n# temperature ( feb, mar, apr, jun, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities served as a host city after 2010?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( date, venue, score, result, * )\n# temperature ( feb, mar, apr, jun, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which city has hosted the most events?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( date, venue, score, result, * )\n# temperature ( feb, mar, apr, jun, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Find the city that hosted the most events.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, year, * )\n# match ( match_id, venue, date, score, * )\n# temperature ( jan, feb, mar, apr, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, year, * )\n# match ( match_id, venue, date, score, * )\n# temperature ( jan, feb, mar, apr, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( jan, feb, mar, apr, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, host_city, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Give me the temperature of Shanghai in January.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( jan, feb, jun, nov, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, host_city, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What is the temperature of \"Shanghai\" city in January?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What is the host year of city \"Taizhou ( Zhejiang )\"?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n# temperature ( feb, mar, apr, jun, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### IN which year did city \"Taizhou ( Zhejiang )\" serve as a host city?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which three cities have the largest regional population?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What are the three largest cities in terms of regional population?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which city has the lowest GDP? Please list the city name and its GDP.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What is the city with the smallest GDP? Return the city and its GDP.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( feb, jan, mar, apr, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, host_city, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which city has the highest temperature in February?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( feb, jan, mar, apr, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, host_city, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### In February, which city marks the highest temperature?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( city_id, jul, oct, apr, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, host_city, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( city_id, oct, jul, jan, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# hosting_city ( match_id, host_city, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities' temperature in March is lower than that in July or higher than that in Oct?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# temperature ( mar, jul, jun, aug, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( mar, jul, jan, jun, * )\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities have lower temperature in March than in July and have been once host cities?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( mar, dec, jan, feb, * )\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( mar, dec, jan, feb, * )\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities have lower temperature in March than in Dec and have never served as host cities?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# temperature ( feb, jun, jan, mar, * )\n# hosting_city ( year, match_id, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# temperature ( feb, jun, jan, mar, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities have higher temperature in Feb than in Jun or have once served as host cities?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Please give me a list of cities whose regional population is over 10000000.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities have regional population above 10000000?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Please give me a list of cities whose regional population is over 8000000 or under 5000000.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, hanzi, hanyu_pinyin, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities have regional population above 8000000 or below 5000000?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match ( date, venue, score, result, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# city ( city_id, hanzi, hanyu_pinyin, regional_population, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Find the number of matches in different competitions.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match ( match_id, date, venue, score, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# city ( city_id, hanzi, hanyu_pinyin, regional_population, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### For each competition, count the number of matches.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match ( venue, score, result, competition, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# city ( city_id, hanzi, hanyu_pinyin, regional_population, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### List venues of all matches in the order of their dates starting from the most recent one.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# match ( venue, match_id, score, result, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# city ( city, hanzi, hanyu_pinyin, regional_population, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What are the venues of all the matches? Sort them in the descending order of match date.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, regional_population, city_id, hanzi, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### what is the GDP of the city with the largest population.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( gdp, city, city_id, hanzi, * )\n# hosting_city ( match_id, host_city, * )\n# temperature ( feb, mar, apr, jun, * )\n# match ( venue, score, result, competition, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Find the GDP of the city with the largest regional population.\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( match_id, year, * )\n# city ( gdp, city, regional_population, hanzi, * )\n# match ( date, venue, score, result, * )\n# temperature ( feb, mar, apr, jun, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### What are the GDP and population of the city that already served as a host more than once?\nSELECT"
    },
    {
        "db_id": "city_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hosting_city ( year, match_id, * )\n# city ( gdp, city, regional_population, hanzi, * )\n# match ( venue, score, result, competition, * )\n# temperature ( feb, mar, apr, jun, * )\n#  hosting_city.host_city = city.city_id\n#  hosting_city.match_id = match.match_id \n#  temperature.city_id = city.city_id \n#\n### Which cities have served as host cities more than once? Return me their GDP and population.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### Find the number of professors in accounting department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### How many professors are in the accounting dept?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( prof_num, class_code, class_section, class_time, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### How many professors are teaching class with code ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( prof_num, class_code, class_section, class_time, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  class.crs_code = course.crs_code \n#\n### How many professors teach a class with the code ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, emp_num, dept_extension, school_code, * )\n# professor ( emp_num, prof_extension, prof_office, prof_high_degree, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n# class ( prof_num, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first and last name of the professor in biology department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# professor ( emp_num, prof_extension, prof_high_degree, prof_office, * )\n# employee ( emp_num, emp_fname, emp_initial, emp_jobcode, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### What are the first and last name of all biology professors?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_num, emp_fname, emp_initial, emp_lname, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# class ( crs_code, class_code, class_section, class_time, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names and date of birth of professors teaching course ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_num, emp_fname, emp_initial, emp_lname, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# department ( emp_num, dept_name, school_code, dept_address, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### What are the first names and birthdates of the professors in charge of ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_code, class_section, crs_code, class_time, * )\n# employee ( emp_num, emp_initial, emp_fname, emp_jobcode, * )\n# professor ( dept_code, prof_high_degree, prof_office, prof_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.class_code = class.class_code \n#  class.prof_num = employee.emp_num \n#\n### How many classes are professor whose last name is Graztevski has?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_code, crs_code, class_section, class_time, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n# professor ( dept_code, prof_high_degree, prof_office, prof_extension, * )\n# department ( emp_num, dept_name, school_code, dept_address, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### How many classes does the professor whose last name is Graztevski teach?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_name, dept_code, dept_extension, emp_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### What is the code of the school where the accounting department belongs to?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( school_code, dept_code, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### What is the school code of the accounting department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, dept_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, class_section, class_time, class_room, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  enroll.class_code = class.class_code\n#  class.crs_code = course.crs_code \n#\n### How many credits does course CIS-220 have, and what its description?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, dept_code, * )\n# class ( class_code, class_section, class_time, class_room, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  enroll.class_code = class.class_code\n#  class.crs_code = course.crs_code \n#\n### What is the description for the CIS-220 and how many credits does it have?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_address, dept_code, school_code, emp_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### what is the address of history department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_address, school_code, emp_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### Where is the history department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_name, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many different locations does the school with code BUS has?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, emp_num, dept_name, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### What are the different locations of the school with the code BUS?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_address, emp_num, dept_name, * )\n# class ( crs_code, class_room, prof_num, class_section, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many different locations does each school have?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_address, dept_code, emp_num, dept_name, * )\n# class ( prof_num, crs_code, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### Count different addresses of each school.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, dept_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, class_section, class_time, class_room, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### Find the description and credit for the course QM-261?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, dept_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### What is the course description and number of credits for QM-261?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_name, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### Find the number of departments in each school.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_name, dept_extension, emp_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many departments are in each school?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_extension, dept_name, emp_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### Find the number of different departments in each school whose number of different departments is less than 5.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_extension, dept_name, dept_code, dept_address, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# student ( dept_code, stu_lname, stu_fname, stu_init, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#\n### How many different departments are there in each school that has less than 5 apartments?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_section, class_code, prof_num, class_time, * )\n# course ( crs_description, dept_code, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many sections does each course has?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_section, class_code, prof_num, class_time, * )\n# course ( crs_description, dept_code, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many sections does each course have?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, crs_description, * )\n# department ( dept_code, dept_extension, dept_address, school_code, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### What is the total credit does each department offer?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, crs_description, * )\n# department ( dept_name, emp_num, dept_address, dept_extension, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many credits does the department offer?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_code, prof_num, class_section, crs_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#\n### Find the number of classes offered for all class rooms that held at least 2 classes.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_section, class_code, prof_num, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### For each classroom with at least 2 classes, how many classes are offered?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( prof_num, class_section, class_time, class_room, * )\n# department ( dept_code, dept_extension, dept_address, emp_num, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### Find the number of classes in each department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_room, crs_code, class_section, prof_num, * )\n# department ( dept_name, dept_extension, dept_address, emp_num, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# course ( crs_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many classes are held in each department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_room, class_section, class_time, prof_num, * )\n# department ( dept_code, emp_num, dept_name, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### Find the number of classes in each school.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_section, class_room, prof_num, class_time, * )\n# department ( dept_code, emp_num, dept_name, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many classes exist for each school?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, prof_high_degree, prof_office, prof_extension, * )\n# department ( dept_code, emp_num, dept_name, dept_address, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# student ( prof_num, stu_num, stu_lname, stu_fname, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#\n### What is the number of professors for different school?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, prof_high_degree, prof_extension, prof_office, * )\n# department ( dept_code, emp_num, dept_name, dept_address, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# student ( prof_num, stu_num, stu_lname, stu_fname, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#\n### How many different professors are there for the different schools?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_num, emp_lname, emp_fname, emp_initial, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  student.dept_code = department.dept_code\n#  enroll.stu_num = student.stu_num \n#  department.emp_num = employee.emp_num \n#\n### Find the count and code of the job has most employees.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_num, emp_initial, emp_hiredate, emp_lname, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  student.dept_code = department.dept_code\n#  enroll.stu_num = student.stu_num \n#  department.emp_num = employee.emp_num \n#\n### What is the count and code of the job with the most employee?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# department ( dept_code, emp_num, dept_name, dept_address, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# student ( dept_code, stu_num, stu_lname, stu_fname, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#\n### Which school has the smallest amount of professors?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# department ( dept_code, emp_num, dept_name, dept_address, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### Which school has the fewest professors?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, emp_num, prof_office, prof_extension, * )\n# department ( dept_name, dept_extension, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### Find the number of professors with a Ph.D. degree in each department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, emp_num, prof_extension, prof_office, * )\n# department ( dept_name, dept_extension, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many professors have a Ph.D. in each department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# department ( dept_code, dept_extension, emp_num, dept_address, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# enroll ( stu_num, enroll_grade, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#  enroll.stu_num = student.stu_num \n#\n### Find the number of students for each department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# department ( dept_code, dept_extension, emp_num, dept_address, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#\n### How many students are in each department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_hrs, stu_num, stu_lname, stu_fname, * )\n# department ( dept_name, emp_num, school_code, dept_address, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### Find the total number of hours have done for all students in each department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( dept_code, stu_num, stu_init, stu_lname, * )\n# class ( class_code, crs_code, prof_num, class_section, * )\n# department ( dept_name, emp_num, dept_address, dept_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### How many hours do the students spend studying in each department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( dept_code, stu_num, stu_lname, stu_fname, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### Find the max, average, and minimum gpa of all students in each department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( dept_code, stu_num, stu_lname, stu_fname, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  student.dept_code = department.dept_code\n#  enroll.stu_num = student.stu_num \n#  department.emp_num = employee.emp_num \n#\n### What is the highest, lowest, and average student GPA for every department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( dept_code, stu_num, stu_lname, stu_fname, * )\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name and the average gpa of department whose students have the highest average gpa?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( dept_code, stu_num, stu_lname, stu_fname, * )\n# department ( dept_code, emp_num, dept_address, dept_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#  enroll.stu_num = student.stu_num \n#\n### Which department has the highest average student GPA, and what is the average gpa?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( crs_code, prof_num, class_section, class_time, * )\n# department ( dept_code, dept_name, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### how many schools exist in total?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_name, school_code, dept_extension, emp_num, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many schools are there in the department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_section, class_room, crs_code, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### How many different classes are there?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( crs_code, class_section, prof_num, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### How many unique classes are offered?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( dept_code, crs_description, crs_credit, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many courses are offered?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( dept_code, crs_description, crs_credit, * )\n# class ( class_code, class_section, class_time, class_room, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### What are the number of different course codes?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_name, dept_extension, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many departments does the college has?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_name, dept_address, dept_extension, school_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# course ( crs_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### How many different departments are there?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, school_code, emp_num, dept_address, * )\n# course ( crs_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, class_section, class_time, class_room, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many courses are offered by the Computer Info. Systems department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_code, crs_description, crs_credit, * )\n# department ( dept_name, dept_address, dept_extension, school_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, class_section, class_time, class_room, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many courses does the department of Computer Information Systmes offer?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_section, class_code, class_time, class_room, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### How many sections does course ACCT-211 has?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( crs_code, class_code, class_time, class_room, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  enroll.class_code = class.class_code\n#  class.crs_code = course.crs_code \n#\n### What is the number of different class sections offered in the course ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, crs_description, * )\n# department ( dept_code, dept_extension, emp_num, dept_address, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### Find the total credits of all classes offered by each department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, crs_description, * )\n# department ( dept_code, dept_address, dept_extension, school_code, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### What are the total number of credits offered by each department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_extension, school_code, emp_num, * )\n# course ( crs_credit, crs_code, crs_description, * )\n# class ( class_code, class_section, prof_num, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### Find the name of the department that offers the largest number of credits of all classes.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, crs_description, * )\n# department ( dept_code, dept_address, dept_extension, school_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### Which department offers the most credits all together?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_room, prof_num, * )\n# student ( stu_num, stu_init, stu_fname, stu_dob, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### How many students enrolled in class ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enroll ( class_code, enroll_grade, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# student ( stu_init, stu_class, stu_lname, stu_fname, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the total number of students enrolled in ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_class, stu_init, stu_lname, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first name of each student enrolled in class ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_class, stu_init, stu_dob, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the first names of all students in course ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enroll ( enroll_grade, class_code, * )\n# student ( stu_num, stu_class, stu_init, stu_gpa, * )\n# class ( crs_code, class_section, prof_num, class_time, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first name of students enrolled in class ACCT-211 and got grade C?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_gpa, stu_hrs, stu_lname, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_credit, crs_description, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the first names of all students who took ACCT-211 and received a C?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_fname, emp_initial, emp_hiredate, emp_lname, * )\n# department ( dept_code, dept_name, school_code, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### Find the total number of employees.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_fname, emp_initial, emp_hiredate, emp_lname, * )\n# department ( dept_code, dept_name, school_code, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### How many employees are there all together?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_office, prof_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#\n### How many professors do have a Ph.D. degree?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_office, prof_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#\n### What is the total number of professors with a Ph.D. ?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# department ( dept_name, emp_num, school_code, dept_address, * )\n#  professor.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#\n### How many students are enrolled in the class taught by some professor from the accounting department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# course ( crs_description, dept_code, crs_credit, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  enroll.class_code = class.class_code\n#  class.crs_code = course.crs_code \n#\n### How many students are enrolled in some classes that are taught by an accounting professor?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_extension, school_code, emp_num, * )\n# student ( stu_num, stu_init, stu_lname, stu_fname, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name of the department that has the largest number of students enrolled?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, dept_extension, school_code, emp_num, * )\n# student ( stu_num, stu_init, stu_class, stu_lname, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name of the department with the most students enrolled?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, school_code, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### list names of all departments ordered by their names.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, school_code, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### What are the names of all departments in alphabetical order?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_room, class_code, class_section, class_time, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### List the codes of all courses that take place in room KLR209.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( crs_code, class_code, class_section, class_time, * )\n# course ( dept_code, crs_credit, crs_description, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the codes of all the courses that are located in room KLR209?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_jobcode, emp_dob, emp_num, emp_lname, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.stu_num = student.stu_num \n#\n### List the first name of all employees with job code PROF ordered by their date of birth.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_dob, emp_num, emp_lname, emp_initial, * )\n# professor ( prof_high_degree, prof_office, prof_extension, dept_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.class_code = class.class_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names of all employees that are professors ordered by date of birth?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.class_code = class.class_code \n#  class.prof_num = employee.emp_num \n#\n### Find the first names and offices of all professors sorted by alphabetical order of their first name.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_extension, prof_high_degree, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.class_code = class.class_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names and office locations for all professors sorted alphabetically by first name?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_fname, emp_dob, emp_num, emp_initial, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  student.dept_code = department.dept_code\n#  enroll.stu_num = student.stu_num \n#  department.emp_num = employee.emp_num \n#\n### What is the first and last name of the oldest employee?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_fname, emp_dob, emp_num, emp_initial, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.stu_num = student.stu_num \n#\n### What are the first and last names of the employee with the earliest date of birth?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_gpa, stu_lname, stu_fname, stu_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first, last name, gpa of the youngest one among students whose GPA is above 3?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_fname, stu_dob, stu_gpa, stu_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_class, stu_gpa, stu_num, stu_init, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( prof_num, crs_code, class_section, class_time, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What is the first name of students who got grade C in any class?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_gpa, stu_class, stu_num, stu_init, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( class_section, crs_code, class_time, class_room, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the first names of all students who got a grade C in a class?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# department ( dept_code, dept_extension, school_code, emp_num, * )\n# student ( dept_code, stu_num, stu_lname, stu_fname, * )\n# enroll ( stu_num, enroll_grade, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name of department where has the smallest number of professors?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# department ( dept_name, dept_extension, school_code, emp_num, * )\n# student ( prof_num, stu_num, stu_lname, stu_fname, * )\n# enroll ( stu_num, enroll_grade, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name of the department with the fewest professors?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_high_degree, emp_num, prof_office, prof_extension, * )\n# department ( dept_code, school_code, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name of department where has the largest number of professors with a Ph.D. degree?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_high_degree, emp_num, prof_office, prof_extension, * )\n# department ( dept_code, dept_extension, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n#  student.dept_code = department.dept_code\n#  professor.dept_code = department.dept_code \n#  enroll.stu_num = student.stu_num \n#\n### Which department has the most professors with a Ph.D.?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_code, crs_code, class_time, class_section, * )\n# professor ( dept_code, prof_extension, prof_office, prof_high_degree, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.class_code = class.class_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names of the professors who do not teach a class.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_code, crs_code, class_section, class_time, * )\n# professor ( dept_code, prof_high_degree, prof_office, prof_extension, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# department ( dept_code, dept_name, school_code, dept_address, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### What are the first names of all professors not teaching any classes?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first names of the professors from the history department who do not teach a class.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, prof_extension, prof_office, prof_high_degree, * )\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### What are the first names of all history professors who do not teach?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, emp_num, prof_extension, prof_high_degree, * )\n# department ( dept_code, emp_num, dept_extension, school_code, * )\n# employee ( emp_num, emp_initial, emp_fname, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### What is the last name and office of the professor from the history department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_fname, emp_initial, emp_jobcode, * )\n# department ( dept_name, emp_num, dept_address, dept_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### What are the last name and office of all history professors?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_office, emp_num, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_fname, emp_initial, emp_jobcode, * )\n# department ( dept_code, emp_num, dept_extension, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### What is department name and office for the professor whose last name is Heffington?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_office, emp_num, prof_extension, prof_high_degree, * )\n# department ( dept_code, dept_address, emp_num, dept_extension, * )\n# employee ( emp_num, emp_fname, emp_initial, emp_hiredate, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### What is the name of the department and office location for the professor with the last name of Heffington?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_lname, emp_fname, emp_initial, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.stu_num = student.stu_num \n#\n### Find the last name and hire date of the professor who is in office DRE 102.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_lname, emp_fname, emp_initial, * )\n# enroll ( stu_num, enroll_grade, * )\n# student ( stu_lname, stu_fname, stu_init, stu_dob, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.stu_num = student.stu_num \n#\n### What is the last name of the professor whose office is located in DRE 102, and when were they hired?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_hrs, stu_fname, stu_init, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# employee ( emp_num, emp_fname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the code of the course which the student whose last name is Smithson took?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_class, stu_num, stu_fname, stu_dob, * )\n# class ( class_code, class_section, class_time, class_room, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the course codes for every class that the student with the last name Smithson took?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_hrs, stu_fname, stu_init, * )\n# course ( crs_credit, crs_code, dept_code, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the description and credit of the course which the student whose last name is Smithson took?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_credit, crs_code, dept_code, * )\n# student ( stu_num, stu_hrs, stu_fname, stu_init, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### How many credits is the course that the student with the last name Smithson took, and what is its description?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_office, prof_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  class.crs_code = course.crs_code \n#\n### How many professors who has a either Ph.D. or MA degree?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_office, prof_extension, * )\n# course ( dept_code, crs_credit, crs_description, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  enroll.class_code = class.class_code\n#  class.crs_code = course.crs_code \n#\n### How many professors attained either Ph.D. or Masters degrees?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# department ( dept_name, emp_num, school_code, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( crs_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### How many professors who are from either Accounting or Biology department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( crs_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#\n### What is the number of professors who are in the Accounting or Biology departments?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( dept_code, crs_description, crs_credit, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# professor ( dept_code, prof_high_degree, prof_office, prof_extension, * )\n# class ( prof_num, class_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( prof_num, class_code, class_time, class_room, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# professor ( dept_code, prof_high_degree, prof_office, prof_extension, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### What is the first name of the professor who is teaching CIS-220 and QM-261?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, school_code, emp_num, dept_address, * )\n# student ( dept_code, stu_num, stu_class, stu_init, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### Find the first name of student who is taking classes from accounting and Computer Info. Systems departments\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_class, stu_num, stu_hrs, stu_init, * )\n# class ( crs_code, class_section, class_room, prof_num, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( crs_description, dept_code, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the first names of all students taking accoutning and Computer Information Systems classes?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_init, stu_hrs, stu_class, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_credit, crs_description, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What is the average gpa of the students enrolled in the course with code ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_init, stu_hrs, stu_class, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# course ( dept_code, crs_credit, crs_description, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What is the average GPA of students taking ACCT-211?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_gpa, stu_phone, stu_num, stu_init, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first name, gpa and phone number of the top 5 students with highest gpa?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_gpa, stu_phone, stu_num, stu_dob, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first name, GPA, and phone number of the students with the top 5 GPAs?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( dept_code, stu_num, stu_lname, stu_fname, * )\n# department ( dept_code, emp_num, dept_address, dept_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the department name of the students with lowest gpa belongs to?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( dept_code, stu_num, stu_dob, stu_lname, * )\n# department ( dept_code, emp_num, dept_extension, school_code, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name of the department with the student that has the lowest GPA?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_gpa, stu_num, stu_dob, stu_lname, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# department ( dept_name, school_code, emp_num, dept_address, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_gpa, stu_num, stu_dob, stu_lname, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the first name and GPA of every student that has a GPA lower than average?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_address, dept_code, emp_num, school_code, * )\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### Find the name and address of the department that has the highest number of students.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_address, dept_code, emp_num, dept_extension, * )\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# enroll ( class_code, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name and address of the department with the most students?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# department ( dept_name, dept_address, emp_num, dept_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### Find the name, address, number of students in the departments that have the top 3 highest number of students.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_num, stu_lname, stu_fname, stu_init, * )\n# department ( dept_name, dept_address, emp_num, dept_extension, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, class_time, class_room, * )\n#  student.dept_code = department.dept_code\n#  enroll.class_code = class.class_code \n#  enroll.stu_num = student.stu_num \n#\n### What is the name, address, and number of students in the departments that have the 3 most students?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_high_degree, dept_code, emp_num, prof_extension, * )\n# department ( dept_name, emp_num, dept_address, dept_extension, * )\n# employee ( emp_num, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### Find the first name and office of the professor who is in the history department and has a Ph.D. degree.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_high_degree, dept_code, emp_num, prof_extension, * )\n# department ( dept_name, emp_num, dept_address, dept_extension, * )\n# employee ( emp_num, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### What are the first names and office of the professors who are in the history department and have a Ph.D?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_num, emp_initial, emp_jobcode, emp_lname, * )\n# class ( prof_num, class_code, class_time, class_section, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### Find the first names of all instructors who have taught some course and the course code.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( emp_num, emp_initial, emp_lname, emp_jobcode, * )\n# class ( prof_num, class_code, class_time, class_section, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names of all teachers who have taught a course and the corresponding course codes?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_code, dept_code, crs_credit, * )\n# employee ( emp_num, emp_initial, emp_lname, emp_jobcode, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n# class ( prof_num, class_code, class_time, class_section, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### Find the first names of all instructors who have taught some course and the course description.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_code, dept_code, crs_credit, * )\n# employee ( emp_num, emp_initial, emp_lname, emp_jobcode, * )\n# class ( prof_num, class_code, class_time, class_section, * )\n# professor ( dept_code, prof_office, prof_extension, prof_high_degree, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names of all teachers who have taught a course and the corresponding descriptions?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_initial, emp_lname, emp_jobcode, * )\n# course ( crs_code, dept_code, crs_credit, * )\n# class ( prof_num, class_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### Find the first names and offices of all instructors who have taught some course and also find the course description.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( emp_num, dept_code, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_initial, emp_lname, emp_jobcode, * )\n# class ( class_code, crs_code, class_time, class_section, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  professor.emp_num = employee.emp_num\n#  class.crs_code = course.crs_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names, office locations of all lecturers who have taught some course?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_description, crs_code, crs_credit, * )\n# department ( dept_name, emp_num, dept_address, dept_extension, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_lname, emp_initial, emp_jobcode, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  course.dept_code = department.dept_code \n#\n### Find the first names and offices of all instructors who have taught some course and the course description and the department name.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_description, crs_code, crs_credit, * )\n# department ( dept_name, dept_address, emp_num, dept_extension, * )\n# professor ( prof_office, emp_num, prof_extension, prof_high_degree, * )\n# employee ( emp_num, emp_lname, emp_initial, emp_jobcode, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  course.dept_code = department.dept_code \n#\n### What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_code, dept_code, crs_credit, * )\n# student ( stu_fname, stu_lname, stu_hrs, stu_init, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### Find names of all students who took some course and the course description.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_fname, stu_num, stu_lname, stu_init, * )\n# course ( crs_description, dept_code, crs_credit, * )\n# class ( class_code, class_time, prof_num, class_section, * )\n# enroll ( class_code, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the names of all students who took a class and the corresponding course descriptions?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_fname, stu_num, stu_lname, stu_init, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# course ( dept_code, crs_credit, crs_description, * )\n# enroll ( class_code, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### Find names of all students who took some course and got A or C.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_gpa, stu_num, stu_lname, stu_init, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# enroll ( class_code, enroll_grade, * )\n# course ( dept_code, crs_credit, crs_description, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the names of all students taking a course who received an A or C?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( prof_num, crs_code, class_code, class_section, * )\n# department ( dept_name, emp_num, school_code, dept_address, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n# course ( crs_code, crs_description, crs_credit, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### Find the first names of all professors in the Accounting department who is teaching some course and the class room.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_room, prof_num, class_code, class_section, * )\n# course ( crs_description, dept_code, crs_credit, * )\n# department ( dept_name, emp_num, school_code, dept_address, * )\n# professor ( emp_num, prof_office, prof_extension, prof_high_degree, * )\n#  professor.dept_code = department.dept_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, emp_num, prof_office, prof_extension, * )\n# department ( dept_name, emp_num, school_code, dept_address, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( dept_code, emp_num, prof_office, prof_extension, * )\n# department ( dept_code, emp_num, dept_extension, school_code, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_class, stu_gpa, stu_num, stu_fname, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( crs_code, class_section, prof_num, class_time, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the last name of the student who got a grade A in the class with code 10018.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_class, stu_num, stu_fname, stu_init, * )\n# class ( crs_code, class_section, prof_num, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# employee ( emp_lname, emp_fname, emp_initial, emp_jobcode, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.prof_num = employee.emp_num \n#\n### What is the last name of the student who received an A in the class with the code 10018?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_high_degree, emp_num, dept_code, prof_extension, * )\n# employee ( emp_num, emp_lname, emp_initial, emp_jobcode, * )\n# department ( dept_code, emp_num, school_code, dept_address, * )\n# class ( class_code, crs_code, class_section, class_time, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#  class.prof_num = employee.emp_num \n#\n### Find the first name and office of history professor who did not get a Ph.D. degree.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# professor ( prof_high_degree, dept_code, emp_num, prof_extension, * )\n# department ( dept_name, emp_num, school_code, dept_address, * )\n# employee ( emp_num, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  professor.dept_code = department.dept_code \n#  department.emp_num = employee.emp_num \n#\n### What are the first names and offices of history professors who don't have Ph.D.s?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_code, crs_code, class_section, class_time, * )\n# professor ( prof_high_degree, dept_code, prof_extension, prof_office, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.class_code = class.class_code \n#  class.prof_num = employee.emp_num \n#\n### Find the first names of professors who are teaching more than one class.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# class ( class_code, crs_code, class_section, class_time, * )\n# professor ( prof_extension, prof_high_degree, dept_code, prof_office, * )\n# employee ( emp_fname, emp_lname, emp_initial, emp_jobcode, * )\n# enroll ( stu_num, enroll_grade, * )\n#  professor.emp_num = employee.emp_num\n#  enroll.class_code = class.class_code \n#  class.prof_num = employee.emp_num \n#\n### What are the first names of all professors who teach more than one class?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_class, stu_hrs, stu_num, stu_init, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### Find the first names of students who took exactly one class.\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_hrs, stu_num, stu_init, stu_dob, * )\n# class ( class_code, prof_num, class_section, class_time, * )\n# course ( dept_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What are the first names of student who only took one course?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dept_code, school_code, emp_num, dept_address, * )\n# class ( class_code, class_section, prof_num, class_time, * )\n# course ( crs_code, crs_description, crs_credit, * )\n# enroll ( stu_num, enroll_grade, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### Find the name of department that offers the class whose description has the word \"Statistics\".\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( crs_description, crs_code, crs_credit, * )\n# department ( dept_code, school_code, emp_num, dept_address, * )\n# enroll ( stu_num, enroll_grade, * )\n# class ( class_code, class_section, class_time, class_room, * )\n#  enroll.class_code = class.class_code\n#  course.dept_code = department.dept_code \n#  class.crs_code = course.crs_code \n#\n### What is the name of the department that offers a course that has a description including the word \"Statistics\"?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_fname, stu_class, stu_num, stu_hrs, * )\n# class ( crs_code, prof_num, class_section, class_time, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_description, crs_credit, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?\nSELECT"
    },
    {
        "db_id": "college_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stu_fname, stu_num, stu_hrs, stu_init, * )\n# class ( class_code, class_section, class_time, class_room, * )\n# enroll ( stu_num, enroll_grade, * )\n# course ( dept_code, crs_credit, crs_description, * )\n#  enroll.class_code = class.class_code\n#  enroll.stu_num = student.stu_num \n#  class.crs_code = course.crs_code \n#\n### What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_type_code, document_id, shipping_agent_code, receipt_date, * )\n# ref_document_status ( document_status_description, * )\n# ref_document_types ( document_type_description, * )\n# document_drafts ( draft_number, draft_details, * )\n#  document_drafts.document_id = documents.document_id\n#  documents.document_type_code = ref_document_types.document_type_code \n#  documents.document_status_code = ref_document_status.document_status_code \n#\n### What document status codes do we have?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_document_status ( document_status_description, * )\n# ref_document_types ( document_type_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# document_drafts ( draft_number, draft_details, * )\n#\n### What is the description of document status code 'working'?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_document_types ( document_type_description, * )\n# documents ( document_id, document_status_code, shipping_agent_code, receipt_date, * )\n# document_drafts ( draft_number, draft_details, * )\n# draft_copies ( draft_number, copy_number, * )\n#  draft_copies.draft_number = document_drafts.draft_number\n#  draft_copies.document_id = document_drafts.document_id \n#  document_drafts.document_id = documents.document_id \n#  documents.document_type_code = ref_document_types.document_type_code \n#\n### What document type codes do we have?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_document_types ( document_type_code, * )\n# ref_document_status ( document_status_description, * )\n# document_drafts ( draft_number, draft_details, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n#\n### What is the description of document type 'Paper'?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_shipping_agents ( shipping_agent_code, shipping_agent_description, * )\n# roles ( role_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# ref_document_types ( document_type_description, * )\n#\n### What are the shipping agent names?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_shipping_agents ( shipping_agent_code, shipping_agent_description, * )\n# documents ( document_id, document_type_code, document_status_code, receipt_date, * )\n# ref_document_types ( document_type_description, * )\n# document_drafts ( draft_number, draft_details, * )\n#  document_drafts.document_id = documents.document_id\n#  documents.document_type_code = ref_document_types.document_type_code \n#  documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code \n#\n### What is the shipping agent code of shipping agent UPS?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# roles ( role_description, * )\n# employees ( employee_id, employee_name, other_details, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# ref_document_types ( document_type_description, * )\n#  employees.role_code = roles.role_code\n#\n### What are all role codes?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# roles ( role_code, * )\n# ref_document_types ( document_type_code, * )\n# ref_document_status ( document_status_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n#\n### What is the description of role code ED?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employees ( role_code, employee_name, other_details, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# ref_document_types ( document_type_description, * )\n# document_drafts ( draft_number, draft_details, * )\n#\n### How many employees do we have?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employees ( role_code, employee_id, other_details, * )\n# roles ( role_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# document_drafts ( draft_number, draft_details, * )\n#  employees.role_code = roles.role_code\n#\n### What is the role of the employee named Koby?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( receipt_date, document_type_code, document_status_code, shipping_agent_code, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# document_drafts ( draft_number, draft_details, * )\n# draft_copies ( draft_number, copy_number, * )\n#  documents_mailed.document_id = documents.document_id\n#  draft_copies.draft_number = document_drafts.draft_number \n#  draft_copies.document_id = document_drafts.document_id \n#  document_drafts.document_id = documents.document_id \n#\n### List all document ids and receipt dates of documents.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employees ( employee_id, employee_name, other_details, * )\n# roles ( role_description, * )\n# ref_document_types ( document_type_description, * )\n# document_drafts ( draft_number, draft_details, * )\n#  employees.role_code = roles.role_code\n#\n### How many employees does each role have? List role description, id and number of employees.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employees ( employee_id, employee_name, other_details, * )\n# roles ( role_description, * )\n# ref_document_types ( document_type_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n#  employees.role_code = roles.role_code\n#\n### List roles that have more than one employee. List the role description and number of employees.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_document_status ( document_status_code, * )\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# ref_document_types ( document_type_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.document_type_code = ref_document_types.document_type_code \n#  documents.document_status_code = ref_document_status.document_status_code \n#\n### What is the document status description of the document with id 1?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_id, document_type_code, shipping_agent_code, receipt_date, * )\n# ref_document_status ( document_status_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# ref_document_types ( document_type_description, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.document_type_code = ref_document_types.document_type_code \n#  documents.document_status_code = ref_document_status.document_status_code \n#\n### How many documents have the status code done?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_id, document_status_code, shipping_agent_code, receipt_date, * )\n# ref_document_types ( document_type_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# document_drafts ( draft_number, draft_details, * )\n#  documents_mailed.document_id = documents.document_id\n#  document_drafts.document_id = documents.document_id \n#  documents.document_type_code = ref_document_types.document_type_code \n#\n### List the document type code for the document with the id 2.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# ref_document_status ( document_status_description, * )\n# ref_document_types ( document_type_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.document_type_code = ref_document_types.document_type_code \n#  documents.document_status_code = ref_document_status.document_status_code \n#\n### List the document ids for any documents with the status code done and the type code paper.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_id, document_type_code, document_status_code, receipt_date, * )\n# ref_shipping_agents ( shipping_agent_name, shipping_agent_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# circulation_history ( draft_number, employee_id, copy_number, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code \n#\n### What is the name of the shipping agent of the document with id 2?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_id, document_type_code, document_status_code, receipt_date, * )\n# ref_shipping_agents ( shipping_agent_name, shipping_agent_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code \n#\n### How many documents were shipped by USPS?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_id, document_status_code, document_type_code, receipt_date, * )\n# ref_shipping_agents ( shipping_agent_code, shipping_agent_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# circulation_history ( employee_id, draft_number, copy_number, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code \n#\n### Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( receipt_date, document_type_code, document_status_code, shipping_agent_code, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n# document_drafts ( draft_number, draft_details, * )\n#  documents_mailed.document_id = documents.document_id\n#  document_drafts.document_id = documents.document_id \n#\n### What is the receipt date of the document with id 3?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents_mailed ( document_id, mailing_date, * )\n# addresses ( address_details, * )\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents_mailed.mailed_to_address_id = addresses.address_id \n#\n### What address was the document with id 4 mailed to?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents_mailed ( document_id, mailed_to_address_id, * )\n# documents ( document_type_code, document_status_code, shipping_agent_code, receipt_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n# document_drafts ( draft_number, draft_details, * )\n#  documents_mailed.document_id = documents.document_id\n#  document_drafts.document_id = documents.document_id \n#\n### What is the mail date of the document with id 7?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_id, document_status_code, document_type_code, receipt_date, * )\n# ref_shipping_agents ( shipping_agent_name, shipping_agent_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code \n#\n### List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( shipping_agent_code, document_status_code, document_type_code, receipt_date, * )\n# ref_shipping_agents ( shipping_agent_name, shipping_agent_description, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n# ref_document_status ( document_status_description, * )\n#  documents_mailed.document_id = documents.document_id\n#  documents.document_status_code = ref_document_status.document_status_code \n#  documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code \n#\n### List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# document_drafts ( draft_details, draft_number, * )\n# draft_copies ( draft_number, copy_number, * )\n# documents ( document_type_code, document_status_code, shipping_agent_code, receipt_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n#  circulation_history.copy_number = draft_copies.copy_number\n#  circulation_history.draft_number = draft_copies.draft_number \n#  circulation_history.document_id = draft_copies.document_id \n#  draft_copies.draft_number = document_drafts.draft_number \n#  draft_copies.document_id = document_drafts.document_id \n#  document_drafts.document_id = documents.document_id \n#\n### What is draft detail of the document with id 7?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# draft_copies ( draft_number, copy_number, * )\n# document_drafts ( draft_number, draft_details, * )\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n#  circulation_history.copy_number = draft_copies.copy_number\n#  circulation_history.draft_number = draft_copies.draft_number \n#  circulation_history.document_id = draft_copies.document_id \n#  draft_copies.draft_number = document_drafts.draft_number \n#  draft_copies.document_id = document_drafts.document_id \n#  document_drafts.document_id = documents.document_id \n#\n### How many draft copies does the document with id 2 have?\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# draft_copies ( draft_number, copy_number, * )\n# document_drafts ( draft_number, draft_details, * )\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n#  circulation_history.copy_number = draft_copies.copy_number\n#  circulation_history.draft_number = draft_copies.draft_number \n#  circulation_history.document_id = draft_copies.document_id \n#  draft_copies.draft_number = document_drafts.draft_number \n#  draft_copies.document_id = document_drafts.document_id \n#  document_drafts.document_id = documents.document_id \n#\n### Which document has the most draft copies? List its document id and number of draft copies.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# draft_copies ( draft_number, copy_number, * )\n# document_drafts ( draft_number, draft_details, * )\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# circulation_history ( draft_number, copy_number, employee_id, * )\n#  circulation_history.copy_number = draft_copies.copy_number\n#  circulation_history.draft_number = draft_copies.draft_number \n#  circulation_history.document_id = draft_copies.document_id \n#  draft_copies.draft_number = document_drafts.draft_number \n#  draft_copies.document_id = document_drafts.document_id \n#  document_drafts.document_id = documents.document_id \n#\n### Which documents have more than 1 draft copies? List document id and number of draft copies.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# circulation_history ( document_id, draft_number, copy_number, * )\n# employees ( employee_name, role_code, other_details, * )\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n#  documents_mailed.document_id = documents.document_id\n#  circulation_history.employee_id = employees.employee_id \n#\n### List all employees in the circulation history of the document with id 1. List the employee's name.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# circulation_history ( document_id, copy_number, draft_number, * )\n# employees ( employee_name, role_code, other_details, * )\n# document_drafts ( draft_number, draft_details, * )\n# draft_copies ( draft_number, copy_number, * )\n#  circulation_history.copy_number = draft_copies.copy_number\n#  circulation_history.draft_number = draft_copies.draft_number \n#  circulation_history.document_id = draft_copies.document_id \n#  circulation_history.employee_id = employees.employee_id \n#  draft_copies.draft_number = document_drafts.draft_number \n#  draft_copies.document_id = document_drafts.document_id \n#\n### List the employees who have not showed up in any circulation history of documents. List the employee's name.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# circulation_history ( draft_number, copy_number, document_id, * )\n# employees ( employee_name, role_code, other_details, * )\n# draft_copies ( draft_number, copy_number, * )\n# document_drafts ( draft_number, draft_details, * )\n#  circulation_history.copy_number = draft_copies.copy_number\n#  circulation_history.draft_number = draft_copies.draft_number \n#  circulation_history.document_id = draft_copies.document_id \n#  circulation_history.employee_id = employees.employee_id \n#  draft_copies.draft_number = document_drafts.draft_number \n#  draft_copies.document_id = document_drafts.document_id \n#\n### Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.\nSELECT"
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# circulation_history ( employee_id, copy_number, draft_number, * )\n# employees ( role_code, employee_name, other_details, * )\n# documents ( document_status_code, document_type_code, shipping_agent_code, receipt_date, * )\n# documents_mailed ( mailed_to_address_id, mailing_date, * )\n#  documents_mailed.document_id = documents.document_id\n#  circulation_history.employee_id = employees.employee_id \n#\n### For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( customer_id, workshop_group_id, status_code, store_id, * )\n# bookings_services ( product_id, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoice_items.product_id = bookings_services.product_id \n#  invoice_items.order_id = bookings_services.order_id \n#  bookings_services.order_id = bookings.booking_id \n#  invoices.order_id = bookings.booking_id \n#\n### How many bookings do we have?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( customer_id, workshop_group_id, status_code, store_id, * )\n# bookings_services ( product_id, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoice_items.product_id = bookings_services.product_id \n#  invoice_items.order_id = bookings_services.order_id \n#  bookings_services.order_id = bookings.booking_id \n#  invoices.order_id = bookings.booking_id \n#\n### Count the total number of bookings made.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_id, customer_id, workshop_group_id, status_code, * )\n# invoices ( invoice_id, payment_method_code, order_quantity, product_id, * )\n# invoice_items ( invoice_id, order_item_id, product_id, order_quantity, * )\n# customer_orders ( order_id, customer_id, store_id, planned_delivery_date, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.order_id = customer_orders.order_id \n#  invoices.order_id = bookings.booking_id \n#\n### List the order dates of all the bookings.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_id, customer_id, workshop_group_id, status_code, * )\n# invoices ( invoice_id, payment_method_code, product_id, order_quantity, * )\n# invoice_items ( invoice_id, order_item_id, order_quantity, product_id, * )\n# customer_orders ( order_id, customer_id, store_id, planned_delivery_date, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.order_id = customer_orders.order_id \n#  invoices.order_id = bookings.booking_id \n#\n### What is the order date of each booking?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( actual_delivery_date, booking_id, customer_id, workshop_group_id, * )\n# customer_orders ( planned_delivery_date, order_id, customer_id, store_id, * )\n# invoice_items ( invoice_item_id, invoice_id, order_item_id, product_id, * )\n# invoices ( invoice_id, payment_method_code, product_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.order_id = customer_orders.order_id \n#  invoices.order_id = bookings.booking_id \n#\n### Show all the planned delivery dates and actual delivery dates of bookings.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( actual_delivery_date, booking_id, customer_id, order_date, * )\n# customer_orders ( actual_delivery_date, order_id, customer_id, store_id, * )\n# invoice_items ( invoice_id, order_item_id, order_quantity, product_id, * )\n# invoices ( invoice_id, payment_method_code, product_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.order_id = customer_orders.order_id \n#  invoices.order_id = bookings.booking_id \n#\n### What are the planned delivery date and actual delivery date for each booking?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_name, customer_phone, customer_email_address, address_id, * )\n# clients ( customer_name, customer_phone, address_id, customer_email_address, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n# invoice_items ( order_id, product_id, order_item_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### How many customers do we have?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_name, address_id, customer_phone, customer_email_address, * )\n# clients ( customer_name, address_id, customer_email_address, customer_phone, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n# performers ( address_id, customer_name, customer_phone, customer_email_address, * )\n#\n### Count the number of customers recorded.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_phone, customer_email_address, customer_id, address_id, * )\n# clients ( customer_email_address, client_id, customer_name, address_id, * )\n# customer_orders ( order_id, store_id, order_date, planned_delivery_date, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n#  invoices.order_id = customer_orders.order_id\n#  customer_orders.customer_id = customers.customer_id \n#\n### What are the phone and email for customer Harold?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_phone, customer_email_address, customer_id, address_id, * )\n# clients ( customer_phone, client_id, customer_name, address_id, * )\n# customer_orders ( order_id, store_id, order_date, planned_delivery_date, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n#  customer_orders.customer_id = customers.customer_id\n#\n### Find the phone number and email address of customer \"Harold\".\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, address_id, store_phone, store_email_address, * )\n# services ( product_name, service_id, product_description, service_type_code, * )\n# stores ( store_id, store_phone, address_id, store_email_address, * )\n# bookings_services ( product_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### Show all the Store_Name of drama workshop groups.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, address_id, store_phone, store_email_address, * )\n# stores ( store_id, address_id, store_phone, store_email_address, * )\n# services ( product_name, service_id, product_description, service_type_code, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id\n#\n### What are the store names of drama workshop groups?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_id, order_id, payment_method_code, product_id, * )\n# order_items ( order_item_id, order_id, product_id, other_item_details, * )\n# invoice_items ( invoice_id, order_id, order_item_id, product_id, * )\n# performers_in_bookings ( performer_id, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#\n### Show the minimum, average, maximum order quantity of all invoices.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( order_id, invoice_id, payment_method_code, product_id, * )\n# order_items ( order_id, order_item_id, product_id, other_item_details, * )\n# invoice_items ( order_id, invoice_id, order_item_id, product_id, * )\n# customer_orders ( order_id, customer_id, store_id, planned_delivery_date, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  invoices.order_id = customer_orders.order_id \n#  order_items.order_id = customer_orders.order_id \n#\n### What are the minimum, average, and maximum quantities ordered? Check all the invoices.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_id, order_id, product_id, order_quantity, * )\n# invoice_items ( invoice_id, order_id, order_item_id, product_id, * )\n# ref_payment_methods ( payment_method_description, * )\n# performers_in_bookings ( performer_id, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#\n### What are the distinct payment method codes in all the invoices?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_id, order_id, product_id, order_quantity, * )\n# ref_payment_methods ( payment_method_description, * )\n# invoice_items ( invoice_item_id, order_id, order_item_id, product_id, * )\n# performers_in_bookings ( performer_id, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#\n### Show me the distinct payment method codes from the invoice record.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# marketing_regions ( marketing_region_descriptrion, marketing_region_code, other_details, * )\n# ref_payment_methods ( payment_method_code, * )\n# invoice_items ( order_id, order_item_id, product_id, order_quantity, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#\n### What is the description of the marketing region China?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# marketing_regions ( marketing_region_descriptrion, marketing_region_code, other_details, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n# ref_payment_methods ( payment_method_description, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#\n### Find the marketing region description of China?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoice_items ( invoice_id, order_item_id, invoice_item_id, order_id, * )\n# invoices ( product_id, order_id, payment_method_code, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### Show all the distinct product names with price higher than the average.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### What are the distinct names of the products that cost more than the average?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, product_description, service_type_code, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### What is the name of the most expensive product?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, product_description, service_type_code, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### Tell me the name of the most pricy product.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoices ( product_id, order_id, payment_method_code, order_quantity, * )\n# invoice_items ( invoice_item_id, invoice_id, order_id, order_item_id, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### List all product names in ascending order of price.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoice_items ( order_item_id, product_id, invoice_item_id, order_id, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### Sort the names of products in ascending order of their price.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performers ( customer_phone, performer_id, address_id, customer_email_address, * )\n# services ( service_type_code, workshop_group_id, product_description, other_product_service_details, * )\n# performers_in_bookings ( order_id, * )\n# bookings_services ( product_id, * )\n#  bookings_services.product_id = services.service_id\n#  performers_in_bookings.performer_id = performers.performer_id \n#\n### What is the phone number of the performer Ashley?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performers ( customer_name, customer_phone, address_id, customer_email_address, * )\n# performers_in_bookings ( order_id, * )\n# services ( service_type_code, workshop_group_id, product_description, product_name, * )\n# bookings_services ( product_id, * )\n#  bookings_services.product_id = services.service_id\n#  performers_in_bookings.performer_id = performers.performer_id \n#\n### Find the phone number of performer \"Ashley\".\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_id, order_id, product_id, order_quantity, * )\n# order_items ( order_item_id, product_id, order_quantity, other_item_details, * )\n# ref_payment_methods ( payment_method_description, * )\n# customer_orders ( order_id, store_id, customer_id, planned_delivery_date, * )\n#  invoices.order_id = customer_orders.order_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#  order_items.order_id = customer_orders.order_id \n#\n### Show all payment method codes and the number of orders for each code.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_id, order_id, product_id, order_quantity, * )\n# order_items ( order_item_id, product_id, order_quantity, other_item_details, * )\n# customer_orders ( order_id, customer_id, store_id, planned_delivery_date, * )\n# ref_payment_methods ( payment_method_description, * )\n#  invoices.order_id = customer_orders.order_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#  order_items.order_id = customer_orders.order_id \n#\n### List the distinct payment method codes with the number of orders made\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_id, order_id, product_id, order_quantity, * )\n# ref_payment_methods ( payment_method_description, * )\n# order_items ( order_item_id, product_id, order_quantity, other_item_details, * )\n# bookings ( order_date, booking_id, workshop_group_id, status_code, * )\n#  invoices.order_id = bookings.booking_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#\n### What is the payment method code used by the most orders?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_id, order_id, product_id, order_quantity, * )\n# ref_payment_methods ( payment_method_description, * )\n# order_items ( order_id, product_id, order_quantity, other_item_details, * )\n# customer_orders ( customer_id, store_id, order_date, planned_delivery_date, * )\n#  invoices.order_id = customer_orders.order_id\n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#  order_items.order_id = customer_orders.order_id \n#\n### Find the payment method that is used the most often in all the invoices. Give me its code.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stores ( store_name, store_id, marketing_region_code, store_email_address, * )\n# addresses ( city_town, other_details, line_1, line_2, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  stores.address_id = addresses.address_id \n#\n### Which city is the address of the store named \"FJA Filming\" located in?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stores ( address_id, store_id, marketing_region_code, store_email_address, * )\n# addresses ( city_town, line_1, line_2, state_county, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n# services ( service_type_code, workshop_group_id, product_description, product_name, * )\n#  stores.address_id = addresses.address_id\n#\n### Find the city the store named \"FJA Filming\" is in.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stores ( address_id, store_id, store_name, store_phone, * )\n# addresses ( address_id, other_details, line_1, line_2, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n# drama_workshop_groups ( marketing_region_code, workshop_group_id, currency_code, store_name, * )\n#  stores.address_id = addresses.address_id\n#  drama_workshop_groups.address_id = addresses.address_id \n#\n### What are the states or counties of the address of the stores with marketing region code \"CA\"?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stores ( address_id, store_id, store_name, store_phone, * )\n# addresses ( state_county, line_1, line_2, city_town, * )\n# marketing_regions ( marketing_region_name, marketing_region_descriptrion, other_details, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n#  stores.address_id = addresses.address_id\n#  stores.marketing_region_code = marketing_regions.marketing_region_code \n#\n### Find the states or counties where the stores with marketing region code \"CA\" are located.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stores ( store_name, store_id, address_id, store_phone, * )\n# marketing_regions ( marketing_region_code, marketing_region_descriptrion, other_details, * )\n# services ( service_id, service_type_code, workshop_group_id, other_product_service_details, * )\n# invoice_items ( invoice_id, order_id, order_item_id, invoice_item_id, * )\n#  stores.marketing_region_code = marketing_regions.marketing_region_code\n#\n### What is the name of the marketing region that the store Rob Dinning belongs to?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stores ( store_name, address_id, store_id, store_phone, * )\n# marketing_regions ( marketing_region_code, marketing_region_descriptrion, other_details, * )\n# services ( service_id, workshop_group_id, service_type_code, other_product_service_details, * )\n# invoice_items ( order_id, product_id, invoice_item_id, order_item_id, * )\n#  stores.marketing_region_code = marketing_regions.marketing_region_code\n#\n### Return the name of the marketing region the store Rob Dinning is located in.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# services ( product_description, product_price, service_id, workshop_group_id, * )\n# products ( product_id, product_description, other_product_service_details, product_name, * )\n# ref_payment_methods ( payment_method_description, * )\n#  services.service_type_code = ref_service_types.service_type_code\n#\n### What are the descriptions of the service types with product price above 100?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# services ( product_price, product_description, service_id, workshop_group_id, * )\n# products ( product_id, product_name, other_product_service_details, product_description, * )\n# ref_payment_methods ( payment_method_description, * )\n#  services.service_type_code = ref_service_types.service_type_code\n#\n### Give me the descriptions of the service types that cost more than 100.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# services ( product_description, workshop_group_id, service_id, product_name, * )\n# ref_payment_methods ( payment_method_description, * )\n# performers_in_bookings ( performer_id, * )\n#  services.service_type_code = ref_service_types.service_type_code\n#\n### What is the description, code and the corresponding count of each service type?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( product_description, service_id, workshop_group_id, product_name, * )\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# performers_in_bookings ( performer_id, * )\n# customer_orders ( customer_id, store_id, order_date, planned_delivery_date, * )\n#  services.service_type_code = ref_service_types.service_type_code\n#\n### List the description, code and the number of services for each service type.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( product_description, service_id, workshop_group_id, product_name, * )\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# bookings_services ( product_id, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n#  invoice_items.product_id = bookings_services.product_id\n#  invoice_items.order_id = bookings_services.order_id \n#  bookings_services.product_id = services.service_id \n#  services.service_type_code = ref_service_types.service_type_code \n#\n### What is the description and code of the type of service that is performed the most often?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( product_description, service_id, workshop_group_id, product_name, * )\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# bookings_services ( product_id, * )\n# performers ( address_id, customer_name, customer_phone, customer_email_address, * )\n#  bookings_services.product_id = services.service_id\n#  services.service_type_code = ref_service_types.service_type_code \n#\n### Find the description and code of the service type that is performed the most times.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( service_type_code, service_id, product_description, product_name, * )\n# drama_workshop_groups ( store_email_address, store_phone, address_id, currency_code, * )\n# performers ( customer_email_address, performer_id, address_id, customer_name, * )\n# bookings ( booking_id, customer_id, status_code, store_id, * )\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id\n#  bookings.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### What are the phones and emails of workshop groups in which services are performed?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( service_id, service_type_code, product_description, product_name, * )\n# drama_workshop_groups ( store_email_address, store_phone, address_id, other_details, * )\n# performers ( customer_email_address, performer_id, address_id, customer_name, * )\n# bookings ( booking_id, customer_id, status_code, store_id, * )\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id\n#  bookings.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### Give me all the phone numbers and email addresses of the workshop groups where services are performed.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( product_name, service_type_code, service_id, product_description, * )\n# products ( product_id, other_product_service_details, product_price, product_description, * )\n# drama_workshop_groups ( address_id, currency_code, marketing_region_code, store_name, * )\n# bookings ( booking_id, customer_id, status_code, store_id, * )\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id\n#  bookings.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### What are the names of workshop groups in which services with product name \"film\" are performed?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( product_name, service_type_code, service_id, product_description, * )\n# products ( product_id, other_product_service_details, product_price, product_description, * )\n# drama_workshop_groups ( address_id, marketing_region_code, other_details, currency_code, * )\n# bookings ( booking_id, customer_id, status_code, store_id, * )\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id\n#  bookings.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### Find the names of the workshop groups where services with product name \"film\" are performed.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n# invoice_items ( invoice_id, order_id, order_item_id, invoice_item_id, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### What are the different product names? What is the average product price for each of them?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### For each distinct product name, show its average product price.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### What are the product names with average product price smaller than 1000000?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_price, product_id, product_description, other_product_service_details, * )\n# services ( product_price, service_id, service_type_code, workshop_group_id, * )\n# invoices ( invoice_id, order_id, payment_method_code, order_quantity, * )\n# invoice_items ( invoice_id, order_id, order_item_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#\n### Find the product names whose average product price is below 1000000.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( product_id, order_item_id, order_id, other_item_details, * )\n# products ( product_name, product_price, product_description, other_product_service_details, * )\n# invoices ( invoice_id, order_id, product_id, payment_method_code, * )\n# services ( service_id, service_type_code, workshop_group_id, product_description, * )\n#  order_items.product_id = products.product_id\n#\n### What are the total order quantities of photo products?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_price, product_description, other_product_service_details, * )\n# order_items ( order_quantity, order_item_id, order_id, other_item_details, * )\n# invoices ( invoice_id, product_id, order_id, order_item_id, * )\n# invoice_items ( order_quantity, invoice_id, order_id, order_item_id, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  order_items.product_id = products.product_id \n#\n### Compute the total order quantities of the product \"photo\".\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_name, product_description, other_product_service_details, * )\n# order_items ( order_id, order_item_id, order_quantity, other_item_details, * )\n# invoice_items ( order_id, order_quantity, invoice_id, order_item_id, * )\n# invoices ( product_id, order_quantity, invoice_id, payment_method_code, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  order_items.product_id = products.product_id \n#\n### What are the order details of the products with price higher than 2000?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_name, product_description, other_product_service_details, * )\n# order_items ( order_id, order_item_id, order_quantity, other_item_details, * )\n# invoices ( product_id, invoice_id, order_quantity, order_item_id, * )\n# invoice_items ( order_id, invoice_id, order_quantity, order_item_id, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  order_items.product_id = products.product_id \n#\n### Find the order detail for the products with price above 2000.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_id, planned_delivery_date, order_date, customer_id, * )\n# order_items ( order_id, order_item_id, product_id, other_item_details, * )\n# invoices ( order_id, invoice_id, payment_method_code, order_item_id, * )\n# invoice_items ( order_quantity, order_item_id, invoice_id, product_id, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  invoices.order_id = customer_orders.order_id \n#  order_items.order_id = customer_orders.order_id \n#\n### What are the actual delivery dates of orders with quantity 1?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_id, planned_delivery_date, order_date, customer_id, * )\n# order_items ( order_id, order_item_id, product_id, other_item_details, * )\n# invoices ( order_id, invoice_id, payment_method_code, order_item_id, * )\n# invoice_items ( order_quantity, order_item_id, invoice_id, product_id, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  invoices.order_id = customer_orders.order_id \n#  order_items.order_id = customer_orders.order_id \n#\n### List the actual delivery date for all the orders with quantity 1\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_id, customer_id, store_id, planned_delivery_date, * )\n# invoices ( order_quantity, invoice_id, payment_method_code, order_item_id, * )\n# invoice_items ( order_quantity, invoice_id, order_item_id, product_id, * )\n# products ( product_id, product_name, product_description, other_product_service_details, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.order_id = customer_orders.order_id \n#\n### What are the order dates of orders with price higher than 1000?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_id, planned_delivery_date, other_order_details, customer_id, * )\n# invoices ( order_quantity, invoice_id, payment_method_code, order_item_id, * )\n# invoice_items ( order_quantity, invoice_id, order_item_id, product_id, * )\n# products ( product_id, product_name, product_description, other_product_service_details, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoices.order_id = customer_orders.order_id \n#\n### Find the order dates of the orders with price above 1000.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, address_id, marketing_region_code, store_name, * )\n# services ( service_id, service_type_code, product_price, product_description, * )\n# invoices ( invoice_id, order_id, product_id, order_quantity, * )\n# bookings_services ( product_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### How many distinct currency codes are there for all drama workshop groups?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, address_id, marketing_region_code, store_name, * )\n# services ( service_id, service_type_code, product_description, product_name, * )\n# bookings_services ( product_id, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### Find the number of distinct currency codes used in drama workshop groups.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, currency_code, marketing_region_code, store_name, * )\n# addresses ( city_town, line_1, line_2, state_county, * )\n# services ( service_id, product_name, service_type_code, product_description, * )\n# bookings_services ( order_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#  drama_workshop_groups.address_id = addresses.address_id \n#\n### What are the names of the drama workshop groups with address in Feliciaberg city?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, currency_code, marketing_region_code, store_name, * )\n# addresses ( city_town, state_county, other_details, line_1, * )\n# services ( service_id, service_type_code, product_name, product_description, * )\n# bookings_services ( order_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#  drama_workshop_groups.address_id = addresses.address_id \n#\n### Return the the names of the drama workshop groups that are located in Feliciaberg city.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, line_1, line_2, city_town, * )\n# drama_workshop_groups ( store_email_address, workshop_group_id, marketing_region_code, currency_code, * )\n# services ( service_id, service_type_code, product_description, product_name, * )\n# bookings_services ( product_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#  drama_workshop_groups.address_id = addresses.address_id \n#\n### What are the email addresses of the drama workshop groups with address in Alaska state?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( store_email_address, marketing_region_code, workshop_group_id, currency_code, * )\n# addresses ( state_county, line_1, line_2, city_town, * )\n# services ( service_id, service_type_code, product_name, product_price, * )\n# bookings_services ( order_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#  drama_workshop_groups.address_id = addresses.address_id \n#\n### List the email addresses of the drama workshop groups located in Alaska state.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, store_email_address, currency_code, marketing_region_code, * )\n# addresses ( city_town, line_1, line_2, state_county, * )\n# services ( service_id, service_type_code, product_name, product_price, * )\n# bookings_services ( order_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#  drama_workshop_groups.address_id = addresses.address_id \n#\n### Show all cities along with the number of drama workshop groups in each city.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, currency_code, marketing_region_code, store_name, * )\n# addresses ( city_town, line_1, line_2, state_county, * )\n# services ( service_id, service_type_code, product_name, product_description, * )\n# bookings_services ( product_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#  drama_workshop_groups.address_id = addresses.address_id \n#\n### How many drama workshop groups are there in each city? Return both the city and the count.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, address_id, currency_code, store_name, * )\n# services ( service_id, service_type_code, product_description, product_name, * )\n# marketing_regions ( marketing_region_name, marketing_region_descriptrion, other_details, * )\n# bookings_services ( product_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### What is the marketing region code that has the most drama workshop groups?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# drama_workshop_groups ( workshop_group_id, address_id, currency_code, store_name, * )\n# services ( service_id, service_type_code, product_description, product_name, * )\n# marketing_regions ( marketing_region_name, marketing_region_descriptrion, other_details, * )\n# bookings_services ( order_id, * )\n#  bookings_services.product_id = services.service_id\n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### Which marketing region has the most drama workshop groups? Give me the region code.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performers ( performer_id, customer_name, customer_phone, customer_email_address, * )\n# customers ( customer_id, customer_name, customer_phone, customer_email_address, * )\n# addresses ( address_id, line_1, line_2, state_county, * )\n# clients ( client_id, customer_name, customer_phone, customer_email_address, * )\n#  customers.address_id = addresses.address_id\n#  performers.address_id = addresses.address_id \n#  clients.address_id = addresses.address_id \n#\n### Show all cities where at least one customer lives in but no performer lives in.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performers ( performer_id, customer_name, customer_phone, customer_email_address, * )\n# addresses ( city_town, line_1, line_2, state_county, * )\n# customers ( customer_id, customer_name, customer_phone, customer_email_address, * )\n# invoices ( order_id, order_item_id, payment_method_code, order_quantity, * )\n#  customers.address_id = addresses.address_id\n#  performers.address_id = addresses.address_id \n#\n### Which cities have at least one customer but no performer?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_id, customer_id, workshop_group_id, store_id, * )\n# bookings_services ( product_id, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n# invoice_items ( order_id, order_item_id, product_id, invoice_item_id, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoice_items.product_id = bookings_services.product_id \n#  invoice_items.order_id = bookings_services.order_id \n#  bookings_services.order_id = bookings.booking_id \n#  invoices.order_id = bookings.booking_id \n#\n### What is the most frequent status of bookings?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_id, customer_id, workshop_group_id, store_id, * )\n# bookings_services ( product_id, * )\n# invoice_items ( invoice_item_id, invoice_id, order_item_id, product_id, * )\n# invoices ( order_id, payment_method_code, product_id, order_quantity, * )\n#  invoice_items.invoice_id = invoices.invoice_id\n#  invoice_items.product_id = bookings_services.product_id \n#  invoice_items.order_id = bookings_services.order_id \n#  bookings_services.order_id = bookings.booking_id \n#  invoices.order_id = bookings.booking_id \n#\n### Which status code is the most common of all the bookings?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( status_code, booking_id, customer_id, store_id, * )\n# services ( service_id, service_type_code, product_description, product_name, * )\n# bookings_services ( product_id, * )\n# invoice_items ( order_id, order_item_id, product_id, order_quantity, * )\n#  invoice_items.product_id = bookings_services.product_id\n#  invoice_items.order_id = bookings_services.order_id \n#  bookings_services.order_id = bookings.booking_id \n#  bookings_services.product_id = services.service_id \n#\n### What are the names of the workshop groups that have bookings with status code \"stop\"?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( status_code, booking_id, customer_id, store_id, * )\n# services ( service_id, service_type_code, product_description, product_name, * )\n# bookings_services ( product_id, * )\n# drama_workshop_groups ( address_id, currency_code, marketing_region_code, store_name, * )\n#  bookings_services.order_id = bookings.booking_id\n#  bookings_services.product_id = services.service_id \n#  services.workshop_group_id = drama_workshop_groups.workshop_group_id \n#  bookings.workshop_group_id = drama_workshop_groups.workshop_group_id \n#\n### Which workshop groups have bookings with status code \"stop\"? Give me the names.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_id, workshop_group_id, status_code, store_id, * )\n# clients ( customer_name, address_id, customer_email_address, customer_phone, * )\n# customers ( customer_name, address_id, customer_phone, customer_email_address, * )\n# customer_orders ( order_id, store_id, order_date, planned_delivery_date, * )\n#  customer_orders.customer_id = customers.customer_id\n#  bookings.customer_id = clients.client_id \n#\n### Show the names of all the clients with no booking.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# clients ( customer_name, address_id, customer_phone, customer_email_address, * )\n# bookings ( booking_id, workshop_group_id, status_code, store_id, * )\n# customers ( customer_name, address_id, customer_phone, customer_email_address, * )\n# customer_orders ( order_id, store_id, order_date, planned_delivery_date, * )\n#  customer_orders.customer_id = customers.customer_id\n#  bookings.customer_id = clients.client_id \n#\n### What are the names of the clients who do not have any booking?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( order_quantity, order_id, invoice_id, product_id, * )\n# order_items ( order_id, order_item_id, product_id, other_item_details, * )\n# ref_payment_methods ( payment_method_description, * )\n# invoice_items ( invoice_id, order_quantity, order_item_id, product_id, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#\n### What is the average quantities ordered with payment method code \"MasterCard\" on invoices?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_id, order_item_id, product_id, other_item_details, * )\n# invoices ( payment_method_code, invoice_id, order_id, product_id, * )\n# ref_payment_methods ( payment_method_description, * )\n# invoice_items ( order_id, order_quantity, order_item_id, product_id, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  invoices.payment_method_code = ref_payment_methods.payment_method_code \n#\n### Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_id, order_item_id, order_quantity, other_item_details, * )\n# invoice_items ( order_item_id, order_id, invoice_id, invoice_item_id, * )\n# invoices ( order_item_id, order_id, invoice_id, payment_method_code, * )\n# bookings ( customer_id, order_date, workshop_group_id, status_code, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  invoices.order_id = bookings.booking_id \n#\n### What is the product ID of the most frequently ordered item on invoices?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_id, order_item_id, order_quantity, other_item_details, * )\n# invoice_items ( order_id, invoice_id, order_item_id, order_quantity, * )\n# invoices ( product_id, invoice_id, payment_method_code, order_item_id, * )\n# bookings ( order_date, customer_id, workshop_group_id, status_code, * )\n#  invoice_items.order_item_id = order_items.order_item_id\n#  invoice_items.invoice_id = invoices.invoice_id \n#  invoices.order_id = bookings.booking_id \n#\n### Find the id of the product ordered the most often on invoices.\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# services ( product_description, product_name, service_id, workshop_group_id, * )\n# products ( product_id, other_product_service_details, product_description, product_price, * )\n# order_items ( product_id, order_item_id, order_quantity, other_item_details, * )\n#  services.service_type_code = ref_service_types.service_type_code\n#  order_items.product_id = products.product_id \n#\n### What is the description of the service type which offers both the photo product and the film product?\nSELECT"
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( product_description, product_name, service_id, workshop_group_id, * )\n# ref_service_types ( service_type_code, parent_service_type_code, * )\n# products ( product_id, other_product_service_details, product_price, product_description, * )\n# order_items ( product_id, order_item_id, order_quantity, other_item_details, * )\n#  services.service_type_code = ref_service_types.service_type_code\n#  order_items.product_id = products.product_id \n#\n### Give me the description of the service type that offers not only the photo product but also the film product.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Show the number of accounts.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### How many accounts are there?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( date_account_opened, account_id, account_name, other_account_details, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### How many customers have opened an account?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# customers ( customer_first_name, gender, country, customer_middle_initial, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Count the number of customers who have an account.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_name, other_account_details, account_id, customer_id, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  financial_transactions.account_id = accounts.account_id\n#\n### Show the id, the date of account opened, the account name, and other account detail for all accounts.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, other_account_details, account_name, customer_id, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  financial_transactions.account_id = accounts.account_id\n#\n### What are the ids, date opened, name, and other details for all accounts?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, date_account_opened, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( date_account_opened, customer_id, other_account_details, account_name, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_name, other_account_details, account_id, date_account_opened, * )\n# customers ( customer_last_name, customer_id, customer_middle_initial, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_name, other_account_details, account_id, date_account_opened, * )\n# customers ( customer_first_name, customer_last_name, customer_middle_initial, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_middle_initial, gender, * )\n# accounts ( account_id, account_name, other_account_details, date_account_opened, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Show the first name and last name for the customer with account name 900.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_name, account_id, date_account_opened, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_middle_initial, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### What are the full names of customers with the account name 900?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# orders ( order_id, date_order_placed, order_details, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### How many customers don't have an account?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# orders ( order_id, date_order_placed, order_details, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### Count the number of customers who do not have an account.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, phone_number, customer_id, gender, * )\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# orders ( order_id, date_order_placed, order_details, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### Show the unique first names, last names, and phone numbers for all customers with any account.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, phone_number, customer_id, gender, * )\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# orders ( order_id, date_order_placed, order_details, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### What are the distinct first names, last names, and phone numbers for customers with accounts?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# customers ( customer_first_name, gender, country, customer_middle_initial, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# orders ( order_id, date_order_placed, order_details, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### Show customer ids who don't have an account.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# customers ( customer_last_name, gender, country, customer_first_name, * )\n# orders ( order_id, date_order_placed, order_details, * )\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### What are the customer ids for customers who do not have an account?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### How many accounts does each customer have? List the number and customer id.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Count the number of accounts corresponding to each customer id.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_last_name, customer_middle_initial, gender, * )\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### What is the customer id, first and last name with most number of accounts.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_last_name, customer_middle_initial, gender, * )\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Return the id and full name of the customer with the most accounts.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_last_name, customer_middle_initial, gender, * )\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Show id, first name and last name for all customers and the number of accounts.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, date_account_opened, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_middle_initial, gender, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### What are the the full names and ids for all customers, and how many accounts does each have?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# orders ( order_id, date_order_placed, order_details, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### Show first name and id for all customers with at least 2 accounts.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_middle_initial, customer_last_name, gender, * )\n# financial_transactions ( transaction_id, invoice_number, transaction_type, transaction_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### What are the first names and ids for customers who have two or more accounts?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_middle_initial, gender, country, * )\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n# orders ( order_id, date_order_placed, order_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  accounts.customer_id = customers.customer_id\n#  orders.customer_id = customers.customer_id \n#\n### Show the number of customers.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_middle_initial, gender, country, * )\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n# orders ( order_id, date_order_placed, order_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  accounts.customer_id = customers.customer_id\n#  orders.customer_id = customers.customer_id \n#\n### Count the number of customers.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_first_name, customer_middle_initial, country, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Show the number of customers for each gender.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_first_name, customer_middle_initial, country, * )\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### How many customers are there of each gender?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_date, transaction_amount, transaction_id, account_id, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### How many transactions do we have?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_date, transaction_amount, transaction_id, account_id, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### Count the number of transactions.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( customer_id, account_name, date_account_opened, other_account_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  financial_transactions.account_id = accounts.account_id\n#\n### How many transaction does each account have? Show the number and account id.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  financial_transactions.account_id = accounts.account_id\n#\n### Count the number of financial transactions that correspond to each account id.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( account_name, customer_id, date_account_opened, other_account_details, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### How many transaction does account with name 337 have?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( account_name, customer_id, other_account_details, date_account_opened, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Count the number of financial transactions that the account with the name 337 has.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, account_id, invoice_number, transaction_type, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### What is the average, minimum, maximum, and total transaction amount?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, account_id, invoice_number, transaction_type, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### Return the average, minimum, maximum, and total transaction amounts.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_amount, account_id, invoice_number, transaction_type, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### Show ids for all transactions whose amounts are greater than the average.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, account_id, transaction_type, invoice_number, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### What are the ids for transactions that have an amount greater than the average amount of a transaction?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_amount, transaction_id, account_id, invoice_number, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### Show the transaction types and the total amount of transactions.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_amount, transaction_id, account_id, invoice_number, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### What are total transaction amounts for each transaction type?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( account_name, customer_id, date_account_opened, other_account_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the account name, id and the number of transactions for each account.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( account_name, customer_id, other_account_details, date_account_opened, * )\n# customers ( customer_first_name, gender, country, customer_middle_initial, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Return the names and ids of each account, as well as the number of transactions.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the account id with most number of transactions.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( customer_id, date_account_opened, account_name, other_account_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the id of the account with the most transactions?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( account_name, customer_id, date_account_opened, other_account_details, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  financial_transactions.account_id = accounts.account_id\n#  accounts.customer_id = customers.customer_id \n#\n### Show the account id and name with at least 4 transactions.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( invoice_number, transaction_id, transaction_type, transaction_date, * )\n# accounts ( account_name, customer_id, date_account_opened, other_account_details, * )\n# invoices ( order_id, invoice_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the ids and names of accounts with 4 or more transactions?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_name, production_type_code, parent_product_id, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n#  invoice_line_items.product_id = products.product_id\n#  products.production_type_code = product_categories.production_type_code \n#\n### Show all product sizes.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, parent_product_id, production_type_code, unit_price, * )\n# product_categories ( product_type_description, vat_rating, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n#  invoice_line_items.product_id = products.product_id\n#  products.production_type_code = product_categories.production_type_code \n#\n### What are the different product sizes?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_name, production_type_code, parent_product_id, * )\n# order_items ( product_id, order_item_id, product_quantity, other_order_item_details, * )\n# invoice_line_items ( order_item_id, invoice_number, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  products.production_type_code = product_categories.production_type_code \n#\n### Show all product colors.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_name, production_type_code, parent_product_id, * )\n# product_categories ( product_type_description, vat_rating, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# order_items ( order_item_id, order_id, product_quantity, other_order_item_details, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  products.production_type_code = product_categories.production_type_code \n#\n### What are the different product colors?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, account_id, transaction_type, transaction_date, * )\n# invoices ( invoice_date, order_id, * )\n# invoice_line_items ( order_item_id, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### Show the invoice number and the number of transactions for each invoice.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, account_id, transaction_type, transaction_date, * )\n# invoices ( order_id, invoice_date, * )\n# invoice_line_items ( order_item_id, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### How many transactions correspond to each invoice number?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_number, order_id, * )\n# financial_transactions ( transaction_date, account_id, transaction_id, transaction_type, * )\n# invoice_line_items ( order_item_id, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### What is the invoice number and invoice date for the invoice with most number of transactions?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_date, order_id, * )\n# financial_transactions ( transaction_date, account_id, transaction_id, transaction_type, * )\n# invoice_line_items ( order_item_id, product_id, product_title, product_quantity, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( order_id, invoice_date, * )\n# invoice_line_items ( order_item_id, product_id, product_title, product_quantity, * )\n# financial_transactions ( transaction_id, account_id, transaction_type, transaction_date, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### How many invoices do we have?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( order_id, invoice_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  invoice_line_items.invoice_number = invoices.invoice_number\n#  financial_transactions.invoice_number = invoices.invoice_number \n#\n### Count the number of invoices.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_date, invoice_number, * )\n# orders ( order_details, date_order_placed, customer_id, * )\n# order_items ( other_order_item_details, order_item_id, product_id, product_quantity, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### Show invoice dates and order id and details for all invoices.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_date, invoice_number, * )\n# orders ( order_id, date_order_placed, customer_id, * )\n# order_items ( other_order_item_details, order_item_id, product_id, product_quantity, * )\n# invoice_line_items ( order_item_id, product_id, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### What are the invoice dates, order ids, and order details for all invoices?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_number, invoice_date, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# order_items ( order_item_id, product_id, product_quantity, other_order_item_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### Show the order ids and the number of invoices for each order.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_number, invoice_date, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# order_items ( order_item_id, product_id, product_quantity, other_order_item_details, * )\n# invoice_line_items ( order_item_id, product_id, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### How many invoices correspond to each order id?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_number, invoice_date, * )\n# orders ( order_details, customer_id, date_order_placed, * )\n# order_items ( other_order_item_details, order_item_id, product_quantity, product_id, * )\n# invoice_line_items ( invoice_number, product_quantity, product_id, product_title, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### What is the order id and order details for the order more than two invoices.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# invoices ( invoice_number, invoice_date, * )\n# orders ( order_details, customer_id, date_order_placed, * )\n# order_items ( other_order_item_details, order_item_id, product_id, product_quantity, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### Return the order ids and details for orderes with two or more invoices.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# orders ( order_id, date_order_placed, order_details, * )\n# customers ( customer_last_name, phone_number, customer_first_name, customer_middle_initial, * )\n# order_items ( order_item_id, product_id, product_quantity, other_order_item_details, * )\n# financial_transactions ( account_id, invoice_number, transaction_type, transaction_date, * )\n#  order_items.order_id = orders.order_id\n#  orders.customer_id = customers.customer_id \n#\n### What is the customer last name, id and phone number with most number of orders?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# orders ( order_id, date_order_placed, order_details, * )\n# customers ( customer_last_name, phone_number, customer_first_name, customer_middle_initial, * )\n# order_items ( order_item_id, product_id, product_quantity, other_order_item_details, * )\n# accounts ( account_id, date_account_opened, account_name, other_account_details, * )\n#  order_items.order_id = orders.order_id\n#  accounts.customer_id = customers.customer_id \n#  orders.customer_id = customers.customer_id \n#\n### Return the last name, id and phone number of the customer who has made the greatest number of orders.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, production_type_code, product_color, product_size, * )\n# order_items ( order_id, order_item_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoice_line_items ( product_id, order_item_id, invoice_number, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### Show all product names without an order.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, production_type_code, product_color, product_size, * )\n# order_items ( order_id, order_item_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoice_line_items ( product_id, order_item_id, product_quantity, invoice_number, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### What are the names of products that have never been ordered?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, production_type_code, product_color, product_size, * )\n# order_items ( product_id, order_id, order_item_id, other_order_item_details, * )\n# invoice_line_items ( product_quantity, product_id, order_item_id, invoice_number, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### Show all product names and the total quantity ordered for each product name.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, production_type_code, product_size, product_color, * )\n# order_items ( product_id, order_id, order_item_id, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoice_line_items ( product_id, product_quantity, order_item_id, invoice_number, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### What are the different product names, and what is the sum of quantity ordered for each product?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_item_id, product_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoices ( invoice_number, invoice_date, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### Show the order ids and the number of items in each order.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_item_id, product_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( order_id, invoice_date, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### How many order items correspond to each order id?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_id, order_item_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# products ( production_type_code, parent_product_id, product_name, product_color, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### Show the product ids and the number of unique orders containing each product.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( product_id, order_item_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# products ( product_name, production_type_code, product_size, product_color, * )\n# product_categories ( product_type_description, vat_rating, * )\n#  order_items.product_id = products.product_id\n#  order_items.order_id = orders.order_id \n#  products.production_type_code = product_categories.production_type_code \n#\n### How many distinct order ids correspond to each product?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_name, production_type_code, product_color, product_size, * )\n# orders ( order_id, date_order_placed, order_details, * )\n# order_items ( order_id, order_item_id, product_quantity, other_order_item_details, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n#  order_items.product_id = products.product_id\n#  order_items.order_id = orders.order_id \n#  orders.customer_id = customers.customer_id \n#\n### Show all product names and the number of customers having an order on each product.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, production_type_code, product_color, product_size, * )\n# orders ( order_id, date_order_placed, order_details, * )\n# order_items ( order_id, order_item_id, product_quantity, other_order_item_details, * )\n# customers ( gender, country, customer_first_name, customer_middle_initial, * )\n#  order_items.product_id = products.product_id\n#  order_items.order_id = orders.order_id \n#  orders.customer_id = customers.customer_id \n#\n### What are teh names of the different products, as well as the number of customers who have ordered each product.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_item_id, product_id, product_quantity, other_order_item_details, * )\n# orders ( date_order_placed, customer_id, order_details, * )\n# products ( parent_product_id, production_type_code, unit_price, product_name, * )\n# invoices ( invoice_number, invoice_date, * )\n#  order_items.product_id = products.product_id\n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### Show order ids and the number of products in each order.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( product_id, order_item_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# products ( product_id, production_type_code, product_color, product_size, * )\n# invoice_line_items ( product_id, invoice_number, product_title, product_quantity, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### How many different products correspond to each order id?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( product_quantity, order_item_id, product_id, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoice_line_items ( invoice_number, product_id, product_title, product_quantity, * )\n# invoices ( invoice_number, invoice_date, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### Show order ids and the total quantity in each order.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( product_quantity, order_item_id, product_id, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoice_line_items ( order_item_id, invoice_number, product_id, product_title, * )\n# invoices ( invoice_number, invoice_date, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.invoice_number = invoices.invoice_number \n#  order_items.order_id = orders.order_id \n#  invoices.order_id = orders.order_id \n#\n### Give the order ids for all orders, as well as the total product quantity in each.\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( order_id, order_item_id, product_quantity, other_order_item_details, * )\n# products ( product_name, production_type_code, product_size, product_color, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# invoice_line_items ( invoice_number, product_id, product_quantity, product_title, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### How many products were not included in any order?\nSELECT"
    },
    {
        "db_id": "customers_and_invoices",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# order_items ( product_id, order_item_id, product_quantity, other_order_item_details, * )\n# orders ( customer_id, date_order_placed, order_details, * )\n# products ( production_type_code, product_name, product_size, parent_product_id, * )\n# invoice_line_items ( order_item_id, invoice_number, product_quantity, product_title, * )\n#  invoice_line_items.order_item_id = order_items.order_item_id\n#  invoice_line_items.product_id = products.product_id \n#  order_items.product_id = products.product_id \n#  order_items.order_id = orders.order_id \n#\n### Count the number of products that were never ordered.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, city, line_1_number_building, zip_postcode, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# contacts ( contact_id, customer_id, first_name, last_name, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n#  customer_address_history.address_id = addresses.address_id\n#\n### How many addresses are there in country USA?\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, country, line_1_number_building, zip_postcode, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n# contacts ( contact_id, customer_id, first_name, last_name, * )\n#  customer_address_history.address_id = addresses.address_id\n#\n### Show all distinct cities in the address record.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, city, country, line_1_number_building, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# contacts ( contact_id, customer_id, first_name, last_name, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n#  customer_address_history.address_id = addresses.address_id\n#\n### Show each state and the number of addresses in each state.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_phone, customer_address, customer_id, customer_number, * )\n# contacts ( customer_id, contact_id, first_name, gender, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# customer_orders ( order_id, order_date, order_status_code, * )\n#  customer_orders.customer_id = customers.customer_id\n#  customer_address_history.customer_id = customers.customer_id \n#\n### Show names and phones of customers who do not have address information.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_id, order_date, order_status_code, * )\n# customers ( customer_name, customer_number, customer_phone, customer_email, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# contacts ( gender, contact_id, first_name, last_name, * )\n#  customer_orders.customer_id = customers.customer_id\n#  customer_address_history.customer_id = customers.customer_id \n#\n### Show the name of the customer who has the most orders.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_name, product_price, * )\n# order_items ( order_item_id, order_id, order_quantity, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n#  order_items.product_id = products.product_id\n#  order_items.order_id = customer_orders.order_id \n#\n### Show the product type codes which have at least two products.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_status_code, order_id, order_date, * )\n# customers ( customer_name, customer_email, payment_method_code, customer_number, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# contacts ( gender, contact_id, first_name, last_name, * )\n#  customer_orders.customer_id = customers.customer_id\n#  customer_address_history.customer_id = customers.customer_id \n#\n### Show the names of customers who have both an order in completed status and an order in part status.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_number, customer_name, customer_phone, customer_id, * )\n# contacts ( contact_phone, gender, first_name, contact_id, * )\n# customer_orders ( order_id, order_date, order_status_code, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n#  customer_orders.customer_id = customers.customer_id\n#  customer_address_history.customer_id = customers.customer_id \n#\n### Show the name, phone, and payment method code for all customers in descending order of customer number.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_type_code, product_price, * )\n# order_items ( order_quantity, order_item_id, order_id, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n#  order_items.product_id = products.product_id\n#  order_items.order_id = customer_orders.order_id \n#\n### Show the product name and total order quantity for each product.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_type_code, product_name, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_address_history.address_id = addresses.address_id\n#\n### Show the minimum, maximum, average price for all products.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_id, product_type_code, product_name, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n# contacts ( contact_id, customer_id, first_name, last_name, * )\n#\n### How many products have a price higher than the average?\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_address_history ( customer_id, date_to, address_id, * )\n# customers ( customer_id, customer_address, customer_email, payment_method_code, * )\n# addresses ( city, country, line_1_number_building, zip_postcode, * )\n# contacts ( contact_id, customer_id, first_name, last_name, * )\n#  customer_address_history.customer_id = customers.customer_id\n#  customer_address_history.address_id = addresses.address_id \n#\n### Show the customer name, customer address city, date from, and date to for each customer address history.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_name, customer_number, customer_address, * )\n# customer_orders ( order_id, order_date, order_status_code, * )\n# order_items ( order_item_id, product_id, order_quantity, * )\n# contacts ( gender, contact_id, first_name, last_name, * )\n#  order_items.order_id = customer_orders.order_id\n#  customer_orders.customer_id = customers.customer_id \n#\n### Show the names of customers who use Credit Card payment method and have more than 2 orders.\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_name, customer_phone, customer_number, customer_email, * )\n# customer_orders ( order_id, order_date, order_status_code, * )\n# order_items ( order_id, product_id, order_item_id, * )\n# contacts ( contact_phone, contact_id, first_name, gender, * )\n#  order_items.order_id = customer_orders.order_id\n#  customer_orders.customer_id = customers.customer_id \n#\n### What are the name and phone of the customer with the most ordered product quantity?\nSELECT"
    },
    {
        "db_id": "customers_and_products_contacts",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products ( product_name, product_price, product_id, * )\n# customer_orders ( customer_id, order_date, order_status_code, * )\n# customer_address_history ( address_id, date_from, date_to, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_address_history.address_id = addresses.address_id\n#\n### Show the product type and name for the products with price higher than 1000 or lower than 500.\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# head ( head_id, name, born_state, * )\n# management ( head_id, temporary_acting, * )\n# department ( name, creation, ranking, budget_in_billions, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### How many heads of the departments are older than 56 ?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# head ( name, age, head_id, * )\n# department ( department_id, creation, ranking, budget_in_billions, * )\n# management ( head_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### List the name, born state and age of the heads of departments ordered by age.\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( name, creation, ranking, department_id, * )\n# head ( age, head_id, born_state, * )\n# management ( head_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### List the creation year, name and budget of each department.\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( department_id, name, creation, ranking, * )\n# head ( age, head_id, born_state, * )\n# management ( head_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### What are the maximum and minimum budget of the departments?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( ranking, department_id, name, creation, * )\n# head ( age, head_id, born_state, * )\n# management ( head_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### What is the average number of employees of the departments whose rank is between 10 and 15?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# head ( name, head_id, age, * )\n# department ( name, creation, ranking, budget_in_billions, * )\n# management ( department_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### What are the names of the heads who are born outside the California state?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( creation, name, ranking, budget_in_billions, * )\n# management ( head_id, temporary_acting, * )\n# head ( born_state, name, age, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# head ( name, age, head_id, * )\n# management ( head_id, temporary_acting, * )\n# department ( creation, ranking, department_id, budget_in_billions, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### What are the names of the states where at least 3 heads were born?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( department_id, name, ranking, budget_in_billions, * )\n# head ( age, head_id, born_state, * )\n# management ( head_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### In which year were most departments established?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# management ( department_id, head_id, * )\n# department ( num_employees, name, creation, ranking, * )\n# head ( head_id, age, born_state, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# management ( department_id, head_id, * )\n# head ( age, head_id, born_state, * )\n# department ( creation, ranking, department_id, budget_in_billions, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### How many acting statuses are there?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# management ( department_id, temporary_acting, * )\n# head ( name, age, born_state, * )\n# department ( name, creation, ranking, budget_in_billions, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### How many departments are led by heads who are not mentioned?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# head ( age, name, born_state, * )\n# management ( temporary_acting, department_id, * )\n# department ( creation, ranking, department_id, budget_in_billions, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### What are the distinct ages of the heads who are acting?\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( department_id, creation, ranking, budget_in_billions, * )\n# head ( head_id, name, age, * )\n# management ( head_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( name, creation, ranking, budget_in_billions, * )\n# head ( name, age, born_state, * )\n# management ( head_id, temporary_acting, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### Which department has more than 1 head at a time? List the id, name and the number of heads.\nSELECT"
    },
    {
        "db_id": "department_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# head ( name, age, born_state, * )\n# management ( head_id, temporary_acting, * )\n# department ( creation, ranking, department_id, budget_in_billions, * )\n#  management.department_id = department.department_id\n#  management.head_id = head.head_id \n#\n### Which head's name has the substring 'Ha'? List the id and name.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vehicles ( vehicle_details, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.vehicle_id = vehicles.vehicle_id\n#\n### List all vehicle id\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vehicles ( vehicle_details, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.vehicle_id = vehicles.vehicle_id\n#\n### What are the ids of all vehicles?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vehicles ( vehicle_details, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  staff.staff_address_id = addresses.address_id\n#\n### How many vehicle in total?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vehicles ( vehicle_details, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  staff.staff_address_id = addresses.address_id\n#\n### How many vehicles exist?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vehicles ( vehicle_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.vehicle_id = vehicles.vehicle_id\n#\n### Show the detail of vehicle with id 1.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vehicles ( vehicle_details, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.vehicle_id = vehicles.vehicle_id\n#\n### What are the details of the car with id 1?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( middle_name, last_name, staff_id, staff_address_id, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### List the first name middle name and last name of all staff.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( middle_name, last_name, staff_id, staff_address_id, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What are the first, middle, and last names of all staff?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, date_of_birth, staff_id, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the birthday of the staff member with first name as Janessa and last name as Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( date_of_birth, last_name, staff_id, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the date of birth for the staff member named Janessa Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, date_joined_staff, staff_id, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### When did the staff member with first name as Janessa and last name as Sawayn join the company?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, date_joined_staff, staff_id, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### When did the staff member named Janessa Sawayn join the company?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, date_left_staff, staff_id, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### When did the staff member with first name as Janessa and last name as Sawayn leave the company?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, date_left_staff, staff_id, staff_address_id, * )\n# addresses ( city, country, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### When did the staff member Janessa Sawayn leave the company?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_id, staff_address_id, nickname, middle_name, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many staff have the first name Ludie?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_id, staff_address_id, date_joined_staff, nickname, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many employees have a first name of Ludie?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, nickname, staff_id, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the nickname of staff with first name as Janessa and last name as Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( first_name, last_name, staff_id, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the nickname of the employee named Janessa Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_address_id, date_joined_staff, date_left_staff, nickname, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many staff in total?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_address_id, date_joined_staff, date_left_staff, nickname, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many employees are there?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_address_id, staff_id, nickname, * )\n# addresses ( city, state_province_county, country, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### Which city does staff with first name as Janessa and last name as Sawayn live?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# addresses ( address_id, country, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# customers ( customer_id, customer_status_code, date_became_customer, date_of_birth, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### In what city does Janessa Sawayn live?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_address_id, staff_id, nickname, * )\n# addresses ( state_province_county, country, city, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### Which country and state does staff with first name as Janessa and last name as Sawayn lived?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# addresses ( country, address_id, city, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# customers ( customer_address_id, customer_status_code, date_became_customer, date_of_birth, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### In which country and state does Janessa Sawayn live?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, customer_address_id, customer_status_code, * )\n# lessons ( lesson_time, price, lesson_id, lesson_status_code, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( lesson_time, price, lesson_id, lesson_status_code, * )\n# customers ( first_name, last_name, customer_address_id, customer_status_code, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### How long is the total lesson time took by the customer named Rylan Goodwin?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_address_id, staff_id, date_left_staff, * )\n# addresses ( zip_postcode, state_province_county, city, country, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the zip code of staff with first name as Janessa and last name as Sawayn lived?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_address_id, staff_id, nickname, * )\n# addresses ( address_id, line_1_number_building, city, state_province_county, * )\n# lessons ( vehicle_id, customer_id, price, lesson_id, * )\n# vehicles ( vehicle_details, * )\n#  lessons.vehicle_id = vehicles.vehicle_id\n#  lessons.staff_id = staff.staff_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What is the zip code of the hosue of the employee named Janessa Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( state_province_county, city, country, line_1_number_building, * )\n# staff ( staff_id, date_joined_staff, nickname, first_name, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many staff live in state Georgia?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, city, country, line_1_number_building, * )\n# staff ( staff_id, date_joined_staff, date_left_staff, nickname, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many employees live in Georgia?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_address_id, staff_id, date_joined_staff, * )\n# addresses ( city, state_province_county, country, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### Find out the first name and last name of staff lived in city Damianfort.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_address_id, staff_id, date_joined_staff, * )\n# addresses ( address_id, state_province_county, country, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the first and last name of all employees who live in the city Damianfort?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, state_province_county, country, line_1_number_building, * )\n# staff ( staff_id, date_joined_staff, date_left_staff, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### Which city lives most of staffs? List the city name and number of staffs.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, country, line_1_number_building, zip_postcode, * )\n# staff ( staff_id, date_joined_staff, date_left_staff, nickname, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### In which city do the most employees live and how many of them live there?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, city, country, line_1_number_building, * )\n# staff ( staff_id, date_joined_staff, date_left_staff, nickname, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### List the states which have between 2 to 4 staffs living there.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, city, country, line_1_number_building, * )\n# staff ( staff_id, date_joined_staff, date_left_staff, nickname, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What are the names of the states that have 2 to 4 employees living there?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_id, customer_address_id, date_became_customer, * )\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### List the first name and last name of all customers.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_id, customer_address_id, customer_status_code, * )\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What are the first and last names for all customers?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, email_address, customer_id, customer_address_id, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### List email address and birthday of customer whose first name as Carole.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, email_address, customer_address_id, customer_id, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What are the email addresses and date of births for all customers who have a first name of Carole?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( email_address, phone_number, customer_id, cell_mobile_phone_number, * )\n# customer_payments ( amount_payment, datetime_payment, payment_method_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### List phone number and email address of customer with more than 2000 outstanding balance.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( email_address, phone_number, cell_mobile_phone_number, customer_id, * )\n# customer_payments ( amount_payment, datetime_payment, payment_method_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, email_address, phone_number, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, email_address, phone_number, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( date_of_birth, customer_id, customer_address_id, date_became_customer, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### When are the birthdays of customer who are classified as 'Good Customer' status?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( date_of_birth, customer_id, customer_address_id, date_became_customer, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What is the date of birth of every customer whose status code is 'Good Customer'?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, customer_id, customer_address_id, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### When did customer with first name as Carole and last name as Bernhard became a customer?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, customer_id, customer_address_id, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### When did Carole Bernhard first become a customer?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_address_id, customer_status_code, date_became_customer, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### How many customers in total?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_address_id, customer_status_code, date_became_customer, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### How many customers are there?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_address_id, date_became_customer, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### List all customer status codes and the number of customers having each status code.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_address_id, date_became_customer, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### For each customer status code, how many customers are classified that way?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_address_id, date_became_customer, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### Which customer status code has least number of customers?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_address_id, date_became_customer, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is the status code with the least number of customers?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, customer_address_id, customer_status_code, * )\n# lessons ( lesson_status_code, price, lesson_id, staff_id, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( lesson_status_code, staff_id, price, lesson_id, * )\n# customers ( last_name, first_name, customer_address_id, customer_status_code, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### How many lessons did the customer Ryan Goodwin complete?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_address_id, customer_status_code, date_became_customer, * )\n# customer_payments ( amount_payment, datetime_payment, payment_method_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is maximum, minimum and average amount of outstanding of customer?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_address_id, date_became_customer, customer_status_code, * )\n# customer_payments ( customer_id, payment_method_code, datetime_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is the maximum, minimum, and average amount of money outsanding for all customers?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, amount_outstanding, customer_id, customer_address_id, * )\n# customer_payments ( amount_payment, datetime_payment, payment_method_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### List the first name and last name of customers have the amount of outstanding between 1000 and 3000.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, amount_outstanding, customer_id, customer_address_id, * )\n# customer_payments ( amount_payment, datetime_payment, payment_method_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( first_name, last_name, staff_address_id, nickname, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, customer_id, date_became_customer, * )\n# addresses ( address_id, state_province_county, country, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( staff_address_id, first_name, last_name, nickname, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### List first name and last name of customers lived in city Lockmanfurt.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_address_id, customer_id, date_became_customer, * )\n# addresses ( address_id, state_province_county, country, line_1_number_building, * )\n# staff ( staff_address_id, first_name, last_name, nickname, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What are the first and last names of all customers who lived in Lockmanfurt?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_address_id, customer_id, date_became_customer, * )\n# addresses ( country, state_province_county, city, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### Which country does customer with first name as Carole and last name as Bernhard lived in?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( first_name, last_name, customer_id, date_became_customer, * )\n# addresses ( country, city, state_province_county, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What is the country in which the customer Carole Bernhard lived?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_address_id, customer_id, date_became_customer, * )\n# addresses ( address_id, city, state_province_county, country, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What is zip code of customer with first name as Carole and last name as Bernhard?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_address_id, customer_id, date_became_customer, * )\n# addresses ( address_id, city, country, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is the zip code of the customer Carole Bernhard?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, country, line_1_number_building, zip_postcode, * )\n# customers ( customer_id, date_became_customer, customer_status_code, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### Which city does has most number of customers?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( city, country, line_1_number_building, zip_postcode, * )\n# customers ( customer_id, date_became_customer, customer_status_code, date_of_birth, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is the city with the most customers?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_id, customer_address_id, customer_status_code, * )\n# customer_payments ( amount_payment, datetime_payment, payment_method_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### How much in total does customer with first name as Carole and last name as Bernhard paid?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_payments ( amount_payment, payment_method_code, datetime_payment, * )\n# customers ( first_name, last_name, customer_address_id, amount_outstanding, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### What is the total amount of moeny paid by the customer Carole Bernhard?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# customers ( customer_address_id, customer_status_code, date_became_customer, date_of_birth, * )\n# addresses ( city, country, line_1_number_building, zip_postcode, * )\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### List the number of customers that did not have any payment history.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# customers ( customer_address_id, customer_status_code, date_became_customer, date_of_birth, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### How many customers have no payment histories?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_id, customer_address_id, customer_status_code, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### List first name and last name of customers that have more than 2 payments.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, customer_id, customer_address_id, date_became_customer, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What are the first and last names of all customers with more than 2 payments?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_payments ( customer_id, datetime_payment, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n# customers ( customer_address_id, customer_status_code, date_became_customer, date_of_birth, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### List all payment methods and number of payments using each payment methods.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_payments ( customer_id, datetime_payment, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customers ( customer_address_id, customer_status_code, date_became_customer, date_of_birth, * )\n# lessons ( lesson_id, customer_id, lesson_status_code, staff_id, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### For each payment method, how many payments were made?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( customer_id, price, lesson_id, staff_id, * )\n# addresses ( address_id, city, country, line_1_number_building, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many lessons were in cancelled state?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( customer_id, price, lesson_id, staff_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# staff ( staff_address_id, nickname, first_name, middle_name, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many lessons have been cancelled?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_id, nickname, staff_address_id, * )\n# lessons ( staff_id, customer_id, lesson_date, price, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( nickname, first_name, last_name, staff_address_id, * )\n# lessons ( staff_id, customer_id, price, lesson_status_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n# staff ( staff_id, staff_address_id, nickname, middle_name, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many lessons taught by staff whose first name has letter 'a' in it?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n# staff ( first_name, staff_address_id, nickname, middle_name, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How many lessons were taught by a staff member whose first name has the letter 'a' in it?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# lessons ( lesson_time, customer_id, price, lesson_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( staff_id, customer_id, vehicle_id, price, * )\n# staff ( first_name, last_name, nickname, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the total time for all lessons taught by Janessa Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_id, staff_address_id, nickname, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( staff_id, customer_id, lesson_id, lesson_status_code, * )\n# staff ( first_name, last_name, nickname, staff_address_id, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the average price for a lesson taught by Janessa Sawayn?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n# customers ( first_name, customer_address_id, customer_status_code, date_became_customer, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### How many lesson does customer with first name Ray took?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( price, lesson_id, lesson_status_code, staff_id, * )\n# customers ( first_name, customer_address_id, customer_status_code, date_became_customer, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  lessons.customer_id = customers.customer_id\n#  customer_payments.customer_id = customers.customer_id \n#  customers.customer_address_id = addresses.address_id \n#\n### How many lessons did the customer with the first name Ray take?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_address_id, date_became_customer, customer_status_code, * )\n# staff ( staff_id, date_joined_staff, staff_address_id, date_left_staff, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### Which last names are both used by customers and by staff?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_id, staff_address_id, date_joined_staff, date_left_staff, * )\n# customers ( customer_id, customer_address_id, customer_status_code, date_became_customer, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  customer_payments.customer_id = customers.customer_id\n#  customers.customer_address_id = addresses.address_id \n#  staff.staff_address_id = addresses.address_id \n#\n### What are the last names that are used by customers and staff?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( staff_id, staff_address_id, date_left_staff, date_joined_staff, * )\n# lessons ( price, lesson_id, customer_id, lesson_status_code, * )\n# addresses ( city, country, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the first name of the staff who did not give any lesson?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( customer_id, price, lesson_id, lesson_status_code, * )\n# staff ( staff_id, staff_address_id, date_joined_staff, date_left_staff, * )\n# addresses ( city, country, line_1_number_building, zip_postcode, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n#  lessons.staff_id = staff.staff_id\n#  staff.staff_address_id = addresses.address_id \n#\n### What is the first name of all employees who do not give any lessons?\nSELECT"
    },
    {
        "db_id": "driving_school",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lessons ( lesson_time, lesson_date, price, lesson_id, * )\n# vehicles ( vehicle_details, * )\n# customer_payments ( datetime_payment, payment_method_code, amount_payment, * )\n# addresses ( country, address_id, line_1_number_building, zip_postcode, * )\n#  lessons.vehicle_id = vehicles.vehicle_id\n#\n### What is the id and detail of the vehicle used in lessons for most of the times?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( name, age, city, * )\n# hiring ( shop_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( bonus, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### How many employees are there?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( name, age, city, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( bonus, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Count the number of employees\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( age, employee_id, city, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Sort employee names by their age in ascending order.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( age, city, employee_id, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### List the names of employees and sort in ascending order of age.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( name, age, employee_id, * )\n# hiring ( shop_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### What is the number of employees from each city?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( employee_id, name, age, * )\n# hiring ( shop_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Count the number of employees for each city.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( city, name, employee_id, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Which cities do more than one employee under age 30 come from?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# employee ( city, employee_id, name, * )\n# hiring ( shop_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( bonus, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the cities that have more than one employee under age 30.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, district, shop_id, number_products, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the number of shops in each location.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, district, shop_id, number_products, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### How many shops are there in each location?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( manager_name, district, name, location, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the manager name and district of the shop whose number of products is the largest.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( manager_name, district, shop_id, name, * )\n# employee ( name, age, city, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### What are the manager name and district of the shop that sells the largest number of products?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( shop_id, name, location, district, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### find the minimum and maximum number of products of all stores.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( shop_id, name, location, district, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### What are the minimum and maximum number of products across all the shops?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, location, district, shop_id, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Return the name, location and district of all shops in descending order of number of products.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, location, district, shop_id, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Sort all the shops by number products in descending order, and return the name, location and district of each shop.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, shop_id, location, district, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the names of stores whose number products is more than the average number of products.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, shop_id, location, district, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Which shops' number products is above the average? Give me the shop names.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( year_awarded, bonus, * )\n# employee ( name, age, city, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### find the name of employee who was awarded the most times in the evaluation.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( year_awarded, bonus, * )\n# employee ( name, age, city, * )\n# hiring ( shop_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Which employee received the most awards in evaluations? Give me the employee name.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( bonus, year_awarded, * )\n# employee ( name, age, city, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the name of the employee who got the highest one time bonus.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( bonus, year_awarded, * )\n# employee ( name, age, city, * )\n# hiring ( shop_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Which employee received the biggest bonus? Give me the employee name.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( year_awarded, bonus, * )\n# employee ( name, age, city, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the names of employees who never won any award in the evaluation.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( bonus, year_awarded, * )\n# employee ( name, age, city, * )\n# hiring ( shop_id, start_from, is_full_time, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### What are the names of the employees who never received any evaluation?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( name, location, district, number_products, * )\n# employee ( name, age, city, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### What is the name of the shop that is hiring the largest number of employees?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, location, district, number_products, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( name, age, city, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Which shop has the most employees? Give me the shop name.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hiring ( employee_id, start_from, is_full_time, * )\n# shop ( name, location, district, number_products, * )\n# employee ( name, age, city, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the name of the shops that do not hire any employee.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, location, district, number_products, * )\n# hiring ( start_from, employee_id, is_full_time, * )\n# employee ( employee_id, age, city, * )\n# evaluation ( bonus, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Which shops run with no employees? Find the shop names\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, location, district, number_products, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( name, age, city, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the number of employees hired in each shop; show the shop name as well.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, location, district, number_products, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( city, name, age, * )\n# evaluation ( bonus, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### For each shop, return the number of employees working there and the name of the shop.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( employee_id, year_awarded, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### What is total bonus given in all evaluations?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# evaluation ( employee_id, year_awarded, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# shop ( location, district, shop_id, number_products, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the total amount of bonus given in all the evaluations.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Give me all the information about hiring.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# shop ( location, district, shop_id, number_products, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### What is all the information about hiring?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( number_products, shop_id, name, location, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Which district has both stores with less than 3000 products and stores with more than 10000 products?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( number_products, shop_id, name, location, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, district, shop_id, number_products, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### How many different store locations are there?\nSELECT"
    },
    {
        "db_id": "employee_hire_evaluation",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# shop ( name, district, shop_id, number_products, * )\n# hiring ( employee_id, start_from, is_full_time, * )\n# employee ( age, city, employee_id, * )\n# evaluation ( employee_id, year_awarded, * )\n#  evaluation.employee_id = employee.employee_id\n#  hiring.shop_id = shop.shop_id \n#  hiring.employee_id = employee.employee_id \n#\n### Count the number of distinct store locations.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( country, abbreviation, uid, * )\n# airports ( country, countryabbrev, airportcode, airportname, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which country does Airline \"JetBlue Airways\" belong to?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( country, abbreviation, uid, * )\n# airports ( country, countryabbrev, airportcode, airportname, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What country is Jetblue Airways affiliated with?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( abbreviation, country, uid, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What is the abbreviation of Airline \"JetBlue Airways\"?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( abbreviation, country, uid, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which abbreviation corresponds to Jetblue Airways?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( abbreviation, country, uid, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### List all airline names and their abbreviations in \"USA\".\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( abbreviation, country, uid, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are the airline names and abbreviations for airlines in the USA?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### List the airport code and name in the city of Anthony.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the airport code and airport name corresonding to the city Anthony.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( country, uid, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many airlines do we have?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( airline, uid, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What is the total number of airlines?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( city, airportcode, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many airports do we have?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( city, airportcode, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Return the number of  airports.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights do we have?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Return the number of flights.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( airline, country, uid, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airline has abbreviation 'UAL'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( abbreviation, country, uid, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the airline with abbreviation 'UAL'.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( airline, uid, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many airlines are from USA?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( uid, airline, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Return the number of airlines in the USA.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportname, country, airportcode, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which city and country is the Alton airport at?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( country, airportname, airportcode, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the city and country for the Alton airport.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, country, city, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What is the airport name for airport 'AKO'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, city, country, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Return the name of the airport with code 'AKO'.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportname, country, airportcode, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are airport names at City 'Aberdeen'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportname, country, airportcode, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n# flights ( flightno, sourceairport, destairport, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are the names of airports in Aberdeen?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights depart from 'APG'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Count the number of flights departing from 'APG'.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, airline, flightno, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights have destination ATO?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( city, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Count the number of flights into ATO.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights depart from City Aberdeen?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, flightno, airline, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Return the number of flights departing from Aberdeen.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights arriving in Aberdeen city?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Return the number of flights arriving in Aberdeen.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, flightno, airline, * )\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights fly from Aberdeen to Ashley?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( abbreviation, uid, country, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights does airline 'JetBlue Airways' have?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airlines ( uid, abbreviation, country, * )\n# flights ( flightno, sourceairport, destairport, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the number of Jetblue Airways flights.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( airline, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, city, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many 'United Airlines' flights go to Airport 'ASY'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( airline, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, city, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Count the number of United Airlines flights arriving in ASY Airport.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( airline, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many 'United Airlines' flights depart from Airport 'AHD'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( airline, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, city, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Return the number of United Airlines flights leaving from AHD Airport.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many United Airlines flights go to City 'Aberdeen'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( airline, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Count the number of United Airlines flights that arrive in Aberdeen.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# flights ( destairport, airline, flightno, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which city has most number of arriving flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# flights ( sourceairport, airline, flightno, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which city has the most frequent destination airport?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which city has most number of departing flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which city is the most frequent source airport?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( country, city, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What is the code of airport that has the highest number of flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( country, city, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What is the airport code of the airport with the most flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( country, city, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What is the code of airport that has fewest number of flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( city, airportname, country, countryabbrev, * )\n# flights ( destairport, airline, flightno, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the code of the airport with the least flights.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airline has most number of flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What airline serves the most flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( country, airline, uid, * )\n# airports ( city, country, airportcode, airportname, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Find the abbreviation and country of the airline that has fewest number of flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, flightno, sourceairport, * )\n# airlines ( country, uid, airline, * )\n# airports ( countryabbrev, city, airportcode, airportname, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What is the abbreviation of the airilne has the fewest flights and what country is it in?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are airlines that have some flight departing from airport 'AHD'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airlines have a flight with source airport AHD?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are airlines that have flights arriving at airport 'AHD'?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, sourceairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airlines have a flight with destination airport AHD?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Find all airlines that have flights from both airports 'APG' and 'CVO'.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airlines have departing flights from both APG and CVO airports?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Find all airlines that have flights from airport 'CVO' but not from 'APG'.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, flightno, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( city, country, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airlines have departures from CVO but not from APG airports?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Find all airlines that have at least 10 flights.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airlines have at least 10 flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Find all airlines that have fewer than 200 flights.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( flightno, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airlines have less than 200 flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( airline, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are flight numbers of Airline \"United Airlines\"?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( airline, sourceairport, destairport, * )\n# airlines ( uid, country, abbreviation, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which flight numbers correspond to United Airlines flights?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are flight numbers of flights departing from Airport \"APG\"?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( country, airportcode, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the flight numbers of flights leaving from APG.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( country, city, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are flight numbers of flights arriving at Airport \"APG\"?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the flight numbers of flights landing at APG.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are flight numbers of flights departing from City \"Aberdeen \"?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the flight numbers of flights leaving from Aberdeen.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### What are flight numbers of flights arriving at City \"Aberdeen\"?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( sourceairport, destairport, airline, * )\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Give the flight numbers of flights arriving in Aberdeen.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, country, airportname, countryabbrev, * )\n# flights ( destairport, flightno, airline, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Find the number of flights landing in the city of Aberdeen or Abilene.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportcode, airportname, country, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### How many flights land in Aberdeen or Abilene?\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airports ( airportcode, country, city, countryabbrev, * )\n# flights ( destairport, airline, flightno, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Find the name of airports which do not have any flight in and out.\nSELECT"
    },
    {
        "db_id": "flight_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flights ( destairport, airline, flightno, * )\n# airports ( airportname, country, city, countryabbrev, * )\n# airlines ( uid, airline, abbreviation, * )\n#  flights.sourceairport = airports.airportcode\n#  flights.destairport = airports.airportcode \n#\n### Which airports do not have departing or arriving flights?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# game ( id, stadium_id, date, score, * )\n# injury_accident ( player, injury, source, game_id, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### How many games are held after season 2007?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# game ( date, stadium_id, id, season, * )\n# injury_accident ( player, injury, source, game_id, * )\n# stadium ( name, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### List the dates of games by the home team name in descending order.\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# game ( away_team, season, id, date, * )\n# injury_accident ( player, injury, source, game_id, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### List the season, home team, away team of all the games.\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( id, name, average_attendance, total_attendance, * )\n# game ( id, home_team, season, date, * )\n# injury_accident ( player, injury, source, game_id, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### What are the maximum, minimum and average home games each stadium held?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( capacity_percentage, name, id, home_games, * )\n# injury_accident ( player, injury, source, game_id, * )\n# game ( date, score, competition, stadium_id, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### What is the average attendance of stadiums with capacity percentage higher than 100%?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( number_of_matches, player, source, game_id, * )\n# game ( date, score, competition, stadium_id, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( game_id, injury, id, source, * )\n# game ( season, stadium_id, date, score, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### What is the season of the game which causes the player 'Walter Samuel' to get injured?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( injury, id, player, source, * )\n# game ( score, date, stadium_id, season, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### What are the ids, scores, and dates of the games which caused at least two injury accidents?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, home_games, average_attendance, total_attendance, * )\n# injury_accident ( game_id, id, player, source, * )\n# game ( id, season, date, score, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### What are the id and name of the stadium where the most injury accidents happened?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, home_games, average_attendance, total_attendance, * )\n# injury_accident ( game_id, id, player, source, * )\n# game ( id, season, date, home_team, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### Find the id and name of the stadium where the largest number of injury accidents occurred.\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( player, game_id, id, source, * )\n# game ( stadium_id, id, date, score, * )\n# stadium ( name, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( id, player, injury, game_id, * )\n# game ( date, score, competition, stadium_id, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### How many different kinds of information sources are there for injury accidents?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( injury, id, player, source, * )\n# game ( stadium_id, season, date, score, * )\n# stadium ( name, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### How many games are free of injury accidents?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( game_id, id, player, source, * )\n# game ( season, stadium_id, date, score, * )\n# stadium ( name, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### How many distinct kinds of injuries happened after season 2010?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# injury_accident ( injury, game_id, id, source, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n# game ( id, season, date, score, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( total_attendance, name, id, home_games, * )\n# injury_accident ( id, player, injury, source, * )\n# game ( id, season, date, score, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### Show the name, average attendance, total attendance for stadiums where no accidents happened.\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n# injury_accident ( player, injury, source, game_id, * )\n# game ( date, score, competition, stadium_id, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### Which stadium name contains the substring \"Bank\"?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# game ( id, season, date, score, * )\n# stadium ( name, home_games, average_attendance, total_attendance, * )\n# injury_accident ( player, injury, source, game_id, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### How many games has each stadium held?\nSELECT"
    },
    {
        "db_id": "game_injury",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# game ( date, id, stadium_id, score, * )\n# injury_accident ( injury, game_id, id, source, * )\n# stadium ( id, home_games, average_attendance, total_attendance, * )\n#  injury_accident.game_id = game.id\n#  game.stadium_id = stadium.id \n#\n### For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, mid, title_aka, budget, * )\n# genre ( gid, * )\n# classification ( msid, gid, * )\n# writer ( gender, name, birth_year, nationality, * )\n#  classification.gid = genre.gid\n#\n### What year is the movie \" The Imitation Game \" from ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, mid, title_aka, budget, * )\n# genre ( gid, * )\n# producer ( birth_year, name, gender, nationality, * )\n# made_by ( msid, pid, * )\n#  made_by.pid = producer.pid\n#\n### What year was the movie \" The Imitation Game \" produced\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, aid, birth_city, gender, * )\n# writer ( birth_year, wid, birth_city, gender, * )\n# director ( name, birth_city, did, gender, * )\n# producer ( birth_year, pid, birth_city, gender, * )\n#\n### What year was \" Benedict Cumberbatch \" born ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# writer ( birth_year, wid, birth_city, gender, * )\n# actor ( birth_year, aid, birth_city, gender, * )\n# director ( name, birth_city, did, gender, * )\n# producer ( pid, birth_year, birth_city, gender, * )\n#\n### In what year was \" Benedict Cumberbatch \" born\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, aid, gender, birth_city, * )\n# cast ( id, aid, msid, * )\n# writer ( nationality, wid, gender, num_of_episodes, * )\n# made_by ( msid, pid, * )\n#  cast.aid = actor.aid\n#\n### What is the nationality of the actress \" Christoph Waltz \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, aid, gender, birth_city, * )\n# writer ( nationality, wid, gender, num_of_episodes, * )\n# cast ( msid, aid, role, * )\n# director ( nationality, did, gender, birth_year, * )\n#  cast.aid = actor.aid\n#\n### What is the nationality of the actor \" Christoph Waltz \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, mid, title_aka, budget, * )\n# made_by ( id, msid, * )\n# writer ( name, wid, nationality, num_of_episodes, * )\n# producer ( gender, name, nationality, birth_city, * )\n#  made_by.pid = producer.pid\n#\n### Find all movies produced in 2015\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_year, aid, gender, * )\n# writer ( birth_year, wid, gender, name, * )\n# classification ( msid, gid, * )\n# made_by ( msid, pid, * )\n#\n### Find all actors born in \" Tehran \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_year, aid, gender, * )\n# writer ( birth_year, wid, gender, name, * )\n# made_by ( id, msid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### Find all actors born in Tehran\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_year, aid, gender, * )\n# writer ( birth_year, wid, gender, name, * )\n# made_by ( id, msid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### Which actors were born in Tehran\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, aid, birth_city, gender, * )\n# classification ( gid, msid, * )\n# company ( id, name, * )\n# writer ( wid, gender, name, birth_city, * )\n#\n### Find all actors who are from Afghanistan\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, aid, birth_city, gender, * )\n# company ( id, name, * )\n# classification ( msid, gid, * )\n# made_by ( id, msid, * )\n#\n### Find all actors from Afghanistan\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( nationality, aid, gender, birth_city, * )\n# company ( id, name, * )\n# classification ( msid, gid, * )\n# made_by ( id, msid, * )\n#\n### Give me the name of all the actors from Afghanistan\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_city, aid, gender, * )\n# writer ( birth_city, wid, gender, name, * )\n# made_by ( msid, pid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### Find all actors who were born in 1984\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, birth_city, aid, gender, * )\n# writer ( birth_year, birth_city, wid, gender, * )\n# made_by ( msid, pid, * )\n# director ( name, birth_city, did, gender, * )\n#\n### When was \" Kevin Spacey \" born ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, aid, birth_city, gender, * )\n# writer ( birth_year, birth_city, wid, gender, * )\n# made_by ( id, msid, * )\n# director ( name, birth_city, did, gender, * )\n#\n### In what year was \" Kevin Spacey \" born ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_city, birth_year, aid, gender, * )\n# writer ( name, birth_year, wid, gender, * )\n# director ( birth_city, birth_year, did, gender, * )\n# cast ( aid, msid, role, * )\n#  cast.aid = actor.aid\n#\n### Where is the birth place of \" Kevin Spacey \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_year, aid, gender, * )\n# writer ( birth_city, birth_year, wid, gender, * )\n# director ( birth_city, birth_year, did, gender, * )\n# made_by ( id, msid, * )\n#\n### In what city was \" Kevin Spacey \" born ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, aid, gender, birth_city, * )\n# writer ( nationality, wid, gender, num_of_episodes, * )\n# director ( nationality, did, birth_year, gender, * )\n# producer ( nationality, pid, gender, birth_year, * )\n#\n### What is the nationality of \" Kevin Spacey \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, title_aka, mid, release_year, * )\n# tv_series ( budget, title_aka, num_of_episodes, sid, * )\n# writer ( gender, name, num_of_episodes, nationality, * )\n# genre ( gid, * )\n#\n### How much was the budget of \" Finding Nemo \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# directed_by ( id, did, * )\n# director ( did, birth_year, gender, nationality, * )\n# movie ( release_year, mid, title_aka, budget, * )\n# made_by ( pid, id, * )\n#  directed_by.did = director.did\n#\n### Find all movies directed by \" Steven Spielberg \" after 2006\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( did, gender, nationality, birth_year, * )\n# directed_by ( msid, did, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( msid, pid, * )\n#  directed_by.did = director.did\n#\n### Who is the director of the movie \" James Bond \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( did, gender, nationality, birth_year, * )\n# directed_by ( did, msid, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( pid, msid, * )\n#  directed_by.did = director.did\n#\n### Who directed the movie \" James Bond \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( did, birth_year, gender, nationality, * )\n# directed_by ( id, did, * )\n# writer ( gender, name, nationality, num_of_episodes, * )\n# made_by ( pid, msid, * )\n#  directed_by.did = director.did\n#\n### List \" James Bond \" directors\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, nationality, birth_city, * )\n# cast ( role, msid, id, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( msid, id, * )\n#  cast.aid = actor.aid\n#\n### Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, nationality, birth_city, * )\n# movie ( mid, title_aka, release_year, budget, * )\n# cast ( aid, role, id, * )\n# made_by ( pid, id, * )\n#  cast.aid = actor.aid\n#\n### Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, nationality, birth_city, * )\n# cast ( role, msid, id, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( msid, pid, * )\n#  cast.aid = actor.aid\n#\n### Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, nationality, birth_city, * )\n# cast ( msid, role, id, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( msid, id, * )\n#  cast.aid = actor.aid\n#\n### Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, nationality, birth_city, * )\n# cast ( role, msid, id, * )\n# made_by ( msid, pid, * )\n# classification ( msid, gid, * )\n#  cast.aid = actor.aid\n#\n### Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# genre ( gid, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# classification ( id, msid, * )\n# writer ( name, wid, nationality, num_of_episodes, * )\n#  classification.gid = genre.gid\n#\n### What is the genre of the movie \" Jurassic Park \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( did, birth_year, gender, nationality, * )\n# directed_by ( did, id, * )\n# movie ( title, mid, title_aka, budget, * )\n# made_by ( pid, msid, * )\n#  directed_by.did = director.did\n#\n### Who was the director of the movie Joy from 2015 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# writer ( name, gender, nationality, num_of_episodes, * )\n# written_by ( msid, id, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( msid, id, * )\n#  written_by.wid = writer.wid\n#\n### Find all movies written by \" Matt Damon \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# producer ( name, gender, nationality, birth_city, * )\n# writer ( name, gender, nationality, num_of_episodes, * )\n# made_by ( msid, id, * )\n# written_by ( msid, id, * )\n#  written_by.wid = writer.wid\n#  made_by.pid = producer.pid \n#\n### Find all movies written and produced by \" Woody Allen \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, title_aka, budget, * )\n# actor ( name, gender, nationality, birth_year, * )\n# made_by ( pid, id, * )\n# cast ( msid, id, role, * )\n#  cast.aid = actor.aid\n#\n### Find all movies featuring \" Robin Wright \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, title_aka, budget, * )\n# actor ( name, gender, nationality, birth_city, * )\n# made_by ( pid, id, * )\n# cast ( msid, id, role, * )\n#  cast.aid = actor.aid\n#\n### What are all the movies featuring \" Robin Wright \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, title_aka, budget, * )\n# actor ( aid, gender, nationality, birth_city, * )\n# cast ( msid, id, role, * )\n# made_by ( msid, id, * )\n#  cast.aid = actor.aid\n#\n### Find all movies in which \" Robin Wright \" appears\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( budget, title, mid, title_aka, * )\n# tv_series ( budget, release_year, sid, num_of_seasons, * )\n# writer ( gender, name, nationality, num_of_episodes, * )\n# made_by ( msid, pid, * )\n#\n### What was the budget of the movie Juno from 2007 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, title_aka, mid, budget, * )\n# genre ( gid, * )\n# classification ( gid, id, * )\n# made_by ( id, msid, * )\n#  classification.gid = genre.gid\n#\n### Find all Sci-Fi produced in year 2010\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, mid, title_aka, budget, * )\n# genre ( genre, * )\n# classification ( gid, id, * )\n# writer ( name, wid, nationality, num_of_episodes, * )\n#  classification.gid = genre.gid\n#\n### List all the Sci-Fi movies which released in 2010\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_city, name, aid, gender, * )\n# writer ( birth_year, wid, gender, name, * )\n# made_by ( id, msid, * )\n# classification ( msid, gid, * )\n#\n### Find all actors born in \" Austin \" after 1980\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_city, name, aid, gender, * )\n# writer ( birth_year, wid, gender, name, * )\n# made_by ( msid, pid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### Who are the actors born in \" Austin \" after 1980 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_city, name, aid, gender, * )\n# writer ( birth_year, wid, gender, name, * )\n# made_by ( msid, pid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### Find all actors from Austin born after 1980\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( birth_year, did, name, gender, * )\n# directed_by ( id, did, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( msid, pid, * )\n#  directed_by.did = director.did\n#\n### Find all movies by directors born in \" Los Angeles \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, name, aid, gender, * )\n# made_by ( msid, pid, * )\n# writer ( birth_year, wid, gender, name, * )\n# producer ( birth_city, gender, name, birth_year, * )\n#  made_by.pid = producer.pid\n#\n### Find all actors who were born in \" New York City \" in 1984\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title_aka, release_year, mid, budget, * )\n# classification ( msid, gid, * )\n# genre ( genre, * )\n# writer ( name, wid, nationality, num_of_episodes, * )\n#  classification.gid = genre.gid\n#\n### Find all movies about nuclear weapons\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, title_aka, budget, * )\n# classification ( gid, id, * )\n# genre ( genre, * )\n# copyright ( msid, cid, * )\n#  classification.gid = genre.gid\n#  classification.msid = copyright.msid \n#\n### What are the movies related to nuclear weapons\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( name, gender, nationality, birth_city, * )\n# directed_by ( id, msid, * )\n# movie ( mid, title_aka, release_year, budget, * )\n# made_by ( id, msid, * )\n#  directed_by.did = director.did\n#\n### Which movies did \" Alfred Hitchcock \" direct ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# directed_by ( msid, id, * )\n# director ( name, gender, birth_year, nationality, * )\n# movie ( mid, title_aka, release_year, budget, * )\n# made_by ( pid, id, * )\n#  directed_by.did = director.did\n#\n### Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# directed_by ( msid, id, * )\n# director ( name, gender, birth_year, nationality, * )\n# movie ( title_aka, mid, release_year, budget, * )\n# made_by ( msid, pid, * )\n#  directed_by.did = director.did\n#\n### What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# directed_by ( msid, id, * )\n# director ( name, gender, nationality, birth_year, * )\n# cast ( msid, aid, role, * )\n# movie ( mid, budget, release_year, title_aka, * )\n#  directed_by.did = director.did\n#\n### How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# directed_by ( msid, id, * )\n# director ( name, gender, birth_year, nationality, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# cast ( aid, role, id, * )\n#  directed_by.did = director.did\n#\n### List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tv_series ( sid, num_of_seasons, title_aka, budget, * )\n# writer ( wid, gender, nationality, num_of_episodes, * )\n# made_by ( msid, id, * )\n# written_by ( wid, id, * )\n#  written_by.wid = writer.wid\n#\n### What are all the tv series created by \" Shonda Rhimes \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, birth_year, nationality, * )\n# cast ( role, msid, id, * )\n# tv_series ( sid, release_year, num_of_seasons, num_of_episodes, * )\n# made_by ( msid, pid, * )\n#  cast.aid = actor.aid\n#\n### Who acts \" Olivia Pope \" in the series Scandal ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# writer ( wid, gender, nationality, num_of_episodes, * )\n# movie ( release_year, mid, title_aka, budget, * )\n# written_by ( msid, id, * )\n# made_by ( msid, pid, * )\n#  written_by.wid = writer.wid\n#\n### Who is the writer of the movie \" The Truman Show \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# writer ( wid, gender, num_of_episodes, nationality, * )\n# written_by ( msid, id, * )\n# made_by ( pid, msid, * )\n# directed_by ( msid, did, * )\n#  written_by.wid = writer.wid\n#\n### Who is the writer of \" The Truman Show \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, nationality, birth_city, * )\n# tv_series ( sid, title_aka, release_year, num_of_seasons, * )\n# cast ( msid, id, role, * )\n# made_by ( pid, id, * )\n#  cast.aid = actor.aid\n#\n### What are the series featuring \" Scott Foley \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, nationality, birth_city, * )\n# tv_series ( sid, num_of_seasons, release_year, num_of_episodes, * )\n# cast ( aid, msid, role, * )\n# made_by ( msid, pid, * )\n#  cast.aid = actor.aid\n#\n### What are the series in which \" Scott Foley \" is an actor ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( did, gender, birth_year, nationality, * )\n# directed_by ( id, did, * )\n# cast ( aid, id, role, * )\n# actor ( name, gender, nationality, birth_city, * )\n#  directed_by.did = director.did\n#  cast.aid = actor.aid \n#\n### Find the directors of all movies featuring \" Kate Winslet \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# producer ( pid, gender, birth_year, nationality, * )\n# actor ( aid, gender, nationality, birth_city, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n#  made_by.pid = producer.pid\n#  cast.aid = actor.aid \n#\n### Find the producers of all movies in which \" Kate Winslet \" is an actor\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( did, birth_year, gender, nationality, * )\n# tv_series ( title, sid, num_of_seasons, title_aka, * )\n# directed_by ( did, id, * )\n# movie ( release_year, mid, title_aka, budget, * )\n#  directed_by.did = director.did\n#\n### Who is the director of the tv series \" House of Cards \" from 2013 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_city, aid, nationality, * )\n# cast ( aid, msid, role, * )\n# writer ( wid, name, birth_city, nationality, * )\n# made_by ( id, msid, * )\n#  cast.aid = actor.aid\n#\n### Find all the female actors from Austin\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, name, birth_city, aid, * )\n# writer ( nationality, birth_city, wid, gender, * )\n# made_by ( msid, pid, * )\n# company ( id, name, * )\n#\n### Find all actors from Italy born after 1980\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, gender, name, aid, * )\n# writer ( birth_year, birth_city, wid, name, * )\n# made_by ( msid, pid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### Find all the female actors born in \" New York City \" after 1980\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, aid, nationality, birth_city, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( pid, msid, * )\n# cast ( aid, msid, role, * )\n#  cast.aid = actor.aid\n#\n### Find all the female actors in the movie \" Saving Private Ryan \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( name, did, gender, birth_city, * )\n# directed_by ( msid, did, * )\n# writer ( nationality, gender, name, num_of_episodes, * )\n# classification ( msid, gid, * )\n#  directed_by.did = director.did\n#\n### Find all the directors who are from Afghanistan\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, nationality, birth_city, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# cast ( msid, id, role, * )\n# made_by ( msid, id, * )\n#  cast.aid = actor.aid\n#\n### Find the actors who played in the movie \" Camp X-Ray \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, aid, gender, birth_city, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n#  cast.aid = actor.aid\n#\n### Find all actors from Canada who acted in \" James Bond \" movies\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, nationality, birth_city, * )\n# movie ( mid, release_year, title_aka, budget, * )\n# cast ( msid, role, id, * )\n# made_by ( msid, id, * )\n#  cast.aid = actor.aid\n#\n### find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# directed_by ( did, id, * )\n# director ( name, nationality, birth_city, birth_year, * )\n# made_by ( pid, msid, * )\n# writer ( gender, name, birth_city, nationality, * )\n#  directed_by.did = director.did\n#\n### where is the director of \" The Past \" from\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cast ( role, msid, id, * )\n# actor ( name, gender, nationality, birth_city, * )\n# made_by ( pid, msid, * )\n# writer ( gender, name, nationality, num_of_episodes, * )\n#  cast.aid = actor.aid\n#\n### who acted the role of \" Mr. Bean \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( name, gender, nationality, birth_year, * )\n# genre ( gid, * )\n# directed_by ( did, id, * )\n# made_by ( msid, pid, * )\n#  directed_by.did = director.did\n#\n### what are the genres of movies directed by \" Asghar Farhadi \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( release_year, mid, title_aka, budget, * )\n# made_by ( pid, msid, * )\n# cast ( aid, role, msid, * )\n# writer ( gender, name, nationality, num_of_episodes, * )\n#\n### Which movie had the character \" Daffy Duck \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( budget, mid, release_year, title_aka, * )\n# cast ( aid, msid, id, * )\n# made_by ( msid, pid, * )\n# writer ( gender, name, nationality, num_of_episodes, * )\n#\n### What are the major roles in the movie \" Daddy Long Legs \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( did, gender, nationality, birth_city, * )\n# directed_by ( msid, did, * )\n# classification ( gid, id, * )\n# made_by ( id, msid, * )\n#  directed_by.did = director.did\n#\n### List all the directors of movies about nuclear weapons\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_year, gender, birth_city, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n# movie ( mid, title, budget, title_aka, * )\n#  cast.aid = actor.aid\n#\n### What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title_aka, mid, release_year, budget, * )\n# actor ( gender, name, nationality, birth_city, * )\n# made_by ( pid, msid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### What is the number of actors in the movie \" Saving Private Ryan \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, title_aka, budget, * )\n# actor ( gender, name, nationality, birth_city, * )\n# made_by ( pid, msid, * )\n# cast ( msid, aid, role, * )\n#  cast.aid = actor.aid\n#\n### How many actors are in the movie \" Saving Private Ryan \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( name, gender, nationality, birth_city, * )\n# directed_by ( did, id, * )\n# made_by ( pid, msid, * )\n# writer ( wid, gender, nationality, num_of_episodes, * )\n#  directed_by.did = director.did\n#\n### How many movies did \" Steven Spielberg \" direct ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, title, budget, title_aka, * )\n# producer ( gender, name, birth_year, nationality, * )\n# writer ( name, wid, nationality, num_of_episodes, * )\n# made_by ( msid, pid, * )\n#  made_by.pid = producer.pid\n#\n### How many movies were produced in the year 2013 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, title, budget, title_aka, * )\n# producer ( gender, name, nationality, birth_city, * )\n# made_by ( msid, pid, * )\n# writer ( name, wid, nationality, num_of_episodes, * )\n#  made_by.pid = producer.pid\n#\n### What is the number of movies produced in 2013 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( name, birth_year, gender, nationality, * )\n# directed_by ( did, id, * )\n# made_by ( id, pid, * )\n# writer ( wid, gender, nationality, num_of_episodes, * )\n#  directed_by.did = director.did\n#\n### What is the number of movies directed by \" Woody Allen \" per year ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, birth_year, nationality, * )\n# made_by ( msid, id, * )\n# cast ( msid, id, role, * )\n# directed_by ( msid, did, * )\n#  cast.aid = actor.aid\n#\n### How many movies did \" Shahab Hosseini \" act in ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, birth_city, birth_year, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n# directed_by ( msid, did, * )\n#  cast.aid = actor.aid\n#\n### What is the number of movies in which \" Shahab Hosseini \" acted ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, birth_year, nationality, * )\n# made_by ( msid, id, * )\n# directed_by ( did, id, * )\n# cast ( aid, id, role, * )\n#  cast.aid = actor.aid\n#\n### What is the number of movies featuring \" Shahab Hosseini \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, nationality, birth_city, * )\n# made_by ( msid, id, * )\n# cast ( msid, id, role, * )\n# directed_by ( did, id, * )\n#  cast.aid = actor.aid\n#\n### How many movies did \" Shahab Hosseini \" act in\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, aid, gender, name, * )\n# writer ( birth_year, wid, gender, name, * )\n# made_by ( msid, pid, * )\n# producer ( birth_city, gender, name, birth_year, * )\n#  made_by.pid = producer.pid\n#\n### How many actors were born in \" Los Angeles \" after 2000 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_year, gender, birth_city, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n# directed_by ( did, id, * )\n#  cast.aid = actor.aid\n#\n### How many movies did \" Humphrey Bogart \" act in before 1942 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, birth_year, gender, nationality, * )\n# made_by ( msid, id, * )\n# directed_by ( id, did, * )\n# cast ( aid, id, role, * )\n#  cast.aid = actor.aid\n#\n### What is the number of movies that \" Brad Pitt \" acts in per year ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, mid, budget, title_aka, * )\n# classification ( gid, id, * )\n# made_by ( id, msid, * )\n# genre ( genre, * )\n#  classification.gid = genre.gid\n#\n### How many movies about Iraq war were produced in 2015 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, mid, budget, title_aka, * )\n# classification ( gid, id, * )\n# genre ( gid, * )\n# made_by ( id, msid, * )\n#  classification.gid = genre.gid\n#\n### How many movies about Persians were released after 1990 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( name, birth_year, gender, nationality, * )\n# directed_by ( msid, id, * )\n# made_by ( msid, id, * )\n# actor ( name, birth_year, gender, nationality, * )\n#  directed_by.did = director.did\n#\n### How many movies did \" Quentin Tarantino \" direct after 2010 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# director ( name, birth_year, gender, nationality, * )\n# directed_by ( msid, id, * )\n# made_by ( msid, id, * )\n# actor ( name, birth_year, gender, nationality, * )\n#  directed_by.did = director.did\n#\n### How many movies did \" Quentin Tarantino \" direct before 2010 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# directed_by ( msid, id, * )\n# director ( name, birth_year, birth_city, gender, * )\n# made_by ( msid, id, * )\n# actor ( aid, birth_year, gender, nationality, * )\n#  directed_by.did = director.did\n#\n### How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( birth_year, gender, aid, name, * )\n# writer ( birth_year, gender, wid, name, * )\n# producer ( gender, birth_city, birth_year, name, * )\n# made_by ( pid, msid, * )\n#  made_by.pid = producer.pid\n#\n### How many female actors were born in \" New York City \" after 1980 ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, name, gender, birth_city, * )\n# made_by ( pid, id, * )\n# cast ( aid, id, role, * )\n# company ( id, name, * )\n#  cast.aid = actor.aid\n#\n### find the number of actors from Iran who played in \" Jim Jarmusch \" movies\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, name, birth_city, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n# company ( id, name, * )\n#  cast.aid = actor.aid\n#\n### How many actors from China have acted in \" Rush Hour 3 \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, title_aka, release_year, budget, * )\n# actor ( name, gender, nationality, birth_city, * )\n# cast ( msid, role, id, * )\n# made_by ( msid, id, * )\n#  cast.aid = actor.aid\n#\n### Find all movies that star both \" Woody Strode \" and \" Jason Robards \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( release_year, mid, title_aka, budget, * )\n# actor ( name, gender, birth_year, nationality, * )\n# made_by ( msid, id, * )\n# cast ( msid, id, role, * )\n#  cast.aid = actor.aid\n#\n### Find all movies featuring \" Woody Strode \" and \" Jason Robards \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, title_aka, budget, * )\n# actor ( name, gender, nationality, birth_year, * )\n# made_by ( msid, id, * )\n# directed_by ( did, id, * )\n#\n### Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( release_year, mid, title_aka, budget, * )\n# actor ( name, gender, nationality, birth_city, * )\n# made_by ( msid, id, * )\n# directed_by ( id, did, * )\n#\n### Find all movies featuring \" Jason Robards \" and \" Woody Strode \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, nationality, birth_city, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n# movie ( mid, release_year, title_aka, budget, * )\n#  cast.aid = actor.aid\n#\n### Find all actors who acted in the same movie as \" Tom Hanks \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, budget, title_aka, * )\n# directed_by ( did, id, * )\n# director ( name, gender, nationality, birth_year, * )\n# made_by ( msid, pid, * )\n#  directed_by.did = director.did\n#\n### What movies have the same director as the movie \" Revolutionary Road \" ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( mid, release_year, title_aka, budget, * )\n# classification ( msid, id, * )\n# genre ( genre, * )\n# made_by ( msid, pid, * )\n#  classification.gid = genre.gid\n#\n### Find the movie which is classified in the most number of genres\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, name, birth_city, * )\n# movie ( title_aka, mid, release_year, budget, * )\n# made_by ( pid, msid, * )\n# producer ( nationality, birth_city, gender, name, * )\n#  made_by.pid = producer.pid\n#\n### which movie has the most number of actors from China ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( aid, gender, birth_year, nationality, * )\n# directed_by ( did, id, * )\n# made_by ( msid, id, * )\n# movie ( mid, title, title_aka, budget, * )\n#\n### Find the actors who played in the latest movie by \" Quentin Tarantino \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( title, release_year, title_aka, mid, * )\n# writer ( wid, gender, nationality, num_of_episodes, * )\n# directed_by ( msid, did, * )\n# made_by ( id, msid, * )\n#\n### Find the name and budget of the latest movie by \" Quentin Tarantino \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# movie ( release_year, mid, title_aka, budget, * )\n# writer ( wid, gender, num_of_episodes, nationality, * )\n# made_by ( msid, id, * )\n# director ( did, birth_year, gender, nationality, * )\n#\n### What is the latest movie by \" Jim Jarmusch \"\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# producer ( pid, gender, nationality, birth_city, * )\n# directed_by ( id, msid, * )\n# director ( gender, name, nationality, birth_city, * )\n# made_by ( msid, pid, * )\n#  made_by.pid = producer.pid\n#  directed_by.did = director.did \n#\n### Which producer has worked with the most number of directors ?\nSELECT"
    },
    {
        "db_id": "imdb",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( name, gender, birth_year, nationality, * )\n# made_by ( msid, id, * )\n# cast ( aid, id, role, * )\n# movie ( release_year, mid, title_aka, budget, * )\n#  cast.aid = actor.aid\n#\n### Find the latest movie which \" Gabriele Ferzetti \" acted in\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, * )\n# claims_processing ( claim_stage_id, claim_processing_id, claim_outcome_code, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#\n### List the names of all the customers in alphabetical order.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#\n### Sort the customer names in alphabetical order.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_details, * )\n# policies ( policy_type_code, policy_id, start_date, end_date, * )\n# claims_processing ( staff_id, claim_processing_id, claim_outcome_code, claim_stage_id, * )\n# claim_headers ( policy_id, claim_status_code, claim_type_code, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#  policies.customer_id = customers.customer_id \n#\n### Find all the policy type codes associated with the customer \"Dayana Robel\"\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_type_code, policy_id, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing ( staff_id, claim_processing_id, claim_outcome_code, claim_stage_id, * )\n# claim_headers ( policy_id, claim_header_id, claim_status_code, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#  policies.customer_id = customers.customer_id \n#\n### What are the type codes of the policies used by the customer \"Dayana Robel\"?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_id, customer_id, start_date, end_date, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#\n### Which type of policy is most frequently used? Give me the policy type code.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_id, customer_id, start_date, end_date, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#\n### Find the type code of the most frequently used policy.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( customer_id, policy_id, start_date, end_date, * )\n# customers ( customer_details, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claim_headers.policy_id = policies.policy_id\n#  policies.customer_id = customers.customer_id \n#\n### Find all the policy types that are used by more than 2 customers.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( customer_id, policy_id, start_date, end_date, * )\n# customers ( customer_details, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claim_headers.policy_id = policies.policy_id\n#  policies.customer_id = customers.customer_id \n#\n### Which types of policy are chosen by more than 2 customers? Give me the policy type codes.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claim_headers ( amount_claimed, claim_header_id, claim_status_code, claim_type_code, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Find the total and average amount paid in claim headers.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claim_headers ( amount_claimed, claim_header_id, claim_status_code, claim_type_code, * )\n# claims_processing ( claim_stage_id, claim_processing_id, claim_outcome_code, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### What are the total amount and average amount paid in claim headers?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_documents ( claim_id, document_type_code, created_by_staff_id, * )\n# claim_headers ( date_of_claim, claim_header_id, amount_piad, policy_id, * )\n# claims_processing ( claim_processing_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Find the total amount claimed in the most recently created document.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_documents ( claim_id, document_type_code, created_by_staff_id, * )\n# claim_headers ( date_of_claim, amount_piad, claim_header_id, claim_status_code, * )\n# claims_processing ( claim_stage_id, claim_processing_id, claim_outcome_code, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### How much amount in total were claimed in the most recently created document?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claim_headers ( amount_piad, date_of_claim, claim_header_id, claim_status_code, * )\n# customers ( customer_details, * )\n# claims_processing ( claim_stage_id, claim_processing_id, claim_outcome_code, staff_id, * )\n# claims_documents ( created_by_staff_id, document_type_code, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### What is the name of the customer who has made the largest amount of claim in a single claim?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, * )\n# claim_headers ( amount_piad, date_of_claim, claim_header_id, claim_status_code, * )\n# claims_processing ( claim_stage_id, staff_id, claim_processing_id, claim_outcome_code, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Which customer made the largest amount of claim in a single claim? Return the customer details.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_details, * )\n# claim_headers ( amount_piad, claim_header_id, date_of_claim, claim_status_code, * )\n# claims_processing ( claim_stage_id, claim_processing_id, claim_outcome_code, staff_id, * )\n# claims_documents ( created_by_staff_id, document_type_code, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### What is the name of the customer who has made the minimum amount of payment in one claim?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, * )\n# claim_headers ( amount_piad, claim_header_id, date_of_claim, claim_type_code, * )\n# claims_processing ( claim_stage_id, staff_id, claim_processing_id, claim_outcome_code, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Which customer made the smallest amount of claim in one claim? Return the customer details.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_id, policy_type_code, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing ( claim_processing_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#  policies.customer_id = customers.customer_id \n#\n### Find the names of customers who have no policies associated.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_details, * )\n# policies ( policy_id, policy_type_code, start_date, end_date, * )\n# claims_processing ( claim_processing_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  policies.customer_id = customers.customer_id\n#\n### What are the names of customers who do not have any policies?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_processing ( claim_id, staff_id, claim_processing_id, claim_outcome_code, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### How many claim processing stages are there in total?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing ( claim_processing_id, claim_id, claim_outcome_code, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Find the number of distinct stages in claim processing.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing ( claim_id, claim_processing_id, staff_id, claim_outcome_code, * )\n# claims_processing_stages ( claim_status_name, next_claim_stage_id, claim_status_description, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### What is the name of the claim processing stage that most of the claims are on?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing_stages ( claim_stage_id, next_claim_stage_id, claim_status_description, * )\n# claims_processing ( claim_processing_id, claim_id, staff_id, claim_outcome_code, * )\n# claim_headers ( claim_header_id, claim_type_code, date_of_claim, policy_id, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Which claim processing stage has the most claims? Show the claim status name.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, * )\n# claims_processing ( claim_processing_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#\n### Find the names of customers whose name contains \"Diana\".\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#\n### Which customers have the substring \"Diana\" in their names? Return the customer details.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_type_code, policy_id, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing ( claim_stage_id, claim_processing_id, claim_outcome_code, staff_id, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#  policies.customer_id = customers.customer_id \n#\n### Find the names of the customers who have an deputy policy.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( customer_id, policy_id, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n#  claim_headers.policy_id = policies.policy_id\n#  policies.customer_id = customers.customer_id \n#\n### Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_type_code, policy_id, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#  policies.customer_id = customers.customer_id \n#\n### Find the names of customers who either have an deputy policy or uniformed policy.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_type_code, policy_id, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n#  claim_headers.policy_id = policies.policy_id\n#  policies.customer_id = customers.customer_id \n#\n### Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_details, * )\n# staff ( staff_id, * )\n# claims_processing ( claim_id, claim_stage_id, claim_processing_id, claim_outcome_code, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claims_processing.staff_id = staff.staff_id\n#\n### Find the names of all the customers and staff members.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, * )\n# staff ( staff_id, * )\n# claims_processing ( claim_id, claim_stage_id, claim_processing_id, claim_outcome_code, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claims_processing.staff_id = staff.staff_id\n#\n### What are the names of the customers and staff members?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_id, customer_id, start_date, end_date, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#\n### Find the number of records of each policy type and its type code.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_id, customer_id, start_date, end_date, * )\n# claim_headers ( policy_id, claim_header_id, claim_status_code, date_of_claim, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#\n### For each policy type, return its type code and its count in the record.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_id, policy_type_code, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing ( claim_stage_id, claim_processing_id, claim_outcome_code, staff_id, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#  policies.customer_id = customers.customer_id \n#\n### Find the name of the customer that has been involved in the most policies.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( policy_id, policy_type_code, start_date, end_date, * )\n# customers ( customer_details, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n#  policies.customer_id = customers.customer_id\n#\n### Which customer have the most policies? Give me the customer details.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing_stages ( claim_status_name, claim_stage_id, next_claim_stage_id, * )\n# claims_processing ( claim_id, claim_processing_id, staff_id, claim_outcome_code, * )\n# claim_headers ( claim_header_id, policy_id, claim_type_code, date_of_claim, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### What is the description of the claim status \"Open\"?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing_stages ( claim_status_name, claim_stage_id, next_claim_stage_id, * )\n# claims_processing ( claim_id, claim_processing_id, staff_id, claim_outcome_code, * )\n# claim_headers ( claim_header_id, policy_id, claim_type_code, date_of_claim, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Find the description of the claim status \"Open\".\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing ( claim_id, claim_processing_id, claim_stage_id, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### How many distinct claim outcome codes are there?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# claims_processing ( claim_id, claim_processing_id, claim_stage_id, staff_id, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n# claims_documents ( document_type_code, created_by_staff_id, created_date, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claims_documents.claim_id = claim_headers.claim_header_id \n#\n### Count the number of distinct claim outcome codes.\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( start_date, policy_id, policy_type_code, end_date, * )\n# customers ( customer_details, * )\n# claim_headers ( claim_header_id, claim_status_code, claim_type_code, date_of_claim, * )\n# claims_processing ( claim_id, claim_outcome_code, claim_stage_id, staff_id, * )\n#  claims_processing.claim_id = claim_headers.claim_header_id\n#  claim_headers.policy_id = policies.policy_id \n#  policies.customer_id = customers.customer_id \n#\n### Which customer is associated with the latest policy?\nSELECT"
    },
    {
        "db_id": "insurance_and_eClaims",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# policies ( start_date, policy_id, policy_type_code, end_date, * )\n# customers ( customer_details, * )\n# claims_processing_stages ( next_claim_stage_id, claim_status_name, claim_status_description, * )\n# claim_headers ( claim_status_code, claim_type_code, policy_id, date_of_claim, * )\n#  claim_headers.policy_id = policies.policy_id\n#  policies.customer_id = customers.customer_id \n#\n### Find the customer who started a policy most recently.\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# events ( event_details, event_id, * )\n# services ( service_type_code, * )\n# participants_in_events ( participant_id, * )\n# participants ( participant_type_code, participant_details, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### what are the event details of the services that have the type code 'Marriage'?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants_in_events ( participant_id, * )\n# events ( event_details, service_id, * )\n# participants ( participant_type_code, participant_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### What are the ids and details of events that have more than one participants?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants_in_events ( event_id, * )\n# participants ( participant_type_code, participant_details, * )\n# events ( service_id, event_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### How many events have each participants attended? List the participant id, type and the number.\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants ( participant_id, participant_details, * )\n# participants_in_events ( event_id, * )\n# events ( service_id, event_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### What are all the the participant ids, type code and details?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants ( participant_id, participant_details, * )\n# participants_in_events ( participant_id, * )\n# events ( service_id, event_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### How many participants belong to the type 'Organizer'?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( service_id, * )\n# participants_in_events ( participant_id, * )\n# events ( service_id, event_details, * )\n# participants ( participant_type_code, participant_details, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### List the type of the services in alphabetical order.\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# events ( event_details, event_id, * )\n# services ( service_type_code, * )\n# participants_in_events ( participant_id, * )\n# participants ( participant_type_code, participant_details, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### List the service id and details for the events.\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants ( participant_details, participant_type_code, * )\n# participants_in_events ( event_id, * )\n# events ( event_details, service_id, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### How many events had participants whose details had the substring 'Dr.'\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants ( participant_id, participant_details, * )\n# participants_in_events ( event_id, * )\n# events ( service_id, event_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### What is the most common participant type?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# services ( service_type_code, * )\n# participants ( participant_id, participant_details, * )\n# events ( event_id, event_details, * )\n# participants_in_events ( participant_id, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### Which service id and type has the least number of participants?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants_in_events ( participant_id, * )\n# participants ( participant_type_code, participant_details, * )\n# events ( service_id, event_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### What is the id of the event with the most participants?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants_in_events ( participant_id, * )\n# participants ( participant_id, participant_type_code, * )\n# events ( service_id, event_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### Which events id does not have any participant with detail 'Kenyatta Kuhn'?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# events ( event_details, event_id, * )\n# services ( service_id, * )\n# participants_in_events ( participant_id, * )\n# participants ( participant_type_code, participant_details, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### Which services type had both successful and failure event details?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# events ( service_id, event_details, * )\n# participants_in_events ( participant_id, * )\n# participants ( participant_type_code, participant_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### How many events did not have any participants?\nSELECT"
    },
    {
        "db_id": "local_govt_in_alabama",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# participants_in_events ( event_id, * )\n# participants ( participant_type_code, participant_details, * )\n# events ( service_id, event_details, * )\n# services ( service_type_code, * )\n#  participants_in_events.participant_id = participants.participant_id\n#  participants_in_events.event_id = events.event_id \n#  events.service_id = services.service_id \n#\n### What are all the distinct participant ids who attended any events?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( name, team, age, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### How many technicians are there?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( name, team, age, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What is the number of technicians?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( age, technician_id, team, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### List the names of technicians in ascending order of age.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( age, technician_id, team, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the names of the technicians by ascending order of age?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( team, technician_id, name, age, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the team and starting year of technicians?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( team, technician_id, name, age, * )\n# repair_assignment ( repair_id, machine_id, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n# repair ( notes, repair_id, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What is the team and starting year for each technician?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( name, technician_id, age, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### List the name of technicians whose team is not \"NYY\".\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( name, technician_id, age, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What is the name of the technician whose team is not 'NYY'?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( age, technician_id, team, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show the name of technicians aged either 36 or 37\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( age, technician_id, team, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the names of the technicians aged either 36 or 37?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( age, technician_id, name, team, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What is the starting year of the oldest technicians?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( age, technician_id, name, team, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What is the starting year for the oldest technician?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( technician_id, name, age, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# machine ( class, machine_id, making_year, machine_series, * )\n# repair ( notes, repair_id, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show different teams of technicians and the number of technicians in each team.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( technician_id, name, age, starting_year, * )\n# machine ( machine_id, class, making_year, machine_series, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### For each team, how many technicians are there?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( technician_id, name, age, starting_year, * )\n# machine ( machine_id, class, making_year, machine_series, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Please show the team that has the most number of technicians.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( technician_id, name, age, starting_year, * )\n# repair_assignment ( repair_id, machine_id, * )\n# machine ( machine_id, class, making_year, machine_series, * )\n# repair ( notes, repair_id, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the teams with the most technicians?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( technician_id, name, age, starting_year, * )\n# machine ( machine_id, class, making_year, machine_series, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show the team that have at least two technicians.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( technician_id, name, age, starting_year, * )\n# machine ( machine_id, class, making_year, machine_series, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What is the team with at least 2 technicians?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( machine_id, repair_id, * )\n# technician ( technician_id, team, age, starting_year, * )\n# machine ( machine_series, class, team, making_year, * )\n# repair ( name, notes, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show names of technicians and series of machines they are assigned to repair.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( machine_id, repair_id, * )\n# machine ( machine_series, class, team, making_year, * )\n# technician ( technician_id, team, age, starting_year, * )\n# repair ( name, notes, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the names of technicians and the machine series that they repair?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# machine ( quality_rank, class, team, making_year, * )\n# technician ( technician_id, team, age, starting_year, * )\n# repair_assignment ( technician_id, repair_id, * )\n# repair ( name, notes, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show names of technicians in ascending order of quality rank of the machine they are assigned.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# machine ( quality_rank, team, class, machine_series, * )\n# technician ( technician_id, team, age, starting_year, * )\n# repair_assignment ( technician_id, repair_id, * )\n# repair ( name, notes, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the names of the technicians by ascending order of quality rank for the machine they are assigned?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( machine_id, repair_id, * )\n# machine ( value_points, class, team, machine_series, * )\n# technician ( name, team, age, starting_year, * )\n# repair ( name, notes, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show names of technicians who are assigned to repair machines with value point more than 70.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( machine_id, repair_id, * )\n# technician ( name, team, age, starting_year, * )\n# machine ( value_points, class, team, making_year, * )\n# repair ( name, notes, launch_date, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the names of the technicians that are assigned to repair machines with more point values than 70?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( machine_id, repair_id, * )\n# technician ( name, team, age, starting_year, * )\n# repair ( name, notes, launch_date, * )\n# machine ( class, team, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show names of technicians and the number of machines they are assigned to repair.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( machine_id, repair_id, * )\n# technician ( name, team, age, starting_year, * )\n# repair ( name, notes, launch_date, * )\n# machine ( class, team, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the names of the technicians  and how many machines are they assigned to repair?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( repair_id, machine_id, * )\n# technician ( name, team, age, starting_year, * )\n# repair ( name, notes, launch_date, * )\n# machine ( class, team, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### List the names of technicians who have not been assigned to repair machines.\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# repair_assignment ( machine_id, repair_id, * )\n# technician ( name, team, age, starting_year, * )\n# repair ( name, notes, launch_date, * )\n# machine ( class, team, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the names of the technicians that have not been assigned to repair machines?\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( starting_year, technician_id, name, age, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### Show the starting years shared by technicians from team \"CLE\" and \"CWS\".\nSELECT"
    },
    {
        "db_id": "machine_repair",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# technician ( starting_year, technician_id, name, age, * )\n# repair_assignment ( repair_id, machine_id, * )\n# repair ( notes, repair_id, launch_date, * )\n# machine ( team, machine_id, making_year, machine_series, * )\n#  repair_assignment.technician_id = technician.technician_id\n#  repair_assignment.repair_id = repair.repair_id \n#  repair_assignment.machine_id = machine.machine_id \n#\n### What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# camera_lens ( brand, name, id, max_aperture, * )\n# photos ( camera_lens_id, color, name, mountain_id, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### How many camera lenses have a focal length longer than 15 mm?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# camera_lens ( brand, name, id, focal_length_mm, * )\n# photos ( camera_lens_id, color, name, mountain_id, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### Find the brand and name for each camera lens, and sort in descending order of maximum aperture.\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( name, id, camera_lens_id, mountain_id, * )\n# camera_lens ( name, id, focal_length_mm, max_aperture, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### List the id, color scheme, and name for all the photos.\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mountain ( name, range, country, id, * )\n# camera_lens ( name, id, focal_length_mm, max_aperture, * )\n# photos ( color, name, camera_lens_id, mountain_id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What are the maximum and average height of the mountains?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mountain ( country, name, height, range, * )\n# camera_lens ( name, id, focal_length_mm, max_aperture, * )\n# photos ( color, name, camera_lens_id, mountain_id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What are the average prominence of the mountains in country 'Morocco'?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mountain ( range, name, height, country, * )\n# camera_lens ( name, id, focal_length_mm, max_aperture, * )\n# photos ( color, name, camera_lens_id, mountain_id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( id, mountain_id, camera_lens_id, color, * )\n# mountain ( id, height, range, country, * )\n# camera_lens ( name, id, focal_length_mm, max_aperture, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What are the id and name of the photos for mountains?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( name, id, color, camera_lens_id, * )\n# mountain ( name, height, range, country, * )\n# camera_lens ( name, id, focal_length_mm, max_aperture, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What are the id and name of the mountains that have at least 2 photos?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( mountain_id, id, color, name, * )\n# camera_lens ( name, brand, focal_length_mm, max_aperture, * )\n# mountain ( name, height, range, country, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What are the names of the cameras that have taken picture of the most mountains?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( name, id, color, mountain_id, * )\n# camera_lens ( id, name, focal_length_mm, max_aperture, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# camera_lens ( name, id, focal_length_mm, max_aperture, * )\n# photos ( color, name, camera_lens_id, mountain_id, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### How many different kinds of lens brands are there?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# camera_lens ( brand, name, focal_length_mm, max_aperture, * )\n# photos ( id, color, name, mountain_id, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### How many camera lenses are not used in taking any photos?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( mountain_id, id, color, name, * )\n# mountain ( country, name, height, range, * )\n# camera_lens ( brand, name, focal_length_mm, max_aperture, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( mountain_id, id, color, name, * )\n# camera_lens ( brand, name, focal_length_mm, max_aperture, * )\n# mountain ( id, name, height, country, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mountain ( id, name, height, range, * )\n# photos ( camera_lens_id, name, id, color, * )\n# camera_lens ( brand, name, focal_length_mm, max_aperture, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# camera_lens ( focal_length_mm, id, brand, max_aperture, * )\n# photos ( id, camera_lens_id, color, mountain_id, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### List the camera lens names containing substring \"Digital\".\nSELECT"
    },
    {
        "db_id": "mountain_photos",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# photos ( id, color, name, mountain_id, * )\n# camera_lens ( name, brand, focal_length_mm, max_aperture, * )\n# mountain ( height, range, country, id, * )\n#  photos.camera_lens_id = camera_lens.id\n#  photos.mountain_id = mountain.id \n#\n### What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( firstname, lastname, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#  instruments.bandmateid = band.id \n#\n### How many bands are there?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( firstname, lastname, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# vocals ( songid, bandmate, * )\n#  vocals.bandmate = band.id\n#  tracklists.albumid = albums.aid \n#\n### Find the number of bands.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( aid, title, year, type, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### What are all the labels?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( title, year, type, aid, * )\n# tracklists ( albumid, songid, * )\n# vocals ( songid, bandmate, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#\n### What are the different album labels listed?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( aid, title, label, type, * )\n# tracklists ( position, songid, * )\n# instruments ( songid, bandmateid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### Find all the albums in 2012.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( aid, title, label, type, * )\n# tracklists ( position, songid, * )\n# instruments ( songid, bandmateid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### return all columns of the albums created in the year of 2012.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( bandmate, songid, * )\n# band ( id, lastname, * )\n# tracklists ( albumid, songid, * )\n# albums ( title, year, label, type, * )\n#  tracklists.albumid = albums.aid\n#  performance.bandmate = band.id \n#\n### Find all the stage positions of the musicians with first name \"Solveig\"\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( bandmate, songid, * )\n# band ( id, lastname, * )\n# tracklists ( albumid, songid, * )\n# albums ( year, label, type, aid, * )\n#  tracklists.albumid = albums.aid\n#  performance.bandmate = band.id \n#\n### What are the different stage positions for all musicians whose first name is \"Solveig\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### How many songs are there?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### Count the number of songs.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( bandmate, stageposition, * )\n# songs ( songid, * )\n# band ( id, firstname, * )\n# tracklists ( albumid, position, * )\n#  tracklists.songid = songs.songid\n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### Find all the songs performed by artist with last name \"Heilo\"\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( songid, * )\n# band ( id, firstname, * )\n# tracklists ( position, albumid, * )\n# albums ( year, label, type, aid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#\n### What are the names of the songs by the artist whose last name is \"Heilo\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( bandmate, stageposition, * )\n# songs ( title, * )\n# vocals ( type, bandmate, * )\n# tracklists ( albumid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  performance.songid = songs.songid \n#\n### Hom many musicians performed in the song \"Flash\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# performance ( bandmate, stageposition, * )\n# vocals ( bandmate, type, * )\n# tracklists ( albumid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  performance.songid = songs.songid \n#\n### How many musicians play in the song \"Flash\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( songid, * )\n# band ( id, lastname, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#\n### Find all the songs produced by artists with first name \"Marianne\".\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( songid, * )\n# band ( id, lastname, * )\n# tracklists ( albumid, position, * )\n# albums ( aid, year, label, type, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#\n### What are the names of all songs produced by the artist with the first name \"Marianne\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( lastname, id, * )\n# songs ( title, * )\n# performance ( bandmate, stageposition, * )\n# vocals ( bandmate, type, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### Who performed the song named \"Badlands\"? Show the first name and the last name.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( bandmate, stageposition, * )\n# vocals ( bandmate, type, * )\n# band ( id, lastname, * )\n# songs ( title, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### What are the first and last names of the artist who perfomed the song \"Badlands\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( songid, bandmate, * )\n# band ( firstname, lastname, * )\n# songs ( title, * )\n# vocals ( bandmate, type, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( songid, bandmate, * )\n# band ( firstname, lastname, * )\n# songs ( title, * )\n# tracklists ( position, albumid, * )\n#  tracklists.songid = songs.songid\n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( type, title, year, aid, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### How many unique labels are there for albums?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( type, title, year, aid, * )\n# tracklists ( albumid, songid, * )\n# vocals ( songid, bandmate, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#\n### What are the unique labels for the albums?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( aid, title, year, type, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### What is the label that has the most albums?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( title, year, type, aid, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### What is the label with the most albums?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( id, firstname, * )\n# songs ( title, * )\n# tracklists ( songid, position, * )\n# albums ( title, year, label, type, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#\n### What is the last name of the musician that have produced the most number of songs?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( id, firstname, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#\n### What is the last name of the musician who was in the most songs?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( id, firstname, * )\n# tracklists ( albumid, songid, * )\n# performance ( songid, bandmate, * )\n# vocals ( bandmate, type, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#\n### What is the last name of the musician that has been at the back position the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tracklists ( albumid, songid, * )\n# band ( id, firstname, * )\n# performance ( bandmate, songid, * )\n# vocals ( bandmate, type, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#\n### What is the last name of the musicians who has played back position the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( songid, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( songid, albumid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### Find all the songs whose name contains the word \"the\".\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( songid, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### What are the names of the songs whose title has the word \"the\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( bandmateid, songid, * )\n# albums ( title, year, label, type, * )\n# tracklists ( albumid, songid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### What are all the instruments used?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( bandmateid, songid, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### What are the different instruments listed in the database?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( songid, * )\n# band ( id, firstname, * )\n# performance ( bandmate, stageposition, * )\n#  performance.songid = songs.songid\n#  performance.bandmate = band.id \n#  instruments.songid = songs.songid \n#  instruments.bandmateid = band.id \n#\n### What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# band ( lastname, firstname, * )\n# performance ( bandmate, stageposition, * )\n#  performance.songid = songs.songid\n#  performance.bandmate = band.id \n#  instruments.songid = songs.songid \n#  instruments.bandmateid = band.id \n#\n### What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### What is the most used instrument?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# albums ( year, label, type, aid, * )\n# tracklists ( albumid, songid, * )\n# vocals ( songid, bandmate, * )\n#  tracklists.albumid = albums.aid\n#\n### What instrument is used the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### How many songs have used the instrument \"drums\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# albums ( title, year, label, type, * )\n# tracklists ( albumid, songid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### How many songs use drums as an instrument?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# performance ( bandmate, stageposition, * )\n#  tracklists.songid = songs.songid\n#  performance.songid = songs.songid \n#  instruments.songid = songs.songid \n#\n### What instruments does the the song \"Le Pop\" use?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# vocals ( bandmate, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  instruments.songid = songs.songid \n#\n### What are the instruments are used in the song \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# instruments ( instrument, bandmateid, * )\n# tracklists ( albumid, position, * )\n# performance ( bandmate, stageposition, * )\n#  tracklists.songid = songs.songid\n#  performance.songid = songs.songid \n#  instruments.songid = songs.songid \n#\n### How many instruments does the song \"Le Pop\" use?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# performance ( bandmate, stageposition, * )\n#  tracklists.songid = songs.songid\n#  performance.songid = songs.songid \n#  instruments.songid = songs.songid \n#\n### How many different instruments are used in the song \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( bandmateid, songid, * )\n# band ( id, firstname, * )\n# albums ( title, year, label, type, * )\n# tracklists ( albumid, songid, * )\n#  tracklists.albumid = albums.aid\n#  instruments.bandmateid = band.id \n#\n### How many instrument does the musician with last name \"Heilo\" use?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# band ( id, firstname, * )\n# albums ( title, year, label, type, * )\n# vocals ( bandmate, type, * )\n#  vocals.bandmate = band.id\n#  instruments.bandmateid = band.id \n#\n### How many different instruments does the musician with the last name \"Heilo\" use?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# band ( id, firstname, * )\n# albums ( title, year, label, type, * )\n# vocals ( bandmate, type, * )\n#  vocals.bandmate = band.id\n#  instruments.bandmateid = band.id \n#\n### Find all the instruments ever used by the musician with last name \"Heilo\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( bandmateid, songid, * )\n# band ( id, firstname, * )\n# albums ( title, year, label, type, * )\n# vocals ( bandmate, type, * )\n#  vocals.bandmate = band.id\n#  instruments.bandmateid = band.id \n#\n### What are all the instruments used by the musician with the last name \"Heilo\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### Which song has the most vocals?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What is the song with the most vocals?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# albums ( aid, title, year, label, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#\n### Which vocal type is the most frequently appearring type?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# albums ( aid, title, year, label, * )\n# tracklists ( albumid, songid, * )\n# songs ( title, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What is the type of vocables that appears most frequently?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, songid, * )\n# band ( id, firstname, * )\n# performance ( songid, stageposition, * )\n# instruments ( bandmateid, instrument, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#  instruments.bandmateid = band.id \n#\n### Which vocal type has the band mate with last name \"Heilo\" played the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, songid, * )\n# band ( lastname, firstname, * )\n# performance ( songid, stageposition, * )\n# songs ( title, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### What is the type of vocals that the band member with the last name \"Heilo\" played the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# albums ( type, title, label, year, * )\n# tracklists ( songid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the vocal types used in song \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# songs ( title, * )\n# albums ( type, title, year, label, * )\n# tracklists ( songid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the types of vocals used in the song \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, type, year, label, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### Find the number of vocal types used in song \"Demon Kitty Rag\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# songs ( songid, * )\n# albums ( type, title, year, label, * )\n# tracklists ( songid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the types of vocals used in the song \"Demon Kitty Rag\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( bandmate, type, * )\n# songs ( title, * )\n# albums ( title, year, label, type, * )\n# tracklists ( songid, albumid, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### How many songs have a lead vocal?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# songs ( title, * )\n# albums ( title, year, label, type, * )\n# tracklists ( albumid, songid, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### How many songs have vocals of type lead?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# songs ( title, * )\n# performance ( bandmate, stageposition, * )\n# band ( firstname, lastname, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### Which vocal type did the musician with first name \"Solveig\" played in the song with title \"A Bar in Amsterdam\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# performance ( bandmate, stageposition, * )\n# songs ( songid, * )\n# band ( firstname, lastname, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( bandmate, type, * )\n# songs ( title, * )\n# tracklists ( position, albumid, * )\n# albums ( title, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### Find all the songs that do not have a lead vocal.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# vocals ( type, bandmate, * )\n# tracklists ( albumid, position, * )\n# albums ( aid, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the names of the songs without a lead vocal?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( bandmate, songid, * )\n# albums ( aid, title, year, label, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#\n### Find all the vocal types.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# albums ( aid, title, year, label, * )\n# tracklists ( albumid, songid, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#\n### What are the different types of vocals?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( aid, title, label, type, * )\n# tracklists ( position, songid, * )\n# vocals ( songid, bandmate, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#\n### What are the albums produced in year 2010?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( aid, title, label, type, * )\n# tracklists ( position, songid, * )\n# vocals ( songid, bandmate, * )\n# instruments ( songid, bandmateid, * )\n#  tracklists.albumid = albums.aid\n#\n### What information is there on albums from 2010?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( bandmate, stageposition, * )\n# songs ( title, * )\n# vocals ( bandmate, type, * )\n# tracklists ( albumid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  performance.songid = songs.songid \n#\n### Who performed the song named \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( lastname, id, * )\n# performance ( songid, stageposition, * )\n# vocals ( bandmate, type, * )\n# songs ( title, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### What is the first and last name of artist who performed \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( id, firstname, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#\n### What is the last name of the musician that have produced the most songs?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# band ( id, firstname, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#\n### What is the last name of the artist who sang the most songs?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# band ( id, firstname, * )\n# performance ( bandmate, stageposition, * )\n#  performance.songid = songs.songid\n#  performance.bandmate = band.id \n#  instruments.songid = songs.songid \n#  instruments.bandmateid = band.id \n#\n### What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# band ( lastname, firstname, * )\n# songs ( title, * )\n# performance ( bandmate, stageposition, * )\n#  performance.songid = songs.songid\n#  performance.bandmate = band.id \n#  instruments.songid = songs.songid \n#  instruments.bandmateid = band.id \n#\n### What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# instruments ( instrument, bandmateid, * )\n# tracklists ( albumid, position, * )\n# performance ( bandmate, stageposition, * )\n#  tracklists.songid = songs.songid\n#  performance.songid = songs.songid \n#  instruments.songid = songs.songid \n#\n### How many instruments does the song \"Badlands\" use?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# instruments ( songid, bandmateid, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# vocals ( bandmate, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  instruments.songid = songs.songid \n#\n### How many different instruments are used in the song \"Badlands\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# albums ( type, title, year, label, * )\n# tracklists ( songid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the vocal types used in song \"Badlands\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# albums ( title, type, year, label, * )\n# tracklists ( albumid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What types of vocals are used in the song \"Badlands\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# albums ( type, title, year, label, * )\n# tracklists ( albumid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### Find the number of vocal types used in song \"Le Pop\"\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# albums ( type, title, year, label, * )\n# tracklists ( albumid, position, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### How many vocal types are used in the song \"Le Pop\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( bandmate, type, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### How many songs have a shared vocal?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# albums ( title, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### How many different songs have shared vocals?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, bandmate, * )\n# songs ( title, * )\n# tracklists ( position, albumid, * )\n# albums ( title, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### Find all the songs that do not have a back vocal.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# vocals ( type, bandmate, * )\n# tracklists ( albumid, position, * )\n# albums ( aid, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the different names of all songs without back vocals?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, songid, * )\n# band ( id, lastname, * )\n# performance ( songid, stageposition, * )\n# albums ( title, year, label, type, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#\n### Which vocal type has the band mate with first name \"Solveig\" played the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, songid, * )\n# band ( id, lastname, * )\n# performance ( songid, stageposition, * )\n# instruments ( songid, instrument, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#  instruments.bandmateid = band.id \n#\n### What are the types of vocals that the band member with the first name \"Solveig\" played the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# songs ( title, * )\n# performance ( bandmate, stageposition, * )\n# band ( lastname, firstname, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( songid, bandmate, * )\n# performance ( bandmate, stageposition, * )\n# songs ( title, * )\n# band ( lastname, firstname, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( songid, stageposition, * )\n# band ( id, lastname, * )\n# vocals ( songid, type, * )\n# tracklists ( position, songid, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#\n### Find the first name of the band mate that has performed in most songs.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( songid, stageposition, * )\n# band ( firstname, lastname, * )\n# vocals ( songid, type, * )\n# instruments ( songid, instrument, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#  instruments.bandmateid = band.id \n#\n### What is the first name of the band mate who perfomed in the most songs?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, songid, * )\n# band ( id, lastname, * )\n# performance ( songid, stageposition, * )\n# albums ( title, year, label, type, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#\n### Which vocal type has the band mate with first name \"Marianne\" played the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# vocals ( type, songid, * )\n# band ( id, lastname, * )\n# performance ( songid, stageposition, * )\n# instruments ( songid, instrument, * )\n#  vocals.bandmate = band.id\n#  performance.bandmate = band.id \n#  instruments.bandmateid = band.id \n#\n### What is the vocal type of the band mate whose first name is \"Marianne\" played the most?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( bandmate, songid, * )\n# band ( firstname, lastname, * )\n# songs ( title, * )\n# vocals ( bandmate, type, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# performance ( songid, bandmate, * )\n# band ( firstname, lastname, * )\n# songs ( title, * )\n# vocals ( bandmate, type, * )\n#  vocals.songid = songs.songid\n#  vocals.bandmate = band.id \n#  performance.songid = songs.songid \n#  performance.bandmate = band.id \n#\n### What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# vocals ( type, bandmate, * )\n# tracklists ( albumid, position, * )\n# albums ( aid, year, label, type, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### Find the name of songs that does not have a back vocal.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# vocals ( type, bandmate, * )\n# albums ( aid, year, label, type, * )\n# tracklists ( position, albumid, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the names of the songs that do not have back vocals?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( title, * )\n# tracklists ( songid, position, * )\n# albums ( title, type, year, label, * )\n# performance ( bandmate, stageposition, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  performance.songid = songs.songid \n#\n### What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# songs ( songid, * )\n# albums ( aid, year, label, type, * )\n# tracklists ( songid, position, * )\n# performance ( bandmate, stageposition, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  performance.songid = songs.songid \n#\n### What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( title, aid, year, type, * )\n# songs ( songid, * )\n# tracklists ( songid, position, * )\n# instruments ( instrument, songid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### What are all the songs in albums under label \"Universal Music Group\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( label, title, year, type, * )\n# songs ( title, * )\n# tracklists ( albumid, position, * )\n# vocals ( type, bandmate, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### What are the names of all the songs whose album is under the label of \"Universal Music Group\"?\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( type, year, title, label, * )\n# tracklists ( songid, position, * )\n# songs ( title, * )\n# vocals ( type, bandmate, * )\n#  vocals.songid = songs.songid\n#  tracklists.songid = songs.songid \n#  tracklists.albumid = albums.aid \n#\n### Find the number of songs in all the studio albums.\nSELECT"
    },
    {
        "db_id": "music_2",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# albums ( type, year, title, label, * )\n# tracklists ( songid, position, * )\n# songs ( title, * )\n# instruments ( instrument, bandmateid, * )\n#  tracklists.songid = songs.songid\n#  tracklists.albumid = albums.aid \n#  instruments.songid = songs.songid \n#\n### How many songs appear in studio albums?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( coupon_id, customer_id, gender_mf, date_became_customer, * )\n# discount_coupons ( coupon_id, date_issued, * )\n# payments ( customer_id, payment_id, payment_type_code, amount_paid_in_full_yn, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  payments.customer_id = customers.customer_id\n#  customers.coupon_id = discount_coupons.coupon_id \n#\n### Are the customers holding coupons with amount 500 bad or good?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_id, booking_status_code, returned_damaged_yn, booking_start_date, * )\n# customers ( first_name, coupon_id, good_or_bad_customer, gender_mf, * )\n# payments ( payment_id, booking_id, payment_type_code, amount_paid_in_full_yn, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  payments.booking_id = bookings.booking_id \n#  payments.customer_id = customers.customer_id \n#  bookings.customer_id = customers.customer_id \n#\n### How many bookings did each customer make? List the customer id, first name, and the count.\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payments ( amount_paid, amount_paid_in_full_yn, amount_due, booking_id, * )\n# customers ( coupon_id, good_or_bad_customer, gender_mf, date_became_customer, * )\n# bookings ( amount_payable, booking_id, booking_status_code, returned_damaged_yn, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  payments.booking_id = bookings.booking_id \n#  payments.customer_id = customers.customer_id \n#  bookings.customer_id = customers.customer_id \n#\n### What is the maximum total amount paid by a customer? List the customer id and amount.\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_id, customer_id, booking_start_date, booking_status_code, * )\n# payments ( payment_date, amount_paid, payment_id, customer_id, * )\n# products_booked ( product_id, returned_yn, returned_late_yn, booked_count, * )\n# view_product_availability ( product_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  products_booked.booking_id = bookings.booking_id \n#  payments.booking_id = bookings.booking_id \n#\n### What are the id and the amount of refund of the booking that incurred the most times of payments?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products_booked ( booked_count, booking_id, returned_yn, returned_late_yn, * )\n# bookings ( customer_id, booking_start_date, count_hired, booking_status_code, * )\n# products_for_hire ( product_type_code, daily_hire_cost, product_name, product_description, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  view_product_availability.product_id = products_for_hire.product_id \n#  products_booked.booking_id = bookings.booking_id \n#  products_booked.product_id = products_for_hire.product_id \n#\n### What is the id of the product that is booked for 3 times?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products_booked ( product_id, booking_id, returned_yn, returned_late_yn, * )\n# products_for_hire ( product_id, product_type_code, product_name, daily_hire_cost, * )\n# bookings ( amount_payable, amount_of_discount, booking_start_date, count_hired, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  view_product_availability.product_id = products_for_hire.product_id \n#  products_booked.booking_id = bookings.booking_id \n#  products_booked.product_id = products_for_hire.product_id \n#\n### What is the product description of the product booked with an amount of 102.76?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bookings ( booking_end_date, booking_id, customer_id, booking_status_code, * )\n# products_booked ( product_id, returned_yn, returned_late_yn, booked_count, * )\n# products_for_hire ( product_name, product_type_code, product_description, daily_hire_cost, * )\n# view_product_availability ( product_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  view_product_availability.product_id = products_for_hire.product_id \n#  products_booked.booking_id = bookings.booking_id \n#  products_booked.product_id = products_for_hire.product_id \n#\n### What are the start date and end date of the booking that has booked the product named 'Book collection A'?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# view_product_availability ( product_id, booking_id, status_date, * )\n# products_for_hire ( product_name, product_description, product_type_code, daily_hire_cost, * )\n# products_booked ( booking_id, returned_yn, returned_late_yn, booked_count, * )\n# discount_coupons ( date_issued, coupon_amount, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#  products_booked.product_id = products_for_hire.product_id \n#\n### What are the names of products whose availability equals to 1?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products_for_hire ( product_id, daily_hire_cost, product_name, product_description, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n# products_booked ( product_id, returned_yn, returned_late_yn, booked_count, * )\n# discount_coupons ( date_issued, coupon_amount, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#  products_booked.product_id = products_for_hire.product_id \n#\n### How many different product types are there?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( last_name, good_or_bad_customer, gender_mf, date_became_customer, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n# products_for_hire ( product_type_code, daily_hire_cost, product_name, product_description, * )\n# products_booked ( product_id, returned_yn, returned_late_yn, booked_count, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#  products_booked.product_id = products_for_hire.product_id \n#\n### What are the first name, last name, and gender of all the good customers? Order by their last name.\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payments ( amount_paid, amount_paid_in_full_yn, payment_id, booking_id, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n# products_for_hire ( product_type_code, daily_hire_cost, product_name, product_description, * )\n# discount_coupons ( date_issued, coupon_amount, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#\n### What is the average amount due for all the payments?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products_booked ( booked_amount, booking_id, product_id, returned_yn, * )\n# bookings ( count_hired, customer_id, booking_status_code, returned_damaged_yn, * )\n# products_for_hire ( product_type_code, daily_hire_cost, product_name, product_description, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  view_product_availability.product_id = products_for_hire.product_id \n#  products_booked.booking_id = bookings.booking_id \n#  products_booked.product_id = products_for_hire.product_id \n#\n### What are the maximum, minimum, and average booked count for the products booked?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payments ( booking_id, customer_id, payment_date, amount_paid, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n# products_for_hire ( product_type_code, daily_hire_cost, product_name, product_description, * )\n# products_booked ( product_id, returned_yn, returned_late_yn, booked_count, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#  products_booked.product_id = products_for_hire.product_id \n#\n### What are all the distinct payment types?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products_for_hire ( product_name, product_id, product_type_code, product_description, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n# products_booked ( booking_id, returned_yn, returned_late_yn, booked_count, * )\n# discount_coupons ( date_issued, coupon_amount, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#  products_booked.product_id = products_for_hire.product_id \n#\n### What are the daily hire costs for the products with substring 'Book' in its name?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products_booked ( product_id, booking_id, booked_count, returned_yn, * )\n# bookings ( amount_payable, amount_of_discount, amount_outstanding, customer_id, * )\n# products_for_hire ( product_type_code, daily_hire_cost, product_name, product_description, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  view_product_availability.booking_id = bookings.booking_id\n#  view_product_availability.product_id = products_for_hire.product_id \n#  products_booked.booking_id = bookings.booking_id \n#  products_booked.product_id = products_for_hire.product_id \n#\n### How many products are never booked with amount higher than 200?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# discount_coupons ( coupon_id, date_issued, * )\n# customers ( coupon_id, customer_id, gender_mf, date_became_customer, * )\n# payments ( customer_id, payment_id, payment_type_code, amount_paid_in_full_yn, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n#  payments.customer_id = customers.customer_id\n#  customers.coupon_id = discount_coupons.coupon_id \n#\n### What are the coupon amount of the coupons owned by both good and bad customers?\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payments ( payment_date, amount_paid, amount_paid_in_full_yn, booking_id, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n# products_for_hire ( product_type_code, daily_hire_cost, product_name, product_description, * )\n# discount_coupons ( date_issued, coupon_amount, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#\n### What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'\nSELECT"
    },
    {
        "db_id": "products_for_hire",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# products_for_hire ( daily_hire_cost, product_name, product_description, product_id, * )\n# view_product_availability ( booking_id, status_date, available_yn, * )\n# products_booked ( booking_id, returned_yn, returned_late_yn, booked_count, * )\n# discount_coupons ( date_issued, coupon_amount, * )\n#  view_product_availability.product_id = products_for_hire.product_id\n#  products_booked.product_id = products_for_hire.product_id \n#\n### What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# restaurant ( resid, address, rating, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.resid = restaurant.resid\n#  type_of_restaurant.resid = restaurant.resid \n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### Show me all the restaurants.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# restaurant ( address, rating, resid, * )\n# visits_restaurant ( time, spent, stuid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.resid = restaurant.resid\n#  type_of_restaurant.resid = restaurant.resid \n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### What is the address of the restaurant Subway?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# restaurant ( rating, address, resid, * )\n# visits_restaurant ( time, spent, stuid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.resid = restaurant.resid\n#  type_of_restaurant.resid = restaurant.resid \n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### What is the rating of the restaurant Subway?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# restaurant_type ( restypeid, restypedescription, * )\n# type_of_restaurant ( resid, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# restaurant ( rating, resid, resname, * )\n#  visits_restaurant.resid = restaurant.resid\n#  type_of_restaurant.resid = restaurant.resid \n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### List all restaurant types.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# restaurant_type ( restypedescription, restypeid, * )\n# type_of_restaurant ( restypeid, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# restaurant ( rating, resid, resname, * )\n#  visits_restaurant.resid = restaurant.resid\n#  type_of_restaurant.resid = restaurant.resid \n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### What is the description of the restaurant type Sandwich?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# restaurant ( rating, resid, address, * )\n# visits_restaurant ( time, spent, stuid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.resid = restaurant.resid\n#  type_of_restaurant.resid = restaurant.resid \n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### Which restaurants have highest rating? List the restaurant name and its rating.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( lname, age, stuid, sex, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### What is the age of student Linda Smith?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( lname, sex, stuid, age, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### What is the gender of the student Linda Smith?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, major, stuid, age, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### List all students' first names and last names who majored in 600.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( city_code, lname, stuid, age, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# restaurant ( rating, resid, resname, * )\n# type_of_restaurant ( restypeid, * )\n#  visits_restaurant.stuid = student.stuid\n#  visits_restaurant.resid = restaurant.resid \n#  type_of_restaurant.resid = restaurant.resid \n#\n### Which city does student Linda Smith live in?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### Advisor 1121 has how many students?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### Which Advisor has most of students? List advisor and the number of students.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( age, sex, stuid, lname, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### Which major has least number of students? List the major and the number of students.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( age, sex, stuid, lname, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### Which major has between 2 and 30 number of students? List major and the number of students.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, age, major, sex, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### Which student's age is older than 18 and is majoring in 600? List each student's first and last name.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, age, sex, major, * )\n# visits_restaurant ( spent, stuid, resid, * )\n# type_of_restaurant ( restypeid, * )\n# restaurant_type ( restypename, restypedescription, * )\n#  visits_restaurant.stuid = student.stuid\n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# restaurant_type ( restypeid, restypedescription, * )\n# type_of_restaurant ( resid, * )\n# restaurant ( address, rating, resname, * )\n# visits_restaurant ( spent, stuid, resid, * )\n#  visits_restaurant.resid = restaurant.resid\n#  type_of_restaurant.resid = restaurant.resid \n#  type_of_restaurant.restypeid = restaurant_type.restypeid \n#\n### How many restaurant is the Sandwich type restaurant?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visits_restaurant ( spent, time, resid, * )\n# student ( fname, lname, age, sex, * )\n# restaurant ( address, rating, resname, * )\n# type_of_restaurant ( restypeid, * )\n#  visits_restaurant.stuid = student.stuid\n#  visits_restaurant.resid = restaurant.resid \n#  type_of_restaurant.resid = restaurant.resid \n#\n### How long does student Linda Smith spend on the restaurant in total?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visits_restaurant ( resid, time, spent, * )\n# student ( fname, lname, age, sex, * )\n# restaurant ( resname, address, rating, * )\n# type_of_restaurant ( restypeid, * )\n#  visits_restaurant.stuid = student.stuid\n#  visits_restaurant.resid = restaurant.resid \n#  type_of_restaurant.resid = restaurant.resid \n#\n### How many times has the student Linda Smith visited Subway?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visits_restaurant ( resid, time, spent, * )\n# student ( fname, lname, age, sex, * )\n# restaurant ( resname, address, rating, * )\n# type_of_restaurant ( restypeid, * )\n#  visits_restaurant.stuid = student.stuid\n#  visits_restaurant.resid = restaurant.resid \n#  type_of_restaurant.resid = restaurant.resid \n#\n### When did Linda Smith visit Subway?\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visits_restaurant ( spent, time, stuid, * )\n# restaurant ( resid, address, rating, * )\n# student ( age, sex, major, lname, * )\n# type_of_restaurant ( restypeid, * )\n#  visits_restaurant.stuid = student.stuid\n#  visits_restaurant.resid = restaurant.resid \n#  type_of_restaurant.resid = restaurant.resid \n#\n### At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.\nSELECT"
    },
    {
        "db_id": "restaurant_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visits_restaurant ( time, spent, resid, * )\n# student ( lname, fname, age, sex, * )\n# restaurant ( address, rating, resname, * )\n# type_of_restaurant ( restypeid, * )\n#  visits_restaurant.stuid = student.stuid\n#  visits_restaurant.resid = restaurant.resid \n#  type_of_restaurant.resid = restaurant.resid \n#\n### Which student visited restaurant most often? List student's first name and last name.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( actor_id, first_name, last_update, * )\n# film_actor ( film_id, last_update, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  film_actor.actor_id = actor.actor_id\n#\n### How many different last names do the actors and actresses have?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( actor_id, first_name, last_update, * )\n# film_actor ( film_id, last_update, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  film_actor.actor_id = actor.actor_id\n#\n### Count the number of different last names actors have.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( actor_id, last_name, last_update, * )\n# film_actor ( last_update, film_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  film_actor.actor_id = actor.actor_id\n#\n### What is the most popular first name of the actors?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( actor_id, last_update, last_name, * )\n# film_actor ( actor_id, film_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  film_actor.actor_id = actor.actor_id\n#\n### Return the most common first name among all actors.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( first_name, actor_id, last_update, * )\n# film_actor ( last_update, film_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  film_actor.actor_id = actor.actor_id\n#\n### What is the most popular full name of the actors?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( last_name, actor_id, last_update, * )\n# film_actor ( actor_id, film_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  film_actor.actor_id = actor.actor_id\n#\n### Return the most common full name among all actors.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# address ( address2, address_id, address, city_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#\n### Which districts have at least two addresses?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# address ( address2, address_id, address, city_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#\n### Give the districts which have two or more addresses.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# address ( postal_code, phone, district, address_id, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n# film_category ( category_id, last_update, * )\n#\n### What is the phone number and postal code of the address 1031 Daugavpils Parkway?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# address ( postal_code, phone, district, address_id, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n# film_category ( category_id, last_update, * )\n#\n### Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, country_id, last_update, * )\n# address ( address_id, address, district, phone, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  address.city_id = city.city_id\n#\n### Which city has the most addresses? List the city name, number of addresses, and city id.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, last_update, country_id, * )\n# address ( last_update, address_id, address, district, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  address.city_id = city.city_id\n#\n### What are the city name, id, and number of addresses corresponding to the city with the most addressed?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# address ( address_id, address, phone, address2, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#\n### How many addresses are in the district of California?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# address ( address_id, address, phone, address2, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n# film_category ( category_id, last_update, * )\n#\n### Count the number of addressed in the California district.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( rental_rate, title, original_language_id, rental_duration, * )\n# inventory ( inventory_id, store_id, last_update, * )\n# rental ( rental_id, rental_date, customer_id, staff_id, * )\n# film_text ( film_id, description, * )\n#  rental.inventory_id = inventory.inventory_id\n#  inventory.film_id = film.film_id \n#\n### Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, original_language_id, description, * )\n# inventory ( last_update, inventory_id, store_id, * )\n# film_text ( film_id, description, * )\n# rental ( inventory_id, rental_date, customer_id, return_date, * )\n#  rental.inventory_id = inventory.inventory_id\n#  inventory.film_id = film.film_id \n#\n### What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, last_update, * )\n# country ( country_id, last_update, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  city.country_id = country.country_id\n#\n### How many cities are in Australia?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, last_update, * )\n# country ( country_id, last_update, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  city.country_id = country.country_id\n#\n### Count the number of cities in Australia.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city, city_id, last_update, * )\n# country ( country, last_update, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  city.country_id = country.country_id\n#\n### Which countries have at least 3 cities?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, city, last_update, * )\n# country ( country, last_update, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  city.country_id = country.country_id\n#\n### What are the countries that contain 3 or more cities?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( payment_date, amount, payment_id, customer_id, * )\n# staff ( first_name, last_name, address_id, picture, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  payment.staff_id = staff.staff_id\n#\n### Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( payment_date, amount, payment_id, customer_id, * )\n# staff ( first_name, last_name, address_id, picture, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  payment.staff_id = staff.staff_id\n#\n### What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( customer_id, store_id, last_name, email, * )\n# payment ( staff_id, amount, payment_id, rental_id, * )\n# film_text ( description, film_id, * )\n# inventory ( film_id, store_id, last_update, * )\n#  payment.customer_id = customer.customer_id\n#\n### How many customers have an active value of 1?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( customer_id, store_id, last_name, email, * )\n# film_text ( description, film_id, * )\n# payment ( amount, payment_id, staff_id, rental_id, * )\n# staff ( staff_id, picture, email, password, * )\n#  payment.customer_id = customer.customer_id\n#  payment.staff_id = staff.staff_id \n#\n### Count the number of customers who are active.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, description, language_id, * )\n# film_category ( category_id, last_update, * )\n# film_text ( title, description, * )\n# film_actor ( actor_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### Which film has the highest rental rate? And what is the rate?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( title, film_id, language_id, description, * )\n# film_text ( film_id, description, * )\n# rental ( inventory_id, customer_id, staff_id, rental_date, * )\n# film_category ( category_id, last_update, * )\n#  film_category.film_id = film.film_id\n#\n### What are the title and rental rate of the film with the highest rental rate?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film_actor ( actor_id, last_update, * )\n# film ( description, title, language_id, original_language_id, * )\n# film_text ( title, film_id, * )\n# actor ( first_name, last_name, last_update, * )\n#  film_actor.actor_id = actor.actor_id\n#  film_actor.film_id = film.film_id \n#\n### Which film has the most number of actors or actresses? List the film name, film id and description.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( title, description, language_id, original_language_id, * )\n# film_actor ( actor_id, last_update, * )\n# film_text ( title, film_id, * )\n# film_category ( category_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### What are the title, id, and description of the movie with the greatest number of actors?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film_actor ( film_id, last_update, * )\n# actor ( actor_id, last_name, last_update, * )\n# film ( title, description, length, rating, * )\n# film_text ( description, film_id, * )\n#  film_actor.actor_id = actor.actor_id\n#  film_actor.film_id = film.film_id \n#\n### Which film actor (actress) starred the most films? List his or her first name, last name and actor id.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( first_name, last_name, last_update, * )\n# film_actor ( film_id, last_update, * )\n# film ( title, description, length, rating, * )\n# film_text ( description, film_id, * )\n#  film_actor.actor_id = actor.actor_id\n#  film_actor.film_id = film.film_id \n#\n### Return the full name and id of the actor or actress who starred in the greatest number of films.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( last_name, actor_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n# staff ( last_name, staff_id, address_id, picture, * )\n# film ( title, description, language_id, original_language_id, * )\n#  film_actor.actor_id = actor.actor_id\n#  film_actor.film_id = film.film_id \n#\n### Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# actor ( last_name, actor_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n# film ( title, description, language_id, original_language_id, * )\n# film_category ( category_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.actor_id = actor.actor_id \n#  film_actor.film_id = film.film_id \n#\n### What are the full names of actors who had roles in more than 30 films?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# inventory ( inventory_id, film_id, last_update, * )\n# store ( manager_staff_id, address_id, last_update, * )\n# customer ( email, active, customer_id, first_name, * )\n# film_text ( description, film_id, * )\n#  inventory.store_id = store.store_id\n#  customer.store_id = store.store_id \n#\n### Which store owns most items?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# inventory ( inventory_id, film_id, last_update, * )\n# store ( last_update, address_id, manager_staff_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  inventory.store_id = store.store_id\n#\n### What is the id of the store that has the most items in inventory?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( payment_date, customer_id, payment_id, staff_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#\n### What is the total amount of all payments?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( payment_date, payment_id, last_update, customer_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#\n### Return the sum of all payment amounts.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( amount, payment_id, payment_date, staff_id, * )\n# customer ( first_name, last_name, store_id, email, * )\n# rental ( rental_id, rental_date, inventory_id, return_date, * )\n# film_text ( description, film_id, * )\n#  rental.customer_id = customer.customer_id\n#  payment.rental_id = rental.rental_id \n#  payment.customer_id = customer.customer_id \n#\n### Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( amount, payment_date, payment_id, staff_id, * )\n# customer ( first_name, last_name, store_id, email, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  payment.customer_id = customer.customer_id\n#\n### What is the full name and id of the customer who has the lowest total amount of payment?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, language_id, description, original_language_id, * )\n# category ( category_id, last_update, * )\n# film_category ( film_id, last_update, * )\n# film_text ( title, description, * )\n#  film_category.film_id = film.film_id\n#  film_category.category_id = category.category_id \n#\n### What is the genre name of the film HUNGER ROOF?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film_category ( film_id, last_update, * )\n# category ( name, last_update, * )\n# film ( title, description, language_id, original_language_id, * )\n# film_text ( title, description, * )\n#  film_category.film_id = film.film_id\n#  film_category.category_id = category.category_id \n#\n### Return the name of the category to which the film 'HUNGER ROOF' belongs.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film_category ( film_id, last_update, * )\n# category ( name, last_update, * )\n# film ( title, description, length, rating, * )\n# film_text ( description, film_id, * )\n#  film_category.film_id = film.film_id\n#  film_category.category_id = category.category_id \n#\n### How many films are there in each category? List the genre name, genre id and the count.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film_category ( film_id, last_update, * )\n# category ( name, last_update, * )\n# film ( title, description, length, rating, * )\n# film_text ( description, film_id, * )\n#  film_category.film_id = film.film_id\n#  film_category.category_id = category.category_id \n#\n### What are the names and ids of the different categories, and how many films are in each?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# inventory ( inventory_id, store_id, last_update, * )\n# film ( title, description, language_id, original_language_id, * )\n# film_text ( film_id, description, * )\n# film_category ( category_id, last_update, * )\n#  inventory.film_id = film.film_id\n#  film_category.film_id = film.film_id \n#\n### Which film has the most copies in the inventory? List both title and id.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# inventory ( inventory_id, store_id, last_update, * )\n# film ( title, description, release_year, language_id, * )\n# film_text ( film_id, description, * )\n# film_category ( category_id, last_update, * )\n#  inventory.film_id = film.film_id\n#  film_category.film_id = film.film_id \n#\n### What is the title and id of the film that has the greatest number of copies in inventory?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rental ( rental_id, rental_date, customer_id, return_date, * )\n# film ( film_id, original_language_id, rental_duration, description, * )\n# inventory ( inventory_id, last_update, store_id, * )\n# film_text ( film_id, description, * )\n#  rental.inventory_id = inventory.inventory_id\n#  inventory.film_id = film.film_id \n#\n### What is the film title and inventory id of the item in the inventory which was rented most frequently?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rental ( rental_id, return_date, rental_date, customer_id, * )\n# film ( title, description, language_id, original_language_id, * )\n# inventory ( inventory_id, last_update, store_id, * )\n# film_text ( film_id, description, * )\n#  rental.inventory_id = inventory.inventory_id\n#  inventory.film_id = film.film_id \n#\n### Return the title and inventory id of the film that is rented most often.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, original_language_id, title, description, * )\n# language ( name, last_update, * )\n# film_category ( category_id, last_update, * )\n# film_text ( title, description, * )\n#  film_category.film_id = film.film_id\n#  film.language_id = language.language_id \n#  film.original_language_id = language.language_id \n#\n### How many languages are in these films?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, original_language_id, title, description, * )\n# language ( last_update, name, * )\n# film_category ( category_id, last_update, * )\n# film_text ( title, description, * )\n#  film_category.film_id = film.film_id\n#  film.language_id = language.language_id \n#  film.original_language_id = language.language_id \n#\n### Count the number of different languages in these films.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( rating, film_id, language_id, description, * )\n# film_category ( category_id, last_update, * )\n# film_text ( film_id, description, * )\n# category ( name, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_category.category_id = category.category_id \n#\n### What are all the movies rated as R? List the titles.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( rating, film_id, description, language_id, * )\n# film_text ( film_id, description, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( actor_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### Return the titles of any movies with an R rating.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( address_id, last_update, manager_staff_id, * )\n# address ( city_id, address, district, phone, * )\n# city ( city_id, country_id, last_update, * )\n# inventory ( inventory_id, film_id, last_update, * )\n#  store.address_id = address.address_id\n#  inventory.store_id = store.store_id \n#  address.city_id = city.city_id \n#\n### Where is store 1 located?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_id, last_update, manager_staff_id, * )\n# address ( address, address2, last_update, district, * )\n# film_text ( description, film_id, * )\n# inventory ( inventory_id, film_id, last_update, * )\n#  store.address_id = address.address_id\n#  inventory.store_id = store.store_id \n#\n### Return the address of store 1.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( payment_id, amount, customer_id, rental_id, * )\n# staff ( last_name, first_name, active, picture, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  payment.staff_id = staff.staff_id\n#\n### Which staff handled least number of payments? List the full name and the id.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( customer_id, amount, payment_id, rental_id, * )\n# staff ( staff_id, first_name, picture, email, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  payment.staff_id = staff.staff_id\n#\n### Give the full name and staff id of the staff who has handled the fewest payments.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( title, film_id, original_language_id, description, * )\n# language ( name, last_update, * )\n# film_text ( title, description, * )\n# film_category ( category_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film.language_id = language.language_id \n#  film.original_language_id = language.language_id \n#\n### Which language does the film AIRPORT POLLOCK use? List the language name.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# language ( name, last_update, * )\n# film ( title, original_language_id, film_id, description, * )\n# film_text ( title, description, * )\n# film_category ( category_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film.language_id = language.language_id \n#  film.original_language_id = language.language_id \n#\n### What is the name of the language that the film 'AIRPORT POLLOCK' is in?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( last_update, manager_staff_id, address_id, * )\n# film_text ( description, film_id, * )\n# inventory ( inventory_id, film_id, last_update, * )\n# film_category ( category_id, last_update, * )\n#  inventory.store_id = store.store_id\n#\n### How many stores are there?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( manager_staff_id, address_id, last_update, * )\n# film_text ( description, film_id, * )\n# inventory ( inventory_id, film_id, last_update, * )\n# film_category ( category_id, last_update, * )\n#  inventory.store_id = store.store_id\n#\n### Count the number of stores.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, rental_rate, language_id, original_language_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### How many kinds of different ratings are listed?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, description, language_id, * )\n# film_category ( category_id, last_update, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### Count the number of different film ratings.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, language_id, original_language_id, * )\n# film_text ( film_id, description, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( actor_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### Which movies have 'Deleted Scenes' as a substring in the special feature?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( title, film_id, language_id, original_language_id, * )\n# film_category ( category_id, last_update, * )\n# film_text ( film_id, description, * )\n# category ( name, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_category.category_id = category.category_id \n#\n### Return the titles of films that include 'Deleted Scenes' in their special feature section.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# inventory ( inventory_id, film_id, last_update, * )\n# store ( address_id, manager_staff_id, last_update, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  inventory.store_id = store.store_id\n#\n### How many items in inventory does store 1 have?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# inventory ( inventory_id, film_id, last_update, * )\n# store ( last_update, address_id, manager_staff_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n#  inventory.store_id = store.store_id\n#\n### Count the number of items store 1 has in stock.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( customer_id, amount, last_update, payment_id, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n# film_category ( category_id, last_update, * )\n#\n### When did the first payment happen?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( last_update, customer_id, amount, payment_id, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#\n### What was the date of the earliest payment?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( email, address_id, store_id, customer_id, * )\n# address ( address, city_id, district, phone, * )\n# city ( city, country_id, last_update, * )\n# film_text ( description, film_id, * )\n#  customer.address_id = address.address_id\n#  address.city_id = city.city_id \n#\n### Where does the customer with the first name Linda live? And what is her email?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( address_id, email, customer_id, active, * )\n# address ( address_id, address2, district, phone, * )\n# film_text ( description, film_id, * )\n# payment ( amount, payment_id, staff_id, rental_id, * )\n#  payment.customer_id = customer.customer_id\n#  customer.address_id = address.address_id \n#\n### Return the address and email of the customer with the first name Linda.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( rating, length, title, rental_duration, * )\n# film_text ( description, film_id, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( actor_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( rating, title, length, rental_duration, * )\n# film_text ( film_id, description, * )\n# film_category ( category_id, last_update, * )\n# film_actor ( film_id, last_update, * )\n#  film_category.film_id = film.film_id\n#  film_actor.film_id = film.film_id \n#\n### What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( customer_id, last_name, last_update, store_id, * )\n# rental ( rental_date, last_update, rental_id, inventory_id, * )\n# payment ( rental_id, staff_id, amount, payment_date, * )\n# actor ( last_name, actor_id, last_update, * )\n#  rental.customer_id = customer.customer_id\n#  payment.rental_id = rental.rental_id \n#  payment.customer_id = customer.customer_id \n#\n### What is the first name and the last name of the customer who made the earliest rental?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( first_name, last_name, store_id, email, * )\n# rental ( return_date, rental_id, inventory_id, staff_id, * )\n# payment ( rental_id, staff_id, amount, payment_id, * )\n# film_text ( description, film_id, * )\n#  rental.customer_id = customer.customer_id\n#  payment.rental_id = rental.rental_id \n#  payment.customer_id = customer.customer_id \n#\n### Return the full name of the customer who made the first rental.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_id, active, address_id, * )\n# customer ( last_name, customer_id, store_id, email, * )\n# rental ( customer_id, rental_id, rental_date, inventory_id, * )\n# payment ( rental_id, staff_id, payment_id, amount, * )\n#  rental.staff_id = staff.staff_id\n#  rental.customer_id = customer.customer_id \n#  payment.rental_id = rental.rental_id \n#  payment.customer_id = customer.customer_id \n#  payment.staff_id = staff.staff_id \n#\n### What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( last_name, staff_id, active, address_id, * )\n# customer ( last_name, customer_id, store_id, email, * )\n# rental ( customer_id, rental_id, rental_date, return_date, * )\n# payment ( staff_id, rental_id, payment_id, amount, * )\n#  rental.staff_id = staff.staff_id\n#  rental.customer_id = customer.customer_id \n#  payment.rental_id = rental.rental_id \n#  payment.customer_id = customer.customer_id \n#  payment.staff_id = staff.staff_id \n#\n### Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( customer_id, email, address_id, active, * )\n# store ( last_update, manager_staff_id, address_id, * )\n# inventory ( inventory_id, film_id, last_update, * )\n# film_text ( description, film_id, * )\n#  inventory.store_id = store.store_id\n#  customer.store_id = store.store_id \n#\n### Which store has most the customers?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( customer_id, email, address_id, active, * )\n# store ( manager_staff_id, address_id, last_update, * )\n# rental ( customer_id, rental_id, inventory_id, staff_id, * )\n# inventory ( inventory_id, film_id, last_update, * )\n#  rental.inventory_id = inventory.inventory_id\n#  rental.customer_id = customer.customer_id \n#  inventory.store_id = store.store_id \n#  customer.store_id = store.store_id \n#\n### Return the id of the store with the most customers.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( payment_date, customer_id, payment_id, last_update, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n# film_category ( category_id, last_update, * )\n#\n### What is the largest payment amount?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# payment ( payment_date, payment_id, customer_id, last_update, * )\n# rental ( rental_id, inventory_id, customer_id, staff_id, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  payment.rental_id = rental.rental_id\n#\n### Return the amount of the largest payment.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( address_id, staff_id, last_name, active, * )\n# address ( address, city_id, district, address2, * )\n# city ( city_id, country_id, last_update, * )\n# category ( name, last_update, * )\n#  staff.address_id = address.address_id\n#  address.city_id = city.city_id \n#\n### Where does the staff member with the first name Elsa live?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# staff ( address_id, staff_id, last_name, picture, * )\n# address ( address_id, address2, district, phone, * )\n# film_text ( description, film_id, * )\n# film_actor ( film_id, last_update, * )\n#  staff.address_id = address.address_id\n#\n### Give the address of the staff member who has the first name Elsa.\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer ( first_name, last_name, last_update, store_id, * )\n# rental ( rental_date, rental_id, return_date, inventory_id, * )\n# staff ( staff_id, address_id, picture, email, * )\n# payment ( rental_id, payment_date, staff_id, amount, * )\n#  rental.staff_id = staff.staff_id\n#  rental.customer_id = customer.customer_id \n#  payment.rental_id = rental.rental_id \n#  payment.customer_id = customer.customer_id \n#  payment.staff_id = staff.staff_id \n#\n### What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?\nSELECT"
    },
    {
        "db_id": "sakila_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rental ( return_date, rental_date, rental_id, staff_id, * )\n# customer ( customer_id, last_name, last_update, store_id, * )\n# staff ( staff_id, address_id, picture, email, * )\n# payment ( rental_id, payment_date, staff_id, amount, * )\n#  rental.staff_id = staff.staff_id\n#  rental.customer_id = customer.customer_id \n#  payment.rental_id = rental.rental_id \n#  payment.customer_id = customer.customer_id \n#  payment.staff_id = staff.staff_id \n#\n### Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, party, age, home_city, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### How many drivers are there?\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, age, driver_id, party, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the name, home city, and age for all drivers.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, age, driver_id, home_city, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the party and the number of drivers in each party.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( age, driver_id, party, home_city, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the name of drivers in descending order of age.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, party, age, driver_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show all different home cities.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, party, age, driver_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the home city with the most number of drivers.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( party, age, name, driver_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the party with drivers from Hartford and drivers older than 40.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( age, name, party, driver_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show home city where at least two drivers older than 40 are from.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( age, name, party, driver_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show all home cities except for those having a driver older than 40.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, party, age, home_city, * )\n# school_bus ( school_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the names of the drivers without a school bus.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, grade, location, school_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# driver ( party, age, driver_id, home_city, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the types of schools that have two schools.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, party, age, home_city, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, grade, location, type, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the school name and driver name for all school buses.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school_bus ( school_id, driver_id, if_full_time, * )\n# driver ( party, age, driver_id, home_city, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### What is the maximum, minimum and average years spent working on a school bus?\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, type, grade, location, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# driver ( party, age, driver_id, home_city, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the school name and type for schools without a school bus.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( type, school, grade, location, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# driver ( party, age, driver_id, home_city, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### Show the type of school and the number of buses for each type.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( age, name, party, driver_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### How many drivers are from Hartford city or younger than 40?\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# driver ( name, age, party, driver_id, * )\n# school_bus ( driver_id, years_working, if_full_time, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### List names for drivers from Hartford city and younger than 40.\nSELECT"
    },
    {
        "db_id": "school_bus",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school_bus ( years_working, school_id, if_full_time, * )\n# driver ( name, party, age, home_city, * )\n# school ( school, location, type, school_id, * )\n#  school_bus.school_id = school.school_id\n#  school_bus.driver_id = driver.driver_id \n#\n### find the name of driver who is driving the school bus with the longest working history.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school_id, location, enrollment, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### How many schools are there?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school_id, location, enrollment, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Count the number of schools.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( location, school, school_id, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### List the locations of schools in ascending order of enrollment.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( location, school, school_id, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What is the list of school locations sorted in ascending order of school enrollment?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( location, school, school_id, enrollment, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### List the locations of schools in descending order of founded year.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( location, school, school_id, enrollment, * )\n# school_performance ( school_id, class_a, class_aa, * )\n# school_details ( colors, league, class, division, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What is the list of school locations sorted in descending order of school foundation year?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( enrollment, school, location, school_id, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the enrollments of schools whose denomination is not \"Catholic\"?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( enrollment, school, school_id, location, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### List the enrollment for each school that does not have \"Catholic\" as denomination.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, location, school_id, founded, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What is the average enrollment of schools?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, location, school_id, founded, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Take the average of the school enrollment.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, age, position, school_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the teams of the players, sorted in ascending alphabetical order?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, age, position, school_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Find the team of each player and sort them in ascending alphabetical order.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, team, age, player_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### How many different positions of players are there?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, team, age, player_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Count the number of distinct player positions.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( age, player, position, player_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Find the team of the player of the highest age.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( age, player, position, school_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Which team has the oldest player?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( age, player, position, school_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### List the teams of the players with the top 5 largest ages.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( age, player, position, player_id, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# school ( location, school_id, enrollment, founded, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the teams that have the 5 oldest players?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player, age, position, * )\n# school ( location, school, enrollment, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### For each player, show the team and the location of school they belong to.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( team, player, age, position, * )\n# school ( location, school, enrollment, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the team and the location of school each player belongs to?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, team, age, position, * )\n# school ( location, school, enrollment, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Show the locations of schools that have more than 1 player.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( location, school, enrollment, founded, * )\n# player ( player, team, age, position, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Which schools have more than 1 player? Give me the school locations.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school_id, school, enrollment, boys_or_girls, * )\n# player ( player, team, age, position, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Show the denomination of the school that has the most players.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school_id, school, enrollment, location, * )\n# player ( player, team, age, position, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What is the denomination of the school the most players belong to?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, school_id, enrollment, founded, * )\n# school_details ( school_id, colors, league, class, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Show locations and nicknames of schools.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, school_id, enrollment, founded, * )\n# school_details ( school_id, colors, league, class, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the location and nickname of each school?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, location, school_id, enrollment, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Please show different denominations and the corresponding number of schools.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, location, school_id, enrollment, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### For each denomination, return the denomination and the count of schools with that denomination.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, location, school_id, enrollment, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Please show different denominations and the corresponding number of schools in descending order.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, location, school_id, enrollment, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school_colors, school, school_id, location, * )\n# school_details ( school_id, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### List the school color of the school that has the largest enrollment.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school_colors, school, school_id, location, * )\n# school_details ( school_id, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What is the school color of the school with the largest enrollment?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, team, age, position, * )\n# school ( location, school, enrollment, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### List the locations of schools that do not have any player.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player, team, age, position, * )\n# school ( location, school, enrollment, founded, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Which schools do not have any player? Give me the school locations.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( denomination, school, school_id, location, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Show the denomination shared by schools founded before 1890 and schools founded after 1900\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( denomination, school, location, school_id, * )\n# school_details ( colors, league, class, division, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the denominations used by both schools founded before 1890 and schools founded  after 1900?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school_details ( division, school_id, colors, league, * )\n# school ( school, location, enrollment, founded, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Show the nicknames of schools that are not in division 1.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school_details ( division, school_id, colors, league, * )\n# school ( school_id, location, enrollment, founded, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the nicknames of schools whose division is not 1?\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, school_id, location, enrollment, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### Show the denomination shared by more than one school.\nSELECT"
    },
    {
        "db_id": "school_player",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# school ( school, school_id, location, enrollment, * )\n# school_details ( league, class, division, school_id, * )\n# school_performance ( school_year, class_a, class_aa, * )\n# player ( team, age, position, player_id, * )\n#  player.school_id = school.school_id\n#  school_performance.school_id = school.school_id \n#  school_details.school_id = school.school_id \n#\n### What are the denomination more than one school have?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# league ( name, id, * )\n# country ( id, * )\n# sqlite_sequence ( seq, * )\n# player_attributes ( date, potential, balance, strength, * )\n#  league.country_id = country.id\n#\n### List all country and league names.\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# country ( id, * )\n# league ( id, name, * )\n# sqlite_sequence ( seq, * )\n# player_attributes ( date, potential, balance, strength, * )\n#  league.country_id = country.id\n#\n### How many leagues are there in England?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player_api_id, player_fifa_api_id, id, player_name, * )\n# player_attributes ( player_fifa_api_id, id, player_api_id, date, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, team_fifa_api_id, team_api_id, buildupplayspeed, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### What is the average weight of all players?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player_api_id, player_fifa_api_id, id, player_name, * )\n# player_attributes ( player_api_id, positioning, gk_positioning, id, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, buildupplaypositioningclass, defenceaggression, team_fifa_api_id, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### What is the maximum and minimum height of all players?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( player_api_id, player_fifa_api_id, id, date, * )\n# player ( player_api_id, player_fifa_api_id, id, birthday, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, team_fifa_api_id, team_api_id, buildupplayspeed, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### List all player names who have an overall rating higher than the average.\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( player_api_id, player_fifa_api_id, id, agility, * )\n# player ( player_api_id, player_fifa_api_id, id, birthday, * )\n# team_attributes ( buildupplaydribblingclass, buildupplaypositioningclass, id, team_fifa_api_id, * )\n# sqlite_sequence ( seq, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### What are the names of players who have the best dribbling?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( crossing, player_api_id, player_fifa_api_id, positioning, * )\n# player ( player_api_id, player_fifa_api_id, id, birthday, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( id, date, buildupplaypositioningclass, chancecreationcrossing, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### List the names of all players who have a crossing score higher than 90 and prefer their right foot.\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( player_api_id, preferred_foot, player_fifa_api_id, id, * )\n# player ( player_api_id, player_fifa_api_id, id, birthday, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, team_fifa_api_id, team_api_id, buildupplayspeed, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### List the names of all left-footed players who have overall rating between 85 and 90.\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( preferred_foot, player_api_id, player_fifa_api_id, id, * )\n# player ( player_fifa_api_id, id, player_name, birthday, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, team_fifa_api_id, team_api_id, buildupplayspeed, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### What is the average rating for right-footed players and left-footed players?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( preferred_foot, player_api_id, player_fifa_api_id, id, * )\n# player ( player_fifa_api_id, id, player_name, birthday, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, chancecreationpositioningclass, team_fifa_api_id, team_api_id, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### Of all players with an overall rating greater than 80, how many are right-footed and left-footed?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( overall_rating, player_fifa_api_id, id, date, * )\n# player ( height, player_fifa_api_id, id, player_name, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, team_fifa_api_id, team_api_id, buildupplayspeed, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### List all of the player ids with a height of at least 180cm and an overall rating higher than 85.\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( player_api_id, id, player_fifa_api_id, player_name, * )\n# player_attributes ( id, preferred_foot, player_fifa_api_id, positioning, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, chancecreationpositioningclass, team_fifa_api_id, team_api_id, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### List all of the ids for left-footed players with a height between 180cm and 190cm.\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player_attributes ( player_api_id, player_fifa_api_id, id, date, * )\n# player ( player_name, player_fifa_api_id, id, birthday, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, team_fifa_api_id, team_api_id, buildupplayspeed, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### Who are the top 3 players in terms of overall rating?\nSELECT"
    },
    {
        "db_id": "soccer_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( birthday, player_api_id, player_fifa_api_id, id, * )\n# player_attributes ( player_api_id, player_fifa_api_id, aggression, id, * )\n# sqlite_sequence ( seq, * )\n# team_attributes ( date, team_fifa_api_id, team_api_id, buildupplayspeed, * )\n#  player_attributes.player_fifa_api_id = player.player_fifa_api_id\n#  player_attributes.player_api_id = player.player_api_id \n#\n### List the names and birthdays of the top five players in terms of potential.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_area, district_id, headquartered_city, city_population, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### Find all the distinct district names ordered by city area in descending.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_area, district_id, headquartered_city, city_population, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### What are the different district names in order of descending city area?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, dimensions, interface, product_id, * )\n# store_product ( store_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### Find the list of page size which have more than 3 product listed\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, dimensions, interface, product_id, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What is the maximum page size for everything that has more than 3 products listed?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, district_id, headquartered_city, city_area, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### Find the name and population of district with population between 200000 and 2000000\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, district_id, headquartered_city, city_area, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, city_area, district_id, headquartered_city, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### Find the name all districts with city area greater than 10 or population larger than 100000\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, city_area, district_id, headquartered_city, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, district_id, headquartered_city, city_area, * )\n# store_district ( store_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### Which district has the largest population?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, district_id, headquartered_city, city_area, * )\n# store_district ( store_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### What is the name of the district with the most residents?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_area, district_id, headquartered_city, city_population, * )\n# store ( store_id, type, ranking, store_name, * )\n# store_district ( store_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#\n### Which district has the least area?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_area, district_id, headquartered_city, city_population, * )\n# store ( store_id, type, ranking, store_name, * )\n# store_district ( store_id, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### What is the name of the district with the smallest area?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, district_name, district_id, headquartered_city, * )\n# store_district ( district_id, * )\n# store ( type, ranking, store_id, store_name, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### Find the total population of the top 3 districts with the largest area.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_population, district_id, district_name, headquartered_city, * )\n# store ( store_id, type, ranking, store_name, * )\n# store_district ( store_id, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### What is the total number of residents for the districts with the 3 largest areas?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( ranking, store_id, store_name, area_size, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### Find all types of store and number of them.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( ranking, store_id, store_name, area_size, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### For each type of store, how many of them are there?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_name, type, ranking, area_size, * )\n# store_district ( district_id, * )\n# district ( district_id, headquartered_city, city_population, city_area, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### Find the names of all stores in Khanewal District.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store_district ( district_id, * )\n# store ( store_name, type, ranking, area_size, * )\n# district ( district_id, headquartered_city, city_population, city_area, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### What are the names of all the stores located in Khanewal District?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store_district ( store_id, * )\n# store ( store_name, type, ranking, area_size, * )\n# district ( city_population, district_name, headquartered_city, city_area, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### Find all the stores in the district with the most population.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store_district ( store_id, * )\n# store ( store_id, type, ranking, area_size, * )\n# district ( city_population, district_name, headquartered_city, city_area, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### What are the names of all the stores in the largest district by population?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_id, type, ranking, area_size, * )\n# district ( district_id, city_population, city_area, district_name, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### Which city is the headquarter of the store named \"Blackville\" in?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_id, type, ranking, area_size, * )\n# district ( district_id, city_population, district_name, city_area, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### What city is the headquarter of the store Blackville?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store_district ( store_id, * )\n# store ( store_name, type, area_size, ranking, * )\n# district ( headquartered_city, city_population, city_area, district_name, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### Find the number of stores in each city.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( district_id, city_population, city_area, district_name, * )\n# store_district ( store_id, * )\n# store ( type, ranking, store_name, area_size, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### How many stores are headquarted in each city?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_name, type, ranking, area_size, * )\n# district ( headquartered_city, district_id, city_area, district_name, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### Find the city with the most number of stores.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_id, type, number_of_product_category, store_name, * )\n# district ( district_id, headquartered_city, city_area, district_name, * )\n# store_district ( store_id, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### What is the city with the most number of flagship stores?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, dimensions, interface, product_id, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What is the average pages per minute color?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, dimensions, interface, product_id, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What is the average number of pages per minute color?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_name, type, ranking, area_size, * )\n# store_product ( product_id, * )\n# product ( product_id, dimensions, interface, dpi, * )\n# store_district ( district_id, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What products are available at store named \"Miramichi\"?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store ( store_name, type, ranking, area_size, * )\n# store_product ( product_id, * )\n# product ( product_id, dimensions, interface, dpi, * )\n# store_district ( district_id, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What products are sold at the store named Miramichi?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( max_page_size, product, dimensions, interface, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### Find products with max page size as \"A4\" and pages per minute color smaller than 5.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( max_page_size, product, dimensions, interface, * )\n# store_product ( store_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( max_page_size, product, dimensions, interface, * )\n# store_product ( store_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### Find products with max page size as \"A4\" or pages per minute color smaller than 5.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( max_page_size, product, dimensions, interface, * )\n# store_product ( store_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( dpi, dimensions, interface, product_id, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### Find all the product whose name contains the word \"Scanner\".\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( dimensions, dpi, interface, product_id, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What are all of the products whose name includes the substring \"Scanner\"?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, dimensions, interface, product_id, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### Find the most prominent max page size among all the products.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, dimensions, interface, product_id, * )\n# store_product ( product_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What is the most common maximum page size?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, product_id, dimensions, interface, * )\n# store_product ( store_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### Find the name of the products that are not using the most frequently-used max page size.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# product ( product, dimensions, interface, product_id, * )\n# store_product ( store_id, * )\n# store_district ( district_id, * )\n# store ( ranking, store_id, store_name, area_size, * )\n#  store_district.store_id = store.store_id\n#  store_product.store_id = store.store_id \n#\n### What are the names of all products that are not the most frequently-used maximum page size?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_area, district_id, district_name, headquartered_city, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### Find the total population of the districts where the area is bigger than the average city area.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# district ( city_area, district_id, district_name, headquartered_city, * )\n# store_district ( district_id, * )\n# store_product ( product_id, * )\n# product ( dimensions, interface, product_id, dpi, * )\n#  store_district.district_id = district.district_id\n#\n### What is the total population for all the districts that have an area larger tahn the average city area?\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store_district ( store_id, * )\n# district ( district_name, headquartered_city, city_population, city_area, * )\n# store ( store_id, ranking, store_name, area_size, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### Find the names of districts where have both city mall and village store type stores.\nSELECT"
    },
    {
        "db_id": "store_product",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# store_district ( store_id, * )\n# district ( district_name, headquartered_city, city_population, city_area, * )\n# store ( store_id, ranking, store_name, area_size, * )\n# store_product ( product_id, * )\n#  store_district.store_id = store.store_id\n#  store_district.district_id = district.district_id \n#  store_product.store_id = store.store_id \n#\n### What are the names of the districts that have both mall and village store style shops?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_name, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### How many regions do we have?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_code, region_name, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Count the number of regions.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_name, region_id, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show all region code and region name sorted by the codes.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_name, region_id, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the codes and names for all regions, sorted by codes?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### List all region names in alphabetical order.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of the regions in alphabetical order?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show names for all regions except for Denmark.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Return the names of all regions other than Denmark.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( storm_id, name, dates_active, max_speed, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### How many storms had death records?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( storm_id, name, dates_active, max_speed, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Count the number of storms in which at least 1 person died.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( number_deaths, name, storm_id, max_speed, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### List name, dates active, and number of deaths for all storms with at least 1 death.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( number_deaths, name, storm_id, max_speed, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names, dates active, and number of deaths for storms that had 1 or more death?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( damage_millions_usd, storm_id, name, dates_active, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show the average and maximum damage for all storms with max speed higher than 1000.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( damage_millions_usd, name, storm_id, dates_active, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What is the average and maximum damage in millions for storms that had a max speed over 1000?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( number_deaths, damage_millions_usd, name, storm_id, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What is the total number of deaths and damage for all storms with a max speed greater than the average?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( number_deaths, damage_millions_usd, name, storm_id, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, damage_millions_usd, storm_id, dates_active, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### List name and damage for all storms in a descending order of max speed.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( damage_millions_usd, name, storm_id, dates_active, * )\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names and damage in millions for storms, ordered by their max speeds descending?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### How many regions are affected?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_name, region_code, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Count the number of different affected regions.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_name, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show the name for regions not affected.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of regions that were not affected?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( storm_id, number_city_affected, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show the name for regions and the number of storms for each region.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# region ( region_name, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### How many storms occured in each region?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_name, region_code, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### List the name for storms and the number of affected regions for each storm.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# affected_region ( region_id, number_city_affected, * )\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### How many regions were affected by each storm?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( max_speed, name, dates_active, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What is the storm name and max speed which affected the greatest number of regions?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( max_speed, name, dates_active, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Return the name and max speed of the storm that affected the most regions.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show the name of storms which don't have affected region in record.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of storms that did not affect any regions?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# affected_region ( number_city_affected, region_id, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n# region ( region_name, region_code, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show storm name with at least two regions and 10 cities affected.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( number_city_affected, region_id, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# affected_region ( region_id, number_city_affected, * )\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# region ( region_code, region_name, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show all storm names except for those with at least two affected regions.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_name, region_code, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of storms that did not affect two or more regions?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( number_deaths, name, dates_active, max_speed, * )\n# region ( region_name, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the region names affected by the storm with a number of deaths of least 10?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_name, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( number_deaths, name, dates_active, max_speed, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Return the names of the regions affected by storms that had a death count of at least 10.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# region ( region_name, region_code, * )\n# affected_region ( region_id, number_city_affected, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show all storm names affecting region \"Denmark\".\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_name, region_code, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of the storms that affected Denmark?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( storm_id, number_city_affected, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Show the region name with at least two storms.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_id, region_code, * )\n# storm ( storm_id, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( storm_id, number_city_affected, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of regions with two or more storms?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# affected_region ( storm_id, number_city_affected, * )\n# region ( region_name, region_code, * )\n# storm ( number_deaths, name, dates_active, max_speed, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Find the names of the regions which were affected by the storm that killed the greatest number of people.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# region ( region_name, region_code, * )\n# affected_region ( storm_id, number_city_affected, * )\n# storm ( number_deaths, name, dates_active, max_speed, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of regions that were affected by the storm in which the most people died?\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_name, region_code, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### Find the name of the storm that affected both Afghanistan and Albania regions.\nSELECT"
    },
    {
        "db_id": "storm_record",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# storm ( name, dates_active, max_speed, damage_millions_usd, * )\n# affected_region ( region_id, number_city_affected, * )\n# region ( region_name, region_code, * )\n#  affected_region.region_id = region.region_id\n#  affected_region.storm_id = storm.storm_id \n#\n### What are the names of the storms that affected both the regions of Afghanistan and Albania?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( grade, classroom, firstname, * )\n# teachers ( firstname, classroom, * )\n#\n### Find the number of students in total.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( lastname, firstname, grade, * )\n# teachers ( classroom, firstname, * )\n#\n### How many students are there?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, firstname, grade, * )\n# teachers ( lastname, firstname, * )\n#\n### Find the last names of students studying in room 111.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, firstname, grade, * )\n# teachers ( classroom, firstname, * )\n#\n### What are the last names of students in room 111?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, grade, * )\n# teachers ( classroom, lastname, * )\n#\n### Find the first names of students studying in room 108.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, grade, * )\n# teachers ( classroom, lastname, * )\n#\n### What are the first names of students in room 108?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, grade, * )\n# teachers ( classroom, lastname, * )\n#\n### What are the first names of students studying in room 107?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, grade, * )\n# teachers ( classroom, lastname, * )\n#\n### List the first names of all the students in room 107.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### What are the grade number and classroom number of each class in the list?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Which grade is studying in classroom 103?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Find the grade taught in classroom 103.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Find the grade studying in room 105.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( firstname, classroom, * )\n#\n### Which grade is studying in room 105?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Which classrooms are used by grade 4?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Find the classrooms in which grade 4 is studying.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Which classrooms are used by grade 5?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Show me the classrooms grade 5 is using.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( classroom, firstname, * )\n# list ( grade, firstname, classroom, * )\n#\n### Find the last names of the teachers that teach fifth grade.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( classroom, firstname, * )\n# list ( grade, firstname, classroom, * )\n#\n### what are the last names of the teachers who teach grade 5?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( lastname, classroom, * )\n# list ( grade, lastname, classroom, * )\n#\n### Find the first names of the teachers that teach first grade.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( grade, lastname, classroom, * )\n# teachers ( lastname, classroom, * )\n#\n### What are the first names of the teachers who teach grade 1?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( classroom, lastname, * )\n# list ( classroom, lastname, grade, * )\n#\n### Find the first names of all the teachers that teach in classroom 110.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( classroom, lastname, * )\n# list ( classroom, lastname, grade, * )\n#\n### Which teachers teach in classroom 110? Give me their first names.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( classroom, firstname, * )\n# list ( lastname, firstname, grade, * )\n#\n### Find the last names of teachers teaching in classroom 109.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( classroom, firstname, * )\n# list ( lastname, firstname, grade, * )\n#\n### Which teachers teach in classroom 109? Give me their last names.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### Report the first name and last name of all the teachers.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### What are the first name and last name of all the teachers?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, grade, classroom, * )\n# teachers ( lastname, classroom, * )\n#\n### Report the first name and last name of all the students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( lastname, grade, classroom, * )\n# teachers ( lastname, classroom, * )\n#\n### Show each student's first name and last name.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### Find all students taught by OTHA MOYER. Output the first and last names of the students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( firstname, grade, classroom, * )\n#\n### Find all students taught by MARROTTE KIRK. Output first and last names of students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### Which are the first and last names of the students taught by MARROTTE KIRK?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, grade, classroom, * )\n# teachers ( firstname, classroom, * )\n#\n### Find the first and last name of all the teachers that teach EVELINA BROMLEY.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( firstname, grade, classroom, * )\n#\n### Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, grade, classroom, * )\n# teachers ( firstname, classroom, * )\n#\n### Find the last names of all the teachers that teach GELL TAMI.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, classroom, grade, * )\n# teachers ( classroom, firstname, * )\n#\n### What are the last names of the teachers who teach the student called GELL TAMI?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### How many students does LORIA ONDERSMA teaches?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( firstname, grade, classroom, * )\n#\n### Count the number of students the teacher LORIA ONDERSMA teaches.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### How many students does KAWA GORDON teaches?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( firstname, grade, classroom, * )\n#\n### Find the number of students taught by the teacher KAWA GORDON.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### Find the number of students taught by TARRING LEIA.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### How many students are taught by teacher TARRING LEIA?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, grade, classroom, * )\n# teachers ( firstname, classroom, * )\n#\n### How many teachers does the student named CHRISSY NABOZNY have?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, classroom, grade, * )\n# teachers ( firstname, classroom, * )\n#\n### Find the number of teachers who teach the student called CHRISSY NABOZNY.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, grade, classroom, * )\n# teachers ( firstname, classroom, * )\n#\n### How many teachers does the student named MADLOCK RAY have?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( firstname, classroom, grade, * )\n# teachers ( firstname, classroom, * )\n#\n### Find the number of teachers who teach the student called MADLOCK RAY.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( firstname, grade, classroom, * )\n#\n### Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( grade, firstname, classroom, * )\n#\n### Find the last names of the students in third grade that are not taught by COVIN JEROME.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( grade, firstname, classroom, * )\n#\n### Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( firstname, classroom, * )\n#\n### For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( firstname, classroom, * )\n#\n### For each classroom, report the classroom number and the number of grades using it.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### For each classroom, show the classroom number and count the number of distinct grades that use the room.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( lastname, grade, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Which classroom has the most students?\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( lastname, firstname, grade, * )\n# teachers ( lastname, firstname, * )\n#\n### Find the classroom that the most students use.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( lastname, grade, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Report the number of students in each classroom.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### For each classroom, show the classroom number and find how many students are using it.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### For each grade 0 classroom, report the total number of students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### For each grade 0 classroom, return the classroom number and the count of students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Report the total number of students for each fourth-grade classroom.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( classroom, lastname, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### For each fourth-grade classroom, show the classroom number and the total number of students using it.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( firstname, grade, classroom, * )\n#\n### Find the name of the teacher who teaches the largest number of students.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( firstname, classroom, * )\n# list ( lastname, grade, classroom, * )\n#\n### Which teacher teaches the most students? Give me the first name and last name of the teacher.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# list ( lastname, grade, firstname, * )\n# teachers ( lastname, firstname, * )\n#\n### Find the number of students in one classroom.\nSELECT"
    },
    {
        "db_id": "student_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# teachers ( lastname, firstname, * )\n# list ( lastname, grade, firstname, * )\n#\n### How many students does one classroom have?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( student_id, registration_date, * )\n# student_course_attendance ( student_id, date_of_attendance, * )\n# courses ( course_id, course_description, other_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### which course has most number of registered students?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( student_id, registration_date, * )\n# courses ( course_name, course_description, other_details, * )\n# student_course_attendance ( student_id, date_of_attendance, * )\n# students ( student_details, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### What is the name of the course with the most registered students?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### what is id of students who registered some courses but the least number of courses in these students?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# courses ( course_name, course_description, other_details, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### What are the ids of the students who registered for some courses but had the least number of courses for all students?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( last_name, person_id, password, middle_name, * )\n# candidates ( candidate_details, * )\n# candidate_assessments ( qualification, assessment_date, asessment_outcome_code, * )\n# people_addresses ( person_id, address_id, date_from, date_to, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  candidates.candidate_id = people.person_id \n#  people_addresses.person_id = people.person_id \n#\n### what are the first name and last name of all candidates?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( last_name, person_id, password, middle_name, * )\n# candidates ( candidate_details, * )\n# candidate_assessments ( qualification, assessment_date, asessment_outcome_code, * )\n# people_addresses ( person_address_id, address_id, date_from, date_to, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  candidates.candidate_id = people.person_id \n#  people_addresses.person_id = people.person_id \n#\n### What are the first and last names of all the candidates?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( date_of_attendance, course_id, * )\n# students ( student_details, * )\n# people ( password, first_name, middle_name, last_name, * )\n# student_course_registrations ( course_id, registration_date, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### List the id of students who never attends courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# people ( password, first_name, middle_name, last_name, * )\n# student_course_registrations ( course_id, registration_date, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What are the  ids of every student who has never attended a course?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( date_of_attendance, course_id, * )\n# students ( student_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### List the id of students who attended some courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What are the ids of all students who have attended at least one course?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, course_description, other_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### What are the ids of all students for courses and what are the names of those courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( student_id, course_id, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What is detail of the student who most recently registered course?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( student_id, course_id, * )\n# students ( student_details, * )\n# student_course_attendance ( date_of_attendance, course_id, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What details do we have on the students who registered for courses most recently?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( student_id, date_of_attendance, * )\n# courses ( course_name, course_description, other_details, * )\n# student_course_registrations ( student_id, registration_date, * )\n# students ( student_details, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### How many students attend course English?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_description, other_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### How many students are attending English courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### How many courses do the student whose id is 171 attend?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### How many courses does the student with id 171 actually attend?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( person_id, password, first_name, middle_name, * )\n# candidates ( candidate_details, * )\n# candidate_assessments ( qualification, assessment_date, asessment_outcome_code, * )\n# people_addresses ( person_id, address_id, date_from, date_to, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  candidates.candidate_id = people.person_id \n#  people_addresses.person_id = people.person_id \n#\n### Find id of the candidate whose email is stanley.monahan@example.org?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( person_id, password, first_name, middle_name, * )\n# candidates ( candidate_details, * )\n# candidate_assessments ( qualification, assessment_date, asessment_outcome_code, * )\n# people_addresses ( person_id, address_id, date_from, date_to, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  candidates.candidate_id = people.person_id \n#  people_addresses.person_id = people.person_id \n#\n### What is the id of the candidate whose email is stanley.monahan@example.org?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( date_of_attendance, course_id, * )\n# candidates ( candidate_details, * )\n# student_course_registrations ( registration_date, course_id, * )\n# people_addresses ( date_to, person_id, person_address_id, address_id, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#\n### Find id of the candidate who most recently accessed the course?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( date_of_attendance, course_id, * )\n# candidates ( candidate_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# people_addresses ( date_from, person_id, person_address_id, address_id, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#\n### What is the id of the candidate who most recently accessed the course?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# people ( password, first_name, middle_name, last_name, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What is detail of the student who registered the most number of courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What are the details of the student who registered for the most number of courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### List the id of students who registered some courses and the number of their registered courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### For every student who is registered for some course, how many courses are they registered for?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( student_id, registration_date, * )\n# student_course_attendance ( student_id, date_of_attendance, * )\n# courses ( course_name, course_description, other_details, * )\n# students ( student_details, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### How many registed students do each course have? List course name and the number of their registered students?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( student_id, registration_date, * )\n# courses ( course_name, course_description, other_details, * )\n# student_course_attendance ( student_id, date_of_attendance, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### For each course id, how many students are registered and what are the course names?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate_assessments ( asessment_outcome_code, qualification, assessment_date, * )\n# candidates ( candidate_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  student_course_attendance.course_id = student_course_registrations.course_id \n#  student_course_attendance.student_id = student_course_registrations.student_id \n#\n### Find id of candidates whose assessment code is \"Pass\"?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate_assessments ( asessment_outcome_code, qualification, assessment_date, * )\n# candidates ( candidate_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  student_course_attendance.course_id = student_course_registrations.course_id \n#  student_course_attendance.student_id = student_course_registrations.student_id \n#\n### What are the ids of the candidates that have an outcome code of Pass?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate_assessments ( candidate_id, qualification, assessment_date, * )\n# people ( person_id, password, first_name, middle_name, * )\n# candidates ( candidate_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  candidates.candidate_id = people.person_id \n#\n### Find the cell mobile number of the candidates whose assessment code is \"Fail\"?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# candidate_assessments ( candidate_id, qualification, assessment_date, * )\n# people ( person_id, password, first_name, middle_name, * )\n# candidates ( candidate_details, * )\n# student_course_registrations ( course_id, registration_date, * )\n#  candidate_assessments.candidate_id = candidates.candidate_id\n#  candidates.candidate_id = people.person_id \n#\n### What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# student_course_attendance ( student_id, date_of_attendance, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### What are the id of students who registered course 301?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( student_id, date_of_attendance, * )\n# students ( student_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### What are the ids of the students who registered for course 301?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( registration_date, course_id, * )\n# student_course_attendance ( student_id, date_of_attendance, * )\n# students ( student_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### What is the id of the student who most recently registered course 301?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( registration_date, course_id, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### What are the ids of the students who registered for course 301 most recently?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( address_id, country, line_1, line_2, * )\n# people_addresses ( person_id, person_address_id, date_from, date_to, * )\n# people ( password, first_name, middle_name, last_name, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  people_addresses.person_id = people.person_id\n#  people_addresses.address_id = addresses.address_id \n#\n### Find distinct cities of addresses of people?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( city, country, line_1, line_2, * )\n# people_addresses ( person_id, date_from, person_address_id, date_to, * )\n# people ( password, first_name, middle_name, last_name, * )\n# students ( student_details, * )\n#  people_addresses.person_id = people.person_id\n#  people_addresses.address_id = addresses.address_id \n#  students.student_id = people.person_id \n#\n### What are the different cities where people live?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( city, country, line_1, line_2, * )\n# people_addresses ( person_id, person_address_id, date_from, date_to, * )\n# students ( student_details, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  people_addresses.person_id = people.person_id\n#  people_addresses.address_id = addresses.address_id \n#  students.student_id = people.person_id \n#\n### Find distinct cities of address of students?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# addresses ( city, country, line_1, line_2, * )\n# people_addresses ( person_id, person_address_id, date_from, date_to, * )\n# students ( student_details, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  people_addresses.person_id = people.person_id\n#  people_addresses.address_id = addresses.address_id \n#  students.student_id = people.person_id \n#\n### What are the different cities where students live?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, course_description, other_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### List the names of courses in alphabetical order?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, course_description, other_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### What are the names of the courses in alphabetical order?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( person_id, password, middle_name, last_name, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#\n### List the first names of people in alphabetical order?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# people ( person_id, password, middle_name, last_name, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n# student_course_registrations ( course_id, registration_date, * )\n# people_addresses ( person_id, address_id, date_from, date_to, * )\n#  people_addresses.person_id = people.person_id\n#\n### What are the first names of the people in alphabetical order?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### What are the id of students who registered courses or attended courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n# students ( student_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### What are the ids of the students who either registered or attended a course?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( course_id, date_of_attendance, * )\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### Find the id of courses which are registered or attended by student whose id is 121?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( course_id, date_of_attendance, * )\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# candidate_assessments ( candidate_id, assessment_date, asessment_outcome_code, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#\n### What are the ids of the courses that are registered or attended by the student whose id is 121?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( course_id, date_of_attendance, * )\n# student_course_registrations ( course_id, registration_date, * )\n# students ( student_details, * )\n# people ( first_name, password, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What are all info of students who registered courses but not attended courses?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( course_id, registration_date, * )\n# student_course_attendance ( date_of_attendance, course_id, * )\n# students ( student_details, * )\n# people ( password, first_name, middle_name, last_name, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  students.student_id = people.person_id \n#\n### What are all details of the students who registered but did not attend any course?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( registration_date, course_id, * )\n# courses ( course_name, course_description, other_details, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### List the id of students who registered course statistics in the order of registration date.\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_registrations ( registration_date, course_id, * )\n# courses ( course_name, course_description, other_details, * )\n# students ( student_details, * )\n# student_course_attendance ( course_id, date_of_attendance, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### What are the ids of the students who registered course statistics by order of registration date?\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( date_of_attendance, course_id, * )\n# courses ( course_name, course_description, other_details, * )\n# students ( student_details, * )\n# student_course_registrations ( student_id, registration_date, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### List the id of students who attended  statistics courses in the order of attendance date.\nSELECT"
    },
    {
        "db_id": "student_assessment",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_attendance ( date_of_attendance, course_id, * )\n# courses ( course_name, course_description, other_details, * )\n# student_course_registrations ( student_id, registration_date, * )\n# students ( student_details, * )\n#  student_course_attendance.course_id = student_course_registrations.course_id\n#  student_course_attendance.student_id = student_course_registrations.student_id \n#  student_course_registrations.student_id = students.student_id \n#  student_course_registrations.course_id = courses.course_id \n#\n### What are the ids of the students who attended courses in the statistics department in order of attendance date.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### How many submissions are there?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Count the number of submissions.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, college, submission_id, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### List the authors of submissions in ascending order of scores.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, college, submission_id, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Find the author for each submission and list them in ascending order of submission score.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### What are the authors of submissions and their colleges?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, submission_id, scores, * )\n# acceptance ( result, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### For each submission, show the author and their affiliated college.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show the names of authors from college \"Florida\" or \"Temple\"\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Which authors with submissions are from college \"Florida\" or \"Temple\"?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, college, submission_id, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### What is the average score of submissions?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, college, submission_id, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Compute the average score of submissions.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, college, submission_id, * )\n# acceptance ( result, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### What is the author of the submission with the highest score?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, college, submission_id, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Find the author who achieved the highest score in a submission.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show different colleges along with the number of authors of submission from each college.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### For each college, return the college name and the count of authors with submissions from that college.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show the most common college of authors of submissions.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( author, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Which college has the most authors with submissions?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, author, submission_id, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( college, author, submission_id, * )\n# acceptance ( submission_id, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Which colleges have both authors with submission score above 90 and authors with submission score below 80?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# acceptance ( result, workshop_id, * )\n# submission ( author, college, scores, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show the authors of submissions and the acceptance results of their submissions.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# acceptance ( result, workshop_id, * )\n# submission ( author, college, scores, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### For each submission, find its author and acceptance result.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( submission_id, author, college, * )\n# acceptance ( result, workshop_id, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show the result of the submission with the highest score.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# acceptance ( result, workshop_id, * )\n# submission ( scores, author, college, * )\n# workshop ( venue, name, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Which submission received the highest score in acceptance result. Show me the result.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( submission_id, college, scores, * )\n# workshop ( date, venue, name, * )\n# acceptance ( workshop_id, result, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show each author and the number of workshops they submitted to.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( submission_id, college, scores, * )\n# workshop ( date, venue, name, * )\n# acceptance ( workshop_id, result, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### How many workshops did each author submit to? Return the author name and the number of workshops.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( submission_id, college, scores, * )\n# workshop ( date, venue, name, * )\n# acceptance ( workshop_id, result, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show the authors who have submissions to more than one workshop.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( submission_id, college, scores, * )\n# workshop ( date, venue, name, * )\n# acceptance ( submission_id, result, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Which authors have submitted to more than one workshop?\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# workshop ( venue, name, workshop_id, * )\n# submission ( college, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Show the date and venue of each workshop in ascending alphabetical order of the venue.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# workshop ( venue, name, workshop_id, * )\n# submission ( college, submission_id, scores, * )\n# acceptance ( submission_id, workshop_id, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( submission_id, college, scores, * )\n# workshop ( date, venue, name, * )\n# acceptance ( workshop_id, result, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### List the authors who do not have submission to any workshop.\nSELECT"
    },
    {
        "db_id": "workshop_paper",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# submission ( submission_id, college, scores, * )\n# acceptance ( workshop_id, result, * )\n# workshop ( date, venue, name, * )\n#  acceptance.submission_id = submission.submission_id\n#  acceptance.workshop_id = workshop.workshop_id \n#\n### Which authors did not submit to any workshop?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, text, year, * )\n# business ( rating, name, review_count, bid, * )\n# checkin ( business_id, count, day, * )\n# tip ( text, year, month, tip_id, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### List all the businesses with more than 4.5 stars\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, text, year, * )\n# business ( rating, name, bid, city, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### List all businesses with rating 3.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# user ( name, uid, * )\n# review ( user_id, rating, text, year, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.user_id = user.user_id\n#\n### List all user ids with name Michelle\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( business_id, name, bid, city, * )\n# category ( business_id, category_name, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  neighbourhood.business_id = business.business_id\n#  checkin.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Find all states in which there is a Whataburger\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, business_id, bid, rating, * )\n# review ( rid, rating, text, year, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all cities in which there is a restaurant called \" MGM Grand Buffet \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( rating, business_id, bid, name, * )\n# review ( rating, rid, user_id, text, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n# checkin ( business_id, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find the cities of businesses rated below 1.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( business_id, bid, name, rating, * )\n# review ( business_id, user_id, rating, text, * )\n# tip ( text, user_id, year, month, * )\n# checkin ( business_id, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all cities which has a \" Taj Mahal \" .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( business_id, rid, user_id, text, * )\n# business ( rating, review_count, bid, name, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### List all the reviews which rated a business less than 1\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, text, year, * )\n# business ( business_id, name, review_count, bid, * )\n# checkin ( business_id, count, day, * )\n# tip ( tip_id, text, year, month, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### List all the restaurant rated more than 3.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, business_id, bid, review_count, * )\n# review ( rid, rating, user_id, text, * )\n# checkin ( cid, count, day, * )\n# tip ( tip_id, text, user_id, year, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### find all cities which has a \" Taj Mahal \" restaurant\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, business_id, rating, text, * )\n# user ( name, uid, * )\n# tip ( business_id, text, year, month, * )\n# checkin ( count, day, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### list all the reviews by Niloofar\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( user_id, rid, rating, text, * )\n# user ( name, uid, * )\n# business ( business_id, bid, review_count, city, * )\n# tip ( business_id, tip_id, text, year, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### list all the businesses which have a review by Niloofar\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, user_id, rid, text, * )\n# business ( business_id, name, review_count, bid, * )\n# user ( name, uid, * )\n# tip ( business_id, tip_id, text, year, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### list all the businesses which Niloofar rated 5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, business_id, rating, text, * )\n# user ( name, uid, * )\n# business ( business_id, bid, review_count, rating, * )\n# category ( category_name, business_id, * )\n#  review.business_id = business.business_id\n#  review.user_id = user.user_id \n#  category.business_id = business.business_id \n#\n### List all the reviews by Michelle for Italian restaurant\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( state, name, bid, review_count, * )\n# review ( rid, rating, user_id, text, * )\n# tip ( tip_id, text, user_id, year, * )\n# checkin ( cid, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### find the number of reviews written for \" Cafe Zinho \" restaurant in Texas\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( business_id, name, review_count, bid, * )\n# review ( rating, rid, year, user_id, * )\n# category ( business_id, id, * )\n# tip ( tip_id, text, user_id, year, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### List all 5 star Italian restaurant\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, name, bid, review_count, * )\n# category ( business_id, category_name, * )\n# tip ( tip_id, text, user_id, year, * )\n#  tip.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### List all the neighbourhoods with Italian restaurant in Madison\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# review ( business_id, rid, user_id, text, * )\n# business ( business_id, city, name, bid, * )\n# category ( business_id, category_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, business_id, bid, city, * )\n# review ( rid, user_id, rating, text, * )\n# checkin ( cid, count, day, * )\n# tip ( text, year, month, tip_id, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### find all the restaurant in Pennsylvania\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, business_id, bid, city, * )\n# neighbourhood ( neighbourhood_name, business_id, * )\n# category ( business_id, category_name, * )\n# checkin ( cid, count, day, * )\n#  neighbourhood.business_id = business.business_id\n#  checkin.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### List all businesses that are restaurant in Pennsylvania .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, user_id, rating, year, * )\n# business ( business_id, name, bid, city, * )\n# category ( business_id, category_name, * )\n# tip ( tip_id, user_id, year, text, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Find all the reviews for all Pet Groomers with more than 100 reviews\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, state, bid, * )\n# neighbourhood ( business_id, id, * )\n# review ( business_id, rating, text, year, * )\n# checkin ( business_id, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### What are all the breweries in \" Los Angeles \" ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, bid, rating, * )\n# neighbourhood ( business_id, id, * )\n# review ( business_id, rating, text, year, * )\n# checkin ( business_id, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all breweries in Los Angeles\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, state, bid, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# review ( rid, rating, text, year, * )\n# checkin ( business_id, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all breweries in \" Los Angeles \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, business_id, rating, text, * )\n# user ( name, uid, * )\n# business ( business_id, bid, city, review_count, * )\n# tip ( user_id, tip_id, text, year, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### Find all users who reviewed restaurant \" Mesa Grill \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, full_address, business_id, state, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# review ( rid, user_id, rating, text, * )\n# checkin ( cid, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### List the addresses of all Walmart in \" Los Angeles \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( business_id, rid, rating, year, * )\n# user ( name, uid, * )\n# business ( city, name, state, bid, * )\n# tip ( user_id, tip_id, text, year, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### Find all restaurant reviewed by Patrick in \" Dallas \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( business_id, rid, rating, text, * )\n# user ( name, uid, * )\n# business ( city, name, bid, review_count, * )\n# tip ( user_id, tip_id, text, year, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### Which restaurant in Dallas were reviewed by user Patrick ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, business_id, rating, year, * )\n# user ( name, uid, * )\n# tip ( user_id, tip_id, text, year, * )\n# business ( bid, business_id, name, city, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### Find all Bars reviewed by Patrick\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, business_id, text, * )\n# user ( name, uid, * )\n# tip ( business_id, tip_id, text, year, * )\n# business ( business_id, bid, name, review_count, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### Find all Bars reviewed by Patrick with at least 3 stars\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( year, business_id, tip_id, text, * )\n# review ( year, rid, business_id, rating, * )\n# user ( name, uid, * )\n# business ( name, bid, city, rating, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### Find all users who have written tips for \" Barrio Cafe \" in 2015\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( business_id, state, name, bid, * )\n# review ( rating, rid, text, year, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all businesses in Texas with a rating below 2\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, bid, rating, * )\n# neighbourhood ( business_id, id, * )\n# review ( rid, user_id, rating, text, * )\n# checkin ( cid, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all restaurant Seafood in Los Angeles\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, state, bid, * )\n# neighbourhood ( business_id, id, * )\n# review ( rid, user_id, rating, text, * )\n# category ( business_id, category_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### List all the Seafood restaurant in \" Los Angeles \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, state, bid, * )\n# neighbourhood ( business_id, id, * )\n# category ( id, business_id, * )\n# review ( rid, user_id, rating, text, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Find all restaurant that serve Seafood in \" Los Angeles \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, business_id, text, * )\n# user ( name, uid, * )\n# tip ( tip_id, business_id, text, year, * )\n# business ( bid, business_id, name, city, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### Find all reviews by Patrick with a rating above 4\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, business_id, is_open, bid, * )\n# neighbourhood ( business_id, id, * )\n# review ( rid, user_id, rating, text, * )\n# checkin ( cid, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all Apple Store in \" Los Angeles \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, user_id, text, * )\n# business ( rating, city, name, bid, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# checkin ( cid, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all Dallas restaurant with a rating above 4.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( name, city, bid, rating, * )\n# review ( rid, user_id, rating, text, * )\n# tip ( text, year, month, tip_id, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### What neighbourhood is restaurant \" Flat Top Grill \" in ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( business_id, tip_id, text, user_id, * )\n# business ( name, bid, review_count, city, * )\n# review ( rid, user_id, rating, text, * )\n# checkin ( business_id, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all tips about \" Vintner Grill \" that received more than 9 likes\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, rating, user_id, * )\n# business ( name, bid, review_count, city, * )\n# tip ( year, tip_id, text, user_id, * )\n# checkin ( business_id, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all reviews about \" Kabob Palace \" in year 2014\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( business_id, text, year, month, * )\n# neighbourhood ( business_id, id, * )\n# business ( city, state, bid, name, * )\n# review ( user_id, rid, rating, text, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### Find all users who have written tips about businesses in Dallas\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, state, business_id, bid, * )\n# review ( rid, user_id, rating, text, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( tip_id, business_id, text, year, * )\n# review ( rid, business_id, rating, text, * )\n# user ( name, uid, * )\n# category ( category_name, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### Find the users who have given tips on Pet Groomers\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( tip_id, text, user_id, year, * )\n# business ( state, business_id, bid, city, * )\n# review ( rid, user_id, rating, text, * )\n# checkin ( cid, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all tips for \" Cafe Zinho \" in Texas .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( business_id, rid, rating, text, * )\n# user ( user_id, uid, * )\n# category ( business_id, category_name, * )\n# business ( bid, name, review_count, city, * )\n#  review.business_id = business.business_id\n#  review.user_id = user.user_id \n#  category.business_id = business.business_id \n#\n### List all users who reviewed businesses that are restaurant .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( year, tip_id, text, user_id, * )\n# business ( state, name, bid, city, * )\n# review ( year, rid, user_id, rating, * )\n# neighbourhood ( neighbourhood_name, business_id, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, business_id, rid, rating, * )\n# business ( bid, name, is_open, review_count, * )\n# user ( user_id, uid, * )\n# tip ( business_id, user_id, tip_id, text, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### List all users who reviewed businesses that are restaurant in 2010 .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, business_id, rating, * )\n# tip ( year, tip_id, business_id, text, * )\n# user ( name, uid, * )\n# checkin ( count, day, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### Find all the tips from a user who has written a review in 2012\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, user_id, text, * )\n# business ( rating, review_count, bid, name, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all reviews for businesses rated 2.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, name, bid, review_count, * )\n# tip ( tip_id, text, year, month, * )\n# review ( rid, rating, year, user_id, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### find the number of escape games in Madison\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, name, bid, review_count, * )\n# tip ( tip_id, text, user_id, year, * )\n# review ( rid, year, user_id, rating, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### What is the number of escape games in Madison\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, name, bid, review_count, * )\n# tip ( tip_id, year, month, text, * )\n# review ( rid, year, user_id, rating, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### How many escape games exist in Madison\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( id, business_id, * )\n# business ( business_id, bid, name, review_count, * )\n# category ( business_id, category_name, * )\n# tip ( tip_id, text, user_id, year, * )\n#  tip.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### What is the number of escape games in \" Madison \" ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, name, bid, review_count, * )\n# tip ( tip_id, text, user_id, year, * )\n# category ( business_id, category_name, * )\n#  tip.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### How many escape games are there in Madison ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( business_id, rid, user_id, text, * )\n# business ( business_id, review_count, bid, name, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### find the number of restaurant rated more than 3.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checkin ( count, cid, day, * )\n# business ( name, city, state, bid, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# review ( rid, rating, text, year, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### find the total checkins in Moroccan restaurant in \" Los Angeles \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checkin ( day, cid, count, * )\n# business ( name, city, bid, state, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# review ( rid, rating, text, year, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checkin ( day, cid, count, * )\n# business ( name, city, state, bid, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# category ( business_id, category_name, * )\n#  neighbourhood.business_id = business.business_id\n#  checkin.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### find the total checkins in Moroccan restaurant in \" Los Angeles \" per day\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checkin ( day, cid, count, * )\n# business ( state, bid, name, city, * )\n# category ( business_id, category_name, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  neighbourhood.business_id = business.business_id\n#  checkin.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### find the total checkins in Italian Delis in each state on Sunday\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, business_id, rating, * )\n# user ( name, uid, * )\n# tip ( user_id, tip_id, business_id, text, * )\n# business ( name, business_id, bid, city, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### How many reviews has Niloofar written in 2015\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, business_id, user_id, text, * )\n# business ( business_id, bid, name, city, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### what is the average rating given in Michelle reviews\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checkin ( day, cid, count, * )\n# business ( name, bid, city, rating, * )\n# review ( rid, user_id, rating, text, * )\n# tip ( tip_id, text, year, month, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### What is the number of checkins for \" Cafe Zinho \" on Friday\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( user_id, rid, rating, text, * )\n# business ( city, name, bid, review_count, * )\n# tip ( user_id, tip_id, text, year, * )\n# neighbourhood ( neighbourhood_name, id, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### how many users reviewed \" Sushi Too \" in Pittsburgh\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, state, bid, * )\n# neighbourhood ( business_id, id, * )\n# review ( business_id, rid, user_id, text, * )\n# checkin ( business_id, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### What is the number of restaurant in Pittsburgh rated 4.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( tip_id, business_id, text, month, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n# review ( rating, text, year, month, * )\n#\n### How many tips have been written in 2015\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( user_id, business_id, tip_id, text, * )\n# user ( name, uid, * )\n# business ( bid, name, city, rating, * )\n# review ( business_id, user_id, rating, text, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### What is the total likes on tips from Niloofar\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( business_id, tip_id, user_id, year, * )\n# business ( name, bid, review_count, city, * )\n# review ( rid, user_id, year, rating, * )\n# checkin ( cid, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### What is the total likes on tips about \" Cafe Zinho \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( likes, business_id, tip_id, text, * )\n# user ( uid, name, * )\n# business ( business_id, bid, review_count, city, * )\n# review ( user_id, rid, year, rating, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### What is the total likes on tips from Niloofar about \" Cafe Zinho \"\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( year, tip_id, business_id, text, * )\n# user ( uid, name, * )\n# review ( user_id, year, business_id, rating, * )\n# checkin ( count, day, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### How many tips has Michelle written in 2010\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( year, tip_id, business_id, text, * )\n# user ( uid, name, * )\n# review ( user_id, rid, business_id, rating, * )\n# checkin ( count, day, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### Return me the number of tips that are written by Michelle in 2010 .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( month, year, tip_id, business_id, * )\n# user ( uid, name, * )\n# review ( rid, user_id, year, business_id, * )\n# checkin ( count, day, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### How many tips has Michelle written in April\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( business_id, bid, name, city, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n# review ( business_id, rating, text, year, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### what is the number of restaurant in Texas\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, user_id, text, * )\n# business ( rating, city, state, bid, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# tip ( tip_id, text, user_id, year, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### How many Bars in \" Dallas \" have a rating above 3.5 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, user_id, text, * )\n# business ( rating, city, state, bid, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# tip ( tip_id, text, year, month, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### How many Bars in Dallas have a rating above 3.5 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( state, name, review_count, city, * )\n# review ( rid, user_id, rating, text, * )\n# tip ( user_id, tip_id, text, year, * )\n# checkin ( cid, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, user_id, rating, * )\n# business ( name, review_count, bid, city, * )\n# tip ( year, user_id, tip_id, text, * )\n# checkin ( cid, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many people reviewed \" Bistro Di Napoli \" in 2015 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, bid, name, rating, * )\n# checkin ( count, day, business_id, * )\n# review ( business_id, rating, text, year, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many restaurant are there in the Hazelwood district of Dallas ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( city, business_id, name, bid, * )\n# neighbourhood ( business_id, id, * )\n# checkin ( business_id, count, day, * )\n# review ( business_id, rating, text, year, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many Starbucks are there in Dallas Texas ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, user_id, rating, text, * )\n# business ( name, review_count, bid, city, * )\n# tip ( year, tip_id, text, user_id, * )\n# checkin ( cid, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many reviews does \" Acacia Cafe \" have ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checkin ( business_id, count, cid, * )\n# business ( business_id, bid, city, is_open, * )\n# review ( rid, rating, text, year, * )\n# tip ( tip_id, text, year, month, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find the average number of checkins in restaurant \" Barrio Cafe \" per day\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, bid, name, rating, * )\n# checkin ( count, day, business_id, * )\n# review ( rating, text, year, month, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rid, business_id, rating, text, * )\n# user ( name, uid, * )\n# tip ( business_id, tip_id, text, year, * )\n# checkin ( count, day, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### How many reviews has Adrienne written ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, month, rid, business_id, * )\n# user ( uid, name, * )\n# tip ( month, user_id, tip_id, business_id, * )\n# business ( bid, business_id, name, city, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### How many reviews has Michelle written in March 2014 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( business_id, rid, user_id, rating, * )\n# user ( name, uid, * )\n# tip ( year, business_id, tip_id, text, * )\n# business ( bid, business_id, name, city, * )\n#  tip.business_id = business.business_id\n#  tip.user_id = user.user_id \n#  review.business_id = business.business_id \n#  review.user_id = user.user_id \n#\n### How many businesses has Michelle reviewed in 2010 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, user_id, rating, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# business ( city, review_count, state, bid, * )\n# user ( user_id, uid, * )\n#  review.business_id = business.business_id\n#  review.user_id = user.user_id \n#  neighbourhood.business_id = business.business_id \n#\n### How many businesses in \" San Diego \" has Christine reviewed in 2010 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, name, state, bid, * )\n# category ( business_id, category_name, * )\n# checkin ( business_id, count, day, * )\n#  neighbourhood.business_id = business.business_id\n#  checkin.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### How many Target are there in \" Los Angeles \" ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( user_id, rid, rating, text, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# business ( name, city, review_count, bid, * )\n# tip ( user_id, tip_id, text, year, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  neighbourhood.business_id = business.business_id \n#\n### How many users have reviewed Irish Pub in Dallas ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, business_id, user_id, * )\n# business ( bid, business_id, name, city, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### What is the average rating of reviews written in year 2014 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, user_id, rating, * )\n# business ( name, review_count, bid, city, * )\n# tip ( year, user_id, tip_id, text, * )\n# checkin ( cid, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many people reviewed restaurant \" Vintner Grill \" in 2010 ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# review ( rid, rating, text, year, * )\n# business ( review_count, name, city, bid, * )\n# checkin ( count, day, business_id, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# user ( user_id, uid, * )\n# review ( business_id, user_id, rating, text, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.user_id = user.user_id\n#\n### Find the number of users called Michelle\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, is_open, bid, city, * )\n# category ( id, category_name, * )\n# checkin ( cid, count, day, * )\n# review ( rid, user_id, rating, text, * )\n#  review.business_id = business.business_id\n#  checkin.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Return me the number of businesses that are restaurant .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( business_id, bid, name, review_count, * )\n# checkin ( count, cid, day, * )\n# review ( rid, rating, user_id, text, * )\n# tip ( tip_id, year, text, user_id, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Return me the number of cities that has \" Panda Express \" .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( business_id, tip_id, text, year, * )\n# user ( uid, name, * )\n# review ( rid, business_id, rating, text, * )\n# checkin ( count, day, business_id, * )\n#  tip.user_id = user.user_id\n#  review.user_id = user.user_id \n#\n### Return me the number of tips that are written by Michelle .\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( id, business_id, * )\n# checkin ( business_id, cid, day, * )\n# review ( rating, text, year, month, * )\n# business ( name, city, rating, state, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find the total checkins in \" Brighton Heights \" neighbourhood\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( year, rid, business_id, user_id, * )\n# business ( bid, business_id, name, city, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find the total number of reviews written in March\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# tip ( tip_id, text, user_id, year, * )\n# review ( rid, rating, text, year, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#\n### Find the number of tips written in each month\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( rating, city, bid, name, * )\n# review ( rating, rid, user_id, text, * )\n# checkin ( count, day, business_id, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### How many neighbourhoods have a business with rating 5 in Madison ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, business_id, bid, city, * )\n# review ( rid, rating, user_id, text, * )\n# tip ( tip_id, text, year, month, * )\n# category ( business_id, category_name, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Give me all the Moroccan restaurant in Texas\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# checkin ( cid, count, day, * )\n# business ( name, bid, city, rating, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n# review ( business_id, rating, text, year, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### which business has the most number of checkins\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( business_id, bid, name, rating, * )\n# checkin ( count, day, business_id, * )\n# review ( rating, text, year, month, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### which neighbourhood has the most number of businesses in Madison\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, user_id, text, * )\n# business ( rating, city, name, bid, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# category ( business_id, id, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Find all Mexican restaurant in Dallas with at least 3.5 stars\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( rating, city, name, state, * )\n# review ( rating, rid, user_id, text, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# category ( category_name, business_id, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Find all Mexican restaurant in Dallas with a rating above 3.5\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( name, business_id, city, bid, * )\n# checkin ( cid, count, day, * )\n# neighbourhood ( neighbourhood_name, business_id, * )\n# review ( rid, rating, user_id, text, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all restaurant with Valet Service in Dallas Texas\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# neighbourhood ( business_id, id, * )\n# business ( name, city, bid, review_count, * )\n# category ( category_name, business_id, * )\n# review ( rid, rating, user_id, text, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Find all Italian restaurant in the Meadowood neighbourhood of Madison\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, user_id, text, * )\n# business ( rating, city, review_count, name, * )\n# neighbourhood ( neighbourhood_name, id, * )\n# checkin ( business_id, count, day, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# business ( business_id, name, bid, rating, * )\n# neighbourhood ( business_id, id, * )\n# category ( id, business_id, * )\n# review ( business_id, user_id, rating, text, * )\n#  review.business_id = business.business_id\n#  neighbourhood.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### How many Egyptian restaurant are there in Edinburgh ?\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( rating, rid, text, year, * )\n# user ( name, uid, * )\n# checkin ( count, day, business_id, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  review.user_id = user.user_id\n#\n### Find users whose average review rating is below 3\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# review ( month, year, rid, rating, * )\n# business ( name, review_count, bid, city, * )\n# tip ( month, business_id, tip_id, text, * )\n# checkin ( business_id, count, day, * )\n#  tip.business_id = business.business_id\n#  review.business_id = business.business_id \n#  checkin.business_id = business.business_id \n#\n### Find the business with the most number of reviews in April\nSELECT"
    },
    {
        "db_id": "yelp",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# category ( id, category_name, * )\n# business ( name, bid, city, rating, * )\n# checkin ( business_id, count, day, * )\n# neighbourhood ( business_id, neighbourhood_name, * )\n#  neighbourhood.business_id = business.business_id\n#  checkin.business_id = business.business_id \n#  category.business_id = business.business_id \n#\n### Find the business which has the most number of categories\nSELECT"
    }
]