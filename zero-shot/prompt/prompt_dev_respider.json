[
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# architect ( id, name, nationality, * )\n# bridge ( name, location, architect_id, length_meters, * )\n# mill ( location, name, type, notes, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### How many architects are female?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# architect ( gender, name, id, * )\n# mill ( architect_id, id, location, type, * )\n# bridge ( architect_id, name, location, length_meters, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### List the name, nationality and id of all male architects ordered by their names lexicographically.\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bridge ( architect_id, id, name, location, * )\n# architect ( name, gender, nationality, * )\n# mill ( architect_id, id, location, type, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What is the maximum length in meters for the bridges and what are the architects' names?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bridge ( length_meters, id, name, location, * )\n# mill ( location, name, type, notes, * )\n# architect ( gender, id, nationality, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What is the average length in feet of the bridges?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mill ( built_year, name, architect_id, id, * )\n# bridge ( name, location, architect_id, length_meters, * )\n# architect ( gender, id, nationality, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What are the names and year of construction for the mills of 'Grondzeiler' type?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# architect ( nationality, name, gender, * )\n# mill ( name, type, id, location, * )\n# bridge ( name, id, length_meters, location, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What are the distinct names and nationalities of the architects who have ever built a mill?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mill ( name, id, type, notes, * )\n# bridge ( name, location, architect_id, length_meters, * )\n# architect ( gender, id, nationality, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What are the names of the mills which are not located in 'Donceel'?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# architect ( nationality, name, gender, * )\n# mill ( type, id, location, name, * )\n# bridge ( id, name, location, length_meters, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What are the distinct types of mills that are built by American or Canadian architects?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# architect ( name, gender, nationality, * )\n# bridge ( id, name, location, length_meters, * )\n# mill ( id, location, name, type, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What are the ids and names of the architects who built at least 3 bridges ?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# architect ( nationality, name, gender, * )\n# mill ( id, location, name, type, * )\n# bridge ( id, name, length_meters, location, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What is the id, name and nationality of the architect who built most mills?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# architect ( name, gender, nationality, * )\n# bridge ( id, name, location, length_meters, * )\n# mill ( id, name, location, type, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What are the ids, names and genders of the architects who built two bridges or one mill?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bridge ( location, id, architect_id, length_meters, * )\n# mill ( architect_id, id, name, type, * )\n# architect ( gender, id, nationality, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mill ( id, location, type, notes, * )\n# bridge ( name, location, architect_id, length_meters, * )\n# architect ( gender, id, nationality, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### Which of the mill names contains the french word 'Moulin'?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mill ( name, id, location, type, * )\n# bridge ( architect_id, name, length_feet, id, * )\n# architect ( name, gender, nationality, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mill ( id, location, name, notes, * )\n# bridge ( name, location, architect_id, length_meters, * )\n# architect ( gender, id, nationality, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### What is the most common mill type, and how many are there?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mill ( architect_id, id, location, name, * )\n# architect ( name, gender, nationality, * )\n# bridge ( id, name, location, length_meters, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### How many architects haven't built a mill before year 1850?\nSELECT"
    },
    {
        "db_id": "architecture",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# bridge ( name, architect_id, length_meters, id, * )\n# architect ( nationality, name, gender, * )\n# mill ( id, name, location, type, * )\n#  mill.architect_id = architect.id\n#  bridge.architect_id = architect.id \n#\n### show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( location, name, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show all the locations where no cinema has capacity over 800.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( location, name, capacity, cinema_id, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show all the locations where some cinemas were opened in both year 2010 and year 2011.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( name, capacity, location, openning_year, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### How many cinema do we have?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( name, capacity, location, openning_year, * )\n# film ( title, rank_in_series, number_in_season, directed_by, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Count the number of cinemas.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( name, capacity, location, cinema_id, * )\n# schedule ( date, show_times_per_day, price, film_id, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show name, opening year, and capacity for each cinema.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show the cinema name and location for cinemas with capacity above average.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( name, capacity, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### What are all the locations with a cinema?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( name, capacity, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Find the distinct locations that has a cinema.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( name, capacity, location, cinema_id, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show all the cinema names and opening years in descending order of opening year.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### What are the name and location of the cinema with the largest capacity?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( capacity, name, location, cinema_id, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( name, capacity, cinema_id, openning_year, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show each location and the number of cinemas there.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( location, name, capacity, cinema_id, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### What is the location with the most cinemas opened in year 2010 or later?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( location, name, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show all the locations with at least two cinemas with capacity above 300.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( location, name, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Which locations have 2 or more cinemas with capacity over 300?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( title, film_id, rank_in_series, number_in_season, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show the title and director for all films.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( title, film_id, rank_in_series, number_in_season, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### What are the title and director of each film?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, rank_in_series, number_in_season, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show all directors.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, rank_in_series, number_in_season, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Who are all the directors?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, rank_in_series, number_in_season, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### List all directors along with the number of films directed by each director.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# schedule ( cinema_id, film_id, date, price, * )\n# cinema ( cinema_id, capacity, location, openning_year, * )\n# film ( title, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### What is total number of show times per dat for each cinema?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n# schedule ( film_id, cinema_id, date, show_times_per_day, * )\n# cinema ( name, capacity, location, openning_year, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### What are the title and maximum price of each film?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n# schedule ( film_id, cinema_id, date, show_times_per_day, * )\n# cinema ( name, capacity, location, openning_year, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Give me the title and highest price for each film.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# schedule ( date, price, cinema_id, show_times_per_day, * )\n# film ( title, rank_in_series, number_in_season, directed_by, * )\n# cinema ( name, capacity, location, openning_year, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show cinema name, film title, date, and price for each record in schedule.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( directed_by, title, rank_in_series, number_in_season, * )\n# schedule ( cinema_id, date, price, show_times_per_day, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### What are the title and director of the films without any schedule?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, title, rank_in_series, number_in_season, * )\n# schedule ( show_times_per_day, cinema_id, date, price, * )\n# cinema ( name, capacity, location, openning_year, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Show director with the largest number of show times in total.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( location, cinema_id, name, openning_year, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Find the locations that have more than one movie theater with capacity above 300.\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# cinema ( location, name, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### In which locations are there more than one movie theater with capacity above 300?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### How many films have the word 'Dummy' in their titles?\nSELECT"
    },
    {
        "db_id": "cinema",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# film ( film_id, rank_in_series, number_in_season, directed_by, * )\n# cinema ( capacity, location, cinema_id, openning_year, * )\n# schedule ( price, cinema_id, film_id, show_times_per_day, * )\n#  schedule.film_id = film.film_id\n#  schedule.cinema_id = cinema.cinema_id \n#\n### Count the number of films whose title contains the word 'Dummy'.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( days, hours, dno, cname, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### How many courses are there in total?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cname, days, hours, dno, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### Count the number of courses.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cid, cname, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### How many courses have more than 2 credits?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cid, cname, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### Count the number of courses with more than 2 credits.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( credits, cid, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### List all names of courses with 1 credit?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( credits, cid, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### What are the names of courses with 1 credit?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cname, cid, hours, credits, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### Which courses are taught on days MTW?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( days, cid, instructor, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### What are the course names for courses taught on MTW?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dno, room, building, dname, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# member_of ( dno, appt_type, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### What is the number of departments in Division \"AS\"?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dno, dname, room, building, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  minor_in.dno = department.dno\n#\n### How many departments are in the division AS?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( room, dno, building, division, * )\n# faculty ( room, facid, rank, sex, * )\n# enrolled_in ( cid, grade, * )\n# member_of ( facid, appt_type, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### What are the phones of departments in Room 268?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( room, building, dno, division, * )\n# faculty ( room, facid, rank, sex, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  minor_in.dno = department.dno\n#\n### Give the phones for departments in room 268.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enrolled_in ( stuid, cid, * )\n# gradeconversion ( gradepoint, * )\n# student ( age, sex, major, lname, * )\n# minor_in ( dno, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  minor_in.stuid = student.stuid \n#\n### Find the number of students that have at least one grade \"B\".\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enrolled_in ( stuid, cid, * )\n# gradeconversion ( gradepoint, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### How many students have had at least one \"B\" grade?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# gradeconversion ( lettergrade, * )\n# minor_in ( dno, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n#  enrolled_in.grade = gradeconversion.lettergrade\n#\n### Find the max and min grade point for all letter grade.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# gradeconversion ( lettergrade, * )\n# minor_in ( dno, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, cid, * )\n#  enrolled_in.grade = gradeconversion.lettergrade\n#\n### What are the maximum and minumum grade points?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# faculty ( rank, sex, phone, room, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### Find the first names of students whose first names contain letter \"a\".\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# faculty ( rank, sex, phone, room, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### What are the first names for students who have an \"a\" in their first name?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, building, sex, facid, * )\n# department ( dno, division, room, dname, * )\n# member_of ( dno, appt_type, * )\n# student ( stuid, lname, age, sex, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### Find the first names and last names of male (sex is M) faculties who live in building NEB.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, building, sex, facid, * )\n# department ( dno, division, room, dname, * )\n# member_of ( dno, appt_type, * )\n# enrolled_in ( cid, grade, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### What are the full names of faculties with sex M and who live in building NEB?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( building, room, facid, sex, * )\n# department ( dno, building, division, dname, * )\n# member_of ( dno, appt_type, * )\n# enrolled_in ( cid, grade, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### Find the rooms of faculties with rank professor who live in building NEB.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( building, facid, room, sex, * )\n# member_of ( dno, appt_type, * )\n# department ( dno, room, division, dname, * )\n# enrolled_in ( cid, grade, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### What are the rooms for members of the faculty who are professors and who live in building NEB?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dname, dno, division, room, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  minor_in.dno = department.dno\n#\n### Find the department name that is in Building \"Mergenthaler\".\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dname, dno, division, room, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  minor_in.dno = department.dno\n#\n### What is the name of the department in the Building Mergenthaler?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cid, cname, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### List all information about courses sorted by credits in the ascending order.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cid, cname, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### What is all the information about courses, ordered by credits ascending?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( credits, cid, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### List the course name of courses sorted by credits.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( credits, cid, days, hours, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### What are the course names, ordered by credits?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( age, sex, major, stuid, * )\n# faculty ( rank, sex, phone, room, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### Find the first name of students in the descending order of age.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( age, sex, major, stuid, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### What are the first names of students, ordered by age from greatest to least?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( age, sex, major, stuid, * )\n# faculty ( rank, sex, phone, room, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### Find the last name of female (sex is F) students in the descending order of age.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( sex, age, stuid, major, * )\n# faculty ( rank, sex, phone, room, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### What are the last names of female students, ordered by age descending?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( building, facid, rank, sex, * )\n# department ( building, division, room, dname, * )\n# member_of ( dno, appt_type, * )\n# enrolled_in ( cid, grade, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### Find the last names of faculties in building Barton in alphabetic order.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( building, facid, rank, sex, * )\n# department ( building, division, room, dname, * )\n# member_of ( dno, appt_type, * )\n# student ( lname, age, sex, major, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### What are the last names of faculty in building Barton, sorted by last name?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, sex, phone, * )\n# enrolled_in ( cid, grade, * )\n# member_of ( dno, appt_type, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.grade = gradeconversion.lettergrade\n#  member_of.facid = faculty.facid \n#\n### Find the first names of faculties of rank Professor in alphabetic order.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( rank, facid, sex, phone, * )\n# member_of ( dno, appt_type, * )\n# enrolled_in ( cid, grade, * )\n# student ( age, sex, major, stuid, * )\n#  enrolled_in.stuid = student.stuid\n#  member_of.facid = faculty.facid \n#\n### What are the first names for all faculty professors, ordered by first name?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# minor_in ( stuid, * )\n# department ( dname, division, room, building, * )\n# student ( age, sex, major, lname, * )\n# faculty ( sex, phone, room, building, * )\n#  minor_in.stuid = student.stuid\n#  minor_in.dno = department.dno \n#\n### Find the name of the department that has the biggest number of students minored in?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# minor_in ( stuid, * )\n# department ( dname, division, room, building, * )\n# student ( stuid, age, sex, lname, * )\n# enrolled_in ( cid, grade, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#  minor_in.dno = department.dno \n#\n### What is the name of the department with the most students minoring in it?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# minor_in ( stuid, * )\n# department ( dname, division, room, building, * )\n# student ( age, sex, major, lname, * )\n# enrolled_in ( cid, grade, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#  minor_in.dno = department.dno \n#\n### Find the name of the department that has no students minored in?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# minor_in ( stuid, * )\n# department ( dname, division, room, building, * )\n# student ( stuid, age, sex, lname, * )\n# enrolled_in ( grade, cid, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#  minor_in.dno = department.dno \n#\n### What is the name of the department htat has no students minoring in it?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dno, division, room, building, * )\n# member_of ( facid, appt_type, * )\n# student ( age, sex, major, lname, * )\n# minor_in ( stuid, * )\n#  minor_in.stuid = student.stuid\n#  minor_in.dno = department.dno \n#  member_of.dno = department.dno \n#\n### Find the name of the department that has the fewest members.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dno, division, room, building, * )\n# member_of ( facid, appt_type, * )\n# student ( age, sex, major, lname, * )\n# minor_in ( stuid, * )\n#  minor_in.stuid = student.stuid\n#  minor_in.dno = department.dno \n#  member_of.dno = department.dno \n#\n### What is the name of the department with the fewest members?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# member_of ( dno, appt_type, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.grade = gradeconversion.lettergrade\n#  member_of.facid = faculty.facid \n#\n### Find the rank of the faculty that the fewest faculties belong to.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( facid, sex, phone, room, * )\n# member_of ( dno, appt_type, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.grade = gradeconversion.lettergrade\n#  member_of.facid = faculty.facid \n#\n### What is the least common faculty rank?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cid, dno, cname, days, * )\n# faculty ( facid, fname, rank, sex, * )\n# student ( stuid, lname, age, sex, * )\n# member_of ( dno, appt_type, * )\n#  course.instructor = faculty.facid\n#  member_of.facid = faculty.facid \n#\n### What are the first and last names of the instructors who teach the top 3 number of courses?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cid, days, cname, hours, * )\n# faculty ( facid, fname, rank, sex, * )\n# student ( stuid, fname, age, sex, * )\n# member_of ( dno, appt_type, * )\n#  course.instructor = faculty.facid\n#  member_of.facid = faculty.facid \n#\n### What are the full names of the 3 instructors who teach the most courses?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cid, dno, days, hours, * )\n# faculty ( building, rank, sex, phone, * )\n# department ( dno, room, division, dname, * )\n# member_of ( dno, appt_type, * )\n#  course.instructor = faculty.facid\n#  course.dno = department.dno \n#  member_of.facid = faculty.facid \n#  member_of.dno = department.dno \n#\n### Which building does the instructor who teaches the most number of courses live in?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( dno, cid, days, hours, * )\n# faculty ( building, rank, sex, phone, * )\n# department ( building, division, room, dname, * )\n# member_of ( dno, appt_type, * )\n#  course.instructor = faculty.facid\n#  course.dno = department.dno \n#  member_of.facid = faculty.facid \n#  member_of.dno = department.dno \n#\n### Give the building that the instructor who teaches the greatest number of courses lives in.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cname, days, hours, dno, * )\n# enrolled_in ( stuid, grade, * )\n# faculty ( sex, phone, room, building, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### What are the name of courses that have at least five enrollments?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( cname, days, hours, dno, * )\n# enrolled_in ( stuid, grade, * )\n# faculty ( sex, phone, room, building, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### Give the names of the courses with at least five enrollments.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( instructor, cid, days, hours, * )\n# faculty ( fname, facid, rank, sex, * )\n# student ( fname, stuid, age, sex, * )\n# enrolled_in ( cid, grade, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.cid = course.cid \n#  course.instructor = faculty.facid \n#\n### Find the first name and last name of the instructor of course that has course name\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( instructor, cid, days, hours, * )\n# faculty ( fname, facid, rank, sex, * )\n# student ( lname, stuid, age, sex, * )\n# member_of ( dno, appt_type, * )\n#  course.instructor = faculty.facid\n#  member_of.facid = faculty.facid \n#\n### What is the full name of the instructor who has a course named COMPUTER LITERACY?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( dno, cid, days, hours, * )\n# department ( dname, room, division, building, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( stuid, grade, * )\n#  enrolled_in.cid = course.cid\n#  course.instructor = faculty.facid \n#  course.dno = department.dno \n#\n### Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( dno, cid, days, hours, * )\n# department ( dname, room, division, building, * )\n# faculty ( rank, sex, phone, room, * )\n# enrolled_in ( stuid, grade, * )\n#  enrolled_in.cid = course.cid\n#  course.instructor = faculty.facid \n#  course.dno = department.dno \n#\n### What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, stuid, age, sex, * )\n# enrolled_in ( grade, cid, * )\n# gradeconversion ( lettergrade, * )\n# faculty ( facid, fname, rank, sex, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### Find the student first and last names and grade points of all enrollments.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enrolled_in ( stuid, cid, * )\n# student ( fname, stuid, age, sex, * )\n# gradeconversion ( lettergrade, * )\n# faculty ( fname, facid, rank, sex, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### What are the full names and gradepoints for all enrollments?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# enrolled_in ( stuid, cid, * )\n# gradeconversion ( lettergrade, * )\n# course ( days, hours, cname, credits, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.cid = course.cid \n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### Find the distinct student first names of all students that have grade point at least 3.8 in one course.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# enrolled_in ( grade, cid, * )\n# gradeconversion ( lettergrade, * )\n# course ( days, hours, cname, credits, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.cid = course.cid \n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### What are the distinct first names for students with a grade point of 3.8 or above in at least one course?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member_of ( facid, appt_type, * )\n# faculty ( fname, facid, rank, sex, * )\n# department ( division, dname, room, building, * )\n# minor_in ( stuid, * )\n#  minor_in.dno = department.dno\n#  member_of.facid = faculty.facid \n#  member_of.dno = department.dno \n#\n### Find the full names of faculties who are members of department with department number 520.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# faculty ( fname, facid, rank, sex, * )\n# member_of ( facid, appt_type, * )\n# department ( dname, division, room, building, * )\n# student ( lname, fname, age, sex, * )\n#  member_of.facid = faculty.facid\n#  member_of.dno = department.dno \n#\n### What are the full names of faculty members who are a part of department 520?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, fname, age, sex, * )\n# minor_in ( dno, * )\n# enrolled_in ( cid, grade, * )\n# faculty ( lname, fname, rank, sex, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### What are the first names and last names of the students that minor in the department with DNO 140.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( fname, stuid, major, age, * )\n# minor_in ( dno, * )\n# faculty ( lname, fname, rank, sex, * )\n# enrolled_in ( cid, grade, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### What are the full names of students minoring in department 140?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# member_of ( dno, appt_type, * )\n# department ( dname, division, room, building, * )\n# faculty ( lname, rank, sex, phone, * )\n# minor_in ( dno, * )\n#  minor_in.dno = department.dno\n#  member_of.facid = faculty.facid \n#  member_of.dno = department.dno \n#\n### Find the last names of faculties who are members of computer science department.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( dname, division, room, building, * )\n# faculty ( lname, rank, sex, phone, * )\n# member_of ( dno, appt_type, * )\n# minor_in ( stuid, * )\n#  minor_in.dno = department.dno\n#  member_of.facid = faculty.facid \n#  member_of.dno = department.dno \n#\n### What are the last names of faculty who are part of the computer science department?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# gradeconversion ( lettergrade, * )\n# faculty ( facid, rank, sex, phone, * )\n# enrolled_in ( grade, cid, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### Find the average grade point of student whose last name is Smith.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# gradeconversion ( lettergrade, * )\n# faculty ( facid, rank, sex, phone, * )\n# enrolled_in ( stuid, cid, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#\n### What is the average gradepoint for students with the last name Smith?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# gradeconversion ( lettergrade, * )\n# minor_in ( dno, * )\n# enrolled_in ( grade, cid, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  minor_in.stuid = student.stuid \n#\n### What is the maximum and minimum grade point of students who live in NYC?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student ( stuid, age, sex, major, * )\n# gradeconversion ( lettergrade, * )\n# enrolled_in ( grade, cid, * )\n# minor_in ( dno, * )\n#  enrolled_in.stuid = student.stuid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  minor_in.stuid = student.stuid \n#\n### Give the maximum and minimum gradepoints for students living in NYC?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( credits, hours, days, cid, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### Find the names of courses that have either 3 credits or 1 credit but 4 hours.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course ( credits, hours, days, cid, * )\n# faculty ( sex, phone, room, building, * )\n# enrolled_in ( cid, grade, * )\n# gradeconversion ( gradepoint, * )\n#  enrolled_in.cid = course.cid\n#  enrolled_in.grade = gradeconversion.lettergrade \n#  course.instructor = faculty.facid \n#\n### What are the names of courses that give either 3 credits, or 1 credit and 4 hours?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( building, division, dno, room, * )\n# faculty ( sex, phone, room, facid, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  minor_in.dno = department.dno\n#\n### Find the names of departments that are either in division AS or in division EN and in Building NEB.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# department ( building, division, dno, room, * )\n# faculty ( sex, phone, room, facid, * )\n# enrolled_in ( cid, grade, * )\n# minor_in ( dno, * )\n#  minor_in.dno = department.dno\n#\n### What are the names of departments either in division AS, or in division EN and in building NEB?\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enrolled_in ( cid, grade, * )\n# student ( fname, age, sex, major, * )\n# minor_in ( dno, * )\n# faculty ( fname, rank, sex, phone, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### Find the first name of students not enrolled in any course.\nSELECT"
    },
    {
        "db_id": "college_3",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# enrolled_in ( cid, grade, * )\n# student ( fname, age, sex, major, * )\n# minor_in ( dno, * )\n# faculty ( fname, rank, sex, phone, * )\n#  enrolled_in.stuid = student.stuid\n#  minor_in.stuid = student.stuid \n#\n### What are the first names of all students that are not enrolled in courses?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( country, name, age, is_male, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### How many singers do we have?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( country, name, age, is_male, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the total number of singers?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show name, country, age for all singers ordered by age from the oldest to the youngest.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( country, age, singer_id, is_male, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names, countries, and ages for every singer in descending order of age?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( age, singer_id, name, song_name, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, lowest, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the average, minimum, and maximum age of all singers from France?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( age, singer_id, name, is_male, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the average, minimum, and maximum age for all French singers?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( song_release_year, name, age, singer_id, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show the name and the release year of the song by the youngest singer.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( song_release_year, age, name, singer_id, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names and release years for all the songs of the youngest singer?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( age, name, singer_id, song_name, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are all distinct countries where singers above age 20 are from?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( age, singer_id, name, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are  the different countries with singers above age 20?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show all countries and the number of singers in each country.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### How many singers are from each country?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( age, name, singer_id, country, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### List all song names by singers above the average age.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( age, singer_id, name, country, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are all the song names by singers who are older than average?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, capacity, highest, average, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show location and name for all stadiums with a capacity between 5000 and 10000.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( capacity, name, highest, average, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the locations and names of all stations with capacity between 5000 and 10000?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( average, location, name, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the maximum capacity and the average of all stadiums ?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( average, location, name, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the average and maximum capacities for all stadiums ?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( capacity, average, stadium_id, location, * )\n# concert ( concert_id, theme, year, concert_name, * )\n# singer_in_concert ( singer_id, * )\n# singer ( country, age, singer_id, song_name, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the name and capacity for the stadium with highest average attendance?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( capacity, average, stadium_id, location, * )\n# concert ( concert_id, theme, year, concert_name, * )\n# singer_in_concert ( singer_id, * )\n# singer ( country, age, singer_id, song_name, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the name and capacity for the stadium with the highest average attendance?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, stadium_id, concert_name, theme, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### How many concerts are there in year 2014 or 2015?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, stadium_id, concert_name, theme, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### How many concerts occurred in 2014 or 2015?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, theme, year, concert_name, * )\n# stadium ( name, location, capacity, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show the stadium name and the number of concerts in each stadium.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, theme, year, concert_name, * )\n# stadium ( stadium_id, capacity, location, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### For each stadium, how many concerts play there?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( year, concert_id, theme, concert_name, * )\n# stadium ( name, capacity, location, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show the stadium name and capacity with most number of concerts in year 2014 or after.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( year, concert_id, theme, concert_name, * )\n# stadium ( name, capacity, location, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the name and capacity of the stadium with the most concerts after 2013 ?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, theme, stadium_id, concert_name, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Which year has most number of concerts?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, concert_name, theme, stadium_id, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the year that had the most concerts?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, location, capacity, highest, * )\n# concert ( concert_id, theme, year, concert_name, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show the stadium names without any concert.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, location, capacity, highest, * )\n# concert ( concert_id, theme, year, concert_name, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names of the stadiums without any concerts?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( age, singer_id, name, is_male, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show countries where a singer above age 40 and a singer below 30 are from.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( year, concert_id, theme, concert_name, * )\n# stadium ( name, location, capacity, highest, * )\n# singer_in_concert ( singer_id, * )\n# singer ( country, age, singer_id, song_name, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show names for all stadiums except for stadiums having a concert in year 2014.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( year, concert_id, theme, concert_name, * )\n# stadium ( name, location, capacity, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names of all stadiums that did not have a concert in 2014?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_name, theme, year, stadium_id, * )\n# singer_in_concert ( singer_id, * )\n# singer ( name, country, age, song_name, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Show the name and theme for all concerts and the number of singers in each concert.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( theme, concert_name, stadium_id, year, * )\n# singer_in_concert ( singer_id, * )\n# singer ( name, country, age, song_name, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names , themes , and number of singers for every concert ?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, country, age, song_name, * )\n# singer_in_concert ( concert_id, * )\n# concert ( theme, year, concert_name, stadium_id, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### List singer names and number of concerts for each singer.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer_in_concert ( concert_id, * )\n# singer ( name, country, age, is_male, * )\n# concert ( theme, year, concert_name, stadium_id, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names of the singers and number of concerts for each person?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer_in_concert ( concert_id, * )\n# singer ( name, country, age, song_name, * )\n# concert ( concert_id, concert_name, theme, stadium_id, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### List all singer names in concerts in year 2014.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer_in_concert ( concert_id, * )\n# concert ( concert_id, theme, stadium_id, concert_name, * )\n# singer ( name, country, age, song_name, * )\n# stadium ( name, capacity, highest, average, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names of the singers who performed in a concert in 2014?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, country, singer_id, age, * )\n# singer_in_concert ( concert_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### what is the name and nation of the singer who have a song having 'Hey' in its name?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, country, is_male, singer_id, * )\n# singer_in_concert ( singer_id, * )\n# stadium ( name, capacity, highest, average, * )\n# concert ( year, concert_id, concert_name, stadium_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( year, concert_id, theme, concert_name, * )\n# stadium ( location, name, capacity, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( year, concert_id, theme, concert_name, * )\n# stadium ( location, name, capacity, highest, * )\n# singer_in_concert ( singer_id, * )\n# singer ( country, age, singer_id, song_name, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, theme, year, concert_name, * )\n# stadium ( capacity, location, name, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### Find the number of concerts happened in the stadium with the highest capacity .\nSELECT"
    },
    {
        "db_id": "concert_singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# concert ( concert_id, theme, year, concert_name, * )\n# stadium ( capacity, location, name, highest, * )\n# singer ( country, age, singer_id, song_name, * )\n# singer_in_concert ( singer_id, * )\n#  singer_in_concert.concert_id = concert.concert_id\n#  singer_in_concert.singer_id = singer.singer_id \n#  concert.stadium_id = stadium.stadium_id \n#\n### What are the number of concerts that occurred in the stadium with the largest capacity ?\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# premises ( premises_type, premise_details, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n# mailshot_customers ( customer_id, outcome_code, mailshot_customer_date, * )\n# customer_addresses ( premise_id, date_address_from, address_type_code, date_address_to, * )\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id\n#  customer_addresses.premise_id = premises.premise_id \n#\n### How many premises are there?\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# premises ( premise_id, premise_details, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n# mailshot_customers ( customer_id, outcome_code, mailshot_customer_date, * )\n# customer_addresses ( premise_id, date_address_from, address_type_code, date_address_to, * )\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id\n#  customer_addresses.premise_id = premises.premise_id \n#\n### What are all the distinct premise types?\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# premises ( premise_details, premise_id, * )\n# order_items ( product_id, item_id, order_item_status_code, item_status_code, * )\n# customer_orders ( order_placed_datetime, customer_id, order_status_code, shipping_method_code, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n#  order_items.order_id = customer_orders.order_id\n#\n### Find the types and details for all premises and order by the premise type.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# premises ( premise_id, premise_details, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n# mailshot_customers ( customer_id, outcome_code, mailshot_customer_date, * )\n# customer_addresses ( premise_id, date_address_from, address_type_code, date_address_to, * )\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id\n#  customer_addresses.premise_id = premises.premise_id \n#\n### Show each premise type and the number of premises in that type.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mailshot_campaigns ( mailshot_id, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n# products ( product_id, product_name, * )\n# mailshot_customers ( customer_id, outcome_code, mailshot_customer_date, * )\n# order_items ( item_id, order_item_status_code, order_id, item_status_code, * )\n#  order_items.product_id = products.product_id\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id \n#\n### Show all distinct product categories along with the number of mailshots in each category.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_name, customer_phone, customer_login, payment_method, * )\n# mailshot_customers ( mailshot_customer_date, mailshot_id, outcome_code, * )\n# customer_orders ( order_id, order_status_code, shipping_method_code, order_placed_datetime, * )\n# customer_addresses ( premise_id, date_address_from, address_type_code, date_address_to, * )\n#  mailshot_customers.customer_id = customers.customer_id\n#  customer_orders.customer_id = customers.customer_id \n#  customer_addresses.customer_id = customers.customer_id \n#\n### Show the name and phone of the customer without any mailshot.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mailshot_customers ( outcome_code, mailshot_id, mailshot_customer_date, * )\n# customers ( customer_phone, customer_id, customer_email, customer_address, * )\n# customer_orders ( order_id, order_status_code, shipping_method_code, order_placed_datetime, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n#  mailshot_customers.customer_id = customers.customer_id\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id \n#  customer_orders.customer_id = customers.customer_id \n#\n### Show the name and phone for customers with a mailshot with outcome code 'No Response'.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mailshot_customers ( mailshot_id, customer_id, mailshot_customer_date, * )\n# mailshot_campaigns ( mailshot_name, product_category, mailshot_start_date, mailshot_end_date, * )\n# customer_addresses ( premise_id, date_address_from, address_type_code, date_address_to, * )\n# customer_orders ( customer_id, order_status_code, shipping_method_code, order_placed_datetime, * )\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id\n#\n### Show the outcome code of mailshots along with the number of mailshots in each outcome code.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mailshot_customers ( customer_id, mailshot_id, mailshot_customer_date, * )\n# customers ( customer_name, customer_phone, customer_email, customer_address, * )\n# customer_orders ( order_id, order_status_code, shipping_method_code, order_placed_datetime, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n#  mailshot_customers.customer_id = customers.customer_id\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id \n#  customer_orders.customer_id = customers.customer_id \n#\n### Show the names of customers who have at least 2 mailshots with outcome code 'Order'.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mailshot_customers ( mailshot_customer_date, mailshot_id, outcome_code, * )\n# customers ( customer_name, customer_phone, customer_email, customer_address, * )\n# customer_orders ( order_id, order_status_code, shipping_method_code, order_placed_datetime, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n#  mailshot_customers.customer_id = customers.customer_id\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id \n#  customer_orders.customer_id = customers.customer_id \n#\n### Show the names of customers who have the most mailshots.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mailshot_customers ( customer_id, mailshot_id, mailshot_customer_date, * )\n# customers ( customer_name, customer_id, customer_phone, customer_email, * )\n# customer_orders ( order_id, order_status_code, shipping_method_code, order_placed_datetime, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n#  mailshot_customers.customer_id = customers.customer_id\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id \n#  customer_orders.customer_id = customers.customer_id \n#\n### What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_addresses ( premise_id, customer_id, date_address_from, date_address_to, * )\n# premises ( premises_type, premise_details, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n# mailshot_customers ( customer_id, outcome_code, mailshot_customer_date, * )\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id\n#  customer_addresses.premise_id = premises.premise_id \n#\n### Show the premise type and address type code for all customer addresses.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_addresses ( customer_id, premise_id, date_address_from, date_address_to, * )\n# customers ( customer_id, payment_method, customer_name, customer_phone, * )\n# mailshot_campaigns ( product_category, mailshot_name, mailshot_start_date, mailshot_end_date, * )\n# mailshot_customers ( customer_id, outcome_code, mailshot_customer_date, * )\n#  mailshot_customers.customer_id = customers.customer_id\n#  mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id \n#  customer_addresses.customer_id = customers.customer_id \n#\n### What are the distinct address type codes for all customer addresses?\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_status_code, order_shipping_charges, order_id, shipping_method_code, * )\n# order_items ( order_id, item_id, product_id, item_status_code, * )\n# customers ( payment_method, customer_name, customer_phone, customer_email, * )\n# mailshot_customers ( mailshot_id, outcome_code, mailshot_customer_date, * )\n#  order_items.order_id = customer_orders.order_id\n#  mailshot_customers.customer_id = customers.customer_id \n#  customer_orders.customer_id = customers.customer_id \n#\n### Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.\nSELECT"
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customer_orders ( order_status_code, shipping_method_code, order_id, order_placed_datetime, * )\n# customers ( customer_name, customer_phone, customer_email, customer_address, * )\n# order_items ( order_item_status_code, item_id, product_id, item_status_code, * )\n# mailshot_customers ( customer_id, outcome_code, mailshot_customer_date, * )\n#  order_items.order_id = customer_orders.order_id\n#  mailshot_customers.customer_id = customers.customer_id \n#  customer_orders.customer_id = customers.customer_id \n#\n### Show the names of customers having an order with shipping method FedEx and order status Paid.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( customer_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many accounts do we have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( customer_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Count the number of accounts.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_name, account_id, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show ids, customer ids, names for all accounts.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_name, account_id, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the account ids, customer ids, and account names for all the accounts?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( other_account_details, account_id, customer_id, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show other account details for account with name 338.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( other_account_details, account_id, customer_id, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the other account details for the account with the name 338?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_phone, customer_id, customer_address, * )\n# accounts ( customer_id, account_id, other_account_details, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the first name, last name, and phone of the customer with account name 162?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_phone, customer_id, customer_last_name, customer_address, * )\n# accounts ( customer_id, account_id, other_account_details, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Give the full name and phone of the customer who has the account name 162.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_name, account_id, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many accounts does the customer with first name Art and last name Turcotte have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the number of accounts that the customer with the first name Art and last name Turcotte has.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show all customer ids and the number of accounts for each customer.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many accounts are there for each customer id?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the customer id and number of accounts with most accounts.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_email, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the customer id of the customer with the most accounts, and how many accounts does this person have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the customer first, last name and id with least number of accounts.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_id, customer_last_name, customer_address, customer_phone, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Give the full name and customer id of the customer with the fewest accounts.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the number of all customers without an account.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_last_name, customer_phone, customer_email, customer_first_name, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many customers do not have an account?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the first names and last names of customers without any account.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the full names of customers who do not have any accounts?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show distinct first and last names for all customers with an account.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the full names of customers who have accounts?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many customers have an account?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_email, customer_first_name, customer_last_name, customer_address, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Count the number of customers who hold an account.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many customers do we have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Count the number of customers.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_phone, customer_id, customer_address, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show ids, first names, last names, and phones for all customers.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_phone, customer_id, customer_address, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the ids, full names, and phones of each customer?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_phone, customer_email, customer_id, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the phone and email for customer with first name Aniyah and last name Feest?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_phone, customer_email, customer_id, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the phone and email of the customer with the first name Aniyah and last name Feest.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the number of customer cards.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many customer cards are there?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_type_code, card_number, card_id, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show ids, customer ids, card type codes, card numbers for all cards.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( customer_id, card_type_code, card_id, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are card ids, customer ids, card types, and card numbers for each customer card?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( date_valid_to, card_number, card_id, card_type_code, * )\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the date valid from and the date valid to for the card with card number '4560596484842'.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( date_valid_to, card_number, card_id, card_type_code, * )\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the valid from and valid to dates for the card with the number 4560596484842?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_phone, customer_id, customer_address, * )\n# customers_cards ( card_id, card_number, card_type_code, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the first name, last name, and phone of the customer with card 4560596484842.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_phone, customer_id, customer_address, * )\n# customers_cards ( customer_id, card_id, card_type_code, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the full name and phone of the customer who has card number 4560596484842.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many cards does customer Art Turcotte have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Count the number of cards the customer with the first name Art and last name Turcotte has.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_number, customer_id, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many debit cards do we have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Count the number of customer cards of the type Debit.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# customers_cards ( card_type_code, card_id, card_number, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many credit cards does customer Blanche Huels have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# customers_cards ( card_type_code, card_id, card_number, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Count the number of credit cards that the customer with first name Blanche and last name Huels has.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show all customer ids and the number of cards owned by each customer.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different customer ids, and how many cards does each one hold?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the customer id with most number of cards, and how many does he have?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the id of the customer who has the most cards, as well as the number of cards.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show id, first and last names for all customers with at least two cards.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the ids and full names of customers who hold two or more cards?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the customer id, first and last name with least number of accounts.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# accounts ( account_id, account_name, other_account_details, * )\n# customers ( customer_last_name, customer_id, customer_address, customer_phone, * )\n# customers_cards ( card_id, card_type_code, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the id and full name of the customer who has the fewest accounts.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show all card type codes and the number of cards in each type.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different card types, and how many cards are there of each?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the card type code with most number of cards?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( account_id, transaction_id, previous_transaction_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the code of the card type that is most common.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show card type codes with at least 5 cards.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the codes of card types that have 5 or more cards?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show all card type codes and the number of customers holding cards in each type.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different card type codes, and how many different customers hold each type?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_last_name, customer_address, customer_phone, * )\n# customers_cards ( card_type_code, card_id, card_number, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the customer ids and firstname without a credit card.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers ( customer_id, customer_last_name, customer_address, customer_phone, * )\n# customers_cards ( card_type_code, card_id, card_number, date_valid_from, * )\n# accounts ( account_id, account_name, other_account_details, * )\n# financial_transactions ( card_id, transaction_id, previous_transaction_id, transaction_type, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the ids and first names of customers who do not hold a credit card?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show all card type codes.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different card type codes?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the number of card types.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# financial_transactions ( previous_transaction_id, account_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many different card types are there?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( account_id, transaction_id, previous_transaction_id, card_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show all transaction types.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, card_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different types of transactions?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( account_id, transaction_id, previous_transaction_id, card_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the number of transaction types.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, card_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### How many different types of transactions are there?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, previous_transaction_id, account_id, card_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the average and total transaction amount?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( account_id, transaction_id, previous_transaction_id, card_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the average transaction amount, as well as the total amount of all transactions.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_type, transaction_id, previous_transaction_id, account_id, * )\n# customers_cards ( card_id, customer_id, card_number, date_valid_from, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the card type codes and the number of transactions.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_type, account_id, transaction_id, previous_transaction_id, * )\n# customers_cards ( card_type_code, customer_id, card_number, date_valid_from, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different card types, and how many transactions have been made with each?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( account_id, card_id, transaction_id, previous_transaction_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the transaction type and the number of transactions.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( account_id, transaction_id, previous_transaction_id, card_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different transaction types, and how many transactions of each have taken place?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_amount, account_id, transaction_id, previous_transaction_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What is the transaction type that has processed the greatest total amount in transactions?\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_amount, account_id, card_id, transaction_id, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Return the type of transaction with the highest total amount.\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### Show the account id and the number of transactions for each account\nSELECT"
    },
    {
        "db_id": "customers_card_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# financial_transactions ( transaction_id, previous_transaction_id, card_id, transaction_type, * )\n# accounts ( customer_id, account_name, other_account_details, * )\n# customers_cards ( customer_id, card_type_code, card_number, date_valid_from, * )\n# customers ( customer_first_name, customer_last_name, customer_address, customer_phone, * )\n#  financial_transactions.card_id = customers_cards.card_id\n#  financial_transactions.account_id = accounts.account_id \n#\n### What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_code, document_structure_code, document_type_code, * )\n# document_sections_images ( image_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Find the name and access counts of all documents, in alphabetic order of the document name.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_code, document_structure_code, document_type_code, * )\n# document_sections_images ( image_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What are the names of all the documents, as well as the access counts of each, ordered alphabetically?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_code, document_structure_code, document_type_code, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_code, document_structure_code, document_type_code, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, access_count, document_name, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Find the types of documents with more than 4 documents.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, access_count, document_name, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What are the codes of types of documents of which there are for or more?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( access_count, document_code, document_structure_code, document_name, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Find the total access count of all documents in the most popular document type.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( access_count, document_code, document_structure_code, document_name, * )\n# document_functional_areas ( functional_area_code, * )\n# document_sections_images ( image_id, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What is the total access count of documents that are of the most common document type?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, document_name, * )\n# document_sections_images ( image_id, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What is the average access count of documents?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, document_name, * )\n# document_sections_images ( image_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Find the average access count across all documents?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( access_count, document_code, document_type_code, document_name, * )\n# document_structures ( parent_document_structure_code, document_structure_description, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### What is the structure of the document with the least number of accesses?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( access_count, document_code, document_type_code, document_name, * )\n# document_structures ( document_structure_description, parent_document_structure_code, * )\n# document_sections_images ( image_id, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### Return the structure description of the document that has been accessed the fewest number of times.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_code, document_structure_code, access_count, * )\n# document_sections_images ( image_id, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What is the type of the document named \"David CV\"?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_code, document_structure_code, access_count, * )\n# document_sections_images ( image_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Return the type code of the document named \"David CV\".\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_structure_code, document_name, document_code, access_count, * )\n# document_structures ( parent_document_structure_code, document_structure_description, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### Find the list of documents that are both in the most three popular type and have the most three popular structure.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_structure_code, document_code, access_count, * )\n# document_structures ( parent_document_structure_code, document_structure_description, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### What are the names of documents that have both one of the three most common types and one of three most common structures?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( access_count, document_code, document_structure_code, document_name, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What document types do have more than 10000 total access number.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( access_count, document_code, document_structure_code, document_name, * )\n# document_sections_images ( image_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Return the codes of the document types that do not have a total access count of over 10000.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, access_count, * )\n# document_sections ( document_code, section_id, section_code, section_sequence, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What are all the section titles of the document named \"David CV\"?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, access_count, * )\n# document_sections ( document_code, section_code, section_id, section_sequence, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Give the section titles of the document with the name \"David CV\".\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, access_count, * )\n# document_sections ( section_id, section_title, section_sequence, section_code, * )\n# document_sections_images ( image_id, * )\n# document_structures ( parent_document_structure_code, document_structure_description, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### Find all the name of documents without any sections.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, access_count, * )\n# document_sections ( section_title, section_id, section_sequence, section_code, * )\n# document_sections_images ( image_id, * )\n# document_structures ( parent_document_structure_code, document_structure_description, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### What are the names of documents that do not have any sections?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# users ( password, role_code, user_id, user_login, * )\n# roles ( role_description, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  users.role_code = roles.role_code\n#\n### List all the username and passwords of users with the most popular role.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# users ( password, role_code, user_id, user_login, * )\n# document_sections_images ( image_id, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#\n### What are the usernames and passwords of users that have the most common role?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, document_name, * )\n# document_functional_areas ( document_code, * )\n# functional_areas ( functional_area_description, parent_functional_area_code, * )\n# document_sections_images ( image_id, * )\n#  document_functional_areas.document_code = documents.document_code\n#  document_functional_areas.functional_area_code = functional_areas.functional_area_code \n#\n### Find the average access counts of documents with functional area \"Acknowledgement\".\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# functional_areas ( functional_area_description, parent_functional_area_code, * )\n# documents ( document_code, document_structure_code, document_type_code, document_name, * )\n# document_functional_areas ( document_code, * )\n# document_sections_images ( image_id, * )\n#  document_functional_areas.document_code = documents.document_code\n#  document_functional_areas.functional_area_code = functional_areas.functional_area_code \n#\n### What are the average access counts of documents that have the functional area description \"Acknowledgement\"?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, access_count, * )\n# images ( image_id, image_alt_text, image_url, * )\n# document_sections_images ( section_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections_images.image_id = images.image_id \n#  document_sections.document_code = documents.document_code \n#\n### Find names of the document without any images.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, access_count, * )\n# images ( image_id, image_alt_text, image_url, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( section_id, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections_images.image_id = images.image_id \n#  document_sections.document_code = documents.document_code \n#\n### What are the names of documents that do not have any images?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, document_type_code, access_count, * )\n# document_sections ( section_id, section_title, section_sequence, section_code, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What is the name of the document with the most number of sections?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_name, document_structure_code, document_type_code, access_count, * )\n# document_sections ( section_id, section_title, section_sequence, section_code, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Return the name of the document that has the most sections.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_type_code, document_code, document_structure_code, access_count, * )\n# document_sections_images ( image_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### List all the document names which contains \"CV\".\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_type_code, document_code, document_structure_code, access_count, * )\n# document_sections_images ( image_id, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What are the names of documents that contain the substring \"CV\"?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# users ( password, user_id, role_code, user_name, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#\n### How many users are logged in?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# users ( password, user_id, role_code, user_name, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#\n### Count the number of users that are logged in.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# roles ( role_code, * )\n# users ( role_code, user_id, user_name, password, * )\n# document_sections_images ( image_id, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  users.role_code = roles.role_code \n#\n### Find the description of the most popular role among the users that have logged in.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# roles ( role_code, * )\n# users ( role_code, user_name, password, user_id, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  users.role_code = roles.role_code\n#\n### What is the description of the most popular role among users that have logged in?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_structure_code, document_code, document_type_code, document_name, * )\n# document_structures ( parent_document_structure_code, document_structure_description, * )\n# users ( role_code, password, user_name, user_login, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_functional_areas.document_code = documents.document_code\n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### Find the average access count of documents with the least popular structure.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_structure_code, document_code, document_type_code, document_name, * )\n# document_structures ( parent_document_structure_code, document_structure_description, * )\n# document_functional_areas ( functional_area_code, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n#  document_sections.document_code = documents.document_code\n#  document_functional_areas.document_code = documents.document_code \n#  documents.document_structure_code = document_structures.document_structure_code \n#\n### What is the average access count of documents that have the least common structure?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# images ( image_url, image_alt_text, image_id, * )\n# document_sections_images ( section_id, * )\n# document_functional_areas ( functional_area_code, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections_images.image_id = images.image_id \n#\n### List all the image name and URLs in the order of their names.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# images ( image_url, image_alt_text, image_id, * )\n# document_sections_images ( image_id, * )\n# document_sections ( document_code, section_sequence, section_code, section_title, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections_images.image_id = images.image_id \n#\n### What are the names and urls of images, sorted alphabetically?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# users ( password, user_id, user_name, user_login, * )\n# roles ( role_description, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  users.role_code = roles.role_code\n#\n### Find the number of users in each role.\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# users ( password, user_id, user_name, user_login, * )\n# roles ( role_description, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  users.role_code = roles.role_code\n#\n### What are the different role codes for users, and how many users have each?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, access_count, document_name, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### What document types have more than 2 corresponding documents?\nSELECT"
    },
    {
        "db_id": "document_management",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# documents ( document_code, document_structure_code, access_count, document_name, * )\n# document_sections ( section_id, section_sequence, section_code, section_title, * )\n# document_sections_images ( image_id, * )\n# document_functional_areas ( functional_area_code, * )\n#  document_sections_images.section_id = document_sections.section_id\n#  document_sections.document_code = documents.document_code \n#  document_functional_areas.document_code = documents.document_code \n#\n### Give the codes of document types that have more than 2 corresponding documents.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### How many courses are there in total?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the total number of courses offered.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_description, author_id, course_id, subject_id, * )\n# course_authors_and_tutors ( author_tutor_atb, password, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the descriptions of the courses with name \"database\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_description, author_id, course_id, subject_id, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Return the description for the courses named \"database\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( address_line_1, author_id, author_tutor_atb, password, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the addresses of the course authors or tutors with personal name \"Cathrine\"\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( address_line_1, author_tutor_atb, author_id, password, * )\n# courses ( author_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( author_tutor_atb, author_id, password, login_name, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### List the addresses of all the course authors or tutors.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( author_tutor_atb, author_id, password, login_name, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What is the address of each course author or tutor?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( family_name, author_tutor_atb, author_id, password, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( password, family_name, student_id, date_of_registration, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### List all the login names and family names of course author and tutors.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( family_name, author_tutor_atb, author_id, password, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# students ( password, family_name, student_id, date_of_registration, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the login names and family names of course author and tutors?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( date_of_completion, student_id, registration_id, course_id, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### List all the dates of enrollment and completion of students.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( date_of_completion, registration_id, course_id, student_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n# students ( student_id, date_of_registration, date_of_latest_logon, login_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### What are all the dates of enrollment and completion in record?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### How many distinct students are enrolled in courses?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Find the number of distinct students enrolled in courses.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, date_of_completion, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# courses ( author_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### How many distinct courses are enrolled in by students?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# courses ( author_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the number of distinct courses that have enrolled students.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( test_result, registration_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### Find the dates of the tests taken with result \"Pass\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( test_result, registration_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### Which tests have \"Pass\" results? Return the dates when the tests were taken.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( registration_id, date_test_taken, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### How many tests have result \"Fail\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( registration_id, date_test_taken, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### Count the number of tests with \"Fail\" result.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, student_id, password, date_of_registration, * )\n# course_authors_and_tutors ( family_name, author_id, password, author_tutor_atb, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### What are the login names of the students with family name \"Ward\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, student_id, password, date_of_registration, * )\n# course_authors_and_tutors ( login_name, author_id, password, author_tutor_atb, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Return the login names of the students whose family name is \"Ward\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, student_id, password, date_of_registration, * )\n# course_authors_and_tutors ( family_name, author_id, author_tutor_atb, login_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### What are the dates of the latest logon of the students with family name \"Jaskolski\" or \"Langosh\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, student_id, password, date_of_registration, * )\n# course_authors_and_tutors ( password, family_name, author_tutor_atb, login_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Find the latest logon date of the students whose family name is \"Jaskolski\" or \"Langosh\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( student_id, password, middle_name, family_name, * )\n# course_authors_and_tutors ( personal_name, author_id, author_tutor_atb, login_name, * )\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### How many students have personal names that contain the word \"son\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, middle_name, student_id, password, * )\n# course_authors_and_tutors ( personal_name, author_id, author_tutor_atb, login_name, * )\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Find the number of students who have the word \"son\" in their personal names.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# subjects ( subject_id, * )\n# courses ( subject_id, course_id, course_name, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### List all the subject names.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# subjects ( subject_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### What are the names of all the subjects.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( author_tutor_atb, author_id, password, login_name, * )\n# courses ( author_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### List all the information about course authors and tutors in alphabetical order of the personal name.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( author_tutor_atb, author_id, password, login_name, * )\n# courses ( author_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Sort the information about course authors and tutors in alphabetical order of the personal name.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, student_id, password, middle_name, * )\n# course_authors_and_tutors ( family_name, author_id, password, author_tutor_atb, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### List the personal names and family names of all the students in alphabetical order of family name.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, student_id, password, date_of_registration, * )\n# course_authors_and_tutors ( family_name, author_id, password, middle_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( registration_id, date_test_taken, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### List each test result and its count in descending order of count.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( registration_id, date_test_taken, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### For each distinct test result, find the number of students who got the result.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_id, course_description, subject_id, * )\n# course_authors_and_tutors ( login_name, author_tutor_atb, password, personal_name, * )\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the login name of the course author that teaches the course with name \"advanced database\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_id, course_description, subject_id, * )\n# course_authors_and_tutors ( login_name, author_tutor_atb, password, personal_name, * )\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### Which course author teaches the \"advanced database\" course? Give me his or her login name.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_description, course_id, subject_id, * )\n# course_authors_and_tutors ( address_line_1, author_tutor_atb, password, login_name, * )\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### Find the addresses of the course authors who teach the course with name \"operating system\" or \"data structure\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_description, course_id, subject_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, login_name, * )\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# subjects ( subject_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( personal_name, family_name, author_tutor_atb, password, * )\n# students ( password, personal_name, family_name, date_of_registration, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the personal name, family name, and author ID of the course author that teaches the most courses.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( personal_name, family_name, author_tutor_atb, password, * )\n# students ( password, personal_name, family_name, date_of_registration, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the personal name, family name, and author ID of the course author who teaches the most courses?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, login_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the addresses and author IDs of the course authors that teach at least two courses.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, subject_id, course_name, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, login_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Which course authors teach two or more courses? Give me their addresses and author IDs.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( author_id, course_id, subject_id, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, login_name, * )\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the names of courses taught by the tutor who has personal name \"Julio\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_id, subject_id, course_description, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, login_name, * )\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the names of the courses taught by the tutor whose personal name is \"Julio\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_description, course_id, author_id, * )\n# subjects ( subject_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### Find the names and descriptions of courses that belong to the subject named \"Computer Science\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_description, course_id, author_id, * )\n# subjects ( subject_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### What are the names and descriptions of the all courses under the \"Computer Science\" subject?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, author_id, course_name, course_description, * )\n# subjects ( subject_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### Find the subject ID, subject name, and the corresponding number of available courses for each subject.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, author_id, course_name, course_description, * )\n# subjects ( subject_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### What are the subject ID, subject name, and the number of available courses for each subject?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, author_id, course_name, course_description, * )\n# subjects ( subject_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, author_id, course_name, course_description, * )\n# subjects ( subject_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_course_enrolment ( student_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  courses.author_id = course_authors_and_tutors.author_id \n#  courses.subject_id = subjects.subject_id \n#\n### List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_id, author_id, course_description, subject_id, * )\n# student_course_enrolment ( course_id, registration_id, student_id, date_of_completion, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What is the date of enrollment of the course named \"Spanish\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( course_id, registration_id, student_id, date_of_completion, * )\n# courses ( course_name, author_id, course_description, subject_id, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the the date of enrollment of the \"Spanish\" course.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# courses ( course_name, author_id, subject_id, course_description, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# students ( student_id, date_of_registration, date_of_latest_logon, login_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What is the name of the course that has the most student enrollment?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, date_of_completion, * )\n# courses ( course_name, author_id, course_description, subject_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# students ( student_id, date_of_registration, date_of_latest_logon, login_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Which course is enrolled in by the most students? Give me the course name.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, student_id, date_of_enrolment, date_of_completion, * )\n# courses ( course_name, author_id, course_description, subject_id, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# students ( student_id, date_of_registration, date_of_latest_logon, login_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the names of the courses that have exactly 1 student enrollment?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, date_of_completion, * )\n# courses ( course_name, author_id, subject_id, course_description, * )\n# students ( student_id, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the names of the courses that have just one student enrollment.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_description, course_id, author_id, subject_id, * )\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, date_of_completion, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.course_id = courses.course_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the descriptions and names of the courses that have student enrollment bigger than 2?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# courses ( course_name, course_description, author_id, subject_id, * )\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, date_of_completion, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Return the descriptions and names of the courses that have more than two students enrolled in.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, date_of_completion, * )\n# courses ( course_name, author_id, subject_id, course_description, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# students ( student_id, date_of_registration, date_of_latest_logon, login_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What is the name of each course and the corresponding number of student enrollment?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, date_of_completion, * )\n# courses ( course_name, author_id, subject_id, course_description, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### List the name and the number of enrolled student for each course.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( date_test_taken, registration_id, * )\n# student_course_enrolment ( registration_id, student_id, course_id, date_of_completion, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### What are the enrollment dates of all the tests that have result \"Pass\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( date_test_taken, registration_id, * )\n# student_course_enrolment ( registration_id, student_id, course_id, date_of_completion, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### Find the enrollment date for all the tests that have \"Pass\" result.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( date_test_taken, registration_id, * )\n# student_course_enrolment ( student_id, registration_id, date_of_enrolment, course_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### What are the completion dates of all the tests that have result \"Fail\"?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_tests_taken ( date_test_taken, registration_id, * )\n# student_course_enrolment ( registration_id, student_id, course_id, date_of_enrolment, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# subjects ( subject_name, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#\n### Return the completion date for all the tests that have \"Fail\" result.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( student_id, date_of_registration, password, date_of_latest_logon, * )\n# student_course_enrolment ( date_of_enrolment, date_of_completion, registration_id, course_id, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### List the dates of enrollment and completion of the student with personal name \"Karson\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( date_of_enrolment, date_of_completion, registration_id, course_id, * )\n# students ( personal_name, date_of_registration, password, date_of_latest_logon, * )\n# course_authors_and_tutors ( personal_name, author_id, author_tutor_atb, login_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( family_name, student_id, date_of_registration, password, * )\n# student_course_enrolment ( student_id, date_of_completion, registration_id, course_id, * )\n# course_authors_and_tutors ( middle_name, family_name, author_id, author_tutor_atb, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( student_id, date_of_completion, registration_id, course_id, * )\n# students ( family_name, student_id, date_of_registration, password, * )\n# course_authors_and_tutors ( password, personal_name, middle_name, family_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( login_name, password, date_of_registration, date_of_latest_logon, * )\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# course_authors_and_tutors ( login_name, password, author_tutor_atb, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Find the student ID and login name of the student with the most course enrollments\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( student_id, password, date_of_registration, date_of_latest_logon, * )\n# course_authors_and_tutors ( login_name, password, author_tutor_atb, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### What are the student ID and login name of the student who are enrolled in the most courses?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( personal_name, middle_name, family_name, password, * )\n# student_course_enrolment ( registration_id, date_of_enrolment, course_id, date_of_completion, * )\n# course_authors_and_tutors ( author_id, password, author_tutor_atb, login_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Find the student ID and personal name of the student with at least two enrollments.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( personal_name, middle_name, family_name, password, * )\n# course_authors_and_tutors ( password, personal_name, author_tutor_atb, login_name, * )\n# courses ( author_id, subject_id, course_name, course_description, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Which student are enrolled in at least two courses? Give me the student ID and personal name.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( middle_name, family_name, password, date_of_registration, * )\n# student_course_enrolment ( registration_id, date_of_enrolment, course_id, date_of_completion, * )\n# course_authors_and_tutors ( author_id, password, author_tutor_atb, login_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Find the student ID and middle name for all the students with at most two enrollments.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( middle_name, family_name, password, date_of_registration, * )\n# course_authors_and_tutors ( author_id, password, family_name, author_tutor_atb, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### What are the student IDs and middle names of the students enrolled in at most two courses?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( student_id, password, family_name, date_of_registration, * )\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# course_authors_and_tutors ( password, personal_name, author_tutor_atb, login_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Find the personal names of students not enrolled in any course.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( personal_name, middle_name, family_name, password, * )\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# course_authors_and_tutors ( author_id, password, author_tutor_atb, login_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### Which students not enrolled in any course? Find their personal names.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( password, family_name, date_of_registration, date_of_latest_logon, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# student_tests_taken ( date_test_taken, test_result, * )\n#  student_tests_taken.registration_id = student_course_enrolment.registration_id\n#  student_course_enrolment.student_id = students.student_id \n#\n### How many students did not have any course enrollment?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n# students ( password, date_of_registration, date_of_latest_logon, login_name, * )\n# course_authors_and_tutors ( password, author_tutor_atb, login_name, personal_name, * )\n# courses ( author_id, subject_id, course_name, course_description, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Count the number of students who did not enroll in any course.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, personal_name, * )\n# students ( student_id, password, personal_name, middle_name, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( registration_id, course_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the common login name of course authors and students.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, personal_name, * )\n# students ( student_id, password, personal_name, date_of_registration, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( course_id, registration_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the login names used both by some course authors and some students?\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# students ( student_id, password, middle_name, family_name, * )\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, middle_name, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( course_id, registration_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### Find the common personal name of course authors and students.\nSELECT"
    },
    {
        "db_id": "e_learning",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# course_authors_and_tutors ( author_id, author_tutor_atb, password, login_name, * )\n# students ( student_id, password, middle_name, date_of_registration, * )\n# courses ( course_id, subject_id, course_name, course_description, * )\n# student_course_enrolment ( course_id, registration_id, date_of_enrolment, date_of_completion, * )\n#  student_course_enrolment.course_id = courses.course_id\n#  student_course_enrolment.student_id = students.student_id \n#  courses.author_id = course_authors_and_tutors.author_id \n#\n### What are the personal names used both by some course authors and some students?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( year, total_horses, working_horses, total_cattle, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### How many farms are there?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( year, total_horses, working_horses, total_cattle, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Count the number of farms.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( year, farm_id, working_horses, total_cattle, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### List the total number of horses on farms in ascending order.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( farm_id, year, working_horses, total_cattle, * )\n# competition_record ( rank, competition_id, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What is the total horses record for each farm, sorted ascending?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm_competition ( hosts, host_city_id, competition_id, year, * )\n# competition_record ( rank, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the hosts of competitions whose theme is not \"Aliens\"?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm_competition ( hosts, competition_id, host_city_id, year, * )\n# competition_record ( rank, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Return the hosts of competitions for which the theme is not Aliens?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm_competition ( year, competition_id, host_city_id, hosts, * )\n# competition_record ( rank, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the themes of farm competitions sorted by year in ascending order?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm_competition ( year, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Return the themes of farm competitions, sorted by year ascending.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( total_horses, farm_id, year, total_cattle, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What is the average number of working horses of farms with more than 5000 total number of horses?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( working_horses, farm_id, year, total_cattle, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Give the average number of working horses on farms with more than 5000 total horses.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( year, farm_id, total_horses, working_horses, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the maximum and minimum number of cows across all farms.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm ( year, farm_id, total_horses, working_horses, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# city ( population, city_id, official_name, area_km_2, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Return the maximum and minimum number of cows across all farms.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, population, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### How many different statuses do cities have?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, population, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Count the number of different statuses.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, status, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### List official names of cities in descending order of population.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, status, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the official names of cities, ordered descending by population?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( status, population, city_id, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### List the official name and status of the city with the largest population.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( status, population, city_id, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What is the official name and status of the city with the most residents?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( official_name, status, population, area_km_2, * )\n# farm_competition ( year, theme, hosts, competition_id, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Show the years and the official names of the host cities of competitions.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, status, population, area_km_2, * )\n# farm_competition ( competition_id, host_city_id, theme, hosts, * )\n# competition_record ( farm_id, rank, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Give the years and official names of the cities of each competition.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( official_name, status, population, area_km_2, * )\n# farm_competition ( competition_id, year, theme, hosts, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Show the official names of the cities that have hosted more than one competition.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( official_name, status, population, area_km_2, * )\n# farm_competition ( competition_id, year, theme, hosts, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the official names of cities that have hosted more than one competition?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( status, population, official_name, area_km_2, * )\n# farm_competition ( competition_id, year, theme, hosts, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Show the status of the city that has hosted the greatest number of competitions.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( status, population, official_name, area_km_2, * )\n# farm_competition ( competition_id, year, theme, hosts, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What is the status of the city that has hosted the most competitions?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm_competition ( theme, hosts, competition_id, year, * )\n# city ( population, status, official_name, area_km_2, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Please show the themes of competitions with host cities having populations larger than 1000.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# farm_competition ( theme, hosts, competition_id, year, * )\n# city ( population, status, official_name, area_km_2, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the themes of competitions that have corresponding host cities with more than 1000 residents?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Please show the different statuses of cities and the average population of cities with each status.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the statuses and average populations of each city?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, population, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Please show the different statuses, ordered by the number of cities that have each.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, population, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Return the different statuses of cities, ascending by frequency.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, population, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### List the most common type of Status across cities.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, population, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What is the most common status across all cities?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( city_id, status, population, area_km_2, * )\n# farm_competition ( competition_id, year, theme, hosts, * )\n# competition_record ( farm_id, rank, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### List the official names of cities that have not held any competition.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( official_name, status, population, area_km_2, * )\n# farm_competition ( competition_id, year, theme, hosts, * )\n# competition_record ( rank, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the official names of cities that have not hosted a farm competition?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Show the status shared by cities with population bigger than 1500 and smaller than 500.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, official_name, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, status, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Find the official names of cities with population bigger than 1500 or smaller than 500.\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( population, city_id, status, area_km_2, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the official names of cities that have population over 1500 or less than 500?\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( census_ranking, city_id, population, official_name, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### Show the census ranking of cities whose status are not \"Village\".\nSELECT"
    },
    {
        "db_id": "farm",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# city ( census_ranking, city_id, population, official_name, * )\n# farm_competition ( theme, competition_id, host_city_id, hosts, * )\n# competition_record ( competition_id, farm_id, * )\n# farm ( farm_id, total_horses, working_horses, total_cattle, * )\n#  competition_record.competition_id = farm_competition.competition_id\n#  competition_record.farm_id = farm.farm_id \n#  farm_competition.host_city_id = city.city_id \n#\n### What are the census rankings of cities that do not have the status \"Village\"?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( id, date, pilot, vehicle_flight_number, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### How many flights have a velocity larger than 200?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( altitude, date, pilot, id, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### List the vehicle flight number, date and pilot of all the flights, ordered by altitude.\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airport ( name, city, country, iata, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# flight ( date, pilot, vehicle_flight_number, velocity, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### List the id, country, city and name of the airports ordered alphabetically by the name.\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# operate_company ( name, type, id, principal_activities, * )\n# airport ( country, name, id, iata, * )\n# flight ( date, pilot, vehicle_flight_number, velocity, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What is maximum group equity shareholding of the companies?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( velocity, id, date, vehicle_flight_number, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What is the velocity of the pilot named 'Thompson'?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( id, date, pilot, vehicle_flight_number, * )\n# operate_company ( name, type, principal_activities, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What are the names and types of the companies that have ever operated a flight?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airport ( name, city, id, iata, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# flight ( date, pilot, vehicle_flight_number, velocity, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What are the names of the airports which are not in the country 'Iceland'?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( company_id, id, date, pilot, * )\n# operate_company ( type, name, principal_activities, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What are the distinct types of the companies that have operated any flights with velocity less than 200?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( id, date, pilot, vehicle_flight_number, * )\n# operate_company ( name, type, principal_activities, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What are the ids and names of the companies that operated more than one flight?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( id, date, pilot, company_id, * )\n# airport ( iata, name, icao, city, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What is the id, name and IATA code of the airport that had most number of flights?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( pilot, id, date, company_id, * )\n# airport ( id, name, city, iata, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# operate_company ( name, id, principal_activities, incorporated_in, * )\n# flight ( date, pilot, vehicle_flight_number, velocity, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### What is the most common company type, and how many are there?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( airport_id, id, date, company_id, * )\n# airport ( city, country, name, iata, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### How many airports haven't the pilot 'Thompson' driven an aircraft?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( pilot, id, date, airport_id, * )\n# operate_company ( principal_activities, name, type, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airport ( country, id, city, iata, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# flight ( date, pilot, vehicle_flight_number, velocity, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### Which of the airport names contains the word 'international'?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# operate_company ( id, name, type, incorporated_in, * )\n# airport ( name, city, country, iata, * )\n# flight ( company_id, id, date, pilot, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### How many companies operates airlines in each airport?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airport ( id, city, name, iata, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# flight ( date, pilot, vehicle_flight_number, velocity, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### how many airports are there in each country?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# airport ( id, city, name, iata, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# flight ( date, pilot, vehicle_flight_number, velocity, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### which countries have more than 2 airports?\nSELECT"
    },
    {
        "db_id": "flight_company",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# flight ( id, date, vehicle_flight_number, velocity, * )\n# operate_company ( type, id, principal_activities, incorporated_in, * )\n# airport ( country, name, id, iata, * )\n#  flight.airport_id = airport.id\n#  flight.company_id = operate_company.id \n#\n### which pilot is in charge of the most number of flights?\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture ( furniture_id, name, market_rate, * )\n# furniture_manufacte ( manufacturer_id, price_in_dollar, * )\n# manufacturer ( manufacturer_id, open_year, num_of_factories, num_of_shops, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### How many furniture components are there in total?\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture ( market_rate, name, num_of_component, * )\n# furniture_manufacte ( manufacturer_id, price_in_dollar, * )\n# manufacturer ( manufacturer_id, open_year, num_of_factories, num_of_shops, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Return the name and id of the furniture with the highest market rate.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture ( furniture_id, name, num_of_component, * )\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# manufacturer ( manufacturer_id, open_year, num_of_factories, num_of_shops, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### find the total market rate of the furnitures that have the top 2 market shares.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture ( num_of_component, furniture_id, market_rate, * )\n# furniture_manufacte ( manufacturer_id, price_in_dollar, * )\n# manufacturer ( manufacturer_id, open_year, num_of_factories, num_of_shops, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the component amounts and names of all furnitures that have more than 10 components.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture ( name, furniture_id, market_rate, * )\n# furniture_manufacte ( manufacturer_id, price_in_dollar, * )\n# manufacturer ( manufacturer_id, open_year, num_of_factories, num_of_shops, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the name and component amount of the least popular furniture.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture ( furniture_id, market_rate, num_of_component, * )\n# furniture_manufacte ( price_in_dollar, manufacturer_id, * )\n# manufacturer ( manufacturer_id, open_year, num_of_factories, num_of_shops, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the names of furnitures whose prices are lower than the highest price.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# manufacturer ( name, num_of_shops, manufacturer_id, num_of_factories, * )\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# furniture ( furniture_id, num_of_component, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Which manufacturer has the most number of shops? List its name and year of opening.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# manufacturer ( num_of_shops, manufacturer_id, name, open_year, * )\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# furniture ( furniture_id, num_of_component, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the average number of factories for the manufacturers that have more than 20 shops.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# manufacturer ( open_year, name, num_of_factories, num_of_shops, * )\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# furniture ( furniture_id, num_of_component, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### List all manufacturer names and ids ordered by their opening year.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# manufacturer ( num_of_shops, name, num_of_factories, manufacturer_id, * )\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# furniture ( furniture_id, num_of_component, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# manufacturer ( num_of_factories, num_of_shops, name, manufacturer_id, * )\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# furniture ( furniture_id, num_of_component, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture_manufacte ( price_in_dollar, furniture_id, * )\n# manufacturer ( num_of_shops, name, num_of_factories, open_year, * )\n# furniture ( name, num_of_component, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the id and number of shops for the company that produces the most expensive furniture.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# manufacturer ( name, num_of_factories, open_year, num_of_shops, * )\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# furniture ( name, num_of_component, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the number of funiture types produced by each manufacturer as well as the company names.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture_manufacte ( manufacturer_id, price_in_dollar, * )\n# furniture ( name, num_of_component, market_rate, * )\n# manufacturer ( num_of_factories, name, num_of_shops, open_year, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Give me the names and prices of furnitures which some companies are manufacturing.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture_manufacte ( manufacturer_id, price_in_dollar, * )\n# furniture ( name, market_rate, num_of_component, * )\n# manufacturer ( name, num_of_factories, num_of_shops, open_year, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the market shares and names of furnitures which no any company is producing in our records.\nSELECT"
    },
    {
        "db_id": "manufacturer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# furniture_manufacte ( furniture_id, price_in_dollar, * )\n# manufacturer ( name, num_of_factories, open_year, num_of_shops, * )\n# furniture ( furniture_id, name, market_rate, * )\n#  furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id\n#  furniture_manufacte.furniture_id = furniture.furniture_id \n#\n### Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visitor ( id, name, level_of_membership, * )\n# visit ( museum_id, num_of_ticket, total_spent, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### How many visitors below age 30 are there?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visitor ( name, id, age, * )\n# visit ( museum_id, num_of_ticket, total_spent, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visitor ( age, id, name, * )\n# visit ( museum_id, num_of_ticket, total_spent, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What is the average age of the visitors whose membership level is not higher than 4?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visitor ( name, age, id, * )\n# visit ( museum_id, num_of_ticket, total_spent, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( name, num_of_staff, open_year, * )\n# visitor ( age, id, level_of_membership, * )\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### Find the id and name of the museum that has the most staff members?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( open_year, museum_id, name, * )\n# visitor ( age, id, level_of_membership, * )\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### Find the average number of staff working for the museums that were open before 2009.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( open_year, num_of_staff, museum_id, * )\n# visitor ( age, id, level_of_membership, * )\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What are the opening year and staff number of the museum named Plaza Museum?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( open_year, name, museum_id, * )\n# visitor ( age, id, level_of_membership, * )\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visit ( museum_id, num_of_ticket, total_spent, * )\n# visitor ( name, age, level_of_membership, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### find the id, name and age for visitors who visited some museums more than once.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visit ( total_spent, num_of_ticket, museum_id, * )\n# visitor ( level_of_membership, name, age, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n# museum ( name, num_of_staff, open_year, * )\n# visitor ( age, id, level_of_membership, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What are the id and name of the museum visited most times?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( name, num_of_staff, open_year, * )\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n# visitor ( name, age, level_of_membership, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What is the name of the museum that had no visitor yet?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visitor ( name, age, level_of_membership, * )\n# visit ( num_of_ticket, museum_id, total_spent, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### Find the name and age of the visitor who bought the most tickets at once.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visit ( total_spent, museum_id, visitor_id, * )\n# visitor ( age, id, level_of_membership, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What are the average and maximum number of tickets bought in all visits?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# visit ( total_spent, num_of_ticket, museum_id, * )\n# visitor ( level_of_membership, name, age, * )\n# museum ( museum_id, num_of_staff, open_year, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What is the total ticket expense of the visitors whose membership level is 1?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( open_year, name, num_of_staff, * )\n# visit ( museum_id, num_of_ticket, total_spent, * )\n# visitor ( name, age, level_of_membership, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( open_year, name, num_of_staff, * )\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n# visitor ( name, age, level_of_membership, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### Find the number of visitors who did not visit any museum opened after 2010.\nSELECT"
    },
    {
        "db_id": "museum_visit",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# museum ( museum_id, name, num_of_staff, * )\n# visitor ( age, id, level_of_membership, * )\n# visit ( visitor_id, num_of_ticket, total_spent, * )\n#  visit.museum_id = museum.museum_id\n#  visit.visitor_id = visitor.id \n#\n### How many museums were opened after 2013 or before 2008?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### How many high schoolers are there?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Count the number of high schoolers.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names and grades of each high schooler.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names and grades for each high schooler?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show all the grades of the high schoolers.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What is the grade of each high schooler?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What grade is Kyle in?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Return the grade for the high schooler named Kyle.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names of all high schoolers in grade 10.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of all high schoolers in grade 10?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the ID of the high schooler named Kyle.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What is Kyle's id?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### How many high schoolers are there in grade 9 or 10?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Count the number of high schoolers in grades 9 or 10.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the number of high schoolers for each grade.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, id, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### How many high schoolers are in each grade?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Which grade has the most high schoolers?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Return the grade that has the greatest number of high schoolers.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show me all grades that have at least 4 students.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Which grades have 4 or more high schoolers?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# friend ( friend_id, * )\n# highschooler ( grade, id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the student IDs and numbers of friends corresponding to each.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# friend ( friend_id, * )\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### How many friends does each student have?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names of high school students and their corresponding number of friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of the high schoolers and how many friends does each have?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What is the name of the high schooler who has the greatest number of friends?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Return the name of the high school student with the most friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names of high schoolers who have at least 3 friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of high schoolers who have 3 or more friends?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( student_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names of all of the high schooler Kyle's friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Return the names of friends of the high school student Kyle.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### How many friends does the high school student Kyle have?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Count the number of friends Kyle has.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# friend ( friend_id, * )\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show ids of all students who do not have any friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the ids of high school students who do not have friends?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show names of all high school students who do not have any friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, grade, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of students who have no friends?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( student_id, * )\n# friend ( friend_id, * )\n# highschooler ( name, grade, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the ids of high schoolers who have friends and are also liked by someone else.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n# highschooler ( name, grade, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the ids of students who both have friends and are liked?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n# highschooler ( name, grade, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show name of all students who have some friends and also are liked by someone else.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of high schoolers who both have friends and are liked?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Count the number of likes for each student id.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### How many likes correspond to each student id?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names of high schoolers who have likes, and numbers of likes for each.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of high schoolers who have likes, and how many likes does each have?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What is the name of the high schooler who has the greatest number of likes?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Give the name of the student with the most likes.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names of students who have at least 2 likes.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# likes ( liked_id, * )\n# highschooler ( name, grade, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of students who have 2 or more likes?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Show the names of students who have a grade higher than 5 and have at least 2 friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, id, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### How many likes does Kyle have?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( name, grade, * )\n# likes ( liked_id, * )\n# friend ( friend_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Return the number of likes that the high schooler named Kyle has.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, name, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Find the average grade of all students who have some friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, name, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What is the average grade of students who have friends?\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( id, name, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### Find the minimum grade of students who have no friends.\nSELECT"
    },
    {
        "db_id": "network_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# highschooler ( grade, name, * )\n# friend ( friend_id, * )\n# likes ( liked_id, * )\n#  likes.liked_id = highschooler.id\n#  likes.student_id = highschooler.id \n#  friend.student_id = highschooler.id \n#  friend.friend_id = highschooler.id \n#\n### What is the lowest grade of students who do not have any friends?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( party_theme, location, first_year, last_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### How many parties are there?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( party_theme, location, first_year, last_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Count the number of parties.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( number_of_hosts, party_id, location, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### List the themes of parties in ascending order of number of hosts.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( number_of_hosts, party_id, location, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### What are the themes of parties ordered by the number of hosts in ascending manner?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, party_id, first_year, last_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### What are the themes and locations of parties?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, party_id, first_year, last_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Give me the theme and location of each party.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( first_year, last_year, location, party_id, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( first_year, last_year, location, party_id, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( party_id, location, party_theme, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( name, age, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### What is the average number of hosts for parties?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( party_id, location, party_theme, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( name, age, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Compute the average number of hosts for parties.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, party_id, party_theme, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( name, age, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### What is the location of the party with the most hosts?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, number_of_hosts, party_theme, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( age, host_id, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Which party had the most hosts? Give me the party location.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( name, age, host_id, * )\n# party ( party_id, location, party_theme, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show different nationalities along with the number of hosts of each nationality.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( name, age, host_id, * )\n# party ( party_id, location, party_theme, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### How many hosts does each nationality have? List the nationality and the count.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( host_id, name, age, * )\n# party_host ( host_id, is_main_in_charge, * )\n# party ( location, party_theme, first_year, last_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the most common nationality of hosts.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( name, age, host_id, * )\n# party_host ( host_id, is_main_in_charge, * )\n# party ( location, number_of_hosts, party_theme, first_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Which nationality has the most hosts?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( age, host_id, name, * )\n# party_host ( host_id, is_main_in_charge, * )\n# party ( number_of_hosts, party_theme, location, first_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the nations that have both hosts older than 45 and hosts younger than 35.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( age, host_id, name, * )\n# party_host ( host_id, is_main_in_charge, * )\n# party ( number_of_hosts, party_theme, location, first_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Which nations have both hosts of age above 45 and hosts of age below 35?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( party_theme, location, first_year, last_year, * )\n# host ( name, age, nationality, * )\n# party_host ( host_id, is_main_in_charge, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the themes of parties and the names of the party hosts.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( party_theme, location, first_year, last_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( name, age, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### For each party, return its theme and the name of its host.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, party_theme, first_year, last_year, * )\n# host ( name, age, nationality, * )\n# party_host ( host_id, is_main_in_charge, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the locations of parties and the names of the party hosts in ascending order of the age of the host.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, party_theme, number_of_hosts, first_year, * )\n# host ( name, age, nationality, * )\n# party_host ( host_id, is_main_in_charge, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, number_of_hosts, party_theme, first_year, * )\n# host ( host_id, name, nationality, * )\n# party_host ( host_id, is_main_in_charge, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the locations of parties with hosts older than 50.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( location, number_of_hosts, party_theme, first_year, * )\n# host ( host_id, name, nationality, * )\n# party_host ( host_id, is_main_in_charge, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Which parties have hosts of age above 50? Give me the party locations.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( number_of_hosts, location, party_theme, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( name, age, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the host names for parties with number of hosts greater than 20.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# party ( number_of_hosts, party_theme, location, first_year, * )\n# party_host ( host_id, is_main_in_charge, * )\n# host ( host_id, age, nationality, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Which parties have more than 20 hosts? Give me the host names for these parties.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( name, age, host_id, * )\n# party_host ( host_id, is_main_in_charge, * )\n# party ( location, party_theme, first_year, last_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### Show the name and the nationality of the oldest host.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( name, age, host_id, * )\n# party_host ( party_id, is_main_in_charge, * )\n# party ( location, party_theme, first_year, last_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### What are the name and the nationality of the host of the highest age?\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( name, age, nationality, * )\n# party_host ( party_id, is_main_in_charge, * )\n# party ( number_of_hosts, location, party_theme, first_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### List the names of hosts who did not serve as a host of any party in our record.\nSELECT"
    },
    {
        "db_id": "party_host",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# host ( name, age, nationality, * )\n# party_host ( party_id, is_main_in_charge, * )\n# party ( number_of_hosts, location, party_theme, first_year, * )\n#  party_host.host_id = host.host_id\n#  party_host.party_id = party.party_id \n#\n### What are the names of hosts who did not host any party in our record?\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( name, price, memory_in_g, carrier, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### How many phones are there?\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( price, phone_id, memory_in_g, carrier, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### List the names of phones in ascending order of price.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( memory_in_g, name, price, phone_id, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### What are the memories and carriers of phones?\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( carrier, name, price, phone_id, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### List the distinct carriers of phones with memories bigger than 32.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( name, phone_id, price, memory_in_g, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show the names of phones with carrier either \"Sprint\" or \"TMobile\".\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( price, name, phone_id, memory_in_g, * )\n# phone_market ( market_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### What is the carrier of the most expensive phone?\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( name, price, phone_id, memory_in_g, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show different carriers of phones together with the number of phones with each carrier.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( phone_id, name, price, memory_in_g, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show the most frequently used carrier of the phones.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( memory_in_g, name, phone_id, price, * )\n# phone_market ( phone_id, num_of_stock, * )\n# market ( ranking, market_id, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# market ( district, ranking, num_of_employees, num_of_shops, * )\n# phone_market ( market_id, num_of_stock, * )\n# phone ( name, price, memory_in_g, carrier, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show the names of phones and the districts of markets they are on.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# market ( district, ranking, num_of_employees, num_of_shops, * )\n# phone_market ( market_id, num_of_stock, * )\n# phone ( name, price, memory_in_g, carrier, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# market ( num_of_shops, district, ranking, num_of_employees, * )\n# phone ( name, price, memory_in_g, carrier, * )\n# phone_market ( market_id, num_of_stock, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show the names of phones that are on market with number of shops greater than 50.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( phone_id, price, memory_in_g, carrier, * )\n# phone_market ( num_of_stock, market_id, * )\n# market ( district, ranking, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### For each phone, show its names and total number of stocks.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( phone_id, price, memory_in_g, carrier, * )\n# phone_market ( num_of_stock, market_id, * )\n# market ( district, ranking, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.\nSELECT"
    },
    {
        "db_id": "phone_market",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# phone ( name, price, memory_in_g, carrier, * )\n# phone_market ( market_id, num_of_stock, * )\n# market ( district, ranking, num_of_employees, num_of_shops, * )\n#  phone_market.market_id = market.market_id\n#  phone_market.phone_id = phone.phone_id \n#\n### List the names of phones that are not on any market.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, width, catalog_level_number, capacity, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### Find the names of all the catalog entries.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, width, catalog_level_number, capacity, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### What are all the catalog entry names?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# attribute_definitions ( attribute_id, attribute_name, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find the list of attribute data types possessed by more than 3 attribute definitions.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# attribute_definitions ( attribute_id, attribute_name, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, catalog_level_number, attribute_value, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### What are the attribute data types with more than 3 attribute definitions?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# attribute_definitions ( attribute_data_type, attribute_id, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, catalog_level_number, attribute_value, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### What is the attribute data type of the attribute with name \"Green\"?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# attribute_definitions ( attribute_data_type, attribute_id, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, catalog_level_number, attribute_value, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find the attribute data type for the attribute named \"Green\".\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_structure ( catalog_level_number, catalog_id, * )\n# catalog_contents ( catalog_entry_id, catalog_level_number, capacity, length, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### Find the name and level of catalog structure with level between 5 and 10.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_structure ( catalog_level_number, catalog_id, * )\n# catalog_contents ( catalog_entry_id, catalog_level_number, capacity, length, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### What are the name and level of catalog structure with level number between 5 and 10\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( catalog_id, catalog_name, date_of_publication, date_of_latest_revision, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find all the catalog publishers whose name contains \"Murray\"\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( catalog_id, catalog_name, date_of_publication, date_of_latest_revision, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Which catalog publishers have substring \"Murray\" in their names?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( catalog_id, catalog_name, date_of_publication, date_of_latest_revision, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Which catalog publisher has published the most catalogs?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( catalog_id, catalog_name, date_of_publication, date_of_latest_revision, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### Find the catalog publisher that has the most catalogs.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( catalog_name, catalog_id, catalog_publisher, date_of_latest_revision, * )\n# catalog_structure ( catalog_level_number, catalog_level_name, * )\n# catalog_contents ( width, catalog_entry_id, catalog_entry_name, capacity, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, attribute_id, attribute_value, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### Find the names and publication dates of all catalogs that have catalog level number greater than 5.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( catalog_name, catalog_id, catalog_publisher, date_of_latest_revision, * )\n# catalog_structure ( catalog_level_number, catalog_level_name, * )\n# catalog_contents ( catalog_entry_name, catalog_entry_id, width, capacity, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, attribute_id, attribute_value, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### What are the name and publication date of the catalogs with catalog level number above 5?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, catalog_level_number, width, capacity, * )\n# catalog_contents_additional_attributes ( attribute_id, catalog_level_number, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### What are the entry names of catalog with the attribute possessed by most entries.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, catalog_level_number, width, capacity, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, catalog_level_number, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find the entry names of the catalog with the attribute that have the most entries.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( price_in_dollars, price_in_euros, catalog_entry_id, width, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_value, attribute_id, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### What is the entry name of the most expensive catalog (in USD)?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( price_in_dollars, price_in_euros, catalog_entry_id, width, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### Find the entry name of the catalog with the highest price (in USD).\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_level_number, price_in_euros, catalog_entry_id, width, * )\n# catalog_structure ( catalog_level_number, catalog_id, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, attribute_value, attribute_id, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### What is the level name of the cheapest catalog (in USD)?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_level_number, price_in_euros, catalog_entry_id, width, * )\n# catalog_structure ( catalog_level_number, catalog_id, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, attribute_value, attribute_id, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### Find the level name of the catalog with the lowest price (in USD).\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( price_in_dollars, catalog_entry_id, width, catalog_level_number, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### What are the average and minimum price (in Euro) of all products?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( price_in_dollars, catalog_entry_id, width, catalog_level_number, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Give me the average and minimum price (in Euro) of the products.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( height, catalog_entry_id, catalog_level_number, width, * )\n# catalog_structure ( catalog_level_name, catalog_id, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, attribute_id, attribute_value, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### What is the product with the highest height? Give me the catalog entry name.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( height, catalog_entry_id, width, catalog_level_number, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### Which catalog content has the highest height? Give me the catalog entry name.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_level_number, catalog_entry_id, product_stock_number, price_in_dollars, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### Find the name of the product that has the smallest capacity.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( capacity, catalog_entry_id, width, catalog_level_number, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### Which catalog content has the smallest capacity? Return the catalog entry name.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, catalog_level_number, width, price_in_dollars, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find the names of all the products whose stock number starts with \"2\".\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( product_stock_number, catalog_entry_id, catalog_level_number, capacity, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_level_number, catalog_entry_id, width, capacity, * )\n# catalog_structure ( catalog_level_name, catalog_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### Find the names of catalog entries with level number 8.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_level_number, catalog_entry_id, width, capacity, * )\n# catalog_structure ( catalog_level_name, catalog_id, * )\n# catalog_contents_additional_attributes ( catalog_entry_id, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### What are the names of catalog entries with level number 8?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( height, width, catalog_entry_id, catalog_level_number, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find the names of the products with length smaller than 3 or height greater than 5.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( length, catalog_entry_id, width, catalog_level_number, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Which catalog contents have length below 3 or above 5? Find the catalog entry names.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# attribute_definitions ( attribute_id, attribute_data_type, * )\n# catalog_contents_additional_attributes ( attribute_id, catalog_entry_id, catalog_level_number, * )\n# catalog_contents ( catalog_entry_id, catalog_level_number, capacity, length, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### Find the name and attribute ID of the attribute definitions with attribute value 0.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalog_contents_additional_attributes ( attribute_id, catalog_entry_id, catalog_level_number, * )\n# catalog_contents ( catalog_entry_id, capacity, length, height, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( price_in_euros, capacity, catalog_entry_id, width, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find the name and capacity of products with price greater than 700 (in USD).\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( price_in_dollars, capacity, catalog_entry_id, width, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( catalog_id, catalog_name, catalog_publisher, date_of_publication, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### Find the dates on which more than one revisions were made.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalogs ( date_of_publication, catalog_id, catalog_name, catalog_publisher, * )\n# catalog_contents ( capacity, length, height, catalog_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#\n### On which days more than one revisions were made on catalogs.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, catalog_level_number, width, catalog_entry_name, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### How many products are there in the records?\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, catalog_level_number, catalog_entry_name, capacity, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalog_structure ( catalog_level_number, catalog_level_name, * )\n# catalogs ( catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_structure.catalog_id = catalogs.catalog_id \n#\n### Find the total number of catalog contents.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( catalog_entry_id, product_stock_number, catalog_level_number, width, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### Name all the products with next entry ID greater than 8.\nSELECT"
    },
    {
        "db_id": "product_catalog",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# catalog_contents ( next_entry_id, catalog_entry_id, catalog_level_number, previous_entry_id, * )\n# catalog_contents_additional_attributes ( catalog_level_number, attribute_id, attribute_value, * )\n# catalog_structure ( catalog_id, catalog_level_name, * )\n# attribute_definitions ( attribute_name, attribute_data_type, * )\n#  catalog_contents_additional_attributes.catalog_entry_id = catalog_contents.catalog_entry_id\n#  catalog_contents_additional_attributes.catalog_level_number = catalog_structure.catalog_level_number \n#  catalog_contents.catalog_level_number = catalog_structure.catalog_level_number \n#\n### What are the catalog entry names of the products with next entry ID above 8?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# assignedto ( project, * )\n# projects ( hours, code, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the total number of scientists.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# assignedto ( project, * )\n# projects ( hours, code, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### How many scientists are there?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the total hours of all projects.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What is the total number of hours for all projects?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# projects ( name, hours, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### How many different scientists are assigned to any project?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# projects ( name, hours, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Count the number of different scientists assigned to any project.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, hours, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the number of distinct projects.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, hours, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### How many different projects are there?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the average hours of all projects.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What is the average hours across all projects?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the name of project that continues for the longest time.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What is the name of the project with the most hours?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### List the name of all projects that are operated longer than the average working hours of all projects.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of projects that have taken longer than the average number of hours for all projects?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# assignedto ( scientist, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the name and hours of project that has the most number of scientists.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( scientist, * )\n# projects ( name, hours, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What is the name and hours for the project which has the most scientists assigned to it?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# scientists ( name, * )\n# projects ( name, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the name of the project for which a scientist whose name contains 'Smith' is assigned to.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( scientist, * )\n# projects ( name, hours, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# assignedto ( project, * )\n# projects ( hours, name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# assignedto ( project, * )\n# projects ( code, name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What is the sum of hours for projects that scientists with the name Michael Rogers or Carol Smith are assigned to?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the name of projects that require between 100 and 300 hours of work.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of projects that require between 100 and 300 hours?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( code, hours, * )\n# assignedto ( project, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# projects ( name, hours, * )\n# assignedto ( project, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( ssn, * )\n# assignedto ( project, * )\n# projects ( hours, code, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### List the names of all scientists sorted in alphabetical order.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( ssn, * )\n# assignedto ( project, * )\n# projects ( hours, code, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of all the scientists in alphabetical order?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, hours, * )\n# assignedto ( scientist, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the number of scientists involved for each project name.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( scientist, * )\n# projects ( name, hours, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the naems of all the projects, and how many scientists were assigned to each of them?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( code, name, * )\n# assignedto ( scientist, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the number of scientists involved for the projects that require more than 300 hours.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# assignedto ( scientist, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# assignedto ( project, * )\n# projects ( name, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the number of projects which each scientist is working on and scientist's name.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# projects ( name, hours, * )\n# assignedto ( project, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of the scientists, and how many projects are each of them working on?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# assignedto ( project, * )\n# projects ( hours, name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the SSN and name of scientists who are assigned to the project with the longest hours.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# projects ( hours, name, * )\n# assignedto ( scientist, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the SSN and names of scientists working on the project with the most hours?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# scientists ( name, * )\n# projects ( name, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the name of scientists who are assigned to some project.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# scientists ( name, * )\n# projects ( code, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of scientists who are assigned to any project?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( code, hours, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Select the project names which are not assigned yet.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( code, hours, * )\n# assignedto ( scientist, * )\n# scientists ( ssn, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of projects that have not been assigned?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# scientists ( name, * )\n# projects ( name, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the name of scientists who are not assigned to any project.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# scientists ( name, * )\n# projects ( code, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of scientists who have not been assigned a project?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# scientists ( name, * )\n# projects ( name, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the number of scientists who are not assigned to any project.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# assignedto ( project, * )\n# scientists ( name, * )\n# projects ( name, hours, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### How many scientists do not have any projects assigned to them?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# projects ( hours, name, * )\n# assignedto ( project, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find the names of scientists who are not working on the project with the highest hours.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# scientists ( name, * )\n# projects ( hours, name, * )\n# assignedto ( project, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of scientists who are not working on the project with the most hours?\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# scientists ( name, * )\n# assignedto ( project, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( name, code, * )\n# assignedto ( project, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# scientists ( name, * )\n# assignedto ( scientist, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.\nSELECT"
    },
    {
        "db_id": "scientist_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# projects ( hours, code, * )\n# assignedto ( scientist, * )\n# scientists ( name, * )\n#  assignedto.scientist = scientists.ssn\n#  assignedto.project = projects.code \n#\n### What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, type, nationality, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### How many ships are there?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, type, nationality, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What is the number of ships?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, nationality, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### List the name of ships in ascending order of tonnage.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, nationality, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### what are the names of the ships ordered by ascending tonnage?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( type, name, ship_id, tonnage, * )\n# mission ( location, fate, mission_id, ship_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the type and nationality of ships?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( type, name, ship_id, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the types and nationalities of every ship?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### List the name of ships whose nationality is not \"United States\".\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the names of the ships that are not from the United States?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### Show the name of ships whose nationality is either United States or United Kingdom.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the names of the ships  that are from either the US or the UK?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, nationality, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What is the name of the ship with the largest tonnage?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, type, nationality, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What is the ship with the largest amount of tonnage called?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, nationality, tonnage, * )\n# mission ( location, fate, mission_id, ship_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### Show different types of ships and the number of ships of each type.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, nationality, tonnage, * )\n# mission ( location, fate, mission_id, ship_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### For each type, how many ships are there?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, nationality, tonnage, * )\n# mission ( location, fate, mission_id, ship_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### Please show the most common type of ships.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( name, ship_id, nationality, tonnage, * )\n# mission ( location, fate, mission_id, ship_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What is the most common type of ships?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( ship_id, name, type, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### List the nations that have more than two ships.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( ship_id, name, type, tonnage, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the nations that have more than two ships?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( type, name, ship_id, nationality, * )\n# mission ( location, fate, mission_id, ship_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### Show different types of ships and the average tonnage of ships of each type.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( type, ship_id, name, nationality, * )\n# mission ( location, fate, mission_id, ship_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### For each type, what is the average tonnage?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mission ( code, fate, location, mission_id, * )\n# ship ( name, type, nationality, tonnage, * )\n#  mission.ship_id = ship.ship_id\n#\n### Show codes and fates of missions, and names of ships involved.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mission ( code, fate, location, mission_id, * )\n# ship ( name, type, nationality, tonnage, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the mission codes, fates, and names of the ships involved?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mission ( launched_year, code, location, fate, * )\n# ship ( name, type, nationality, tonnage, * )\n#  mission.ship_id = ship.ship_id\n#\n### Show names of ships involved in a mission launched after 1928.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mission ( launched_year, code, location, fate, * )\n# ship ( name, type, nationality, tonnage, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the names of ships that were involved in a mission launched after 1928?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( nationality, name, type, tonnage, * )\n# mission ( fate, code, location, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### Show the distinct fate of missions that involve ships with nationality \"United States\"\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mission ( fate, code, location, mission_id, * )\n# ship ( ship_id, name, type, tonnage, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the different fates of the mission that involved ships from the United States?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mission ( code, location, fate, mission_id, * )\n# ship ( name, type, nationality, tonnage, * )\n#  mission.ship_id = ship.ship_id\n#\n### List the name of ships that are not involved in any mission\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# mission ( code, location, fate, mission_id, * )\n# ship ( name, type, nationality, tonnage, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the names of the ships that are not involved in any missions?\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( type, ship_id, name, nationality, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.\nSELECT"
    },
    {
        "db_id": "ship_mission",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ship ( type, ship_id, name, nationality, * )\n# mission ( code, location, fate, mission_id, * )\n#  mission.ship_id = ship.ship_id\n#\n### What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### How many singers are there?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What is the count of singers?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( net_worth_millions, singer_id, birth_year, citizenship, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### List the name of singers in ascending order of net worth.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( net_worth_millions, singer_id, birth_year, citizenship, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the names of singers ordered by ascending net worth?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( citizenship, name, singer_id, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the birth year and citizenship of singers?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( citizenship, name, singer_id, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the birth years and citizenships of the singers?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, birth_year, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### List the name of singers whose citizenship is not \"France\".\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, birth_year, net_worth_millions, * )\n# song ( singer_id, sales, song_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the names of the singers who are not French citizens?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, net_worth_millions, citizenship, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### Show the name of singers whose birth year is either 1948 or 1949?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, net_worth_millions, citizenship, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the names of the singers whose birth years are either 1948 or 1949?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, birth_year, citizenship, * )\n# song ( singer_id, sales, song_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What is the name of the singer with the largest net worth?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( net_worth_millions, singer_id, birth_year, citizenship, * )\n# song ( singer_id, sales, song_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What is the name of the singer who is worth the most?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, birth_year, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### Show different citizenship of singers and the number of singers of each citizenship.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, birth_year, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### For each citizenship, how many singers are from that country?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, singer_id, birth_year, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### Please show the most common citizenship of singers.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( singer_id, name, birth_year, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What is the most common singer citizenship ?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( citizenship, name, singer_id, birth_year, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### Show different citizenships and the maximum net worth of singers of each citizenship.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( citizenship, singer_id, name, birth_year, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### For each citizenship, what is the maximum net worth?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# song ( title, sales, song_id, highest_position, * )\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n#  song.singer_id = singer.singer_id\n#\n### Show titles of songs and names of singers.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# song ( title, sales, song_id, highest_position, * )\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the song titles and singer names?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# song ( sales, title, song_id, highest_position, * )\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n#  song.singer_id = singer.singer_id\n#\n### Show distinct names of singers that have songs with sales more than 300000.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n# song ( sales, title, song_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### what are the different names of the singers that have sales more than 300000?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# song ( title, sales, song_id, highest_position, * )\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n#  song.singer_id = singer.singer_id\n#\n### Show the names of singers that have more than one song.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n# song ( title, sales, song_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the names of the singers that have more than one songs?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# song ( sales, title, song_id, highest_position, * )\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n#  song.singer_id = singer.singer_id\n#\n### Show the names of singers and the total sales of their songs.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# song ( sales, title, song_id, highest_position, * )\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n#  song.singer_id = singer.singer_id\n#\n### For each singer name, what is the total sales for their songs?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n# song ( title, sales, song_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### List the name of singers that do not have any song.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( name, birth_year, net_worth_millions, citizenship, * )\n# song ( title, sales, song_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What is the sname of every sing that does not have any song?\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( citizenship, name, singer_id, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### Show the citizenship shared by singers with birth year before 1945 and after 1955.\nSELECT"
    },
    {
        "db_id": "singer",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# singer ( citizenship, name, singer_id, net_worth_millions, * )\n# song ( sales, song_id, singer_id, highest_position, * )\n#  song.singer_id = singer.singer_id\n#\n### What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( name, region, start_year, * )\n# club_rank ( club_id, gold, silver, total, * )\n# player ( position, club_id, apps, goals, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### How many clubs are there?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( name, region, start_year, * )\n# club_rank ( club_id, rank, gold, silver, * )\n# player ( position, apps, goals, points, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What is the total number of clubs?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( name, club_id, start_year, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### List the distinct region of clubs in ascending alphabetical order.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( name, club_id, start_year, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the different regions of clubs in ascending alphabetical order?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club_rank ( club_id, rank, silver, bronze, * )\n# club ( name, region, start_year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# competition ( year, country, competition_type, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### What is the average number of gold medals for clubs?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club_rank ( club_id, rank, silver, bronze, * )\n# club ( name, region, start_year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# player ( position, club_id, apps, goals, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What is the average number of gold medals for a club?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( country, year, competition_id, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the types and countries of competitions?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( country, year, competition_id, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the types of every competition and in which countries are they located?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( year, competition_id, country, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( score, club_id_1, club_id_2, * )\n# club ( name, region, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### What are the distinct years in which the competitions type is not \"Tournament\"?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( year, competition_id, country, * )\n# competition_result ( score, club_id_1, club_id_2, * )\n# club_rank ( gold, silver, total, club_id, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the different years for all competitions that are not of type equal to tournament?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club_rank ( club_id, rank, gold, bronze, * )\n# club ( name, region, start_year, * )\n# competition_result ( club_id_2, score, competition_id, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the maximum and minimum number of silver medals for clubs.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club_rank ( club_id, rank, gold, bronze, * )\n# club ( name, region, start_year, * )\n# competition_result ( club_id_2, score, competition_id, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the maximum and minimum number of silver medals for all the clubs?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club_rank ( club_id, gold, silver, bronze, * )\n# club ( name, region, start_year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# player ( position, club_id, apps, goals, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### How many clubs have total medals less than 10?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club_rank ( club_id, gold, silver, bronze, * )\n# club ( name, region, start_year, * )\n# competition_result ( club_id_2, competition_id, score, * )\n# player ( position, club_id, apps, goals, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What is the total number of clubs that have less than 10 medals in total?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( name, club_id, region, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### List all club names in ascending order of start year.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( start_year, club_id, region, * )\n# club_rank ( club_id, gold, silver, total, * )\n# player ( position, club_id, apps, goals, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the names of all the clubs starting with the oldest?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( club_id, region, start_year, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### List all club names in descending alphabetical order.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( club_id, region, start_year, * )\n# club_rank ( club_id, gold, silver, total, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the names of all the clubs ordered in descending alphabetical order?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( club_id, position, apps, goals, * )\n# club ( club_id, region, start_year, * )\n# club_rank ( club_id, gold, silver, total, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### Please show the names and the players of clubs.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( club_id, position, apps, goals, * )\n# club ( club_id, region, start_year, * )\n# club_rank ( club_id, gold, silver, total, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the names and players of all the clubs?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( club_id, name, apps, goals, * )\n# club ( name, region, start_year, * )\n# club_rank ( club_id, gold, silver, total, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### Show the names of clubs that have players with position \"Right Wing\".\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( club_id, name, apps, goals, * )\n# club ( name, region, start_year, * )\n# club_rank ( rank, gold, silver, total, * )\n# competition_result ( club_id_2, score, competition_id, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the names of the clubs that have players in the position of \"Right Wing\"?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, name, position, apps, * )\n# club ( name, region, start_year, * )\n# club_rank ( rank, gold, silver, total, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What is the average points of players from club with name \"AIB\".\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, name, position, apps, * )\n# club ( name, region, start_year, * )\n# club_rank ( rank, gold, silver, total, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What is the average number of points for players from the \"AIB\" club?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, name, club_id, apps, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### List the position of players and the average number of points of players of each position.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, name, club_id, apps, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### For each position, what is the average number of points for players in that position?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, club_id, name, apps, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition ( country, competition_id, competition_type, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### List the position of players with average number of points scored by players of that position bigger than 20.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, player_id, name, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition ( year, country, competition_type, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the positions of players whose average number of points scored by that position is larger than 20?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( year, country, competition_id, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### List the types of competition and the number of competitions of each type.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( year, country, competition_id, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the types of competition and number of competitions for that type?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( competition_id, year, country, * )\n# competition_result ( score, club_id_1, club_id_2, * )\n# club_rank ( gold, silver, total, club_id, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### List the most common type of competition.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( competition_id, year, country, * )\n# competition_result ( score, club_id_1, club_id_2, * )\n# player ( position, apps, goals, points, * )\n# club_rank ( gold, silver, total, club_id, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What is the most common competition type?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( competition_id, year, country, * )\n# competition_result ( club_id_1, score, club_id_2, * )\n# club_rank ( gold, silver, total, club_id, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### List the types of competition that have at most five competitions of that type.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( competition_id, year, country, * )\n# competition_result ( club_id_1, score, club_id_2, * )\n# club_rank ( gold, silver, total, club_id, * )\n# player ( position, apps, goals, points, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the types of competition that have most 5 competitions for that type?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( name, region, start_year, * )\n# player ( name, position, apps, goals, * )\n# club_rank ( rank, gold, silver, total, * )\n# competition_result ( competition_id, club_id_2, score, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### List the names of clubs that do not have any players.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# club ( name, region, start_year, * )\n# player ( name, position, apps, goals, * )\n# club_rank ( rank, gold, silver, total, * )\n# competition_result ( competition_id, club_id_2, score, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the names of all clubs that do not have any players?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, name, club_id, apps, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# competition ( country, competition_id, competition_type, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the positions with both players having more than 20 points and less than 10 points.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, player_id, name, apps, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What are the positions of both players that have more than 20 20 points and less than 10 points?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( name, position, club_id, apps, * )\n# club_rank ( rank, club_id, gold, silver, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### Show total points of all players.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( name, position, club_id, apps, * )\n# club_rank ( rank, club_id, gold, silver, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What is the total number of points for all players?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( name, apps, goals, points, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### how many different positions are there?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( name, apps, goals, points, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### How many different position for players are listed?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, position, club_id, apps, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition ( year, country, competition_type, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### what are the name of players who get more than the average points.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, position, club_id, apps, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# competition ( country, competition_id, competition_type, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### What are the names of all players that got more than the average number of points?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, name, club_id, apps, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# competition ( country, competition_id, competition_type, * )\n#  competition_result.competition_id = competition.competition_id\n#\n### find the number of players whose points are lower than 30 in each position.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# player ( points, name, club_id, apps, * )\n# club_rank ( gold, silver, total, club_id, * )\n# competition_result ( competition_id, club_id_1, club_id_2, * )\n# club ( region, club_id, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  player.club_id = club.club_id \n#  club_rank.club_id = club.club_id \n#\n### What is the number of players who have points less than 30 for each position?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( country, competition_id, year, * )\n# club ( name, region, start_year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# club_rank ( rank, gold, silver, total, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### which country did participated in the most number of Tournament competitions?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( competition_type, competition_id, year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# club ( name, region, start_year, * )\n# club_rank ( rank, gold, silver, total, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### what is the name of the country that participated in the most tournament competitions?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( country, competition_id, year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# club_rank ( club_id, gold, silver, total, * )\n# club ( name, region, start_year, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### which countries did participated in both Friendly and Tournament type competitions.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( country, competition_id, year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# club ( name, region, start_year, * )\n# club_rank ( club_id, gold, silver, total, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### What are the countries that participated in both friendly and tournament type competitions?\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( country, competition_id, year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# club ( name, region, start_year, * )\n# club_rank ( rank, gold, silver, total, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### Find the countries that have never participated in any competition with Friendly type.\nSELECT"
    },
    {
        "db_id": "sports_competition",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# competition ( country, competition_id, year, * )\n# competition_result ( club_id_1, club_id_2, score, * )\n# club ( name, region, start_year, * )\n# club_rank ( rank, gold, silver, total, * )\n#  competition_result.club_id_1 = club.club_id\n#  competition_result.club_id_2 = club.club_id \n#  competition_result.competition_id = competition.competition_id \n#  club_rank.club_id = club.club_id \n#\n### What are the countries that have never participated in any friendly-type competitions?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# event ( name, year, stadium_id, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# record ( result, event_id, swimmer_id, * )\n# stadium ( capacity, city, country, id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### How many events are there?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# event ( year, id, stadium_id, * )\n# record ( result, event_id, swimmer_id, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# stadium ( capacity, city, country, id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### List all the event names by year from the most recent to the oldest.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# event ( year, id, stadium_id, * )\n# record ( id, result, swimmer_id, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# stadium ( capacity, city, country, id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### What is the name of the event that happened in the most recent year?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( country, name, capacity, city, * )\n# swimmer ( meter_500, meter_600, meter_700, time, * )\n# event ( stadium_id, year, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### How many stadiums are there?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( capacity, id, city, country, * )\n# swimmer ( meter_600, name, meter_300, meter_400, * )\n# event ( stadium_id, year, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the name of the stadium that has the maximum capacity.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( capacity, id, city, country, * )\n# swimmer ( name, meter_300, meter_400, meter_600, * )\n# event ( stadium_id, year, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of stadiums whose capacity is smaller than the average capacity.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( id, name, capacity, city, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# event ( stadium_id, year, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the country that has the most stadiums.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( id, name, capacity, city, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# record ( result, swimmer_id, event_id, * )\n# event ( stadium_id, year, id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Which country has at most 3 stadiums listed?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( country, id, name, city, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# event ( stadium_id, year, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( city, id, name, capacity, * )\n# event ( stadium_id, id, name, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### How many cities have a stadium that was opened before the year of 2006?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( id, name, capacity, city, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# event ( stadium_id, year, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### How many stadiums does each country have?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( country, id, name, capacity, * )\n# event ( stadium_id, id, name, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Which countries do not have a stadium that was opened after 2006?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( id, name, capacity, city, * )\n# swimmer ( time, id, nationality, meter_100, * )\n# event ( stadium_id, year, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### How many stadiums are not in country \"Russia\"?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# swimmer ( name, id, meter_200, meter_300, * )\n# record ( id, result, event_id, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of all swimmers, sorted by their 100 meter scores in ascending order.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# swimmer ( id, name, time, meter_100, * )\n# record ( result, swimmer_id, event_id, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### How many different countries are all the swimmers from?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# swimmer ( meter_400, meter_500, meter_600, name, * )\n# record ( id, result, event_id, * )\n# stadium ( id, name, capacity, city, * )\n# event ( name, stadium_id, year, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### List countries that have more than one swimmer.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# swimmer ( nationality, meter_200, meter_300, meter_100, * )\n# record ( result, id, event_id, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# swimmer ( name, time, nationality, meter_100, * )\n# record ( swimmer_id, id, event_id, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of swimmers who has a result of \"win\".\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# event ( id, name, year, * )\n# stadium ( name, capacity, city, country, * )\n# record ( id, result, swimmer_id, * )\n# swimmer ( time, id, nationality, meter_100, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### What is the name of the stadium which held the most events?\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# event ( stadium_id, id, year, * )\n# stadium ( name, capacity, city, country, * )\n# record ( id, result, swimmer_id, * )\n# swimmer ( time, id, nationality, meter_100, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the name and capacity of the stadium where the event named \"World Junior\" happened.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, capacity, city, country, * )\n# event ( name, id, year, * )\n# record ( id, result, swimmer_id, * )\n# swimmer ( time, id, nationality, meter_100, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of stadiums which have never had any event.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# record ( id, result, event_id, * )\n# swimmer ( name, meter_500, time, nationality, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the name of the swimmer who has the most records.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# record ( id, result, event_id, * )\n# swimmer ( name, time, nationality, meter_100, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the name of the swimmer who has at least 2 records.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# record ( swimmer_id, event_id, id, * )\n# swimmer ( id, name, time, meter_100, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# record ( id, result, event_id, * )\n# swimmer ( name, time, nationality, meter_100, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of the swimmers who have no record.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# record ( swimmer_id, id, event_id, * )\n# swimmer ( name, time, nationality, meter_100, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, country, capacity, city, * )\n# swimmer ( id, name, time, meter_100, * )\n# event ( id, name, year, * )\n# record ( event_id, id, result, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of stadiums that some Australian swimmers have been to.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( name, capacity, city, country, * )\n# event ( id, name, year, * )\n# record ( event_id, id, result, * )\n# swimmer ( name, meter_100, meter_500, time, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find the names of stadiums that the most swimmers have been to.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# swimmer ( id, meter_600, meter_100, meter_400, * )\n# record ( id, result, event_id, * )\n# stadium ( capacity, city, country, id, * )\n# event ( year, id, stadium_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### Find all details for each swimmer.\nSELECT"
    },
    {
        "db_id": "swimming",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# stadium ( capacity, id, name, city, * )\n# event ( name, stadium_id, id, * )\n# swimmer ( meter_400, meter_500, time, id, * )\n# record ( result, swimmer_id, event_id, * )\n#  record.event_id = event.id\n#  record.swimmer_id = swimmer.id \n#  event.stadium_id = stadium.id \n#\n### What is the average capacity of the stadiums that were opened in year 2005?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions ( investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Find the number of investors in total.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# investors ( investor_id, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions ( investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show all investor details.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lots ( lot_id, investor_id, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.lot_id = lots.lot_id\n#\n### Show all distinct lot details.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, investor_id, transaction_type_code, date_of_transaction, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the maximum amount of transaction.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, transaction_id, investor_id, transaction_type_code, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show all date and share count of transactions.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, investor_id, transaction_type_code, date_of_transaction, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What is the total share of transactions?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_type_code, investor_id, date_of_transaction, amount_of_transaction, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show all transaction ids with transaction code 'PUR'.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_type_code, transaction_id, investor_id, amount_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show all dates of transactions whose type code is \"SALE\".\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_type_code, transaction_id, investor_id, date_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the average amount of transactions with type code \"SALE\".\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# ref_transaction_types ( transaction_type_code, * )\n# transactions ( transaction_id, investor_id, date_of_transaction, amount_of_transaction, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the description of transaction type with code \"PUR\".\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, transaction_type_code, transaction_id, investor_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, transaction_id, transaction_type_code, investor_id, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the maximum share count of transactions where the amount is smaller than 10000\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, amount_of_transaction, transaction_id, investor_id, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, date_of_transaction, transaction_id, investor_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the transaction type descriptions and dates if the share count is smaller than 10.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, transaction_id, transaction_type_code, amount_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show details of all investors if they make any transaction with share count greater than 100.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, investor_id, date_of_transaction, amount_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### How many distinct transaction types are used in the transactions?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lots ( lot_details, lot_id, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  lots.investor_id = investors.investor_id \n#\n### Return the lot details and investor ids.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lots ( investor_id, lot_id, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  lots.investor_id = investors.investor_id \n#\n### Return the lot details of lots that belong to investors with details \"l\"?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# purchases ( purchase_transaction_id, * )\n# transactions ( transaction_id, transaction_type_code, date_of_transaction, investor_id, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What are the purchase details of transactions with amount bigger than 10000?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# sales ( sales_transaction_id, * )\n# transactions ( amount_of_transaction, transaction_type_code, transaction_id, investor_id, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  sales.sales_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What are the sale details and dates of transactions with amount smaller than 3000?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, transaction_type_code, amount_of_transaction, investor_id, * )\n# lots ( lot_id, investor_id, * )\n# transactions_lots ( transaction_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  transactions_lots.transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What are the lot details of lots associated with transactions with share count smaller than 50?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_type_code, transaction_id, amount_of_transaction, investor_id, * )\n# lots ( lot_details, investor_id, * )\n# transactions_lots ( transaction_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  transactions_lots.transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( amount_of_transaction, transaction_id, investor_id, date_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the average transaction amount for different transaction types.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, transaction_id, investor_id, date_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the maximum and minimum share count of different transaction types.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, transaction_id, transaction_type_code, date_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the average share count of transactions for different investors.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( share_count, transaction_id, transaction_type_code, date_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the average share count of transactions each each investor, ordered by average share count.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( amount_of_transaction, transaction_id, transaction_type_code, date_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the average amount of transactions for different investors.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, investor_id, transaction_type_code, date_of_transaction, * )\n# transactions_lots ( transaction_id, * )\n# lots ( investor_id, lot_details, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  transactions_lots.transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the average amount of transactions for different lots.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions_lots ( transaction_id, * )\n# transactions ( transaction_id, investor_id, transaction_type_code, date_of_transaction, * )\n# lots ( investor_id, lot_details, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  transactions_lots.transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the average amount of transactions for different lots, ordered by average amount of transactions.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_type_code, transaction_id, amount_of_transaction, date_of_transaction, * )\n# investors ( investor_details, * )\n# lots ( lot_id, lot_details, * )\n# transactions_lots ( lot_id, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  transactions_lots.transaction_id = transactions.transaction_id \n#  transactions.investor_id = investors.investor_id \n#  lots.investor_id = investors.investor_id \n#\n### Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, transaction_type_code, date_of_transaction, amount_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the number of transactions for different investors.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, investor_id, date_of_transaction, amount_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the transaction type code that occurs the fewest times.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, investor_id, date_of_transaction, amount_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the transaction type code that occurs the most frequently.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, investor_id, date_of_transaction, amount_of_transaction, * )\n# ref_transaction_types ( transaction_type_code, * )\n# transactions_lots ( lot_id, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the description of the transaction type that occurs most frequently.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# investors ( investor_details, * )\n# transactions ( transaction_id, transaction_type_code, date_of_transaction, amount_of_transaction, * )\n# transactions_lots ( lot_id, * )\n# lots ( lot_id, lot_details, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  transactions_lots.transaction_id = transactions.transaction_id \n#  transactions.investor_id = investors.investor_id \n#  lots.investor_id = investors.investor_id \n#\n### Show the id and details of the investor that has the largest number of transactions.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, transaction_type_code, date_of_transaction, amount_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the id and details for the investors who have the top 3 number of transactions.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_id, transaction_type_code, date_of_transaction, amount_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the ids of the investors who have at least two transactions.\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( transaction_type_code, transaction_id, date_of_transaction, amount_of_transaction, * )\n# investors ( investor_details, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  transactions.investor_id = investors.investor_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### Show the ids and details of the investors who have at least two transactions with type code \"SALE\".\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# transactions ( amount_of_transaction, share_count, transaction_id, transaction_type_code, * )\n# transactions_lots ( lot_id, * )\n# ref_transaction_types ( transaction_type_description, * )\n# purchases ( purchase_details, * )\n#  transactions_lots.transaction_id = transactions.transaction_id\n#  purchases.purchase_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What are the dates of transactions with at least 100 share count or amount bigger than 100?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# sales ( sales_transaction_id, * )\n# purchases ( purchase_transaction_id, * )\n# transactions ( transaction_type_code, investor_id, date_of_transaction, amount_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  purchases.purchase_transaction_id = transactions.transaction_id\n#  sales.sales_transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What are the details of all sales and purchases?\nSELECT"
    },
    {
        "db_id": "tracking_share_transactions",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# lots ( lot_details, investor_id, * )\n# transactions_lots ( transaction_id, * )\n# transactions ( transaction_type_code, investor_id, date_of_transaction, amount_of_transaction, * )\n# ref_transaction_types ( transaction_type_description, * )\n#  transactions_lots.lot_id = lots.lot_id\n#  transactions_lots.transaction_id = transactions.transaction_id \n#  transactions.transaction_type_code = ref_transaction_types.transaction_type_code \n#\n### What are the details of the lots which are not used in any transactions?\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( name, location, annual_entry_exit, annual_interchanges, * )\n# train_station ( train_id, * )\n# train ( name, time, service, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### How many train stations are there?\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( name, location, station_id, annual_entry_exit, * )\n# train_station ( station_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the name, location, and number of platforms for all stations.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( station_id, name, annual_entry_exit, annual_interchanges, * )\n# train_station ( train_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### What are all locations of train stations?\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( name, location, station_id, annual_entry_exit, * )\n# train_station ( train_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the names and total passengers for all train stations not in London.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( main_services, name, station_id, location, * )\n# train_station ( train_id, * )\n# train ( name, train_id, time, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the names and main services for train stations that have the top three total number of passengers.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( location, station_id, name, annual_entry_exit, * )\n# train_station ( train_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### What is the average and maximum number of total passengers for train stations in London or Glasgow?\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( number_of_platforms, location, station_id, name, * )\n# train_station ( train_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show all locations and the total number of platforms and passengers for all train stations in each location.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( number_of_platforms, location, station_id, name, * )\n# train_station ( train_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( location, station_id, name, annual_entry_exit, * )\n# train_station ( train_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show all locations which don't have a train station with at least 15 platforms.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( station_id, name, annual_entry_exit, annual_interchanges, * )\n# train_station ( train_id, * )\n# train ( name, time, service, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the location with most number of train stations.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( time, service, train_id, * )\n# train_station ( station_id, * )\n# station ( location, station_id, annual_entry_exit, annual_interchanges, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the name, time, and service for all trains.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( name, time, service, * )\n# train_station ( station_id, * )\n# station ( location, station_id, annual_entry_exit, annual_interchanges, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the number of trains\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( time, service, train_id, * )\n# train_station ( station_id, * )\n# station ( location, station_id, annual_entry_exit, annual_interchanges, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the name and service for all trains in order by time.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train_station ( train_id, * )\n# station ( name, location, annual_entry_exit, annual_interchanges, * )\n# train ( name, time, service, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the station name and number of trains in each station.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( name, time, service, * )\n# train_station ( station_id, * )\n# station ( name, location, annual_entry_exit, annual_interchanges, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### show the train name and station name for each train.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( name, time, service, * )\n# train_station ( station_id, * )\n# station ( location, name, annual_entry_exit, annual_interchanges, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show all train names and times in stations in London in descending order by train time.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train_station ( train_id, * )\n# station ( name, location, annual_entry_exit, annual_interchanges, * )\n# train ( name, time, service, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the station name with greatest number of trains.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train_station ( train_id, * )\n# station ( name, location, annual_entry_exit, annual_interchanges, * )\n# train ( name, time, service, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show the station name with at least two trains.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( station_id, name, annual_entry_exit, annual_interchanges, * )\n# train_station ( train_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show all locations with only 1 station.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( name, location, annual_entry_exit, annual_interchanges, * )\n# train_station ( train_id, * )\n# train ( train_id, time, service, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Show station names without any trains.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( train_id, time, service, * )\n# train_station ( train_id, * )\n# station ( name, location, annual_entry_exit, annual_interchanges, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# train ( name, time, service, * )\n# train_station ( station_id, * )\n# station ( station_id, name, annual_entry_exit, annual_interchanges, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### Find the names of the trains that do not pass any station located in London.\nSELECT"
    },
    {
        "db_id": "train_station",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# station ( annual_interchanges, name, location, station_id, * )\n# train_station ( station_id, * )\n# train ( time, service, train_id, * )\n#  train_station.train_id = train.train_id\n#  train_station.station_id = station.station_id \n#\n### List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# area_code_state ( area_code, * )\n# votes ( created, vote_id, phone_number, contestant_number, * )\n# contestants ( contestant_name, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### How many states are there?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# contestants ( contestant_name, * )\n# votes ( vote_id, phone_number, state, contestant_number, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### List the contestant numbers and names, ordered by contestant name descending.\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( phone_number, state, created, contestant_number, * )\n# area_code_state ( state, * )\n# contestants ( contestant_name, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### List the vote ids, phone numbers and states of all votes.\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# area_code_state ( state, * )\n# votes ( vote_id, phone_number, state, contestant_number, * )\n# contestants ( contestant_name, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What are the maximum and minimum values of area codes?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( created, contestant_number, vote_id, phone_number, * )\n# area_code_state ( area_code, * )\n# contestants ( contestant_name, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What is last date created of votes from the state 'CA'?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# contestants ( contestant_number, * )\n# votes ( vote_id, phone_number, state, contestant_number, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What are the names of the contestants whose names are not 'Jessie Alloway'\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( created, contestant_number, vote_id, phone_number, * )\n# area_code_state ( state, * )\n# contestants ( contestant_name, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What are the distinct states and create time of all votes?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# contestants ( contestant_name, * )\n# votes ( created, vote_id, phone_number, state, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What are the contestant numbers and names of the contestants who had at least two votes?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( created, vote_id, phone_number, state, * )\n# contestants ( contestant_name, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( created, vote_id, phone_number, contestant_number, * )\n# area_code_state ( area_code, * )\n# contestants ( contestant_name, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What are the number of votes from state 'NY' or 'CA'?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( created, vote_id, phone_number, state, * )\n# contestants ( contestant_name, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### How many contestants did not get voted?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( contestant_number, created, vote_id, phone_number, * )\n# area_code_state ( state, * )\n# contestants ( contestant_name, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What is the area code in which the most voters voted?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( state, contestant_number, created, vote_id, * )\n# contestants ( contestant_name, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# votes ( state, created, vote_id, phone_number, * )\n# contestants ( contestant_number, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\nSELECT"
    },
    {
        "db_id": "voter_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# contestants ( contestant_number, * )\n# votes ( vote_id, phone_number, state, contestant_number, * )\n# area_code_state ( state, * )\n#  votes.state = area_code_state.state\n#  votes.contestant_number = contestants.contestant_number \n#\n### Return the names of the contestants whose names contain the substring 'Al' .\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( hand, first_name, last_name, birth_date, * )\n# matches ( round, score, surface, winner_id, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the total number of players.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( hand, first_name, last_name, birth_date, * )\n# matches ( minutes, round, score, surface, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many players are there?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_id, loser_ioc, minutes, round, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the total number of matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_id, loser_ioc, minutes, round, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Count the number of matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( birth_date, country_code, last_name, hand, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# matches ( round, score, surface, winner_id, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### List the first name and birth date of all players from the country with code USA.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( birth_date, country_code, hand, player_id, * )\n# matches ( round, score, surface, year, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the first names and birth dates of players from the USA?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_age, winner_id, loser_id, winner_entry, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( hand, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the average age of losers and winners of all matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_age, loser_id, winner_id, winner_entry, * )\n# players ( hand, first_name, last_name, birth_date, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the average ages of losers and winners across matches?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_id, winner_rank_points, loser_rank, winner_age, * )\n# rankings ( player_id, ranking_points, ranking_date, tours, * )\n# players ( hand, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the average rank of winners in all matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_id, winner_rank_points, loser_rank, winner_age, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( hand, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the average rank for winners in all matches?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_rank_points, loser_id, best_of, loser_age, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the highest rank of losers in all matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_rank_points, best_of, loser_id, loser_age, * )\n# rankings ( ranking_points, ranking_date, player_id, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the best rank of losers across all matches?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( hand, player_id, first_name, last_name, * )\n# matches ( round, score, surface, year, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### find the number of distinct country codes of all players.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, hand, first_name, last_name, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many distinct countries do players come from?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_id, loser_entry, loser_age, loser_ioc, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the number of distinct name of losers.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_id, loser_age, loser_entry, loser_ht, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many different loser names are there?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( tourney_id, match_num, tourney_date, loser_id, * )\n# rankings ( tours, ranking_date, player_id, ranking_points, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the name of tourney that has more than 10 matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( tourney_id, tourney_date, match_num, minutes, * )\n# rankings ( tours, ranking_date, player_id, ranking_points, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the names of tournaments that have more than 10 matches?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_name, year, match_num, winner_age, * )\n# players ( first_name, hand, last_name, birth_date, * )\n# rankings ( ranking, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### List the names of all winners who played in both 2013 and 2016.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( first_name, last_name, hand, birth_date, * )\n# matches ( winner_id, winner_name, match_num, loser_id, * )\n# rankings ( ranking, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the names of players who won in both 2013 and 2016?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( match_num, round, minutes, loser_id, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### List the number of all matches who played in years of 2013 or 2016.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( match_num, loser_id, minutes, round, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many matches were played in 2013 or 2016?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( first_name, player_id, hand, last_name, * )\n# matches ( winner_id, winner_name, match_num, winner_age, * )\n# rankings ( ranking, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( country_code, player_id, hand, last_name, * )\n# matches ( winner_id, winner_name, winner_entry, winner_ht, * )\n# rankings ( ranking_date, ranking, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the first names and country codes for players who won both the WTA Championships and the Australian Open?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( country_code, birth_date, player_id, hand, * )\n# matches ( minutes, round, score, surface, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the first name and country code of the oldest player.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( country_code, birth_date, player_id, hand, * )\n# matches ( minutes, round, score, surface, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the first name and country code of the oldest player?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( last_name, birth_date, hand, player_id, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### List the first and last name of all players in the order of birth date.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( last_name, birth_date, player_id, hand, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the full names of all players, sorted by birth date?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( birth_date, last_name, hand, player_id, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### List the first and last name of all players who are left / L hand in the order of birth date.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( last_name, birth_date, hand, player_id, * )\n# matches ( round, score, surface, year, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the full names of all left handed players, in order of birth date?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( country_code, player_id, hand, last_name, * )\n# rankings ( player_id, ranking_date, ranking, ranking_points, * )\n# matches ( match_num, minutes, round, score, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the first name and country code of the player who did the most number of tours.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( country_code, player_id, hand, last_name, * )\n# rankings ( player_id, ranking, ranking_date, ranking_points, * )\n# matches ( loser_id, match_num, minutes, round, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the first name and country code of the player with the most tours?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_id, match_num, minutes, round, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the year that has the most number of matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( match_num, loser_id, loser_ioc, minutes, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Which year had the most matches?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_rank_points, winner_rank, winner_id, winner_entry, * )\n# rankings ( player_id, ranking, ranking_date, tours, * )\n# players ( first_name, hand, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the name and rank points of the winner who won the most times.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_name, winner_id, winner_rank, winner_age, * )\n# players ( first_name, last_name, hand, birth_date, * )\n# rankings ( ranking_points, ranking_date, ranking, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the name of the winner who has won the most matches, and how many rank points does this player have?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_rank_points, winner_name, winner_rank, winner_id, * )\n# rankings ( player_id, ranking, tours, ranking_date, * )\n# players ( first_name, hand, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_rank_points, winner_name, winner_id, winner_rank, * )\n# rankings ( player_id, ranking, ranking_date, tours, * )\n# players ( first_name, hand, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the name of the winner with the most rank points who participated in the Australian Open tournament?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_name, minutes, winner_id, winner_name, * )\n# players ( first_name, hand, last_name, birth_date, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### find the names of loser and winner who played in the match with greatest number of minutes.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( loser_id, minutes, winner_id, winner_name, * )\n# players ( first_name, hand, last_name, birth_date, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the names of the winner and loser who played in the longest match?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rankings ( ranking, ranking_points, ranking_date, tours, * )\n# players ( first_name, hand, last_name, birth_date, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the average ranking for each player and their first name.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rankings ( ranking, ranking_points, ranking_date, tours, * )\n# players ( player_id, hand, last_name, birth_date, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the first names of all players, and their average rankings?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rankings ( ranking_points, ranking, ranking_date, tours, * )\n# players ( first_name, hand, last_name, birth_date, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the total ranking points for each player and their first name.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rankings ( ranking_points, ranking, ranking_date, tours, * )\n# players ( player_id, hand, last_name, birth_date, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the first names of all players, and their total ranking points?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, hand, first_name, last_name, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### find the number of players for each country.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, hand, first_name, last_name, * )\n# matches ( round, score, surface, year, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many players are from each country?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, hand, first_name, last_name, * )\n# matches ( round, score, surface, year, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### find the code of the country where has the greatest number of players.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( hand, player_id, first_name, last_name, * )\n# matches ( round, score, surface, winner_id, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the code of the country with the most players?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, hand, first_name, last_name, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the codes of countries that have more than 50 players.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, hand, first_name, last_name, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# matches ( round, score, surface, year, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the codes of countries with more than 50 players?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rankings ( ranking_date, ranking, player_id, ranking_points, * )\n# matches ( minutes, round, score, surface, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the total number of tours for each ranking date.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# rankings ( ranking_date, ranking, player_id, ranking_points, * )\n# matches ( minutes, round, score, surface, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many total tours were there for each ranking date?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( match_num, loser_id, minutes, round, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the number of matches happened in each year.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( match_num, loser_id, minutes, round, * )\n# rankings ( ranking_date, player_id, ranking_points, tours, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many matches were played in each year?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_name, winner_rank, winner_id, loser_age, * )\n# players ( birth_date, first_name, last_name, hand, * )\n# rankings ( ranking, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the name and rank of the 3 youngest winners across all matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_name, winner_rank, winner_id, winner_rank_points, * )\n# players ( first_name, birth_date, last_name, hand, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What are the names and ranks of the three youngest winners across all matches?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( winner_id, tourney_name, loser_hand, winner_entry, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many different winners both participated in the WTA Championships and were left handed?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# matches ( tourney_name, winner_id, tourney_id, winner_age, * )\n# players ( player_id, first_name, last_name, birth_date, * )\n# rankings ( ranking, tours, ranking_date, ranking_points, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the number of left handed winners who participated in the WTA Championships.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( birth_date, country_code, player_id, last_name, * )\n# matches ( winner_id, winner_rank, winner_name, winner_entry, * )\n# rankings ( ranking_points, ranking, ranking_date, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the first name, country code and birth date of the winner who has the highest rank points in all matches.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( birth_date, country_code, player_id, last_name, * )\n# matches ( winner_id, winner_entry, winner_rank, winner_ht, * )\n# rankings ( ranking_points, ranking_date, ranking, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### What is the first name, country code, and birth date of the player with the most winner rank points across all matches?\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, first_name, last_name, birth_date, * )\n# matches ( loser_hand, best_of, loser_entry, loser_id, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### Find the number of players for each hand type.\nSELECT"
    },
    {
        "db_id": "wta_1",
        "input_sequence": "### Complete sqlite SQL query only and with no explanation, and do not select extra columns that are not explicitly requested in the query. \n ### Sqlite SQL tables, with their properties: \n#\n# players ( player_id, first_name, last_name, birth_date, * )\n# matches ( loser_hand, best_of, loser_entry, loser_id, * )\n# rankings ( player_id, ranking_date, ranking_points, tours, * )\n#  rankings.player_id = players.player_id\n#  matches.loser_id = players.player_id \n#  matches.winner_id = players.player_id \n#\n### How many players are there for each hand type?\nSELECT"
    }
]