SELECT assets.asset_id, asset_details FROM assets JOIN asset_parts ON assets.asset_id = asset_parts.asset_id LEFT JOIN fault_log ON assets.asset_id = fault_log.asset_id GROUP BY assets.asset_id HAVING COUNT(DISTINCT asset_parts.part_id) = 2 AND COUNT(fault_log.fault_log_entry_id) < 2;
SELECT maintenance_contracts.maintenance_contract_id, COUNT(assets.asset_id) AS asset_count FROM maintenance_contracts JOIN assets ON assets.maintenance_contract_id = maintenance_contracts.maintenance_contract_id GROUP BY maintenance_contracts.maintenance_contract_id;
SELECT third_party_companies.company_id, COUNT(assets.asset_id) AS asset_count FROM assets JOIN third_party_companies ON assets.supplier_company_id = third_party_companies.company_id GROUP BY third_party_companies.company_id;
SELECT company_id, company_name FROM third_party_companies WHERE company_id IN (SELECT company_id FROM maintenance_engineers GROUP BY company_id HAVING COUNT(*) >= 2) INTERSECT SELECT company_id, company_name FROM third_party_companies WHERE company_id IN (SELECT maintenance_contract_company_id FROM maintenance_contracts GROUP BY maintenance_contract_company_id HAVING COUNT(*) >= 2);
SELECT staff.staff_id, staff_name FROM staff WHERE staff_id NOT IN (SELECT contact_staff_id FROM engineer_visits) AND staff_id IN (SELECT recorded_by_staff_id FROM fault_log);
SELECT T2.engineer_id, T2.first_name, T2.last_name FROM engineer_visits AS T1 INNER JOIN maintenance_engineers AS T2 ON T1.contact_staff_id = T2.engineer_id GROUP BY T2.engineer_id, T2.first_name, T2.last_name ORDER BY COUNT(T1.engineer_visit_id) DESC LIMIT 1;
SELECT part_name, part_id FROM parts WHERE part_id IN (SELECT part_id FROM part_faults GROUP BY part_id HAVING COUNT(*) > 2);
SELECT T2.last_name, T2.other_details, T3.skill_description FROM maintenance_engineers AS T2 JOIN engineer_skills AS T1 ON T2.engineer_id = T1.engineer_id JOIN skills AS T3 ON T1.skill_id = T3.skill_id;
SELECT part_faults.fault_description, skills.skill_code FROM part_faults JOIN skills_required_to_fix ON part_faults.part_fault_id = skills_required_to_fix.part_fault_id JOIN skills ON skills_required_to_fix.skill_id = skills.skill_id;
SELECT parts.part_id, parts.other_part_details, COUNT(DISTINCT asset_parts.asset_id) AS assets_used_in FROM parts JOIN asset_parts ON parts.part_id = asset_parts.part_id GROUP BY parts.part_id;
SELECT fault_short_name, other_fault_details FROM part_faults;
SELECT MAX(count_visits), fault_log_entry_id FROM ( SELECT fault_log_entry_id, COUNT(*) AS count_visits FROM engineer_visits GROUP BY fault_log_entry_id ) AS subquery ORDER BY count_visits DESC LIMIT 1;
SELECT DISTINCT last_name FROM maintenance_engineers;
SELECT COUNT(DISTINCT part_fault_id) FROM fault_log_parts;
SELECT T1.first_name, T1.last_name FROM maintenance_engineers AS T1 LEFT JOIN engineer_visits AS T2 ON T1.engineer_id = T2.engineer_id WHERE T2.contact_staff_id IS NULL;
SELECT assets.asset_id, asset_details, asset_model FROM assets;
SELECT MIN(assets.asset_disposed_date) FROM assets;
SELECT part_id, part_name FROM parts WHERE part_id IN (SELECT part_id FROM part_faults WHERE part_fault_id = (SELECT part_fault_id FROM skills_required_to_fix GROUP BY part_fault_id ORDER BY COUNT(skill_id) DESC LIMIT 1));
SELECT parts.other_part_details AS part_name FROM parts WHERE part_id IN (SELECT part_id FROM part_faults GROUP BY part_id ORDER BY COUNT(*) ASC LIMIT 1)
SELECT T2.engineer_id, T2.first_name, T2.last_name FROM engineer_visits AS T1 INNER JOIN maintenance_engineers AS T2 ON T1.contact_staff_id = T2.engineer_id GROUP BY T2.engineer_id, T2.first_name, T2.last_name ORDER BY COUNT(T1.contact_staff_id) ASC LIMIT 1;
SELECT staff.staff_name, maintenance_engineers.first_name, maintenance_engineers.last_name FROM staff JOIN engineer_visits ON staff.staff_id = engineer_visits.contact_staff_id JOIN maintenance_engineers ON engineer_visits.engineer_id = maintenance_engineers.engineer_id;
SELECT fault_log_entry_id, fault_description, recorded_by_staff_id FROM fault_log WHERE fault_log_entry_id IN (SELECT fault_log_entry_id FROM fault_log_parts GROUP BY fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT skill_id, skill_description FROM skills WHERE skill_id IN (SELECT skill_id FROM skills_required_to_fix GROUP BY skill_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT DISTINCT asset_details FROM assets;
SELECT asset_make, other_asset_details, asset_details FROM assets ORDER BY asset_disposed_date ASC;
SELECT part_id, MIN(chargeable_yn) AS chargeable_amount FROM parts GROUP BY part_id ORDER BY chargeable_amount LIMIT 1;
SELECT company_name FROM third_party_companies WHERE company_id IN (SELECT maintenance_contract_company_id FROM maintenance_contracts ORDER BY contract_start_date ASC LIMIT 1) LIMIT 1;
SELECT description FROM third_party_companies WHERE company_id IN (SELECT maintenance_contract_company_id FROM maintenance_contracts ORDER BY contract_end_date DESC LIMIT 1);
SELECT gender FROM staff GROUP BY gender ORDER BY COUNT(*) DESC LIMIT 1;
SELECT staff.staff_name, COUNT(DISTINCT engineer_visits.engineer_id) AS num_engineers_contacted FROM staff JOIN engineer_visits ON staff.staff_id = engineer_visits.contact_staff_id GROUP BY staff.staff_name;
SELECT asset_model FROM assets WHERE asset_id NOT IN (SELECT asset_id FROM fault_log);
SELECT COUNT(*) FROM book;
SELECT writer FROM book ORDER BY writer ASC;
SELECT title FROM book ORDER BY issues ASC;
SELECT title FROM book WHERE book_id NOT IN (SELECT book_id FROM publication WHERE publisher != 'Elaine Lee');
SELECT title, issues FROM book;
SELECT publication_date FROM publication INNER JOIN book ON publication.book_id = book.book_id ORDER BY price DESC;
SELECT DISTINCT publication_id FROM publication WHERE price > 5000000;
SELECT publication_id FROM publication WHERE price = (SELECT MAX(price) FROM publication);
SELECT publication_date FROM publication ORDER BY price ASC LIMIT 3;
SELECT book.title, publication.publication_id FROM book INNER JOIN publication ON book.book_id = publication.book_id;
SELECT DISTINCT writer FROM book JOIN publication ON book.book_id = publication.book_id WHERE price > 4000000;
SELECT publication.book_id FROM book INNER JOIN publication ON book.book_id = publication.book_id ORDER BY publication.price DESC;
SELECT publisher FROM publication GROUP BY publisher HAVING COUNT(*) > 1;
SELECT publisher, COUNT(*) FROM publication GROUP BY publisher;
SELECT publisher FROM publication GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1;
SELECT writer FROM ( SELECT writer, COUNT(*) AS num_books FROM book GROUP BY writer ) WHERE num_books > 1;
SELECT title FROM book WHERE book_id NOT IN (SELECT book_id FROM publication);
SELECT publisher FROM publication WHERE price > 10000000 INTERSECT SELECT publisher FROM publication WHERE price < 5000000;
SELECT COUNT(DISTINCT publication.publication_id) FROM publication;
SELECT COUNT(DISTINCT publication.publication_id) FROM publication;
SELECT price FROM publication WHERE book_id IN (SELECT book_id FROM book WHERE publisher IN ('Person', 'Wiley'));
SELECT dname FROM department ORDER BY mgr_start_date;
SELECT fname FROM employee WHERE ssn IN (SELECT essn FROM dependent WHERE relationship = 'spouse');
SELECT COUNT(*) FROM dependent WHERE relationship = 'F';
SELECT dname FROM department INNER JOIN dept_locations ON department.dnumber = dept_locations.dnumber WHERE dlocation = 'Houston';
SELECT lname, fname FROM employee WHERE salary > 30000;
SELECT sex, COUNT(*) FROM employee WHERE salary < 50000 GROUP BY sex;
SELECT fname, minit, lname, address FROM employee ORDER BY bdate ASC;
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT teacher_id FROM teacher ORDER BY age ASC;
SELECT teacher_id FROM teacher ORDER BY age ASC;
SELECT age FROM teacher;
SELECT age, hometown FROM teacher;
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT teacher_id FROM teacher WHERE age = 32 OR age = 33;
SELECT DISTINCT teacher_id FROM teacher WHERE age = 32 OR age = 33;
SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher);
SELECT `name` FROM `teacher` ORDER BY `age` ASC LIMIT 1;
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown;
SELECT (SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1) AS most_common_hometown;
SELECT hometown FROM teacher GROUP BY hometown ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) > 1;
SELECT town FROM teacher GROUP BY town HAVING COUNT(*) >= 2;
SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id;
SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.name = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id;
SELECT T2.name, T1.course FROM `course_arrange` AS T1 INNER JOIN `teacher` AS T2 ON T1.teacher_id = T2.teacher_id ORDER BY T2.name ASC;
SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id ORDER BY teacher.name ASC;
SELECT T2.name FROM `course` AS T1 INNER JOIN `course_arrange` AS T3 ON T1.course_id = T3.course_id INNER JOIN `teacher` AS T2 ON T3.teacher_id = T2.teacher_id WHERE T1.course = 'math';
SELECT DISTINCT teacher.name FROM teacher JOIN course_arrange ON teacher.name = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.subject = 'math';
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.name = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.name = course_arrange.teacher_id GROUP BY teacher.name;
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(course_id) >= 2);
SELECT name FROM teacher WHERE teacher_id IN (SELECT teacher_id FROM course_arrange GROUP BY teacher_id HAVING COUNT(*) >= 2);
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT name FROM teacher WHERE teacher_id NOT IN (SELECT teacher_id FROM course_arrange);
SELECT COUNT(*) FROM member;
SELECT member_id FROM member ORDER BY member_id ASC;
SELECT T1.member_id, T1.country FROM member AS T1 INNER JOIN college AS T2 ON T1.college_id = T2.college_id;
SELECT name FROM member WHERE college_location = 'United States' OR college_location = 'Canada';
SELECT college_location, COUNT(*) FROM member JOIN college ON member.college_id = college.college_id GROUP BY college_location;
SELECT college_location FROM college JOIN member ON college.college_id = member.college_id GROUP BY college_location ORDER BY COUNT(*) DESC LIMIT 1;
SELECT college_location FROM college JOIN member ON college.college_id = member.college_id GROUP BY college_location HAVING COUNT(member.member_id) > 2;
SELECT T1.name, T1.college_location FROM `college` AS T1 INNER JOIN `member` AS T2 ON T1.college_id = T2.college_id WHERE T2.rank_in_round = 1;
SELECT member.name, college.name FROM member INNER JOIN college ON member.college_id = college.college_id;
SELECT member.name, college.name FROM member INNER JOIN college ON member.college_id = college.college_id ORDER BY member.name ASC;
SELECT DISTINCT college.leader_name FROM college JOIN member ON college.college_id = member.college_id WHERE member.name = 'Canada';
SELECT member.name, round.decoration_theme FROM member JOIN round ON member.member_id = round.member_id;
SELECT name FROM member JOIN round ON member.member_id = round.member_id WHERE rank_in_round > 3;
SELECT member.name FROM round INNER JOIN member ON round.member_id = member.member_id ORDER BY round.rank_in_round ASC;
SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM round);
SELECT COUNT(*) FROM election;
SELECT date FROM election ORDER BY date DESC;
SELECT date, vote_percent FROM election;
SELECT MIN(vote_percent), MAX(vote_percent) FROM election;
SELECT party, representative_id FROM representative;
SELECT name FROM representative WHERE party != 'Republican';
SELECT lifespan FROM representative WHERE party IN ('New York', 'Indiana');
SELECT representative.name, election.date FROM election JOIN representative ON election.representative_id = representative.representative_id;
SELECT representative.name FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE election.votes > 10000;
SELECT representative.name FROM election JOIN representative ON election.representative_id = representative.representative_id ORDER BY election.votes DESC;
SELECT party FROM representative WHERE representative_id = (SELECT representative_id FROM election ORDER BY votes LIMIT 1)
SELECT representative.name, julianday(MAX(election.date)) - julianday(MIN(election.date)) AS lifespan FROM representative JOIN election ON representative.representative_id = election.representative_id GROUP BY representative.name ORDER BY MAX(election.vote_percent) DESC;
SELECT AVG(votes) FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE representative.party = 'Republican';
SELECT party, COUNT(*) FROM representative GROUP BY party;
SELECT party FROM representative GROUP BY party ORDER BY COUNT(*) DESC LIMIT 1;
SELECT party FROM ( SELECT representative_id, COUNT(*) AS rep_count FROM election GROUP BY representative_id HAVING rep_count >= 3 ) AS representative_counts JOIN representative ON representative.representative_id = representative_counts.representative_id GROUP BY party;
SELECT state FROM (SELECT representative_id, COUNT(DISTINCT state) AS state_count FROM representative GROUP BY representative_id HAVING state_count >= 2);
SELECT name FROM representative WHERE representative_id NOT IN (SELECT representative_id FROM election);
SELECT party FROM representative WHERE representative_id IN ( SELECT representative_id FROM election WHERE place = 'New York' ) INTERSECT SELECT party FROM representative WHERE representative_id IN ( SELECT representative_id FROM election WHERE place = 'Pennsylvania' );
SELECT COUNT(DISTINCT party) FROM representative;
SELECT COUNT(*) FROM country;
SELECT COUNT(*) FROM country;
SELECT official_native_language, capital FROM country;
SELECT official_native_language, capital FROM country;
SELECT DISTINCT country_name FROM country WHERE country_name LIKE '%English%';
SELECT official_native_language FROM country WHERE official_native_language LIKE '%English%';
SELECT DISTINCT position FROM match_season;
SELECT DISTINCT position FROM match_season;
SELECT player_id FROM player WHERE team IN (SELECT team_id FROM team WHERE college = 'UCLA')
SELECT player_id FROM player INNER JOIN team ON player.team = team.team_id WHERE team.name = 'UCLA';
SELECT distinct position FROM player WHERE team IN (SELECT team_id FROM team WHERE team IN ('UCLA', 'Duke'))
SELECT DISTINCT position FROM match_season WHERE team IN (SELECT team FROM team WHERE team_id IN (SELECT team_id FROM player WHERE player_id IN (SELECT player_id FROM `player` WHERE `team` IN ('UCLA', 'Duke'))))
SELECT draft_pick_number, draft_class FROM match_season JOIN player ON match_season.player = player.player_id WHERE player.position = 'Defender';
SELECT draft_pick_number, draft_class FROM match_season WHERE player IN (SELECT player_id FROM player WHERE position = 'Defender')
SELECT COUNT(DISTINCT team_id) FROM team WHERE team_id IN (SELECT team FROM match_season);
SELECT COUNT(DISTINCT team_id) FROM match_season;
SELECT player, year FROM match_season ORDER BY player, year;
SELECT player, COUNT(*) as years_played FROM match_season GROUP BY player;
SELECT team_name FROM team;
SELECT team_name FROM team;
SELECT match_season.season, match_season.player, country.country_name FROM match_season JOIN country ON match_season.country = country.country_id;
SELECT T2.player_id, T3.season, T4.country_name FROM `match_season` AS T3 INNER JOIN `player` AS T2 ON T3.player = T2.player_id INNER JOIN `team` AS T1 ON T2.team = T1.team_id INNER JOIN `country` AS T4 ON T3.country = T4.country_id;
SELECT player.player_id FROM player JOIN team ON player.team = team.team_id JOIN country ON team.country_id = country.country_id WHERE country.official_native_language = 'Indonesian';
SELECT player_id FROM player INNER JOIN team ON player.team = team.team_id INNER JOIN match_season ON team.team_id = match_season.team WHERE match_season.country = (SELECT country_id FROM country WHERE capital = 'Jakarta');
SELECT DISTINCT position FROM player JOIN team ON player.team = team.team_id JOIN match_season ON match_season.team = team.team_id JOIN country ON match_season.country = country.country_id WHERE country.capital = 'Dublin';
SELECT DISTINCT position FROM player WHERE team IN (SELECT team_id FROM team WHERE country_id = (SELECT country_id FROM country WHERE capital = 'Dublin'))
SELECT DISTINCT T1.official_native_language FROM country AS T1 INNER JOIN match_season AS T2 ON T1.country_id = T2.country INNER JOIN player AS T3 ON T2.player = T3.player_id WHERE T2.college IN ('Maryland', 'Duke')
SELECT DISTINCT T1.official_native_language FROM country AS T1 INNER JOIN match_season AS T2 ON T1.country_id = T2.country INNER JOIN player AS T3 ON T2.player = T3.player_id WHERE T2.college IN ('Maryland', 'Duke')
SELECT COUNT(DISTINCT T1.official_native_language) FROM `country` AS T1 INNER JOIN `match_season` AS T2 ON T1.country_name = T2.country INNER JOIN `player` AS T3 ON T2.player = T3.player_id WHERE T3.position = 'defender'
SELECT COUNT(DISTINCT T1.official_native_language) FROM `country` AS T1 INNER JOIN `match_season` AS T2 ON T1.country_id = T2.country INNER JOIN `player` AS T3 ON T2.player = T3.player_id WHERE T3.position = 'Defender'
SELECT season, player, T2.name FROM `match_season` AS T1 INNER JOIN `team` AS T2 ON T1.team = T2.team_id
SELECT DISTINCT player, season, name FROM match_season JOIN team ON match_season.team = team.team_id;
SELECT DISTINCT player FROM match_season WHERE team = (SELECT team_id FROM team WHERE team_name = 'Ryley Goldner')
SELECT DISTINCT position FROM player WHERE team = (SELECT team_id FROM team WHERE name = 'Ryley Goldner');
SELECT COUNT(DISTINCT match_season.college) FROM team JOIN player ON team.team_id = player.team JOIN match_season ON player.player_id = match_season.player WHERE team.team_name = 'Columbus Crew';
SELECT COUNT(DISTINCT match_season.college) FROM player JOIN team ON player.team = team.team_id JOIN match_season ON match_season.team = team.team_id WHERE team.name = 'Columbus Crew';
SELECT player.player, match_season.season FROM player JOIN match_season ON player.team = match_season.team WHERE player.team = (SELECT team_id FROM team WHERE name = 'Columbus Crew')
SELECT player.player, COUNT(DISTINCT match_season.season) AS years_played FROM player JOIN team ON player.team = team.team_id JOIN match_season ON team.team_id = match_season.team WHERE team.name = 'Columbus Crew' GROUP BY player.player;
SELECT position, COUNT(*) FROM player GROUP BY position;
SELECT position, COUNT(*) FROM player GROUP BY position;
SELECT country.capital, COUNT(player.player_id) FROM country JOIN team ON match_season.country = country.country_id JOIN player ON player.team = team.team_id GROUP BY country.capital;
SELECT country_name, COUNT(player_id) FROM player INNER JOIN team ON player.team = team.team_id INNER JOIN match_season ON match_season.team = team.team_id GROUP BY country_name;
SELECT player_id FROM player ORDER BY team ASC;
SELECT player FROM match_season INNER JOIN team ON match_season.team = team.team_id ORDER BY college ASC;
SELECT position FROM match_season GROUP BY position ORDER BY COUNT(*) DESC LIMIT 1;
SELECT position FROM match_season GROUP BY position ORDER BY COUNT(*) DESC LIMIT 1;
SELECT college FROM player GROUP BY college ORDER BY COUNT(*) DESC LIMIT 3;
SELECT college FROM player GROUP BY college ORDER BY COUNT(*) DESC LIMIT 3;
SELECT T2.name FROM `player` AS T1 INNER JOIN `team` AS T2 ON T1.team = T2.team_id GROUP BY T1.team HAVING COUNT(T1.player_id) >= 2;
SELECT college_name FROM college WHERE college_id IN (SELECT college_id FROM player GROUP BY college_id HAVING COUNT(player_id) >= 2);
SELECT T2.country_name FROM `match_season` AS T1 INNER JOIN `country` AS T2 ON T1.country = T2.country_id GROUP BY T2.country_name HAVING COUNT(*) >= 2 ORDER BY T2.country_name DESC;
SELECT T2.name FROM `player` AS T1 INNER JOIN `team` AS T2 ON T1.team = T2.team_id GROUP BY T1.team HAVING COUNT(T1.player_id) >= 2 ORDER BY T2.name DESC;
SELECT team_name FROM team WHERE team_id NOT IN (SELECT team FROM match_season);
SELECT team_name FROM team WHERE team_id NOT IN (SELECT team FROM match_season);
SELECT DISTINCT country_name FROM country WHERE country IN (SELECT country FROM match_season WHERE position = 'forward') INTERSECT SELECT DISTINCT country_name FROM country WHERE country IN (SELECT country FROM match_season WHERE position = 'defender');
SELECT DISTINCT T1.country_name FROM `country` AS T1 INNER JOIN `match_season` AS T2 ON T1.country_id = T2.country INNER JOIN `player` AS T3 ON T2.player = T3.player_id WHERE T3.position = 'Forward' INTERSECT SELECT DISTINCT T1.country_name FROM `country` AS T1 INNER JOIN `match_season` AS T2 ON T1.country_id = T2.country INNER JOIN `player` AS T3 ON T2.player = T3.player_id WHERE T3.position = 'Defender'
SELECT college FROM match_season WHERE player IN (SELECT player FROM match_season WHERE position = 'midfielder') INTERSECT SELECT college FROM match_season WHERE player IN (SELECT player FROM match_season WHERE position = 'defender');
SELECT DISTINCT college FROM match_season WHERE position = 'Midfielder' INTERSECT SELECT DISTINCT college FROM match_season WHERE position = 'Defender';
SELECT COUNT(*) FROM perpetrator;
SELECT DISTINCT perpetrator.name FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id ORDER BY perpetrator.killed DESC;
SELECT COUNT(*) AS injured_count FROM perpetrator GROUP BY people_id ORDER BY injured_count ASC;
SELECT AVG(people_injured) FROM perpetrator;
SELECT T2.home_town FROM `perpetrator` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id ORDER BY T1.killed DESC LIMIT 1;
SELECT name FROM people ORDER BY height ASC;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator);
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE country != 'China');
SELECT name FROM people INNER JOIN perpetrator ON people.people_id = perpetrator.people_id ORDER BY weight DESC LIMIT 1;
SELECT SUM(killed) FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id WHERE height > 1.84;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE country = 'China' OR country = 'Japan');
SELECT height FROM people INNER JOIN perpetrator ON people.people_id = perpetrator.people_id GROUP BY people.height ORDER BY COUNT(perpetrator.people_id) DESC;
SELECT home_town, COUNT(*) FROM people JOIN perpetrator ON people.people_id = perpetrator.people_id GROUP BY home_town;
SELECT home_town FROM people WHERE people_id IN (SELECT people_id FROM perpetrator) GROUP BY home_town ORDER BY COUNT(*) DESC LIMIT 1;
SELECT home_town FROM people WHERE people_id IN (SELECT people_id FROM perpetrator GROUP BY people_id HAVING COUNT(*) >= 2)
SELECT name FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id ORDER BY year DESC;
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM perpetrator);
SELECT country FROM perpetrator WHERE injures > 50 INTERSECT SELECT country FROM perpetrator WHERE injures < 20;
SELECT COUNT(DISTINCT country) FROM perpetrator;
SELECT date FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;
SELECT MAX(date) FROM perpetrator;
SELECT local_authority, services FROM station;
SELECT name FROM train ORDER BY time ASC;
SELECT train.time, train.id FROM train INNER JOIN route ON train.id = route.train_id INNER JOIN station ON route.station_id = station.id WHERE station.network_name = 'Chennai' ORDER BY train.time;
SELECT COUNT(*) FROM train WHERE train_number LIKE '%Express%';
SELECT train.id, train.time FROM train JOIN route ON train.id = route.train_id WHERE train.origin = 'Chennai' AND train.destination = 'Guruvayur';
SELECT origin, COUNT(*) FROM train GROUP BY origin;
SELECT train.name FROM train JOIN route ON train.train_number = route.train_id GROUP BY train.train_number ORDER BY COUNT(route.station_id) DESC LIMIT 1;
SELECT station.network_name, station.services, COUNT(route.train_id) AS num_trains FROM station JOIN route ON station.id = route.station_id GROUP BY station.id;
SELECT AVG(high_temperature), strftime('%w', date) AS day_of_week FROM weekly_weather GROUP BY day_of_week;
SELECT MAX(low_temperature), AVG(precipitation) FROM weekly_weather INNER JOIN station ON weekly_weather.station_id = station.id WHERE station.local_authority = 'Amersham';
SELECT train.name, train.time FROM train JOIN route ON train.train_number = route.train_id JOIN station ON route.station_id = station.id WHERE station.local_authority = 'Chiltern';
SELECT COUNT(DISTINCT origin) FROM train;
SELECT station.id, station.local_authority FROM station JOIN weekly_weather ON station.id = weekly_weather.station_id GROUP BY station.id, station.local_authority ORDER BY AVG(weekly_weather.high_temperature) DESC LIMIT 1;
SELECT station.id, station.local_authority FROM station JOIN weekly_weather ON station.id = weekly_weather.station_id GROUP BY station.id, station.local_authority HAVING MAX(weekly_weather.precipitation) > 50;
SELECT min(low_temperature), max(wind_speed_mph) FROM weekly_weather;
SELECT origin FROM train GROUP BY origin HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM church WHERE organized_by < 1850;
SELECT church.name, church.open_date, T2.is_male, T2.country FROM church INNER JOIN wedding AS T1 ON church.church_id = T1.church_id INNER JOIN people AS T2 ON T1.male_id = T2.people_id;
SELECT church.name FROM church ORDER BY church.organized_by DESC;
SELECT organized_by FROM church GROUP BY organized_by HAVING COUNT(*) >= 2;
SELECT T1.name, T2.organizer FROM church AS T1 INNER JOIN people AS T2 ON T1.open_by = T2.people_id WHERE T1.open_date BETWEEN 1830 AND 1840;
SELECT opening_year, COUNT(*) FROM church GROUP BY opening_year;
SELECT church.name, church.organized_by FROM church ORDER BY church.organized_by DESC LIMIT 3;
SELECT COUNT(*) FROM people WHERE age > 30 AND people_id IN (SELECT female_id FROM wedding);
SELECT DISTINCT country FROM people WHERE age > 30 OR age < 25;
SELECT MIN(YEAR(CURRENT_DATE) - YEAR(birth_year)) AS min_age, MAX(YEAR(CURRENT_DATE) - YEAR(birth_year)) AS max_age, AVG(YEAR(CURRENT_DATE) - YEAR(birth_year)) AS avg_age FROM people;
SELECT country, name FROM people WHERE age < (SELECT AVG(age) FROM people);
SELECT T2.name, T3.name FROM `wedding` AS T1 INNER JOIN `people` AS T2 ON T1.male_id = T2.people_id INNER JOIN `people` AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014;
SELECT name, age FROM people WHERE is_male = 1 AND people_id NOT IN (SELECT male_id FROM wedding)
SELECT church.name FROM church WHERE church.church_id NOT IN ( SELECT wedding.church_id FROM wedding WHERE wedding.year = 2015 );
SELECT church.name FROM wedding JOIN church ON wedding.church_id = church.church_id GROUP BY church.name HAVING COUNT(*) >= 2;
SELECT T2.name FROM `wedding` AS T1 INNER JOIN `people` AS T2 ON T1.female_id = T2.people_id WHERE T2.country = 'Canada' AND T1.year = 2016;
SELECT COUNT(*) FROM wedding WHERE strftime('%Y', open_date) = '2016';
SELECT church.name FROM wedding JOIN church ON wedding.church_id = church.church_id JOIN people ON wedding.female_id = people.people_id OR wedding.male_id = people.people_id WHERE people.age > 30;
SELECT country, COUNT(*) FROM people GROUP BY country;
SELECT COUNT(DISTINCT church_id) FROM wedding WHERE strftime('%Y', open_date) = '2016';
SELECT COUNT(*) FROM faculty;
SELECT COUNT(*) FROM faculty;
SELECT DISTINCT rank FROM faculty;
SELECT DISTINCT rank FROM faculty;
SELECT DISTINCT room FROM faculty;
SELECT building FROM faculty;
SELECT rank, fname FROM faculty;
SELECT fname, rank FROM faculty;
SELECT fname, lname, phone FROM faculty INNER JOIN student ON faculty.facid = student.stuid WHERE sex = 'F';
SELECT fname, lname, phone FROM faculty WHERE sex = 'F';
SELECT facid FROM faculty WHERE sex = 'M';
SELECT facid FROM faculty WHERE sex = 'M';
SELECT COUNT(*) FROM faculty WHERE rank = 'Professor' AND facid IN (SELECT facid FROM faculty WHERE gender = 'F');
SELECT COUNT(*) FROM faculty WHERE rank = 'Professor' AND facid IN (SELECT facid FROM faculty WHERE gender = 'F');
SELECT phone, room, building FROM faculty WHERE lname = 'Jerry Prince';
SELECT phone, room, building FROM faculty WHERE fname = 'Jerry Prince';
SELECT COUNT(*) FROM faculty WHERE rank = 'Professor' AND phone LIKE 'NEB%';
SELECT COUNT(*) FROM faculty WHERE rank = 'Professor' AND phone LIKE 'NEB%';
SELECT fname, lname FROM faculty;
SELECT fname FROM faculty;
SELECT building, COUNT(DISTINCT faculty.facid) AS num_faculty_members FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid GROUP BY building;
SELECT building, COUNT(DISTINCT faculty.facid) AS num_faculty_members FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid GROUP BY building;
SELECT building FROM faculty GROUP BY building ORDER BY COUNT(*) DESC LIMIT 1;
SELECT building FROM faculty GROUP BY building ORDER BY COUNT(*) DESC LIMIT 1;
SELECT building FROM faculty GROUP BY building HAVING COUNT(*) >= 10;
SELECT building FROM faculty INNER JOIN activity ON faculty.actid = activity.actid GROUP BY building HAVING COUNT(*) >= 10;
SELECT rank, COUNT(*) FROM faculty GROUP BY rank;
SELECT COUNT(*), rank FROM faculty GROUP BY rank;
SELECT rank, COUNT(CASE WHEN sex = 'M' THEN 1 END) AS male_count, COUNT(CASE WHEN sex = 'F' THEN 1 END) AS female_count FROM faculty GROUP BY rank;
SELECT rank, sex, COUNT(*) FROM faculty GROUP BY rank, sex;
SELECT rank FROM faculty GROUP BY rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT rank FROM faculty GROUP BY rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) AS male_assist_professors FROM faculty WHERE rank = 'Assistant Professor' AND facid IN (SELECT facid FROM faculty WHERE room LIKE '%Mens%'); SELECT COUNT(*) AS female_assist_professors FROM faculty WHERE rank = 'Assistant Professor' AND facid IN (SELECT facid FROM faculty WHERE room LIKE '%Womens%');
SELECT COUNT(*) AS count, gender FROM faculty INNER JOIN student ON faculty.facid = student.stuid WHERE faculty.rank = 'assistant professor' GROUP BY gender;
SELECT fname FROM faculty WHERE facid IN (SELECT advisor FROM student WHERE fname = 'Linda' AND lname = 'Smith');
SELECT fname FROM student WHERE advisor = (SELECT facid FROM faculty WHERE fname = 'Linda' AND lname = 'Smith');
SELECT stuid FROM student WHERE advisor IN (SELECT facid FROM faculty WHERE rank = 'professor');
SELECT DISTINCT stuid FROM student WHERE EXISTS (SELECT 1 FROM faculty WHERE faculty.sex = 'F' AND faculty.room = student.major);
SELECT fname FROM student WHERE advisor = 'Michael Goodrich';
SELECT fname FROM student WHERE advisor = 'Michael Goodrich';
SELECT F.facid, COUNT(P.stuid) AS num_students_advised FROM faculty F JOIN faculty_participates_in FP ON F.facid = FP.facid JOIN participates_in P ON FP.actid = P.actid GROUP BY F.facid;
SELECT facid, COUNT(*) AS num_students FROM faculty_participates_in INNER JOIN participates_in ON faculty_participates_in.actid = participates_in.actid GROUP BY facid;
SELECT rank, COUNT(*) FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid GROUP BY rank;
SELECT rank, COUNT(DISTINCT student.stuid) FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid GROUP BY rank;
SELECT fname, lname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in GROUP BY facid ORDER BY COUNT(*) DESC LIMIT 1)
SELECT fname, lname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in GROUP BY facid ORDER BY COUNT(*) DESC LIMIT 1)
SELECT facid FROM faculty_participates_in GROUP BY facid HAVING COUNT(*) >= 2;
SELECT facid FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in GROUP BY facid HAVING COUNT(*) >= 2);
SELECT facid FROM faculty EXCEPT SELECT facid FROM faculty_participates_in;
SELECT facid FROM faculty EXCEPT SELECT facid FROM faculty_participates_in;
SELECT actid FROM activity;
SELECT actid FROM activity;
SELECT COUNT(*) FROM activity;
SELECT COUNT(*) FROM activity;
SELECT COUNT(DISTINCT faculty.facid) FROM faculty_participates_in INNER JOIN faculty ON faculty_participates_in.facid = faculty.facid;
SELECT COUNT(DISTINCT faculty.facid) FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid;
SELECT facid FROM faculty WHERE facid NOT IN (SELECT facid FROM faculty_participates_in)
SELECT facid FROM faculty WHERE facid NOT IN (SELECT facid FROM faculty_participates_in)
SELECT facid FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE facid IN (SELECT advisor FROM student));
SELECT facid FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in) INTERSECT SELECT facid FROM faculty WHERE facid IN (SELECT facid FROM student WHERE advisor = facid);
SELECT COUNT(*) FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'Giuliano' AND fname = 'Mark');
SELECT COUNT(*) FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE fname = 'Mark' AND lname = 'Giuliano');
SELECT activity(actid) FROM activity JOIN participates_in ON activity.actid = participates_in.actid WHERE participates_in.stuid = (SELECT stuid FROM student WHERE lname = 'Giuliano' AND fname = 'Mark');
SELECT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON student.stuid = participates_in.stuid WHERE student.fname = 'Mark' AND student.lname = 'Giuliano';
SELECT fname, lname, COUNT(actid) AS num_activities FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid GROUP BY faculty.facid;
SELECT fname, lname, COUNT(actid) AS num_activities FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid GROUP BY faculty.facid HAVING COUNT(actid) >= 1;
SELECT activity.activity_name, COUNT(faculty_participates_in.facid) AS num_faculty FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.activity_name;
SELECT activity.activity_name, COUNT(faculty_participates_in.facid) AS num_faculty_members FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.activity_name;
SELECT fname, lname FROM faculty WHERE facid = (SELECT facid FROM faculty_participates_in GROUP BY facid ORDER BY COUNT(*) DESC LIMIT 1)
SELECT fname, lname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in GROUP BY facid ORDER BY COUNT(*) DESC LIMIT 1)
SELECT activity.* FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.actid ORDER BY COUNT(faculty_participates_in.facid) DESC LIMIT 1;
SELECT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.activity_name ORDER BY COUNT(faculty_participates_in.facid) DESC LIMIT 1;
SELECT stuid FROM student WHERE stuid NOT IN (SELECT stuid FROM participates_in)
SELECT student.stuid FROM student WHERE student.stuid NOT IN (SELECT stuid FROM participates_in)
SELECT stuid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE age < 20);
SELECT DISTINCT student.stuid FROM student JOIN participates_in ON student.stuid = participates_in.stuid WHERE student.age < 20;
SELECT student.fname, student.lname FROM student JOIN participates_in ON student.stuid = participates_in.stuid GROUP BY student.stuid ORDER BY COUNT(participates_in.actid) DESC LIMIT 1;
SELECT fname, lname FROM student WHERE stuid = (SELECT stuid FROM participates_in GROUP BY stuid ORDER BY COUNT(*) DESC LIMIT 1);
SELECT activity.* FROM activity INNER JOIN participates_in ON activity.actid = participates_in.actid GROUP BY activity.actid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity.* FROM activity INNER JOIN participates_in ON activity.actid = participates_in.actid GROUP BY activity.actid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT fname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name IN ('Canoeing', 'Kayaking')))
SELECT fname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name IN ('Canoeing', 'Kayaking')));
SELECT fname FROM faculty WHERE facid NOT IN (SELECT facid FROM faculty_participates_in WHERE actid IN (SELECT actid FROM activity WHERE actid = (SELECT actid FROM activity WHERE * = 'Canoeing') OR actid = (SELECT actid FROM activity WHERE * = 'Kayaking')))
SELECT DISTINCT T1.fname FROM faculty AS T1 WHERE T1.facid NOT IN (SELECT T3.facid FROM activity AS T2 JOIN faculty_participates_in AS T3 ON T2.actid = T3.actid WHERE T2.actname = 'Canoeing' OR T2.actname = 'Kayaking')
SELECT fname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in WHERE actid = (SELECT actid FROM activity WHERE activity_name = 'Canoeing and Kayaking'))
SELECT fname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name = 'Canoeing') INTERSECT SELECT facid FROM faculty_participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name = 'Kayaking'))
SELECT stuid FROM participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name = 'Canoeing') INTERSECT SELECT stuid FROM participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name = 'Kayaking');
SELECT stuid FROM participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name = 'Canoeing') INTERSECT SELECT stuid FROM participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name = 'Kayaking');
SELECT COUNT(*) FROM body_builder;
SELECT SUM(snatch + clean_jerk) AS total_score FROM body_builder JOIN people ON body_builder.people_id = people.people_id GROUP BY body_builder.people_id ORDER BY total_score ASC;
SELECT clean_jerk, snatch FROM body_builder ORDER BY snatch ASC;
SELECT AVG(clean_jerk) FROM body_builder;
SELECT clean, jerk FROM body_builder WHERE total = (SELECT MAX(total) FROM body_builder)
SELECT birthday FROM people ORDER BY height ASC;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder);
SELECT T2.name FROM `body_builder` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.total > 300;
SELECT name FROM people WHERE people_id = (SELECT body_builder_id FROM body_builder ORDER BY total DESC LIMIT 1);
SELECT T1.birth_date, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id ORDER BY T2.total DESC LIMIT 1;
SELECT height FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total < 315)
SELECT AVG(total) FROM body_builder INNER JOIN people ON body_builder.people_id = people.people_id WHERE height > 200;
SELECT T2.name FROM `body_builder` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id ORDER BY T1.total DESC;
SELECT birth_place, COUNT(*) FROM people GROUP BY birth_place;
SELECT birth_place FROM people GROUP BY birth_place ORDER BY COUNT(*) DESC LIMIT 1;
SELECT birth_place FROM people GROUP BY birth_place HAVING COUNT(*) >= 2;
SELECT weight, height FROM people ORDER BY height DESC;
SELECT body_builder.body_builder_id, total, snatch, clean_jerk, people.name, people.height, people.weight, people.birth_date FROM body_builder INNER JOIN people ON body_builder.people_id = people.people_id;
SELECT name, origin FROM people WHERE people_id NOT IN (SELECT body_builder_id FROM body_builder);
SELECT COUNT(DISTINCT birth_place) FROM people;
SELECT COUNT(*) FROM people WHERE people_id NOT IN (SELECT people_id FROM body_builder);
SELECT weight FROM people WHERE people_id IN (SELECT body_builder_id FROM body_builder WHERE snatch > 140 OR height > 200);
SELECT total FROM body_builder JOIN people ON body_builder.people_id = people.people_id WHERE people.birth_date LIKE '%January%';
SELECT MIN(clean_jerk) FROM body_builder;
SELECT COUNT(*) FROM candidate;
SELECT COUNT(*) FROM candidate;
SELECT resource FROM candidate GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1;
SELECT poll_resource FROM candidate GROUP BY poll_resource ORDER BY COUNT(candidate_id) DESC LIMIT 1;
SELECT candidate_id FROM candidate GROUP BY candidate_id ORDER BY support_rate DESC LIMIT 3;
SELECT candidate_id FROM candidate GROUP BY candidate_id ORDER BY support_rate DESC LIMIT 3;
SELECT people_id FROM candidate ORDER BY oppose_rate ASC LIMIT 1;
SELECT people_id FROM candidate ORDER BY oppose_rate LIMIT 1;
SELECT T1.consider_rate, T1.oppose_rate, T1.support_rate FROM candidate AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id ORDER BY T1.unsure_rate ASC;
SELECT consider_rate, oppose_rate, unsure_rate FROM candidate ORDER BY unsure_rate ASC;
SELECT `candidate_id` FROM `candidate` ORDER BY `oppose_rate` DESC LIMIT 1;
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.oppose_rate = (SELECT MAX(oppose_rate) FROM candidate) LIMIT 1;
SELECT name FROM people JOIN candidate ON people.people_id = candidate.people_id ORDER BY date ASC;
SELECT name FROM people ORDER BY height, weight;
SELECT AVG(height), AVG(weight) FROM people WHERE name = 'M';
SELECT AVG(height), AVG(weight) FROM people WHERE name = 'M';
SELECT name FROM people WHERE height > 200 OR height < 190;
SELECT name FROM people WHERE height > 200 OR height < 190;
SELECT sex, AVG(weight) AS avg_weight, MIN(weight) AS min_weight FROM people GROUP BY sex;
SELECT sex, AVG(weight) AS average_weight, MIN(weight) AS minimum_weight FROM people GROUP BY sex;
SELECT T2.name, T2.sex FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id ORDER BY T1.support_rate DESC LIMIT 1;
SELECT T2.name, T2.sex FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id ORDER BY T1.support_rate DESC LIMIT 1;
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id GROUP BY T2.sex ORDER BY T1.oppose_rate ASC LIMIT 1;
SELECT T2.sex, T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id GROUP BY T2.sex, T2.name ORDER BY AVG(T1.oppose_rate) DESC LIMIT 1;
SELECT p.gender FROM people p JOIN candidate c ON p.people_id = c.people_id GROUP BY p.gender ORDER BY AVG(c.oppose_rate - c.consider_rate) DESC LIMIT 1;
SELECT T1.sex FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id GROUP BY T1.sex ORDER BY AVG(T2.unsure_rate) DESC LIMIT 1;
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate);
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate);
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE oppose_rate > support_rate);
SELECT name FROM people INNER JOIN candidate ON people.people_id = candidate.people_id WHERE candidate.support_rate < candidate.oppose_rate;
SELECT sex, COUNT(*) FROM people WHERE height > 85 GROUP BY sex;
SELECT COUNT(*), sex FROM people WHERE weight > 85 GROUP BY sex;
SELECT MAX(support_percentage), MIN(consider_rate), MIN(oppose_rate) FROM candidate;
SELECT MAX(consider_rate) AS max_support_rate, MIN(consider_rate) AS min_consider_rate, MIN(oppose_rate) AS min_oppose_rate FROM candidate;
SELECT name FROM people INNER JOIN candidate ON people.people_id = candidate.people_id WHERE sex = 'F' ORDER BY name ASC;
SELECT name FROM people INNER JOIN candidate ON people.people_id = candidate.people_id WHERE sex = 'F' ORDER BY name ASC;
SELECT DISTINCT T1.name FROM people AS T1 INNER JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T1.height < (SELECT AVG(height) FROM people)
SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people);
SELECT * FROM people;
SELECT * FROM people;
SELECT city_id FROM city WHERE city_id IN (SELECT host_city FROM hosting_city WHERE year = (SELECT MAX(year) FROM hosting_city)) LIMIT 1;
SELECT city_id FROM city WHERE city_id IN (SELECT host_city FROM hosting_city WHERE year = (SELECT MAX(year) FROM hosting_city)) LIMIT 1;
SELECT match.match_id FROM hosting_city JOIN match ON hosting_city.match_id = match.match_id WHERE hosting_city.year = '1994 FIFA World Cup qualification'
SELECT match_id FROM match WHERE competition = '1994 FIFA World Cup qualification';
SELECT city.hanzi FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id WHERE hosting_city.year > 2010;
SELECT city.hanzi FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id WHERE hosting_city.year > 2010;
SELECT city.hanzi FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id GROUP BY city.hanzi ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city FROM hosting_city GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT venue FROM match WHERE match_id IN (SELECT match_id FROM hosting_city WHERE city = (SELECT city_id FROM city WHERE city = 'Nanjing ( Jiangsu )') AND year = 1994) AND venue LIKE '%1994 FIFA World Cup qualification%';
SELECT venue FROM match WHERE match_id IN (SELECT match_id FROM hosting_city WHERE year = 1994 AND host_city = (SELECT city_id FROM city WHERE city = 'Nanjing' AND regional_population = 'Jiangsu')) AND venue LIKE '%1994 FIFA World Cup qualification%';
SELECT jan FROM temperature WHERE city_id = (SELECT city_id FROM city WHERE city = 'Shanghai');
SELECT jan FROM temperature WHERE city_id = (SELECT city_id FROM city WHERE city = 'Shanghai');
SELECT T1.year FROM `hosting_city` AS T1 INNER JOIN `city` AS T2 ON T1.host_city = T2.city_id WHERE T2.city = 'Taizhou ( Zhejiang )'
SELECT year FROM hosting_city WHERE host_city = (SELECT city_id FROM city WHERE city = 'Taizhou ( Zhejiang )');
SELECT city FROM city ORDER BY population DESC LIMIT 3;
SELECT city FROM city ORDER BY population DESC LIMIT 3;
SELECT city.name, city.gdp FROM city ORDER BY city.gdp ASC LIMIT 1;
SELECT city, gdp FROM city ORDER BY gdp ASC LIMIT 1;
SELECT city.city FROM temperature INNER JOIN city ON temperature.city_id = city.city_id WHERE temperature.feb = (SELECT MAX(feb) FROM temperature) LIMIT 1;
SELECT city.city FROM temperature INNER JOIN city ON temperature.city_id = city.city_id WHERE temperature.feb = (SELECT MAX(feb) FROM temperature) LIMIT 1;
SELECT city FROM temperature INNER JOIN city ON temperature.city_id = city.city_id WHERE temperature.apr < temperature.jul OR temperature.apr > temperature.oct;
SELECT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.jul OR temperature.mar > temperature.oct;
SELECT city FROM city WHERE city_id IN (SELECT host_city FROM hosting_city) AND city_id IN (SELECT city_id FROM temperature WHERE mar < jul);
SELECT city.city FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.jul GROUP BY city.city HAVING COUNT(hosting_city.year) = 1;
SELECT DISTINCT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.dec AND city.city_id NOT IN (SELECT host_city FROM hosting_city)
SELECT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.dec AND city.city_id NOT IN (SELECT host_city FROM hosting_city)
SELECT city FROM city WHERE city_id IN (SELECT city_id FROM temperature WHERE feb > jun) UNION SELECT DISTINCT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city;
SELECT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.feb > temperature.jun OR city.city_id IN (SELECT host_city FROM hosting_city)
SELECT city FROM city WHERE regional_population > 10000000;
SELECT city FROM city WHERE regional_population > 10000000;
SELECT city FROM city WHERE population > 8000000 OR population < 5000000;
SELECT city FROM city WHERE regional_population > 8000000 OR regional_population < 5000000;
SELECT COUNT(*), competition FROM match GROUP BY competition;
SELECT match_id, COUNT(*) as num_matches FROM match GROUP BY match_id;
SELECT venue FROM match ORDER BY match_id DESC;
SELECT venue FROM match ORDER BY match_id DESC;
SELECT regional_population FROM city ORDER BY regional_population DESC LIMIT 1;
SELECT gdp FROM city ORDER BY population DESC LIMIT 1;
SELECT gdp, regional_population FROM city WHERE city_id IN (SELECT host_city FROM hosting_city GROUP BY host_city HAVING COUNT(*) > 1)
SELECT gdp, regional_population FROM city WHERE city_id IN (SELECT host_city FROM hosting_city GROUP BY host_city HAVING COUNT(*) > 1)
SELECT COUNT(professor.emp_num) FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_code = 'ACCT';
SELECT COUNT(*) FROM professor WHERE dept_code = 'Accounting';
SELECT COUNT(DISTINCT class.prof_num) FROM class JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description = 'ACCT-211';
SELECT COUNT(DISTINCT professor.prof_num) FROM class JOIN professor ON class.prof_num = professor.prof_num WHERE class.crs_code = 'ACCT-211';
SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'PROF' AND emp_num IN (SELECT emp_num FROM professor WHERE dept_code = (SELECT dept_code FROM department WHERE dept_name = 'Biology')) LIMIT 1;
SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'P' AND emp_num IN (SELECT emp_num FROM professor WHERE dept_code IN (SELECT dept_code FROM department WHERE dept_name = 'Biology'));
SELECT emp_fname FROM employee WHERE emp_num IN (SELECT prof_num FROM class WHERE crs_code = 'ACCT-211')
SELECT emp_fname, emp_birthdate FROM employee WHERE emp_num IN (SELECT class.prof_num FROM class WHERE crs_code = 'ACCT-211');
SELECT COUNT(*) FROM class JOIN employee ON class.prof_num = employee.emp_num WHERE emp_initial = 'Graztevski';
SELECT COUNT(*) FROM class JOIN employee ON class.prof_num = employee.emp_num WHERE emp_lname = 'Graztevski';
SELECT dept_code FROM department WHERE dept_name = 'Accounting';
SELECT school_code FROM department WHERE dept_code = 'Accounting';
SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220';
SELECT description, crs_credit FROM course WHERE crs_code = 'CIS-220';
SELECT dept_address FROM department WHERE dept_code = 'History';
SELECT dept_address FROM department WHERE dept_code = 'History';
SELECT COUNT(DISTINCT class_room) FROM class WHERE class_code LIKE 'BUS%';
SELECT distinct dept_address FROM department WHERE dept_code = 'BUS';
SELECT COUNT(DISTINCT dept_address) AS num_locations, dept_name FROM department GROUP BY dept_name;
SELECT COUNT(DISTINCT dept_address) FROM department;
SELECT description, crs_credit FROM course WHERE crs_code = 'QM-261';
SELECT crs_description, crs_credit FROM course WHERE crs_code = 'QM-261';
SELECT COUNT(department.dept_code), school FROM department JOIN school ON department.school_code = school.school_code GROUP BY school;
SELECT COUNT(dept_code), dept_name FROM department GROUP BY dept_name;
SELECT COUNT(DISTINCT T1.dept_code) AS count_diff_dept, T1.school_code FROM department AS T1 GROUP BY T1.school_code HAVING COUNT(DISTINCT T1.dept_code) < 5;
SELECT COUNT(DISTINCT department.dept_name) AS num_departments, department.dept_code FROM department JOIN class ON department.dept_code = class.dept_code GROUP BY department.dept_code HAVING COUNT(class.crs_code) < 5;
SELECT course.crs_code, COUNT(class.class_section) AS num_sections FROM course JOIN class ON course.crs_code = class.crs_code GROUP BY course.crs_code;
SELECT course.crs_code, COUNT(class.class_section) AS num_sections FROM course JOIN class ON course.crs_code = class.crs_code GROUP BY course.crs_code;
SELECT department.dept_code, SUM(course.crs_credit) AS total_credits_offered FROM department JOIN course ON department.dept_code = course.dept_code GROUP BY department.dept_code;
SELECT SUM(crs_credit) FROM course INNER JOIN department ON course.dept_code = department.dept_code;
SELECT COUNT(*) AS num_classes FROM class GROUP BY class_section HAVING COUNT(*) >= 2;
SELECT class_section, COUNT(*) FROM class GROUP BY class_section HAVING COUNT(*) >= 2;
SELECT department.dept_code, COUNT(class.class_section) AS num_classes FROM department JOIN class ON department.dept_code = class.dept_code GROUP BY department.dept_code;
SELECT department.dept_name, COUNT(class.class_room) AS num_classes FROM department JOIN course ON department.dept_code = course.dept_code JOIN class ON course.crs_code = class.crs_code GROUP BY department.dept_name;
SELECT COUNT(*), department.dept_name FROM class JOIN department ON class.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT COUNT(*), department.dept_name FROM class JOIN department ON class.prof_num = department.emp_num GROUP BY department.dept_name;
SELECT COUNT(professor.emp_num), department.dept_name FROM professor JOIN department ON professor.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT COUNT(DISTINCT professor.prof_num), department.dept_name FROM professor JOIN department ON professor.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT dept_name, COUNT(*) AS num_employees FROM department GROUP BY dept_name ORDER BY num_employees DESC LIMIT 1;
SELECT COUNT(*) AS employee_count, dept_code FROM employee GROUP BY dept_code ORDER BY employee_count DESC LIMIT 1;
SELECT dept_name FROM department GROUP BY dept_name ORDER BY COUNT(professor.dept_code) ASC LIMIT 1;
SELECT dept_name FROM department GROUP BY dept_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT department.dept_name, COUNT(professor.emp_num) AS num_professors_with_phd FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE professor.prof_degree = 'Ph.D.' GROUP BY department.dept_name;
SELECT dept_name, COUNT(*) FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE prof_extension = 'Ph.D.' GROUP BY dept_name;
SELECT department.dept_code, COUNT(DISTINCT student.stu_num) AS num_students FROM department JOIN student ON department.dept_code = student.dept_code GROUP BY department.dept_code;
SELECT dept_code, COUNT(stu_num) FROM student GROUP BY dept_code;
SELECT department.dept_name, SUM(student.stu_hrs) AS total_hours FROM student JOIN department ON student.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT department.dept_name, SUM(class.crs_credit) AS total_hours FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN department ON student.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT department.dept_name, MAX(enroll.enroll_grade) AS max_gpa, AVG(enroll.enroll_grade) AS avg_gpa, MIN(enroll.enroll_grade) AS min_gpa FROM student JOIN department ON student.dept_code = department.dept_code JOIN enroll ON student.stu_num = enroll.stu_num GROUP BY department.dept_name;
SELECT department.dept_name, MAX(enroll.enroll_grade) AS highest_gpa, MIN(enroll.enroll_grade) AS lowest_gpa, AVG(enroll.enroll_grade) AS average_gpa FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN department ON student.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT T2.dept_name, AVG(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY AVG(T1.stu_gpa) DESC LIMIT 1;
SELECT department.dept_code, AVG(enroll.enroll_grade) AS avg_gpa FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN department ON student.dept_code = department.dept_code GROUP BY student.dept_code ORDER BY avg_gpa DESC LIMIT 1;
SELECT COUNT(*) FROM department;
SELECT COUNT(DISTINCT school_code) FROM department;
SELECT COUNT(DISTINCT class_code) FROM class;
SELECT COUNT(DISTINCT class.crs_code) FROM class;
SELECT COUNT(*) FROM course;
SELECT COUNT(DISTINCT course.crs_code) FROM course;
SELECT COUNT(*) FROM department;
SELECT COUNT(DISTINCT dept_name) FROM department;
SELECT COUNT(*) FROM course WHERE dept_code = 'CIS';
SELECT COUNT(*) FROM course JOIN department ON course.dept_code = department.dept_code WHERE department.dept_name = 'Computer Information Systems';
SELECT COUNT(*) FROM class WHERE crs_code = 'ACCT-211';
SELECT COUNT(DISTINCT class.class_code) FROM class JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description = 'ACCT-211';
SELECT department.dept_code, SUM(course.crs_credit) AS total_credits FROM department JOIN course ON department.dept_code = course.dept_code GROUP BY department.dept_code;
SELECT department.dept_code, SUM(course.crs_credit) AS total_credits FROM department JOIN course ON department.dept_code = course.dept_code GROUP BY department.dept_code;
SELECT department.dept_code FROM department JOIN course ON department.dept_code = course.dept_code GROUP BY department.dept_code ORDER BY SUM(crs_credit) DESC LIMIT 1;
SELECT department.dept_code FROM course JOIN department ON course.dept_code = department.dept_code GROUP BY department.dept_code ORDER BY SUM(crs_credit) DESC LIMIT 1;
SELECT COUNT(DISTINCT enroll.stu_num) FROM enroll JOIN class ON enroll.class_code = class.class_code WHERE class.crs_code = 'ACCT-211';
SELECT COUNT(DISTINCT enroll.stu_num) FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description = 'ACCT-211';
SELECT DISTINCT stu_init FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE class_code = 'ACCT-211')
SELECT stu_init FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE class_code IN (SELECT class_code FROM class WHERE crs_code = 'ACCT-211'));
SELECT stu_init FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE enroll_grade = 'C' AND class_code = 'ACCT-211') LIMIT 1;
SELECT stu_lname FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE enroll_grade = 'C' AND class_code IN (SELECT crs_code FROM class WHERE class_section = 'ACCT-211'))
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM professor WHERE prof_degree = 'Ph.D.';
SELECT COUNT(*) FROM professor WHERE prof_degree = 'Ph.D.';
SELECT COUNT(DISTINCT enroll.stu_num) FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN professor ON class.crs_code = professor.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_name = 'Accounting';
SELECT COUNT(DISTINCT enroll.stu_num) FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code IN ( SELECT dept_code FROM professor WHERE prof_high_degree = 'Accounting' );
SELECT T1.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_name ORDER BY COUNT(T2.stu_num) DESC LIMIT 1;
SELECT T1.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(T2.stu_num) DESC LIMIT 1;
SELECT dept_name FROM department ORDER BY dept_name;
SELECT dept_code FROM department ORDER BY dept_code ASC;
SELECT class_code FROM class WHERE class_room = 'KLR209';
SELECT crs_code FROM class WHERE class_time LIKE '%KLR209%';
SELECT stu_fname FROM student WHERE stu_num IN (SELECT emp_num FROM employee WHERE emp_jobcode = 'PROF') ORDER BY stu_dob;
SELECT emp_lname, emp_initial FROM employee JOIN professor ON employee.emp_num = professor.emp_num ORDER BY emp_dob;
SELECT DISTINCT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname ASC;
SELECT employee.emp_fname, professor.prof_extension FROM employee JOIN professor ON employee.emp_num = professor.emp_num ORDER BY employee.emp_fname;
SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob ASC LIMIT 1;
SELECT stu_fname, stu_lname FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE enroll_grade = 'A') INTERSECT SELECT stu_fname, stu_lname FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE enroll_grade = 'B');
SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_gpa ASC LIMIT 1;
SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1;
SELECT stu_init FROM student WHERE stu_num IN (SELECT enroll.stu_num FROM enroll WHERE enroll_grade = 'C') LIMIT 1;
SELECT stu_init FROM student WHERE stu_num IN (SELECT enroll.stu_num FROM enroll WHERE enroll_grade = 'C');
SELECT dept_code FROM professor GROUP BY dept_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT dept_name FROM department GROUP BY dept_name ORDER BY COUNT(emp_num) ASC LIMIT 1;
SELECT dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT emp_fname FROM employee WHERE emp_num NOT IN (SELECT DISTINCT prof_num FROM class);
SELECT emp_fname FROM employee WHERE emp_num NOT IN (SELECT DISTINCT prof_num FROM class)
SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' AND dept_code = (SELECT dept_code FROM department WHERE dept_name = 'History') EXCEPT SELECT emp_fname FROM employee WHERE emp_num IN (SELECT prof_num FROM class);
SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' AND dept_code IN (SELECT dept_code FROM department WHERE dept_name = 'History') AND emp_num NOT IN (SELECT prof_num FROM class)
SELECT T3.emp_lname, T1.prof_office FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.emp_num = T3.emp_num WHERE T2.dept_name = 'History' LIMIT 1;
SELECT T2.emp_lname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num WHERE T1.dept_code = 'History'
SELECT dept_name, prof_office FROM professor INNER JOIN department ON professor.dept_code = department.dept_code INNER JOIN employee ON professor.emp_num = employee.emp_num WHERE emp_lname = 'Heffington';
SELECT T2.dept_name, T1.prof_office FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.emp_fname = 'Heffington';
SELECT T2.emp_lname, T2.hire_date FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num WHERE T1.prof_office = 'DRE 102' LIMIT 1;
SELECT T2.emp_lname, T2.emp_hiredate FROM professor AS T1 INNER JOIN employee AS T2 ON T1.emp_num = T2.emp_num WHERE T1.prof_office = 'DRE 102';
SELECT class_code FROM enroll INNER JOIN student ON enroll.stu_num = student.stu_num WHERE stu_fname = 'Smithson';
SELECT course.crs_code FROM enroll JOIN student ON enroll.stu_num = student.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE student.stu_lname = 'Smithson';
SELECT course.crs_description, course.crs_credit FROM course JOIN class ON course.crs_code = class.crs_code JOIN enroll ON class.class_code = enroll.class_code JOIN student ON enroll.stu_num = student.stu_num WHERE student.stu_lname = 'Smithson';
SELECT T3.crs_credit, T3.crs_description FROM student AS T1 INNER JOIN enroll AS T2 ON T1.stu_num = T2.stu_num INNER JOIN course AS T3 ON T2.class_code = T3.crs_code WHERE T1.stu_lname = 'Smithson' LIMIT 1;
SELECT COUNT(*) FROM professor WHERE prof_degrees IN ('Ph.D.', 'MA');
SELECT COUNT(*) FROM professor WHERE prof_high_degree IN ('Ph.D.', 'Masters');
SELECT COUNT(*) FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_name IN ('Accounting', 'Biology');
SELECT COUNT(*) FROM professor WHERE dept_code IN ('ACCT', 'BIO');
SELECT DISTINCT T1.emp_fname FROM employee AS T1 JOIN class AS T2 ON T1.emp_num = T2.prof_num WHERE T2.crs_code IN ('CIS-220', 'QM-261') GROUP BY T1.emp_fname HAVING COUNT(DISTINCT T2.crs_code) = 2;
SELECT emp_fname FROM employee WHERE emp_num IN (SELECT prof_num FROM class WHERE crs_code = 'CIS-220') INTERSECT SELECT emp_fname FROM employee WHERE emp_num IN (SELECT prof_num FROM class WHERE crs_code = 'QM-261');
SELECT stu_init FROM student WHERE stu_num IN (SELECT stu_num FROM enroll JOIN class ON enroll.class_code = class.crs_code WHERE class.prof_num IN (SELECT emp_num FROM department WHERE dept_code = 'ACCT' OR dept_code = 'CIS'));
SELECT stu_init FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE class_code IN (SELECT class_code FROM class WHERE crs_code IN (SELECT crs_code FROM course WHERE crs_description IN ('Accounting', 'Computer Information Systems'))));
SELECT AVG(enroll_grade) AS avg_gpa FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code = 'ACCT-211';
SELECT AVG(enroll_grade) AS avg_gpa FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code = 'ACCT' AND course.crs_code = '211';
SELECT stu_init, stu_gpa, stu_phone FROM student ORDER BY stu_gpa DESC LIMIT 5;
SELECT stu_gpa, stu_fname, stu_phone FROM student ORDER BY stu_gpa DESC LIMIT 5;
SELECT department.dept_code FROM student JOIN department ON student.dept_code = department.dept_code ORDER BY stu_gpa ASC LIMIT 1;
SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY T1.stu_gpa LIMIT 1;
SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)
SELECT stu_gpa, stu_lname FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student);
SELECT T1.dept_name, T1.dept_address FROM department AS T1 JOIN student AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(T2.stu_num) DESC LIMIT 1;
SELECT T1.dept_name, T1.dept_address FROM department AS T1 JOIN student AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(T2.stu_num) DESC LIMIT 1;
SELECT T2.dept_name, T2.dept_address, COUNT(T1.stu_num) AS num_students FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T2.dept_name, T2.dept_address ORDER BY num_students DESC LIMIT 3;
SELECT department.dept_name, department.dept_address, COUNT(DISTINCT student.stu_num) AS num_students FROM department JOIN student ON department.dept_code = student.dept_code GROUP BY department.dept_name, department.dept_address ORDER BY num_students DESC LIMIT 3;
SELECT emp_lname, prof_extension FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE dept_name = 'History' AND prof_high_degree = 'Ph.D.' LIMIT 1;
SELECT emp_lname, dept_address FROM employee INNER JOIN professor ON employee.emp_num = professor.emp_num INNER JOIN department ON professor.dept_code = department.dept_code WHERE dept_name = 'History' AND prof_high_degree = 'Ph.D.';
SELECT DISTINCT T3.emp_initial, T1.crs_code FROM course AS T1 INNER JOIN class AS T2 ON T1.crs_code = T2.crs_code INNER JOIN employee AS T3 ON T2.prof_num = T3.emp_num
SELECT DISTINCT T1.emp_initial, T3.crs_code FROM employee AS T1 JOIN class AS T2 ON T1.emp_num = T2.prof_num JOIN course AS T3 ON T2.crs_code = T3.crs_code
SELECT DISTINCT T3.emp_initial, T1.crs_description FROM course AS T1 JOIN class AS T2 ON T1.crs_code = T2.crs_code JOIN employee AS T3 ON T2.prof_num = T3.emp_num
SELECT DISTINCT T3.emp_initial, T1.crs_description FROM course AS T1 JOIN class AS T2 ON T1.crs_code = T2.crs_code JOIN employee AS T3 ON T2.prof_num = T3.emp_num
SELECT DISTINCT T3.emp_initial, T3.prof_office, T1.crs_description FROM course AS T1 INNER JOIN class AS T2 ON T1.crs_code = T2.crs_code INNER JOIN professor AS T3 ON T2.prof_num = T3.emp_num
SELECT DISTINCT T2.emp_initial, T3.dept_code FROM employee AS T2 JOIN professor AS T1 ON T1.emp_num = T2.emp_num JOIN class AS T3 ON T3.prof_num = T2.emp_num
SELECT DISTINCT T3.emp_initial || '.' || T3.emp_lname AS FirstName, T1.prof_office AS Office, T4.crs_description AS CourseDescription, T2.dept_name AS DepartmentName FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.emp_num = T3.emp_num JOIN course AS T4 ON T2.dept_code = T4.dept_code
SELECT emp_lname || ', ' || emp_initial AS instructor_name, prof_office, dept_name, crs_description FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code JOIN course ON department.dept_code = course.dept_code;
SELECT stu_fname, stu_lname, crs_description FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code;
SELECT stu_fname, stu_lname, crs_description FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code;
SELECT stu_fname, stu_lname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll_grade IN ('A', 'C');
SELECT DISTINCT stu_lname FROM student WHERE stu_num IN (SELECT enroll.stu_num FROM enroll WHERE enroll_grade IN ('A', 'C'))
SELECT DISTINCT T3.prof_first_name, T1.class_room FROM class AS T1 INNER JOIN course AS T2 ON T1.crs_code = T2.crs_code INNER JOIN professor AS T3 ON T3.emp_num = T2.dept_code INNER JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'
SELECT DISTINCT T3.emp_fname, T1.class_room FROM class AS T1 INNER JOIN course AS T2 ON T1.crs_code = T2.crs_code INNER JOIN professor AS T3 ON T1.prof_num = T3.emp_num INNER JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting'
SELECT DISTINCT T1.emp_fname, T1.emp_degree FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.dept_code IN (SELECT dept_code FROM department WHERE dept_name = 'Computer Info. Systems') AND T1.emp_num IN (SELECT class.prof_num FROM class)
SELECT DISTINCT T3.emp_fname, T3.highest_degree FROM professor AS T1 INNER JOIN department AS T2 ON T1.dept_code = T2.dept_code INNER JOIN employee AS T3 ON T1.emp_num = T3.emp_num WHERE T2.dept_name = 'Computer Information Systems'
SELECT T1.emp_lname FROM employee AS T1 JOIN class AS T2 ON T1.emp_num = T2.prof_num JOIN enroll AS T3 ON T2.crs_code = T3.class_code WHERE T3.enroll_grade = 'A' AND T2.crs_code = 10018 LIMIT 1;
SELECT stu_lname FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE enroll_grade = 'A' AND class_code = 10018) LIMIT 1;
SELECT emp_lname, dept_address FROM employee INNER JOIN professor ON employee.emp_num = professor.emp_num INNER JOIN department ON professor.dept_code = department.dept_code WHERE dept_code = 'HIST' AND prof_high_degree != 'Ph.D.' LIMIT 1;
SELECT T1.emp_fname, T3.prof_office FROM employee AS T1 JOIN professor AS T3 ON T1.emp_num = T3.emp_num JOIN department AS T2 ON T3.dept_code = T2.dept_code WHERE T2.dept_name = 'History' AND T3.prof_high_degree != 'Ph.D.';
SELECT emp_fname FROM employee WHERE emp_num IN (SELECT prof_num FROM class GROUP BY prof_num HAVING COUNT(*) > 1)
SELECT emp_fname FROM employee WHERE emp_num IN (SELECT prof_num FROM class GROUP BY prof_num HAVING COUNT(*) > 1)
SELECT stu_init FROM student WHERE stu_num IN (SELECT stu_num FROM enroll GROUP BY stu_num HAVING COUNT(*) = 1)
SELECT stu_init FROM student WHERE stu_num IN (SELECT stu_num FROM enroll GROUP BY stu_num HAVING COUNT(*) = 1)
SELECT department.school_code FROM department JOIN course ON department.dept_code = course.dept_code WHERE course.crs_description LIKE '%Statistics%' LIMIT 1;
SELECT department.dept_code FROM department INNER JOIN course ON department.dept_code = course.dept_code WHERE course.crs_description LIKE '%Statistics%';
SELECT stu_fname FROM student WHERE stu_lname LIKE 'S%' AND stu_num IN (SELECT stu_num FROM enroll WHERE class_code IN (SELECT class_code FROM class WHERE crs_code = 'ACCT-211')) LIMIT 1;
SELECT stu_fname FROM student WHERE stu_init LIKE 'S%' AND stu_num IN (SELECT stu_num FROM enroll WHERE class_code = 'ACCT-211') LIMIT 1;
SELECT document_status_code FROM ref_document_status;
SELECT document_status_description FROM ref_document_status WHERE document_status_description = 'working';
SELECT document_type_code FROM ref_document_types;
SELECT document_status_description FROM ref_document_types WHERE document_type_code = 'Paper';
SELECT shipping_agent_description FROM ref_shipping_agents;
SELECT shipping_agent_code FROM ref_shipping_agents WHERE shipping_agent_description = 'UPS';
SELECT role_code FROM roles;
SELECT document_status_description FROM ref_document_status WHERE document_type_code = 'ED';
SELECT COUNT(*) FROM employees;
SELECT role_description FROM roles INNER JOIN employees ON roles.role_code = employees.role_code WHERE employees.other_details = 'Koby';
SELECT documents.document_id, documents.receipt_date FROM documents;
SELECT roles.role_description, roles.role_code, COUNT(employees.employee_id) AS num_employees FROM employees JOIN roles ON employees.role_code = roles.role_code GROUP BY roles.role_code;
SELECT role_description, COUNT(employee_id) AS num_employees FROM roles JOIN employees ON roles.role_code = employees.role_code GROUP BY role_description HAVING COUNT(employee_id) > 1;
SELECT document_status_description FROM ref_document_status WHERE document_status_code = (SELECT document_status_code FROM documents WHERE document_id = 1);
SELECT COUNT(document_id) FROM documents WHERE document_status_code = 'done';
SELECT documents.document_type_code FROM documents WHERE documents.document_id = 2;
SELECT documents.document_id FROM documents JOIN ref_document_status ON documents.document_status_code = ref_document_status.document_status_code JOIN ref_document_types ON documents.document_type_code = ref_document_types.document_type_code WHERE ref_document_status.document_status_description = 'done' AND ref_document_types.document_type_description = 'paper';
SELECT shipping_agent_name FROM ref_shipping_agents WHERE shipping_agent_code IN (SELECT shipping_agent_code FROM documents WHERE document_id = 2);
SELECT COUNT(*) FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_shipping_agents.shipping_agent_name = 'USPS';
SELECT shipping_agent_description, COUNT(*) AS num_documents FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code GROUP BY shipping_agent_description ORDER BY num_documents DESC LIMIT 1;
SELECT receipt_date FROM documents WHERE document_id = 3;
SELECT addresses.address_details FROM documents_mailed JOIN addresses ON documents_mailed.mailed_to_address_id = addresses.address_id WHERE documents_mailed.document_id = 4;
SELECT mailed_to_address_id FROM documents_mailed WHERE document_id = 7;
SELECT document_id FROM documents WHERE document_status_code = 'done' AND document_type_code = 'Paper' AND shipping_agent_code != (SELECT shipping_agent_code FROM ref_shipping_agents WHERE shipping_agent_name = 'USPS');
SELECT documents.document_id FROM documents JOIN ref_document_status ON documents.document_status_code = ref_document_status.document_status_code JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_document_status.document_status_description = 'done' AND documents.document_type_code = 'Paper' AND ref_shipping_agents.shipping_agent_name = 'USPS';
SELECT draft_details FROM document_drafts WHERE document_id = 7;
SELECT COUNT(*) FROM draft_copies WHERE document_id = 2;
SELECT documents.document_id, COUNT(draft_copies.draft_number) AS num_draft_copies FROM documents JOIN document_drafts ON documents.document_id = document_drafts.document_id JOIN draft_copies ON document_drafts.draft_number = draft_copies.draft_number GROUP BY documents.document_id ORDER BY num_draft_copies DESC LIMIT 1;
SELECT documents.document_id, COUNT(draft_copies.draft_number) AS num_draft_copies FROM documents JOIN document_drafts ON documents.document_id = document_drafts.document_id JOIN draft_copies ON document_drafts.document_id = draft_copies.document_id AND document_drafts.draft_number = draft_copies.draft_number GROUP BY documents.document_id HAVING COUNT(draft_copies.draft_number) > 1;
SELECT employee_name FROM employees WHERE employee_id IN (SELECT employee_id FROM circulation_history WHERE document_id = 1);
SELECT employee_name FROM employees WHERE employee_id NOT IN (SELECT DISTINCT employee_id FROM circulation_history);
SELECT employees.employee_name, COUNT(circulation_history.document_id) AS total_documents FROM circulation_history JOIN employees ON circulation_history.employee_id = employees.employee_id GROUP BY employees.employee_name ORDER BY total_documents DESC LIMIT 1;
SELECT documents.document_id, COUNT(DISTINCT circulation_history.employee_id) AS num_employees FROM documents JOIN circulation_history ON documents.document_id = circulation_history.document_id GROUP BY documents.document_id;
SELECT COUNT(*) FROM bookings;
SELECT COUNT(*) FROM bookings;
SELECT planned_delivery_date FROM customer_orders WHERE order_id IN (SELECT booking_id FROM bookings);
SELECT customer_orders.planned_delivery_date FROM bookings JOIN invoices ON bookings.booking_id = invoices.order_id JOIN customer_orders ON invoices.order_id = customer_orders.order_id;
SELECT planned_delivery_date, actual_delivery_date FROM customer_orders JOIN bookings ON customer_orders.order_id = bookings.booking_id;
SELECT booking_id, order_date AS planned_delivery_date, actual_delivery_date FROM bookings;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT customer_phone, clients.customer_email_address FROM customers INNER JOIN clients ON customers.customer_email_address = clients.customer_email_address WHERE clients.customer_name = 'Harold';
SELECT customer_phone, customer_email_address FROM customers WHERE customer_name = 'Harold';
SELECT store_name FROM drama_workshop_groups;
SELECT store_name FROM drama_workshop_groups JOIN stores ON drama_workshop_groups.address_id = stores.address_id;
SELECT MIN(order_quantity), AVG(order_quantity), MAX(order_quantity) FROM ( SELECT order_items.product_id, SUM(order_items.quantity) AS order_quantity FROM invoice_items JOIN order_items ON invoice_items.order_item_id = order_items.order_item_id GROUP BY order_items.product_id ) AS subquery;
SELECT MIN(T2.quantity), AVG(T2.quantity), MAX(T2.quantity) FROM invoices AS T1 JOIN invoice_items AS T3 ON T1.invoice_id = T3.invoice_id JOIN order_items AS T2 ON T3.order_item_id = T2.order_item_id
SELECT distinct payment_method_code FROM invoices;
SELECT distinct payment_method_code FROM invoices;
SELECT marketing_region_description FROM marketing_regions WHERE marketing_region_code = 'China';
SELECT marketing_region_description FROM marketing_regions WHERE marketing_region_description = 'China';
SELECT DISTINCT product_name FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT distinct product_description FROM products WHERE product_price > (SELECT avg(product_price) FROM products);
SELECT product_description FROM products ORDER BY product_price DESC LIMIT 1;
SELECT product_description FROM products ORDER BY product_price DESC LIMIT 1;
SELECT product_description FROM products ORDER BY product_price ASC;
SELECT product_description FROM products ORDER BY product_price ASC;
SELECT customer_phone FROM performers WHERE performer_id = 'Ashley';
SELECT customer_phone FROM performers WHERE customer_name = 'Ashley';
SELECT payment_method_code, COUNT(DISTINCT customer_orders.order_id) FROM invoices JOIN ref_payment_methods ON invoices.payment_method_code = ref_payment_methods.payment_method_code JOIN customer_orders ON invoices.order_id = customer_orders.order_id GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(DISTINCT customer_orders.order_id) AS num_orders FROM invoices JOIN customer_orders ON invoices.order_id = customer_orders.order_id GROUP BY payment_method_code;
SELECT payment_method_code FROM invoices GROUP BY payment_method_code ORDER BY COUNT(order_id) DESC LIMIT 1;
SELECT payment_method_code FROM invoices GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city_town FROM addresses WHERE address_id IN (SELECT address_id FROM stores WHERE store_name = 'FJA Filming') LIMIT 1;
SELECT cities.city_town FROM stores JOIN addresses ON stores.address_id = addresses.address_id WHERE stores.store_email_address = 'FJA Filming';
SELECT DISTINCT addresses.line_1 FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id WHERE drama_workshop_groups.marketing_region_code = 'CA';
SELECT distinct state_county FROM addresses WHERE address_id IN (SELECT address_id FROM stores WHERE marketing_region_code = 'CA')
SELECT marketing_region_description FROM stores JOIN marketing_regions ON stores.marketing_region_code = marketing_regions.marketing_region_code WHERE store_name = 'Rob Dinning';
SELECT marketing_regions.marketing_region_description FROM stores JOIN marketing_regions ON stores.marketing_region_code = marketing_regions.marketing_region_code WHERE stores.store_name = 'Rob Dinning'
SELECT DISTINCT T1.service_type_description FROM ref_service_types AS T1 INNER JOIN services AS T2 ON T1.service_type_code = T2.service_type_code WHERE T2.product_price > 100;
SELECT ref_service_types.service_type_description FROM ref_service_types JOIN services ON ref_service_types.service_type_code = services.service_type_code WHERE services.product_price > 100;
SELECT service_type_code, parent_service_type_code, COUNT(*) AS count FROM ref_service_types GROUP BY service_type_code, parent_service_type_code;
SELECT ref_service_types.service_type_code, ref_service_types.parent_service_type_code, services.product_description, COUNT(services.service_id) AS service_count FROM services JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code GROUP BY ref_service_types.service_type_code, ref_service_types.parent_service_type_code, services.product_description;
SELECT ref_service_types.service_type_code, ref_service_types.parent_service_type_code FROM ref_service_types INNER JOIN services ON services.service_type_code = ref_service_types.service_type_code GROUP BY ref_service_types.service_type_code, ref_service_types.parent_service_type_code ORDER BY COUNT(services.service_id) DESC LIMIT 1;
SELECT ref_service_types.service_type_code, ref_service_types.parent_service_type_code FROM services JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code GROUP BY ref_service_types.service_type_code ORDER BY COUNT(services.service_id) DESC LIMIT 1;
SELECT store_phone, store_email_address FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM services)
SELECT store_phone, store_email_address FROM drama_workshop_groups JOIN services ON drama_workshop_groups.workshop_group_id = services.workshop_group_id;
SELECT drama_workshop_groups.store_name FROM services JOIN drama_workshop_groups ON services.workshop_group_id = drama_workshop_groups.workshop_group_id WHERE services.product_name = 'film';
SELECT drama_workshop_groups.address_id FROM services JOIN drama_workshop_groups ON services.workshop_group_id = drama_workshop_groups.workshop_group_id WHERE services.product_name = 'film';
SELECT product_description, AVG(product_price) AS average_price FROM products GROUP BY product_description;
SELECT product_description, AVG(product_price) AS average_price FROM products GROUP BY product_description;
SELECT product_description FROM products GROUP BY product_description HAVING AVG(product_price) < 1000000;
SELECT product_description FROM products GROUP BY product_description HAVING AVG(product_price) < 1000000;
SELECT SUM(T1.order_quantity) FROM `order_items` AS T1 INNER JOIN `products` AS T2 ON T1.product_id = T2.product_id WHERE T2.product_description = 'photo';
SELECT SUM(order_items.order_quantity) AS total_order_quantity FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_description = 'photo';
SELECT order_id, order_item_id, order_quantity FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.price > 2000;
SELECT order_id, order_item_id, order_quantity FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_price > 2000;
SELECT customer_orders.planned_delivery_date FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id JOIN invoice_items ON order_items.order_item_id = invoice_items.order_item_id WHERE invoice_items.order_quantity = 1;
SELECT customer_orders.planned_delivery_date FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id JOIN invoice_items ON order_items.order_item_id = invoice_items.order_item_id WHERE invoice_items.order_quantity = 1;
SELECT planned_delivery_date FROM customer_orders JOIN invoices ON customer_orders.order_id = invoices.order_id JOIN invoice_items ON invoices.invoice_id = invoice_items.invoice_id JOIN products ON invoice_items.product_id = products.product_id WHERE invoice_items.order_quantity * products.product_price > 1000;
SELECT DISTINCT customer_orders.planned_delivery_date FROM customer_orders JOIN invoices ON customer_orders.order_id = invoices.order_id JOIN invoice_items ON invoices.invoice_id = invoice_items.invoice_id JOIN products ON invoice_items.product_id = products.product_id WHERE products.product_description > 1000;
SELECT COUNT(DISTINCT marketing_region_code) FROM drama_workshop_groups;
SELECT COUNT(DISTINCT currency_code) FROM drama_workshop_groups;
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id WHERE addresses.city_town = 'Feliciaberg';
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id WHERE addresses.city_town = 'Feliciaberg';
SELECT store_email_address FROM drama_workshop_groups INNER JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id WHERE addresses.city_town = 'Alaska';
SELECT store_email_address FROM drama_workshop_groups WHERE address_id IN (SELECT address_id FROM addresses WHERE state_county = 'Alaska')
SELECT city_town, COUNT(*) AS num_drama_workshop_groups FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id GROUP BY city_town;
SELECT city_town, COUNT(workshop_group_id) FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id GROUP BY city_town;
SELECT marketing_region_name FROM drama_workshop_groups INNER JOIN marketing_regions ON drama_workshop_groups.address_id = marketing_regions.marketing_region_name GROUP BY marketing_region_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT marketing_region_name FROM drama_workshop_groups INNER JOIN marketing_regions ON drama_workshop_groups.address_id = marketing_regions.marketing_region_name GROUP BY marketing_region_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT addresses.line_1, addresses.line_2, addresses.state_county FROM customers JOIN addresses ON customers.address_id = addresses.address_id WHERE addresses.address_id NOT IN ( SELECT performers.address_id FROM performers )
SELECT city_town FROM addresses WHERE address_id IN (SELECT address_id FROM customers) AND address_id NOT IN (SELECT address_id FROM performers);
SELECT status FROM bookings GROUP BY status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT status_code FROM bookings GROUP BY status_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT T3.product_name FROM `bookings` AS T1 INNER JOIN `bookings_services` AS T2 ON T1.booking_id = T2.order_id INNER JOIN `services` AS T3 ON T2.product_id = T3.service_id WHERE T1.status_code = 'stop' AND T3.service_type_code = 'workshop';
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups INNER JOIN bookings ON drama_workshop_groups.workshop_group_id = bookings.workshop_group_id WHERE bookings.status_code = 'stop';
SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM bookings);
SELECT client_name FROM clients EXCEPT SELECT T1.customer_name FROM clients AS T1 JOIN bookings AS T2 ON T1.client_id = T2.customer_id;
SELECT AVG(invoice_items.order_quantity) FROM invoice_items JOIN invoices ON invoice_items.invoice_id = invoices.invoice_id JOIN ref_payment_methods ON invoices.payment_method_code = ref_payment_methods.payment_method_code WHERE ref_payment_methods.payment_method_description = 'MasterCard';
SELECT AVG(invoice_items.order_quantity) FROM invoice_items JOIN invoices ON invoice_items.invoice_id = invoices.invoice_id JOIN ref_payment_methods ON invoices.payment_method_code = ref_payment_methods.payment_method_code WHERE ref_payment_methods.payment_method_description = 'MasterCard';
SELECT order_items.order_item_id FROM order_items JOIN invoice_items ON order_items.order_item_id = invoice_items.order_item_id GROUP BY order_items.order_item_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT product_id FROM invoices GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t1.service_description FROM ref_service_types AS t1 JOIN services AS t2 ON t1.service_type_code = t2.service_type_code JOIN products AS t3 ON t2.product_id = t3.product_id WHERE t3.product_description IN('photo', 'film') GROUP BY t1.service_description HAVING COUNT(DISTINCT t3.product_description) = 2;
SELECT T1.product_description FROM ref_service_types AS T1 JOIN services AS T2 ON T1.service_type_code = T2.service_type_code JOIN products AS T3 ON T2.product_name = T3.product_description WHERE T3.product_description IN('photo', 'film') GROUP BY T1.product_description HAVING COUNT(DISTINCT T3.product_description) = 2;
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM accounts;
SELECT COUNT(DISTINCT customers.customer_id) FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id;
SELECT COUNT(DISTINCT customers.customer_id) FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id;
SELECT account_id, other_account_details, account_name, date_of_opening FROM accounts;
SELECT account_id, other_account_details, account_name, date_opened FROM accounts;
SELECT account_id, account_name, other_account_details FROM accounts WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_first_name = 'Meaghan');
SELECT account_id, account_name, date_account_opened, other_account_details FROM accounts JOIN customers ON accounts.customer_id = customers.customer_id WHERE customer_first_name = 'Meaghan';
SELECT account_name, other_account_details FROM accounts WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_first_name = 'Meaghan' AND customer_last_name = 'Keeling');
SELECT account_name, other_account_details FROM accounts WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_first_name = 'Meaghan' AND customer_last_name = 'Keeling');
SELECT customer_last_name, customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_name = '900');
SELECT T2.customer_first_name, T2.customer_last_name FROM accounts AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = '900';
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts);
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts);
SELECT DISTINCT T1.customer_last_name, T1.customer_first_name, T1.phone_number FROM customers AS T1 INNER JOIN accounts AS T2 ON T1.customer_id = T2.customer_id;
SELECT DISTINCT T1.customer_last_name, T1.phone_number FROM customers AS T1 INNER JOIN accounts AS T2 ON T1.customer_id = T2.customer_id
SELECT customers.customer_id FROM customers EXCEPT SELECT accounts.customer_id FROM accounts;
SELECT customer_id FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts);
SELECT customers.customer_id, COUNT(accounts.account_id) AS num_accounts FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id;
SELECT customers.customer_id, COUNT(accounts.account_id) FROM accounts JOIN customers ON accounts.customer_id = customers.customer_id GROUP BY customers.customer_id;
SELECT customer_id, customer_first_name, customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id, customer_first_name, customer_last_name ORDER BY COUNT(accounts.account_id) DESC LIMIT 1;
SELECT c.customer_id, c.customer_first_name || ' ' || c.customer_last_name AS full_name FROM customers c JOIN accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_first_name, c.customer_last_name ORDER BY COUNT(a.account_id) DESC LIMIT 1;
SELECT customers.customer_id, customer_first_name, customer_last_name, COUNT(accounts.account_id) AS num_accounts FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id, customer_first_name, customer_last_name;
SELECT customers.customer_id, customers.customer_first_name, customers.customer_last_name, COUNT(accounts.account_id) AS num_accounts FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id, customers.customer_first_name, customers.customer_last_name;
SELECT T2.customer_first_name, T2.customer_id FROM `accounts` AS T1 INNER JOIN `customers` AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) >= 2;
SELECT customer_first_name, customers.customer_id FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id HAVING COUNT(accounts.account_id) > 1;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT COUNT(customer_id), gender FROM customers GROUP BY gender;
SELECT COUNT(customer_id), gender FROM customers GROUP BY gender;
SELECT COUNT(*) FROM financial_transactions;
SELECT COUNT(*) FROM financial_transactions;
SELECT accounts.account_id, COUNT(*) AS transaction_count FROM financial_transactions JOIN accounts ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.account_id;
SELECT account_id, COUNT(*) FROM financial_transactions GROUP BY account_id;
SELECT COUNT(*) FROM financial_transactions WHERE account_id IN (SELECT account_id FROM accounts WHERE account_name = '337');
SELECT COUNT(*) FROM financial_transactions WHERE account_id IN (SELECT account_id FROM accounts WHERE account_name = '337');
SELECT AVG(transaction_amount) AS average_transaction, MIN(transaction_amount) AS min_transaction, MAX(transaction_amount) AS max_transaction, SUM(transaction_amount) AS total_transaction FROM financial_transactions;
SELECT AVG(transaction_amount) AS avg_transaction_amount, MIN(transaction_amount) AS min_transaction_amount, MAX(transaction_amount) AS max_transaction_amount, SUM(transaction_amount) AS total_transaction_amount FROM financial_transactions;
SELECT transaction_amount FROM financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM financial_transactions);
SELECT transaction_id FROM financial_transactions WHERE transaction_type = 'debit' AND transaction_amount > (SELECT AVG(transaction_amount) FROM financial_transactions WHERE transaction_type = 'debit');
SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM financial_transactions GROUP BY transaction_type;
SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM financial_transactions GROUP BY transaction_type;
SELECT accounts.account_name, accounts.customer_id, COUNT(financial_transactions.transaction_id) AS transaction_count FROM accounts JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id GROUP BY accounts.account_name, accounts.customer_id;
SELECT accounts.account_name, accounts.account_id, COUNT(financial_transactions.transaction_id) AS transaction_count FROM accounts JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id GROUP BY accounts.account_name, accounts.account_id;
SELECT account_id FROM financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT account_id FROM financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT account_id, account_name FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions GROUP BY account_id HAVING COUNT(*) >= 4);
SELECT account_id, account_name FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions GROUP BY account_id HAVING COUNT(*) >= 4);
SELECT DISTINCT product_size FROM products;
SELECT DISTINCT production_type_code FROM products;
SELECT product_name FROM products;
SELECT DISTINCT product_name FROM products;
SELECT invoice_number, COUNT(transaction_id) AS transaction_count FROM invoices JOIN financial_transactions ON invoices.invoice_number = financial_transactions.invoice_number GROUP BY invoice_number;
SELECT invoice_number, COUNT(transaction_id) FROM financial_transactions GROUP BY invoice_number;
SELECT invoice_number, MAX(transaction_date) AS invoice_date FROM invoices JOIN financial_transactions ON invoices.invoice_number = financial_transactions.invoice_number GROUP BY invoices.invoice_number ORDER BY COUNT(financial_transactions.transaction_id) DESC LIMIT 1;
SELECT invoice_number, invoice_date FROM invoices WHERE invoice_number IN ( SELECT invoice_number FROM financial_transactions GROUP BY invoice_number ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT COUNT(*) FROM invoices;
SELECT COUNT(*) FROM invoices;
SELECT invoices.invoice_date, orders.order_id, orders.order_details FROM invoices JOIN orders ON invoices.order_id = orders.order_id;
SELECT invoices.invoice_date, orders.order_id, order_items.other_order_item_details FROM invoices JOIN orders ON invoices.order_id = orders.order_id JOIN order_items ON orders.order_id = order_items.order_id;
SELECT orders.order_id, COUNT(invoices.invoice_number) AS num_invoices FROM orders JOIN invoices ON orders.order_id = invoices.order_id GROUP BY orders.order_id;
SELECT orders.order_id, COUNT(invoices.invoice_number) AS invoice_count FROM orders JOIN invoices ON orders.order_id = invoices.order_id GROUP BY orders.order_id;
SELECT orders.order_id, order_details FROM orders WHERE orders.order_id IN ( SELECT order_id FROM invoices GROUP BY order_id HAVING COUNT(*) > 2 );
SELECT orders.order_id, order_details FROM orders WHERE orders.order_id IN (SELECT order_id FROM invoices GROUP BY order_id HAVING COUNT(*) >= 2);
SELECT c.customer_last_name, c.customer_id, c.phone_number FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY COUNT(o.order_id) DESC LIMIT 1;
SELECT T2.customer_last_name, T2.customer_id, T2.phone_number FROM `orders` AS T1 INNER JOIN `customers` AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY COUNT(T1.order_id) DESC LIMIT 1;
SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)
SELECT product_name FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)
SELECT products.product_name, SUM(invoice_line_items.product_quantity) AS total_quantity_ordered FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id GROUP BY products.product_name;
SELECT product_name, SUM(product_quantity) AS total_quantity_ordered FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id GROUP BY product_name;
SELECT orders.order_id, COUNT(order_items.order_item_id) AS number_of_items FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT orders.order_id, COUNT(order_items.order_item_id) AS order_item_count FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT product_id, COUNT(DISTINCT order_id) AS unique_orders_count FROM order_items GROUP BY product_id;
SELECT product_id, COUNT(DISTINCT order_item_id) AS distinct_order_count FROM order_items GROUP BY product_id;
SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS customer_count FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY p.product_name;
SELECT p.product_name, COUNT(DISTINCT o.customer_id) AS customer_count FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id GROUP BY p.product_name;
SELECT orders.order_id, COUNT(order_items.product_id) AS product_count FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT order_id, COUNT(DISTINCT product_id) AS different_products_count FROM order_items GROUP BY order_id;
SELECT orders.order_id, SUM(order_items.product_quantity) AS total_quantity FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT orders.order_id, SUM(order_items.product_quantity) AS total_product_quantity FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(*) FROM addresses WHERE city LIKE '%USA%';
SELECT DISTINCT line_1_number_building FROM addresses;
SELECT city, COUNT(*) FROM addresses GROUP BY city;
SELECT first_name, customer_phone FROM contacts WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)
SELECT T2.customer_name FROM `customer_orders` AS T1 INNER JOIN `customers` AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_name ORDER BY COUNT(T1.order_id) DESC LIMIT 1;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(product_id) >= 2;
SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code IN ('completed', 'part') GROUP BY T1.customer_name HAVING COUNT(DISTINCT T2.order_status_code) = 2;
SELECT customers.customer_name, customers.customer_phone, customer_orders.payment_method_code FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id ORDER BY customers.customer_number DESC;
SELECT products.product_name, SUM(order_items.order_quantity) AS total_order_quantity FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_id, products.product_name;
SELECT MIN(price), MAX(price), AVG(price) FROM products;
SELECT COUNT(*) FROM products WHERE product_price > (SELECT AVG(product_price) FROM products);
SELECT contacts.first_name, contacts.last_name, addresses.city, customer_address_history.date_to, customer_address_history.date_from FROM customer_address_history JOIN customers ON customer_address_history.customer_id = customers.customer_id JOIN addresses ON customer_address_history.address_id = addresses.address_id JOIN contacts ON customers.customer_id = contacts.customer_id;
SELECT T1.customer_name FROM `customers` AS T1 INNER JOIN `customer_orders` AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_name HAVING COUNT(T2.order_id) > 2 AND T1.payment_method = 'Credit Card'
SELECT T1.customer_name, T1.customer_phone FROM `customers` AS T1 INNER JOIN `customer_orders` AS T2 ON T1.customer_id = T2.customer_id INNER JOIN (SELECT order_id, SUM(order_quantity) AS total_quantity FROM `order_items` GROUP BY order_id ORDER BY total_quantity DESC LIMIT 1) AS T3 ON T2.order_id = T3.order_id;
SELECT product_type, product_name FROM products WHERE product_price > 1000 OR product_price < 500;
SELECT COUNT(*) FROM head WHERE born_state = 'Mississippi' AND head_id IN (SELECT head_id FROM management WHERE temporary_acting = 'Yes') AND name NOT LIKE '%S%'
SELECT head.name, head.state_born, head.age FROM head JOIN management ON head.head_id = management.head_id JOIN department ON management.department_id = department.department_id ORDER BY head.age;
SELECT department.creation, department.name FROM department;
SELECT MAX(budget), MIN(budget) FROM department;
SELECT AVG(T1.ranking) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T1.ranking BETWEEN 10 AND 15;
SELECT name FROM head WHERE state != 'California';
SELECT distinct department.creation FROM department JOIN management ON department.department_id = management.department_id JOIN head ON management.head_id = head.head_id WHERE head.born_state = 'Alabama'
SELECT T1.name FROM `head` AS T1 INNER JOIN `management` AS T2 ON T1.head_id = T2.head_id GROUP BY T1.name HAVING COUNT(T1.name) >= 3;
SELECT born_state FROM head WHERE head_id IN (SELECT head_id FROM management WHERE department_id IN (SELECT department_id FROM department GROUP BY ranking ORDER BY COUNT(*) DESC LIMIT 1))
SELECT department.name, department.num_employees FROM department JOIN management ON department.department_id = management.department_id JOIN head ON management.head_id = head.head_id WHERE head.temporary_acting = 'Yes';
SELECT COUNT(DISTINCT `acting_status`) FROM `management`;
SELECT COUNT(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);
SELECT DISTINCT age FROM head INNER JOIN management ON head.head_id = management.head_id WHERE temporary_acting = 'Yes';
SELECT DISTINCT T3.state FROM management AS T1 INNER JOIN department AS T2 ON T1.department_id = T2.department_id INNER JOIN head AS T3 ON T1.head_id = T3.head_id WHERE T2.name = 'Treasury' INTERSECT SELECT DISTINCT T3.state FROM management AS T1 INNER JOIN department AS T2 ON T1.department_id = T2.department_id INNER JOIN head AS T3 ON T1.head_id = T3.head_id WHERE T2.name = 'Homeland Security';
SELECT department.department_id, department.name, COUNT(management.head_id) AS num_heads FROM department JOIN management ON department.department_id = management.department_id GROUP BY department.department_id, department.name HAVING COUNT(management.head_id) > 1;
SELECT head_id, name FROM head WHERE name LIKE '%Ha%';
SELECT vehicle_id FROM vehicles;
SELECT vehicle_id FROM vehicles;
SELECT COUNT(*) FROM vehicles;
SELECT COUNT(*) FROM vehicles;
SELECT * FROM vehicles WHERE vehicle_id = 1;
SELECT vehicle_details FROM vehicles WHERE vehicle_id = 1;
SELECT first_name, middle_name, last_name FROM staff;
SELECT first_name, middle_name, last_name FROM staff;
SELECT date_of_birth FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT date_of_birth FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT date_joined_staff FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT date_joined_staff FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT date_left_staff FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT date_left_staff FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT COUNT(*) FROM staff WHERE nickname = 'Ludie';
SELECT COUNT(*) FROM staff WHERE nickname = 'Ludie';
SELECT nickname FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT first_name FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT COUNT(*) FROM staff;
SELECT COUNT(*) FROM staff;
SELECT city FROM addresses WHERE address_id IN (SELECT staff_address_id FROM staff WHERE first_name = 'Janessa' AND last_name = 'Sawayn') LIMIT 1;
SELECT line_1_number_building FROM addresses WHERE address_id IN (SELECT staff_address_id FROM staff WHERE last_name = 'Sawayn' AND nickname = 'Janessa')
SELECT addresses.country, addresses.state_province_county FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn';
SELECT t3.country, t3.state FROM staff AS t1 INNER JOIN addresses AS t3 ON t1.staff_address_id = t3.address_id WHERE t1.nickname = 'Janessa Sawayn'
SELECT SUM(lessons.lesson_time) AS total_lesson_time FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id WHERE customers.first_name = 'Rylan' AND customers.last_name = 'Goodwin';
SELECT SUM(lessons.lesson_time) AS total_lesson_time FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Rylan' AND customers.last_name = 'Goodwin';
SELECT T2.zip_postcode FROM staff AS T1 JOIN addresses AS T2 ON T1.staff_address_id = T2.address_id WHERE T1.last_name = 'Sawayn' AND T1.first_name = 'Janessa'
SELECT T2.postal_code FROM `staff` AS T1 INNER JOIN `addresses` AS T2 ON T1.staff_address_id = T2.address_id WHERE T1.nickname = 'Janessa Sawayn' LIMIT 1;
SELECT COUNT(*) FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.state_province_county = 'Georgia';
SELECT COUNT(staff.staff_id) FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.city = 'Georgia';
SELECT staff.last_name, staff.first_name FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.city = 'Damianfort';
SELECT T1.first_name, T1.last_name FROM staff AS T1 JOIN addresses AS T2 ON T1.staff_address_id = T2.address_id WHERE T2.city = 'Damianfort';
SELECT city, COUNT(*) as staff_count FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id GROUP BY city ORDER BY staff_count DESC LIMIT 1;
SELECT city, COUNT(*) AS employee_count FROM addresses JOIN staff ON addresses.address_id = staff.staff_address_id GROUP BY city ORDER BY employee_count DESC LIMIT 1;
SELECT T1.city FROM addresses AS T1 JOIN staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city HAVING COUNT(T2.staff_id) BETWEEN 2 AND 4;
SELECT t3.state FROM ( SELECT t1.state, COUNT(t1.address_id) AS count_addresses FROM addresses AS t1 JOIN staff AS t2 ON t1.address_id = t2.staff_address_id GROUP BY t1.state ) AS t3 WHERE t3.count_addresses BETWEEN 2 AND 4;
SELECT last_name, first_name FROM customers;
SELECT last_name FROM customers;
SELECT email_address FROM customers WHERE first_name = 'Carole'
SELECT email_address FROM customers WHERE first_name = 'Carole'
SELECT email_address, phone_number FROM customers JOIN customer_payments ON customers.customer_id = customer_payments.customer_id GROUP BY customers.customer_id HAVING SUM(amount_payment) < -2000;
SELECT email_address, phone_number FROM customers WHERE customer_id IN ( SELECT customer_id FROM customer_payments GROUP BY customer_id HAVING SUM(amount_payment) < -2000 );
SELECT lesson_status_code, phone_number, email_address FROM customers WHERE last_name = 'Kohler' OR first_name = 'Marina';
SELECT T1.lesson_status_code, T2.phone_number, T2.email_address FROM `lessons` AS T1 INNER JOIN `customers` AS T2 ON T1.customer_id = T2.customer_id WHERE T2.last_name = 'Kohler' OR T2.first_name = 'Marina';
SELECT date_of_birth FROM customers WHERE customer_id IN (SELECT customer_id FROM lessons WHERE lesson_status_code = 'Good Customer')
SELECT date_of_birth FROM customers WHERE customer_status_code = 'Good Customer';
SELECT datetime_payment FROM customer_payments JOIN customers ON customer_payments.customer_id = customers.customer_id WHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard' ORDER BY datetime_payment ASC LIMIT 1;
SELECT datetime_payment FROM customer_payments JOIN customers ON customer_payments.customer_id = customers.customer_id WHERE first_name = 'Carole' AND last_name = 'Bernhard' ORDER BY datetime_payment ASC LIMIT 1;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT lesson_status_code, COUNT(*) FROM lessons GROUP BY lesson_status_code;
SELECT lesson_status_code, COUNT(*) FROM lessons GROUP BY lesson_status_code;
SELECT lesson_status_code FROM lessons GROUP BY lesson_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1;
SELECT lesson_status_code FROM lessons GROUP BY lesson_status_code ORDER BY COUNT(customer_id) ASC LIMIT 1;
SELECT COUNT(*) FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Rylan' AND customers.last_name = 'Goodwin' AND lessons.lesson_status_code = 'completed';
SELECT COUNT(*) FROM lessons WHERE lesson_status_code = 'Completed' AND customer_id IN (SELECT customer_id FROM customers WHERE first_name = 'Ryan' AND last_name = 'Goodwin');
SELECT MAX(amount_payment) AS max_outstanding, MIN(amount_payment) AS min_outstanding, AVG(amount_payment) AS avg_outstanding FROM customer_payments;
SELECT MAX(amount_outstanding), MIN(amount_outstanding), AVG(amount_outstanding) FROM ( SELECT SUM(payment_amount) - SUM(lesson_cost) AS amount_outstanding FROM customers JOIN customer_payments ON customers.customer_id = customer_payments.customer_id JOIN lessons ON customers.customer_id = lessons.customer_id ) AS subquery;
SELECT T1.last_name, T1.first_name FROM customers AS T1 JOIN addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.amount_outstanding BETWEEN 1000 AND 3000;
SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.amount_outstanding BETWEEN 1000 AND 3000;
SELECT first_name, last_name FROM customers WHERE customer_address_id IN (SELECT address_id FROM addresses WHERE line_1_number_building LIKE '%Lockmanfurt%')
SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.line_1_number_building = 'Lockmanfurt'
SELECT T3.country FROM `customers` AS T1 INNER JOIN `addresses` AS T3 ON T1.customer_address_id = T3.address_id INNER JOIN `staff` AS T2 ON T2.staff_address_id = T3.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard' LIMIT 1;
SELECT T2.country FROM customers AS T1 INNER JOIN addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = 'Carole' AND T1.last_name = 'Bernhard';
SELECT addresses.zip_postcode FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard';
SELECT T2.line_1_number_building FROM customers AS T1 INNER JOIN addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.last_name = 'Carole Bernhard';
SELECT city FROM addresses JOIN customers ON customers.customer_address_id = addresses.address_id GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city FROM addresses JOIN customers ON customers.customer_address_id = addresses.address_id GROUP BY city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SUM(customer_payments.amount_payment) FROM customers JOIN customer_payments ON customers.customer_id = customer_payments.customer_id JOIN staff ON customers.customer_address_id = staff.staff_address_id WHERE staff.first_name = 'Carole' AND customers.last_name = 'Bernhard';
SELECT SUM(amount_payment) FROM customer_payments WHERE customer_id IN (SELECT customer_id FROM customers WHERE first_name = 'Carole' AND last_name = 'Bernhard');
SELECT COUNT(DISTINCT customers.customer_id) FROM customers LEFT JOIN customer_payments ON customers.customer_id = customer_payments.customer_id WHERE customer_payments.customer_id IS NULL;
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_payments);
SELECT T1.last_name, T1.first_name FROM customers AS T1 JOIN customer_payments AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 2;
SELECT T1.last_name FROM `customers` AS T1 INNER JOIN `customer_payments` AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*) > 2;
SELECT payment_method, COUNT(*) FROM customer_payments GROUP BY payment_method;
SELECT payment_method, COUNT(*) FROM customer_payments GROUP BY payment_method;
SELECT COUNT(*) FROM lessons WHERE lesson_id IS NULL;
SELECT COUNT(*) FROM lessons WHERE lesson_id IS NULL;
SELECT lessons.lesson_id FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn' AND staff.nickname LIKE '%s%';
SELECT `lesson_id` FROM `lessons` WHERE `staff_id` IN (SELECT `staff_id` FROM `staff` WHERE `nickname` LIKE '%s%' AND `first_name` = 'Janessa' AND `last_name` = 'Sawayn');
SELECT COUNT(*) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name LIKE '%a%';
SELECT COUNT(*) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name LIKE '%a%';
SELECT SUM(lessons.lesson_time) AS total_lesson_time FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn';
SELECT SUM(T1.price) FROM lessons AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Janessa' AND T2.last_name = 'Sawayn'
SELECT AVG(lessons.price) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn';
SELECT AVG(amount_payment) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id JOIN customer_payments ON lessons.lesson_id = customer_payments.lesson_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn';
SELECT COUNT(*) FROM lessons WHERE customer_id IN (SELECT customer_id FROM customers WHERE first_name = 'Ray');
SELECT COUNT(*) FROM lessons WHERE customer_id = (SELECT customer_id FROM customers WHERE first_name = 'Ray');
SELECT DISTINCT T1.line_1_number_building FROM addresses AS T1 JOIN customers AS T2 ON T1.address_id = T2.customer_address_id INTERSECT SELECT DISTINCT T1.line_1_number_building FROM addresses AS T1 JOIN staff AS T3 ON T1.address_id = T3.staff_address_id;
SELECT DISTINCT T1.line_1_number_building FROM addresses AS T1 INNER JOIN customers AS T2 ON T1.address_id = T2.customer_address_id INTERSECT SELECT DISTINCT T3.line_1_number_building FROM addresses AS T3 INNER JOIN staff AS T4 ON T3.address_id = T4.staff_address_id;
SELECT first_name FROM staff WHERE staff_id NOT IN (SELECT staff_id FROM lessons) LIMIT 1;
SELECT T2.first_name FROM staff AS T1 LEFT JOIN lessons AS T2 ON T1.staff_id = T2.staff_id WHERE T2.lesson_id IS NULL
SELECT vehicles.vehicle_id, vehicle_details FROM lessons JOIN vehicles ON lessons.vehicle_id = vehicles.vehicle_id GROUP BY vehicles.vehicle_id, vehicle_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT employee_id FROM employee ORDER BY age ASC;
SELECT employee_id FROM employee ORDER BY age ASC;
SELECT district, COUNT(employee_id) FROM employee INNER JOIN hiring ON employee.employee_id = hiring.employee_id INNER JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY district;
SELECT district, COUNT(employee_id) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY district;
SELECT city FROM employee WHERE employee_id IN (SELECT employee_id FROM hiring WHERE start_from > strftime('%Y', 'now') - 30) GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT city FROM employee WHERE employee_id IN (SELECT employee_id FROM employee WHERE age < 30) GROUP BY city HAVING COUNT(*) > 1;
SELECT district, COUNT(*) FROM shop GROUP BY district;
SELECT district, COUNT(*) FROM shop GROUP BY district;
SELECT manager_name, district FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1);
SELECT manager_name, district FROM shop WHERE shop_id = (SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT MIN(products), MAX(products) FROM shop;
SELECT MIN(products), MAX(products) FROM shop;
SELECT shop.name, shop.location, shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id, shop.name, shop.location, shop.district ORDER BY COUNT(hiring.employee_id) DESC;
SELECT shop.name, shop.location, shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.shop_id, shop.name, shop.location, shop.district ORDER BY COUNT(hiring.employee_id) DESC;
SELECT shop.name FROM shop WHERE shop.shop_id IN (SELECT shop_id FROM product GROUP BY shop_id HAVING COUNT(product_id) > (SELECT AVG(product_count) FROM (SELECT COUNT(product_id) AS product_count FROM product GROUP BY shop_id)))
SELECT shop.name FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name HAVING COUNT(hiring.employee_id) > (SELECT AVG(employee_count) FROM (SELECT COUNT(hiring.employee_id) AS employee_count FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name));
SELECT name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1;
SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation GROUP BY employee_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation ORDER BY bonus DESC LIMIT 1)
SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM evaluation ORDER BY bonus DESC LIMIT 1)
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT name FROM employee WHERE employee_id NOT IN (SELECT employee_id FROM evaluation)
SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.id = hiring.shop_id GROUP BY shop.name ORDER BY COUNT(hiring.employee_id) DESC LIMIT 1;
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);
SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);
SELECT shop.name, COUNT(employee_id) AS number_of_employees_hired FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name;
SELECT shop.name, COUNT(employee_id) AS number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT SUM(bonus) FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT district FROM shop WHERE number_products < 3000 INTERSECT SELECT district FROM shop WHERE number_products > 10000;
SELECT DISTINCT location FROM shop WHERE number_products < 3000 INTERSECT SELECT DISTINCT location FROM shop WHERE number_products > 10000;
SELECT COUNT(DISTINCT district) FROM shop;
SELECT COUNT(DISTINCT shop_id) FROM shop;
SELECT country FROM airlines WHERE abbreviation = 'JetBlue Airways';
SELECT country FROM airlines WHERE abbreviation = 'Jetblue Airways';
SELECT abbreviation FROM airlines WHERE uid = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE abbreviation = 'B6';
SELECT abbreviation, country FROM airlines WHERE country = 'USA';
SELECT abbreviation, name FROM airlines WHERE country = 'USA';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE airportname = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE uid = 'UAL';
SELECT abbreviation FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT T1.country, T1.city FROM airports AS T1 WHERE T1.airportname = 'Alton Airport';
SELECT T1.country, T1.countryabbrev FROM airports AS T1 WHERE T1.airportname = 'Alton' LIMIT 1;
SELECT city FROM airports WHERE airportcode = 'AKO';
SELECT city FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE country = 'Aberdeen';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen');
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen');
SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.sourceairport = source.airportcode JOIN airports AS destination ON flights.destairport = destination.airportcode WHERE source.city = 'Aberdeen' AND destination.city = 'Ashley';
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE airportname = 'Ashley');
SELECT COUNT(*) FROM flights WHERE flightno IN (SELECT flightno FROM airlines WHERE abbreviation = 'JetBlue Airways');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'Jetblue Airways';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'United Airlines' AND flights.destairport = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportname WHERE airlines.abbreviation = 'United Airlines' AND airports.airportname = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.airportcode = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE flights.sourceairport = 'AHD' AND airlines.abbreviation = 'United Airlines';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.flightno = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.city = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United Airlines' AND airports.airportname = 'Aberdeen';
SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.city FROM `flights` AS T1 INNER JOIN `airports` AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.city FROM `flights` AS T1 INNER JOIN `airports` AS T2 ON T1.sourceairport = T2.airportcode GROUP BY T2.city ORDER BY COUNT(T1.sourceairport) DESC LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.abbreviation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.abbreviation ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.airline, T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.uid GROUP BY T1.uid ORDER BY COUNT(*) ASC LIMIT 1;
SELECT T2.countryabbrev, T2.airline FROM `flights` AS T1 INNER JOIN `airlines` AS T2 ON T1.airline = T2.uid GROUP BY T1.airline ORDER BY COUNT(T1.flightno) ASC LIMIT 1;
SELECT DISTINCT airlines.abbreviation FROM airlines INNER JOIN flights ON airlines.uid = flights.uid WHERE flights.sourceairport = 'AHD';
SELECT DISTINCT T2.abbreviation FROM `flights` AS T1 INNER JOIN `airlines` AS T2 ON T1.flightno = T2.uid WHERE T1.sourceairport = 'AHD'
SELECT DISTINCT airlines.abbreviation FROM airlines INNER JOIN flights ON airlines.uid = flights.uid WHERE flights.destairport = 'AHD';
SELECT DISTINCT airlines.abbreviation FROM airlines INNER JOIN flights ON airlines.uid = flights.uid WHERE flights.destairport = 'AHD';
SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.uid WHERE flights.sourceairport IN ('APG', 'CVO') GROUP BY airlines.abbreviation HAVING COUNT(DISTINCT flights.sourceairport) = 2;
SELECT DISTINCT T2.abbreviation FROM `flights` AS T1 INNER JOIN `airlines` AS T2 ON T1.uid = T2.uid WHERE T1.sourceairport IN ('APG', 'CVO') GROUP BY T2.abbreviation HAVING COUNT(DISTINCT T1.sourceairport) = 2;
SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.uid WHERE flights.sourceairport = 'CVO' EXCEPT SELECT DISTINCT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.uid WHERE flights.sourceairport = 'APG';
SELECT DISTINCT airlines.abbreviation FROM airlines INNER JOIN flights ON airlines.uid = flights.airlineuid INNER JOIN airports AS src_airport ON flights.sourceairport = src_airport.airportcode INNER JOIN airports AS dst_airport ON flights.destairport = dst_airport.airportcode WHERE src_airport.airportcode = 'CVO' EXCEPT SELECT DISTINCT airlines.abbreviation FROM airlines INNER JOIN flights ON airlines.uid = flights.airlineuid INNER JOIN airports AS src_airport ON flights.sourceairport = src_airport.airportcode WHERE src_airport.airportcode = 'APG'
SELECT DISTINCT airlines.uid FROM airlines JOIN flights ON airlines.uid = flights.airlineuid GROUP BY airlines.uid HAVING COUNT(*) >= 10;
SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.abbreviation HAVING COUNT(*) >= 10;
SELECT DISTINCT airlines.uid FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.uid HAVING COUNT(*) < 200;
SELECT airlines.abbreviation FROM airlines JOIN flights ON airlines.uid = flights.uid GROUP BY airlines.abbreviation HAVING COUNT(*) < 200;
SELECT flightnumber FROM flights WHERE airline = 'United Airlines';
SELECT flightnumber FROM flights WHERE airline = (SELECT abbreviation FROM airlines WHERE abbreviation = 'United');
SELECT flightnumber FROM flights WHERE sourceairport = 'APG';
SELECT airline FROM flights WHERE sourceairport = 'APG';
SELECT flightnumber FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE airportname = 'APG');
SELECT flightnumber FROM flights WHERE destairport = 'APG';
SELECT flightnumber FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT airline FROM flights WHERE sourceairport = 'ABZ';
SELECT flightnumber FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'Aberdeen');
SELECT flightnumber FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen');
SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen' OR airportname = 'Abilene');
SELECT COUNT(*) FROM flights WHERE destairport IN ('Aberdeen', 'Abilene');
SELECT DISTINCT T1.city FROM `airports` AS T1 WHERE NOT EXISTS(SELECT 1 FROM `flights` AS T2 WHERE T1.airportcode = T2.sourceairport) AND NOT EXISTS(SELECT 1 FROM `flights` AS T3 WHERE T1.airportcode = T3.destairport)
SELECT airports.airportname FROM airports WHERE airports.airportcode NOT IN (SELECT sourceairport FROM flights) AND airports.airportcode NOT IN (SELECT destairport FROM flights);
SELECT COUNT(*) FROM game WHERE date > '2007-12-31';
SELECT date FROM game JOIN stadium ON game.stadium_id = stadium.id ORDER BY stadium.name DESC;
SELECT game.season, stadium.id AS home_team, game.away_team FROM game INNER JOIN stadium ON game.stadium_id = stadium.id;
SELECT stadium.name, MAX(count_game), MIN(count_game), AVG(count_game) FROM ( SELECT stadium_id, COUNT(*) as count_game FROM game GROUP BY stadium_id ) AS game_count JOIN stadium ON game_count.stadium_id = stadium.id;
SELECT AVG(T1.capacity_percentage) FROM `stadium` AS T1 INNER JOIN `game` AS T2 ON T1.id = T2.stadium_id WHERE T1.capacity_percentage > 100
SELECT player, number_of_matches, source FROM injury_accident WHERE player NOT IN (SELECT player FROM injury_accident WHERE source = 'Knee problem')
SELECT season FROM game INNER JOIN injury_accident ON game.id = injury_accident.game_id WHERE injury_accident.injury = 'Walter Samuel';
SELECT game.id, game.score, game.date FROM game JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY game.id, game.score, game.date HAVING COUNT(injury_accident.id) >= 2;
SELECT stadium.id, stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY stadium.id, stadium.name ORDER BY COUNT(injury_accident.id) DESC LIMIT 1;
SELECT stadium.id, stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY stadium.id, stadium.name ORDER BY COUNT(injury_accident.id) DESC LIMIT 1;
SELECT T2.date, T3.name FROM `injury_accident` AS T1 INNER JOIN `game` AS T2 ON T1.game_id = T2.id INNER JOIN `stadium` AS T3 ON T2.stadium_id = T3.id WHERE T1.source IN('Foot injury', 'Knee problem')
SELECT COUNT(DISTINCT injury) FROM injury_accident;
SELECT COUNT(*) FROM game WHERE id NOT IN (SELECT game_id FROM injury_accident);
SELECT COUNT(DISTINCT source) FROM injury_accident WHERE game_id IN (SELECT id FROM game WHERE season > 2010);
SELECT stadium.name FROM stadium INNER JOIN game ON stadium.id = game.stadium_id INNER JOIN injury_accident ON game.id = injury_accident.game_id WHERE injury_accident.injury IN ('Walter Samuel', 'Thiago Motta') GROUP BY stadium.name HAVING COUNT(DISTINCT injury_accident.injury) = 2;
SELECT name, AVG(total_attendance) AS avg_attendance, total_attendance FROM stadium WHERE id NOT IN (SELECT stadium_id FROM game WHERE id IN (SELECT game_id FROM injury_accident))
SELECT stadium.name FROM stadium WHERE stadium.name LIKE '%Bank%';
SELECT stadium.name, COUNT(game.id) AS games_held FROM stadium JOIN game ON stadium.id = game.stadium_id GROUP BY stadium.name;
SELECT T2.date, T3.injury FROM `game` AS T1 INNER JOIN `stadium` AS T2 ON T1.stadium_id = T2.id INNER JOIN `injury_accident` AS T3 ON T1.id = T3.game_id ORDER BY T2.date DESC
SELECT mid FROM movie WHERE title = 'The Imitation Game';
SELECT birth_year FROM producer JOIN made_by ON producer.pid = made_by.pid JOIN movie ON made_by.msid = movie.mid WHERE movie.title = 'The Imitation Game';
SELECT birth_year FROM actor WHERE name = 'Benedict Cumberbatch';
SELECT birth_year FROM actor WHERE name = 'Benedict Cumberbatch';
SELECT nationality FROM writer WHERE gender = 'Actress' AND name = 'Christoph Waltz';
SELECT nationality FROM actor WHERE name = 'Christoph Waltz';
SELECT title FROM movie WHERE mid IN (SELECT msid FROM made_by WHERE pid IN (SELECT pid FROM producer WHERE birth_city = 'Los Angeles'));
SELECT name FROM actor WHERE birth_year = 'Tehran';
SELECT name FROM actor WHERE birth_year = 'Tehran';
SELECT name FROM actor WHERE birth_year = 'Tehran';
SELECT name FROM actor WHERE birth_city = 'Afghanistan';
SELECT name FROM actor WHERE birth_city = 'Afghanistan';
SELECT nationality FROM actor WHERE nationality = 'Afghanistan';
SELECT name FROM actor WHERE birth_city = '1984';
SELECT birth_year FROM actor WHERE name = 'Kevin Spacey';
SELECT birth_year FROM actor WHERE name = 'Kevin Spacey';
SELECT birth_city FROM actor WHERE name = 'Kevin Spacey';
SELECT birth_city FROM actor WHERE name = 'Kevin Spacey';
SELECT nationality FROM actor WHERE name = 'Kevin Spacey';
SELECT budget FROM tv_series WHERE title_aka = 'Finding Nemo';
SELECT title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.id JOIN director ON directed_by.did = director.did WHERE director.name = 'Steven Spielberg' AND movie.release_year > 2006;
SELECT director.dname FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title_aka = 'James Bond';
SELECT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title_aka = 'James Bond';
SELECT DISTINCT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.id = movie.id WHERE movie.title = 'James Bond'
SELECT actor.aid FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.msid = movie.mid WHERE cast.role = 'Alan Turing' AND movie.title_aka = 'The Imitation Game';
SELECT `actor.name` FROM `actor` JOIN `cast` ON `actor.aid` = `cast.aid` JOIN `movie` ON `cast.id` = `movie.mid` WHERE `movie.title_aka` = 'The Imitation Game' AND `cast.role` = 'Alan Turing';
SELECT T1.aid FROM actor AS T1 JOIN cast AS T2 ON T1.aid = T2.id WHERE T2.role = 'Alan Turing' AND T2.msid IN (SELECT mid FROM movie WHERE title_aka = 'The Imitation Game')
SELECT name FROM actor WHERE aid IN (SELECT id FROM cast WHERE msid = (SELECT mid FROM movie WHERE title_aka = 'The Imitation Game') AND role = 'Alan Turing');
SELECT T1.aid FROM actor AS T1 JOIN cast AS T2 ON T1.aid = T2.id WHERE T2.role = 'Alan Turing' AND T2.msid IN (SELECT msid FROM movie WHERE title = 'The Imitation Game')
SELECT genre.* FROM genre JOIN movie ON genre.gid = movie.mid WHERE movie.title_aka = 'Jurassic Park';
SELECT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.mid = movie.mid WHERE movie.title = 'Joy' AND movie.year = 2015;
SELECT movie.mid FROM movie JOIN made_by ON movie.mid = made_by.msid JOIN writer ON made_by.id = writer.wid WHERE writer.name = 'Matt Damon';
SELECT msid FROM written_by WHERE id IN (SELECT id FROM writer WHERE name = 'Woody Allen') INTERSECT SELECT msid FROM made_by WHERE id IN (SELECT id FROM producer WHERE name = 'Woody Allen');
SELECT mid FROM cast JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Robin Wright';
SELECT movie.mid FROM movie JOIN cast ON movie.mid = cast.msid JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Robin Wright';
SELECT mid FROM cast JOIN actor ON cast.id = actor.aid WHERE actor.name = 'Robin Wright';
SELECT budget FROM movie WHERE title = 'Juno' AND release_year = 2007;
SELECT title FROM movie JOIN genre ON movie.mid = genre.gid JOIN classification ON genre.gid = classification.gid WHERE genre.title = 'Sci-Fi' AND movie.title_aka LIKE '2010%'
SELECT title FROM movie JOIN genre ON movie.mid = genre.gid WHERE genre.genre = 'Sci-Fi' AND movie.title LIKE '2010%';
SELECT name FROM actor WHERE birth_city = 'Austin' AND birth_year > 1980;
SELECT name FROM actor WHERE birth_city = 'Austin' AND birth_year > 1980;
SELECT name FROM actor WHERE birth_city = 'Austin' AND birth_year > 1980;
SELECT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.mid JOIN director ON directed_by.did = director.did WHERE director.birth_year = 'Los Angeles';
SELECT name FROM actor WHERE birth_year = 1984 AND birth_city = 'New York City';
SELECT title_aka FROM movie WHERE mid IN (SELECT msid FROM classification WHERE gid = (SELECT gid FROM genre WHERE genre = 'nuclear weapons'));
SELECT title_aka FROM movie WHERE title_aka LIKE '%nuclear weapons%' OR title_aka LIKE '%nuclear bomb%' OR title_aka LIKE '%atomic weapon%';
SELECT `title_aka` FROM `movie` WHERE `mid` IN (SELECT `msid` FROM `directed_by` WHERE `did` IN (SELECT `did` FROM `director` WHERE `name` = 'Alfred Hitchcock'));
SELECT mid FROM movie JOIN made_by ON movie.mid = made_by.mid JOIN person ON made_by.pid = person.pid WHERE person.name = 'Taraneh Alidoosti' INTERSECT SELECT movie.mid FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.id = director.did WHERE director.name = 'Asghar Farhadi';
SELECT DISTINCT movie.title_aka FROM movie JOIN made_by ON movie.mid = made_by.pid JOIN directed_by ON made_by.msid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE director.name = 'Asghar Farhadi' AND movie.title_aka IN ( SELECT DISTINCT movie.title_aka FROM movie JOIN made_by ON movie.mid = made_by.pid WHERE made_by.pid IN ( SELECT pid FROM person WHERE name = 'Taraneh Alidoosti' ) );
SELECT COUNT(DISTINCT directed_by.msid) FROM directed_by JOIN director ON directed_by.did = director.did JOIN cast ON directed_by.msid = cast.msid WHERE director.name = 'Asghar Farhadi' AND cast.aid = (SELECT aid FROM cast WHERE role = 'Taraneh Alidoosti');
SELECT DISTINCT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did JOIN cast ON movie.mid = cast.aid WHERE director.name = 'Asghar Farhadi' AND cast.role = 'Taraneh Alidoosti'
SELECT tv_series.title_aka FROM tv_series JOIN made_by ON tv_series.sid = made_by.msid JOIN writer ON writer.wid = made_by.id WHERE writer.gender = 'Shonda Rhimes';
SELECT actor.name FROM actor JOIN cast ON actor.aid = cast.id JOIN tv_series ON cast.msid = tv_series.sid WHERE cast.role = 'Olivia Pope' AND tv_series.title = 'Scandal';
SELECT T1.gender, T1.nationality FROM `writer` AS T1 INNER JOIN `written_by` AS T2 ON T1.wid = T2.id INNER JOIN `movie` AS T3 ON T2.msid = T3.msid WHERE T3.title_aka = 'The Truman Show';
SELECT T1.gender FROM `writer` AS T1 INNER JOIN `written_by` AS T2 ON T1.wid = T2.wid INNER JOIN `made_by` AS T3 ON T2.msid = T3.msid WHERE T3.pid = 'The Truman Show' LIMIT 1;
SELECT tv_series.title_aka FROM cast JOIN actor ON cast.aid = actor.aid JOIN tv_series ON cast.msid = tv_series.sid WHERE actor.gender = 'Scott Foley'
SELECT tv_series.sid FROM cast JOIN actor ON cast.aid = actor.aid JOIN tv_series ON cast.msid = tv_series.sid WHERE actor.gender = 'Scott Foley'
SELECT DISTINCT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN cast ON directed_by.id = cast.id JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Kate Winslet';
SELECT distinct T1.pid FROM `producer` AS T1 INNER JOIN `made_by` AS T2 ON T1.pid = T2.pid INNER JOIN `cast` AS T3 ON T2.msid = T3.id WHERE T3.role = 'actor' AND T3.aid IN(SELECT T4.aid FROM `actor` AS T4 WHERE T4.name = 'Kate Winslet')
SELECT director.dname FROM director JOIN directed_by ON director.did = directed_by.did JOIN tv_series ON directed_by.sid = tv_series.sid WHERE tv_series.title = 'House of Cards' AND tv_series.release_year = 2013;
SELECT name FROM actor WHERE birth_city = 'Austin' AND nationality = 'female';
SELECT name FROM actor WHERE nationality = 'Italy' AND birth_year > 1980;
SELECT name FROM actor WHERE gender = 'female' AND birth_year > 1980 AND birth_city = 'New York City';
SELECT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.msid = movie.mid WHERE movie.title_aka = 'Saving Private Ryan' AND actor.nationality = 'female';
SELECT name FROM director WHERE birth_city = 'Afghanistan';
SELECT DISTINCT actor.aid FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.msid = movie.mid WHERE movie.title_aka = 'Camp X-Ray';
SELECT DISTINCT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.id = made_by.id JOIN movie ON made_by.mid = movie.mid WHERE actor.birth_city = 'Canada' AND movie.title_aka = 'James Bond';
SELECT DISTINCT movie.title_aka FROM movie JOIN cast ON movie.mid = cast.msid JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Rowan Atkinson' AND cast.role = 'Mr. Bean';
SELECT director.nationality FROM directed_by JOIN director ON directed_by.did = director.did JOIN movie ON directed_by.id = movie.id WHERE movie.title = 'The Past';
SELECT name FROM actor WHERE aid IN (SELECT aid FROM cast WHERE role = 'Mr. Bean');
SELECT genre.* FROM genre JOIN made_by ON genre.gid = made_by.gid JOIN directed_by ON made_by.pid = directed_by.pid JOIN director ON directed_by.did = director.did WHERE director.name = 'Asghar Farhadi';
SELECT title_aka FROM movie WHERE mid IN (SELECT msid FROM cast WHERE role = 'Daffy Duck') LIMIT 1;
SELECT role FROM cast WHERE msid = (SELECT mid FROM movie WHERE title_aka = 'Daddy Long Legs') AND id = 'major';
SELECT DISTINCT director.did FROM director JOIN directed_by ON director.did = directed_by.did JOIN made_by ON directed_by.msid = made_by.msid JOIN classification ON made_by.id = classification.id WHERE classification.gid = (SELECT gid FROM classification WHERE id = 'nuclear weapons');
SELECT COUNT(*) FROM movie JOIN cast ON movie.mid = cast.id JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Jennifer Aniston' AND movie.budget > 2010;
SELECT COUNT(DISTINCT cast.aid) FROM cast JOIN movie ON cast.msid = movie.mid WHERE movie.title_aka = 'Saving Private Ryan';
SELECT COUNT(DISTINCT cast.aid) FROM cast JOIN movie ON cast.msid = movie.mid WHERE movie.title_aka = 'Saving Private Ryan';
SELECT COUNT(*) FROM director JOIN directed_by ON director.did = directed_by.did WHERE director.name = 'Steven Spielberg';
SELECT COUNT(mid) FROM movie WHERE title LIKE '%2013%';
SELECT COUNT(*) FROM movie JOIN made_by ON movie.mid = made_by.msid JOIN producer ON made_by.pid = producer.pid WHERE STRFTIME('%Y', movie.title_aka) = '2013';
SELECT COUNT(*) AS num_movies_per_year, substr(T2.birth_year, 1, 4) AS year FROM directed_by AS T1 JOIN director AS T2 ON T1.did = T2.did WHERE T2.name = 'Woody Allen' GROUP BY year ORDER BY year;
SELECT COUNT(*) FROM cast JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Shahab Hosseini';
SELECT COUNT(*) FROM cast JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Shahab Hosseini';
SELECT COUNT(*) FROM cast JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Shahab Hosseini';
SELECT COUNT(*) FROM cast JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Shahab Hosseini';
SELECT COUNT(*) FROM actor WHERE birth_city = 'Los Angeles' AND birth_year > 2000;
SELECT COUNT(*) FROM cast JOIN actor ON cast.aid = actor.aid JOIN movie ON cast.id = movie.id WHERE actor.name = 'Humphrey Bogart' AND movie.year < 1942;
SELECT COUNT(T2.msID), T1.birth_year FROM actor AS T1 JOIN cast AS T2 ON T1.aid = T2.aid WHERE T1.name = 'Brad Pitt' GROUP BY T1.birth_year;
SELECT COUNT(*) FROM movie JOIN made_by ON movie.mid = made_by.msid JOIN classification ON made_by.id = classification.id WHERE movie.title LIKE '%Iraq War%' AND movie.budget BETWEEN 20150000 AND 20159999;
SELECT COUNT(*) FROM movie JOIN made_by ON movie.mid = made_by.msid JOIN classification ON made_by.id = classification.id JOIN genre ON classification.gid = genre.gid WHERE genre.title LIKE '%Persian%' AND movie.year > 1990;
SELECT COUNT(*) FROM directed_by JOIN director ON directed_by.did = director.did JOIN movie ON directed_by.msid = movie.msid WHERE director.name = 'Quentin Tarantino' AND movie.year > 2010;
SELECT COUNT(*) FROM director JOIN directed_by ON director.did = directed_by.did JOIN made_by ON directed_by.msid = made_by.msid WHERE director.name = 'Quentin Tarantino' AND made_by.year < 2010;
SELECT COUNT(*) FROM directed_by AS d JOIN director AS dir ON d.did = dir.did WHERE dir.name = 'Quentin Tarantino' AND d.msid IN ( SELECT msid FROM made_by WHERE year < 2002 ) AND d.msid IN ( SELECT msid FROM made_by WHERE year > 2010 );
SELECT COUNT(*) FROM actor WHERE gender = 'F' AND birth_city = 'New York City' AND birth_year > 1980;
SELECT COUNT(DISTINCT actor.aid) FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.id = made_by.pid JOIN company ON made_by.id = company.id WHERE actor.birth_city = 'Iran' AND company.name = 'Jim Jarmusch';
SELECT COUNT(DISTINCT actor.aid) FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.id = made_by.msid WHERE actor.birth_city = 'China' AND made_by.name = 'Rush Hour 3';
SELECT msid FROM cast WHERE aid IN (SELECT aid FROM actor WHERE name = 'Woody Strode') INTERSECT SELECT msid FROM cast WHERE aid IN (SELECT aid FROM actor WHERE name = 'Jason Robards');
SELECT mid FROM cast WHERE id IN (SELECT id FROM actor WHERE name = 'Woody Strode') INTERSECT SELECT mid FROM cast WHERE id IN (SELECT id FROM actor WHERE name = 'Jason Robards');
SELECT DISTINCT m.title_aka FROM movie m JOIN made_by mb ON m.mid = mb.msid JOIN actor a ON mb.id = a.name WHERE a.name IN ('Woody Strode', 'Jason Robards') GROUP BY m.title_aka HAVING COUNT(DISTINCT a.name) = 2;
SELECT mid FROM movie JOIN made_by ON movie.mid = made_by.msid JOIN actor ON made_by.id = actor.name WHERE actor.name IN ('Jason Robards', 'Woody Strode') GROUP BY movie.mid HAVING COUNT(DISTINCT actor.name) = 2;
SELECT DISTINCT a1.aid FROM actor AS a1 JOIN cast AS c1 ON a1.aid = c1.aid JOIN cast AS c2 ON c1.id = c2.id JOIN actor AS a2 ON a2.aid = c2.aid AND a2.name = 'Tom Hanks'
SELECT T1.title_aka FROM `movie` AS T1 INNER JOIN `directed_by` AS T2 ON T1.mid = T2.id INNER JOIN `director` AS T3 ON T2.did = T3.did WHERE T3.name IN (SELECT T4.name FROM `movie` AS T5 INNER JOIN `directed_by` AS T6 ON T5.mid = T6.id INNER JOIN `director` AS T4 ON T6.did = T4.did WHERE T5.title_aka = 'Revolutionary Road')
SELECT mid FROM movie JOIN classification ON movie.msid = classification.msid JOIN genre ON classification.id = genre.gid GROUP BY movie.mid ORDER BY COUNT(DISTINCT genre.genre) DESC LIMIT 1;
SELECT title_aka FROM movie WHERE mid IN (SELECT msid FROM made_by WHERE pid IN (SELECT pid FROM producer WHERE nationality = 'China') GROUP BY msid ORDER BY COUNT(*) DESC LIMIT 1);
SELECT DISTINCT actor.aid FROM actor JOIN made_by ON actor.aid = made_by.id JOIN movie ON made_by.msid = movie.mid WHERE movie.title LIKE '%Quentin Tarantino%' AND movie.release_year = ( SELECT MAX(release_year) FROM movie WHERE title LIKE '%Quentin Tarantino%' )
SELECT title, budget FROM movie WHERE director = (SELECT did FROM directed_by WHERE director = 'Quentin Tarantino' ORDER BY release_year DESC LIMIT 1) LIMIT 1;
SELECT title_aka FROM movie WHERE mid = (SELECT mid FROM made_by WHERE id = (SELECT did FROM director WHERE name = 'Jim Jarmusch') ORDER BY release_year DESC LIMIT 1);
SELECT pid FROM made_by GROUP BY pid ORDER BY COUNT(DISTINCT did) DESC LIMIT 1;
SELECT title_aka FROM movie WHERE mid = (SELECT id FROM made_by WHERE msid = (SELECT id FROM cast WHERE aid = (SELECT aid FROM actor WHERE name = 'Gabriele Ferzetti') ORDER BY release_year DESC LIMIT 1))
SELECT customer_id FROM customers ORDER BY customer_id ASC;
SELECT customer_id FROM customers ORDER BY customer_id ASC;
SELECT policy_type_code FROM policies INNER JOIN customers ON policies.customer_id = customers.customer_id WHERE customer_details = 'Dayana Robel';
SELECT policy_type_code FROM policies INNER JOIN customers ON policies.customer_id = customers.customer_id WHERE customer_details = 'Dayana Robel';
SELECT policy_id FROM policies GROUP BY policy_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT claim_type_code FROM claim_headers JOIN policies ON claim_headers.policy_id = policies.policy_id GROUP BY claim_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT policy_id FROM policies GROUP BY policy_id HAVING COUNT(DISTINCT customer_id) > 2;
SELECT policy_id FROM policies GROUP BY policy_id HAVING COUNT(DISTINCT customer_id) > 2;
SELECT SUM(amount_claimed) AS total_amount_paid, AVG(amount_claimed) AS average_amount_paid FROM claim_headers;
SELECT SUM(amount_claimed) AS total_amount_paid, AVG(amount_claimed) AS average_amount_paid FROM claim_headers;
SELECT SUM(amount_piad) FROM claim_headers JOIN claims_documents ON claim_headers.claim_header_id = claims_documents.claim_id WHERE claims_documents.created_by_staff_id = ( SELECT created_by_staff_id FROM claims_documents ORDER BY created_at DESC LIMIT 1 );
SELECT SUM(amount_paid) FROM claim_headers WHERE claim_header_id IN (SELECT claim_id FROM claims_documents ORDER BY created_by_staff_id DESC LIMIT 1);
SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM claim_headers WHERE amount_paid = (SELECT MAX(amount_paid) FROM claim_headers));
SELECT T1.* FROM customers AS T1 JOIN claim_headers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(T2.amount_paid) DESC LIMIT 1;
SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM claim_headers WHERE amount_paid = (SELECT MIN(amount_paid) FROM claim_headers));
SELECT T1.* FROM customers AS T1 JOIN claim_headers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(T2.amount_paid) ASC LIMIT 1;
SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM policies)
SELECT customer_details FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM policies)
SELECT COUNT(*) FROM claims_processing_stages;
SELECT COUNT(DISTINCT claims_processing_stages.next_claim_stage_id) FROM claims_processing_stages;
SELECT claim_status_name FROM claims_processing_stages WHERE claim_status_id IN (SELECT next_claim_stage_id FROM claims_processing GROUP BY next_claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT claim_status_description FROM claims_processing_stages WHERE claim_stage_id = (SELECT next_claim_stage_id FROM claims_processing GROUP BY next_claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT customer_id FROM customers WHERE customer_id LIKE '%Diana%';
SELECT * FROM customers WHERE customer_id LIKE '%Diana%';
SELECT T3.customer_details FROM policies AS T1 INNER JOIN customers AS T3 ON T1.customer_id = T3.customer_id WHERE T1.policy_type_code = 'deputy'
SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_type_code = 'Deputy'));
SELECT DISTINCT T3.customer_details FROM policies AS T1 INNER JOIN customers AS T3 ON T1.customer_id = T3.customer_id WHERE T1.policy_type_code IN ('deputy', 'uniformed')
SELECT DISTINCT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.policy_type_code IN ('Deputy', 'Uniform');
SELECT customer_details FROM customers UNION SELECT staff_id FROM staff;
SELECT customer_id FROM customers UNION SELECT staff_id FROM staff;
SELECT policy_id, COUNT(*) AS record_count FROM policies GROUP BY policy_id;
SELECT policy_id, COUNT(*) FROM policies GROUP BY policy_id;
SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM policies GROUP BY customer_id ORDER BY COUNT(policy_id) DESC LIMIT 1);
SELECT customer_details FROM customers WHERE customer_id = (SELECT customer_id FROM policies GROUP BY customer_id ORDER BY COUNT(policy_id) DESC LIMIT 1);
SELECT description FROM claims_processing_stages WHERE claim_status_name = 'Open';
SELECT description FROM claims_processing_stages WHERE claim_status_name = 'Open';
SELECT COUNT(DISTINCT claim_status_code) FROM claim_headers;
SELECT COUNT(DISTINCT claim_status_code) FROM claim_headers;
SELECT customers.customer_details FROM policies INNER JOIN customers ON policies.customer_id = customers.customer_id ORDER BY policies.start_date DESC LIMIT 1;
SELECT customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id ORDER BY policies.start_date DESC LIMIT 1;
SELECT event_details FROM events WHERE event_id IN (SELECT event_id FROM services WHERE service_type_code = 'Marriage');
SELECT event_id, event_details FROM events WHERE event_id IN (SELECT event_id FROM participants_in_events GROUP BY event_id HAVING COUNT(*) > 1);
SELECT T2.participant_id, T2.participant_type_code, COUNT(*) FROM `participants_in_events` AS T1 INNER JOIN `participants` AS T2 ON T1.participant_id = T2.participant_id GROUP BY T2.participant_id, T2.participant_type_code;
SELECT T1.participant_id, T4.service_type_code, T1.participant_details FROM participants AS T1 INNER JOIN participants_in_events AS T2 ON T1.participant_id = T2.participant_id INNER JOIN events AS T3 ON T2.event_id = T3.event_id INNER JOIN services AS T4 ON T3.service_id = T4.service_id;
SELECT COUNT(DISTINCT participants.participant_id) FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id WHERE services.service_type_code = 'Organizer';
SELECT DISTINCT participant_type_code FROM participants_in_events JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id ORDER BY participant_type_code ASC;
SELECT services.service_id, events.event_details FROM events INNER JOIN services ON events.service_id = services.service_id;
SELECT COUNT(*) FROM events JOIN participants_in_events ON events.event_id = participants_in_events.event_id JOIN participants ON participants_in_events.participant_id = participants.participant_id WHERE participant_details LIKE '%Dr.%';
SELECT participant_details FROM participants GROUP BY participant_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT service_id, service_type_code FROM services JOIN events ON events.service_id = services.service_id JOIN participants_in_events ON participants_in_events.event_id = events.event_id GROUP BY services.service_id, service_type_code ORDER BY COUNT(participants_in_events.participant_id) ASC LIMIT 1;
SELECT event_id FROM participants_in_events GROUP BY event_id ORDER BY COUNT(participant_id) DESC LIMIT 1;
SELECT events.event_id FROM events LEFT JOIN participants_in_events ON events.event_id = participants_in_events.event_id LEFT JOIN participants ON participants_in_events.participant_id = participants.participant_id WHERE participants.participant_type_code = 'Kenyatta Kuhn' AND participants_in_events.event_id IS NULL;
SELECT services.service_id FROM events INNER JOIN services ON events.service_id = services.service_id WHERE event_details IN ('successful', 'failure') GROUP BY services.service_id HAVING COUNT(DISTINCT event_details) = 2;
SELECT COUNT(*) FROM events WHERE event_id NOT IN (SELECT event_id FROM participants_in_events)
SELECT DISTINCT participant_id FROM participants_in_events;
SELECT COUNT(*) FROM technician;
SELECT COUNT(*) FROM technician;
SELECT technician_id FROM technician ORDER BY age ASC;
SELECT technician_id FROM technician ORDER BY age ASC;
SELECT team, making_year FROM technician INNER JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id INNER JOIN machine ON repair_assignment.machine_id = machine.machine_id;
SELECT team, making_year FROM technician INNER JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id INNER JOIN machine ON repair_assignment.machine_id = machine.machine_id;
SELECT name FROM technician WHERE technician_id IN (SELECT technician_id FROM repair_assignment JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE team != 'NYY');
SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE team = 'NYY');
SELECT technician_id FROM technician WHERE age = 36 OR age = 37;
SELECT DISTINCT technician_id FROM technician WHERE age IN (36, 37);
SELECT making_year FROM machine WHERE team IN (SELECT team FROM technician WHERE age = (SELECT MIN(age) FROM technician)) LIMIT 1;
SELECT making_year FROM machine WHERE machine_id = (SELECT machine_id FROM repair_assignment WHERE technician_id = (SELECT technician_id FROM technician ORDER BY age DESC LIMIT 1));
SELECT class, COUNT(*) AS technician_count FROM machine JOIN repair_assignment ON machine.machine_id = repair_assignment.machine_id JOIN technician ON repair_assignment.technician_id = technician.technician_id GROUP BY class;
SELECT COUNT(technician_id) AS technician_count, team FROM technician GROUP BY team;
SELECT team FROM technician GROUP BY team ORDER BY COUNT(*) DESC LIMIT 1;
SELECT team FROM (SELECT technician_id, COUNT(*) AS tech_count FROM technician GROUP BY team) AS subquery ORDER BY tech_count DESC LIMIT 1;
SELECT team FROM ( SELECT technician_id, COUNT(*) OVER(PARTITION BY team) AS tech_count FROM technician ) subquery WHERE tech_count >= 2
SELECT T1.name FROM `technician` AS T1 JOIN `repair_assignment` AS T2 ON T1.technician_id = T2.technician_id GROUP BY T1.name HAVING COUNT(T1.technician_id) >= 2;
SELECT technician.name, machine.machine_series FROM repair_assignment JOIN technician ON repair_assignment.technician_id = technician.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id;
SELECT technician.name, machine.machine_series FROM repair_assignment JOIN technician ON repair_assignment.technician_id = technician.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id;
SELECT T2.name FROM repair_assignment AS T1 INNER JOIN technician AS T2 ON T1.technician_id = T2.technician_id INNER JOIN machine AS T3 ON T1.machine_id = T3.machine_id ORDER BY T3.quality_rank ASC
SELECT T2.technician_id FROM repair_assignment AS T1 INNER JOIN technician AS T2 ON T1.technician_id = T2.technician_id INNER JOIN machine AS T3 ON T1.machine_id = T3.machine_id ORDER BY T3.quality_rank ASC;
SELECT distinct technician.name FROM repair_assignment JOIN machine ON repair_assignment.machine_id = machine.machine_id JOIN technician ON repair_assignment.technician_id = technician.technician_id WHERE machine.value_points > 70;
SELECT distinct technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.value_points > 70;
SELECT technician.name, COUNT(DISTINCT repair_assignment.machine_id) FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.name;
SELECT technician.name, COUNT(repair_assignment.machine_id) AS machines_assigned FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.name;
SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment);
SELECT name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)
SELECT DISTINCT starting_year FROM technician WHERE team IN ('CLE', 'CWS')
SELECT DISTINCT starting_year FROM technician WHERE team IN ('CLE', 'CWS');
SELECT COUNT(*) FROM camera_lens WHERE focal_length > 15;
SELECT brand, name FROM camera_lens ORDER BY focal_length_mm DESC;
SELECT id, name FROM photos;
SELECT max(height), avg(height) FROM mountain;
SELECT AVG(height) FROM mountain WHERE country = 'Morocco';
SELECT name, height, prominence FROM mountain WHERE range != 'Aberdare Range'
SELECT id, name FROM photos;
SELECT mountain.id, mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id GROUP BY mountain.id, mountain.name HAVING COUNT(*) >= 2;
SELECT camera_lens.name FROM camera_lens JOIN photos ON camera_lens.id = photos.camera_lens_id GROUP BY camera_lens.name ORDER BY COUNT(DISTINCT photos.mountain_id) DESC LIMIT 1;
SELECT name FROM photos WHERE camera_lens_id IN (SELECT id FROM camera_lens WHERE name = 'Sigma' OR name = 'Olympus');
SELECT COUNT(DISTINCT name) FROM camera_lens;
SELECT COUNT(*) FROM camera_lens WHERE id NOT IN (SELECT camera_lens_id FROM photos);
SELECT COUNT(DISTINCT camera_lens.name) FROM photos JOIN mountain ON photos.mountain_id = mountain.id JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE mountain.country = 'Ethiopia';
SELECT DISTINCT camera_lens.brand FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE photos.mountain_id IN ( SELECT mountain.id FROM mountain WHERE mountain.range = 'Toubkal Atlas' ) INTERSECT SELECT DISTINCT camera_lens.brand FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE photos.mountain_id IN ( SELECT mountain.id FROM mountain WHERE mountain.range = 'Lasta Massif' );
SELECT mountain.name, mountain.prominence FROM mountain LEFT JOIN photos ON mountain.id = photos.mountain_id LEFT JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.brand != 'Sigma' GROUP BY mountain.id;
SELECT brand FROM camera_lens WHERE brand LIKE '%Digital%';
SELECT camera_lens.name, COUNT(photos.id) AS photo_count FROM camera_lens JOIN photos ON camera_lens.id = photos.camera_lens_id GROUP BY camera_lens.name ORDER BY photo_count DESC;
SELECT COUNT(*) FROM band;
SELECT COUNT(*) FROM band;
SELECT DISTINCT type FROM albums;
SELECT DISTINCT type FROM albums;
SELECT title FROM albums WHERE type = 'album' AND label = '2012';
SELECT * FROM albums WHERE type = 'album' AND title LIKE '2012%';
SELECT DISTINCT band.lastname FROM band JOIN performance ON band.id = performance.bandmate WHERE band.lastname LIKE 'Solveig%'
SELECT DISTINCT position FROM band JOIN performance ON band.id = performance.bandmate WHERE band.firstname = 'Solveig';
SELECT COUNT(*) FROM songs;
SELECT COUNT(*) FROM songs;
SELECT songs.songid FROM performance INNER JOIN band ON performance.bandmate = band.id WHERE band.firstname = "Heilo";
SELECT songs.* FROM songs JOIN band ON songs.songid = band.id WHERE band.firstname LIKE '%Heilo';
SELECT COUNT(DISTINCT performance.bandmate) FROM performance JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Flash';
SELECT COUNT(DISTINCT performance.bandmate) FROM performance JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Flash';
SELECT songs.songid FROM songs JOIN band ON songs.artistid = band.id WHERE band.firstname = 'Marianne';
SELECT songs.* FROM songs JOIN band ON songs.band_id = band.id WHERE band.firstname = 'Marianne'
SELECT band.lastname, band.firstname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON songs.songid = performance.songid WHERE songs.title = 'Badlands';
SELECT T2.firstname, T2.lastname FROM performance AS T1 INNER JOIN band AS T2 ON T1.bandmate = T2.id INNER JOIN songs AS T3 ON T1.songid = T3.songid WHERE T3.title = 'Badlands' LIMIT 1;
SELECT firstname, lastname FROM band WHERE id IN (SELECT bandmate FROM performance WHERE songid = (SELECT songid FROM songs WHERE title = 'Badlands') AND position = 'back stage');
SELECT band.firstname, band.lastname FROM performance JOIN band ON performance.bandmate = band.id JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Badlands' AND performance.bandmate = 'back stage'
SELECT COUNT(DISTINCT type) FROM albums;
SELECT DISTINCT type FROM albums;
SELECT label FROM albums GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1;
SELECT label FROM albums GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1;
SELECT firstname FROM band WHERE id IN (SELECT band_id FROM songs GROUP BY band_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT firstname FROM band WHERE id IN (SELECT band_id FROM songs GROUP BY band_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT T2.firstname FROM `vocals` AS T1 INNER JOIN `band` AS T2 ON T1.bandmate = T2.id WHERE T1.type = 'back' GROUP BY T1.bandmate ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T2.firstname FROM `performance` AS T1 INNER JOIN `band` AS T2 ON T1.bandmate = T2.id WHERE T1.songid IN (SELECT `songid` FROM `vocals` WHERE `type` = 'back') GROUP BY T1.bandmate ORDER BY COUNT(T1.songid) DESC LIMIT 1;
SELECT songid FROM songs WHERE song LIKE '%the%';
SELECT songid FROM songs WHERE title LIKE '%the%';
SELECT DISTINCT instrument FROM instruments;
SELECT DISTINCT instrument FROM instruments;
SELECT instruments.* FROM instruments JOIN songs ON instruments.songid = songs.songid JOIN band ON instruments.bandmateid = band.id WHERE songs.title = 'Le Pop' AND band.firstname = 'Heilo';
SELECT instruments.* FROM instruments JOIN songs ON instruments.songid = songs.songid JOIN band ON instruments.bandmateid = band.id WHERE songs.title = 'Le Pop' AND band.lastname = 'Heilo';
SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1;
SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM instruments WHERE instrument = 'drums';
SELECT COUNT(*) FROM instruments WHERE bandmateid = 'drums';
SELECT instrument FROM instruments WHERE songid IN (SELECT songid FROM songs WHERE title = 'Le Pop');
SELECT instrument FROM instruments WHERE songid IN (SELECT songid FROM songs WHERE title = 'Le Pop')
SELECT COUNT(DISTINCT instruments.instrument) FROM songs JOIN instruments ON songs.songid = instruments.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(DISTINCT instruments.bandmateid) FROM instruments JOIN songs ON instruments.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(*) FROM instruments WHERE bandmateid IN (SELECT id FROM band WHERE firstname = 'Heilo');
SELECT COUNT(DISTINCT instruments.songid) FROM instruments INNER JOIN band ON instruments.bandmateid = band.id WHERE band.firstname = 'Heilo';
SELECT instrument FROM instruments JOIN band ON instruments.bandmateid = band.id WHERE band.lastname = 'Heilo';
SELECT instrument FROM instruments JOIN band ON instruments.bandmateid = band.id WHERE band.firstname = 'Heilo';
SELECT title FROM songs WHERE songid IN (SELECT songid FROM vocals GROUP BY songid ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT title FROM songs WHERE songid IN (SELECT songid FROM vocals GROUP BY songid ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT vocals.bandmate FROM vocals GROUP BY vocals.bandmate ORDER BY COUNT(*) DESC LIMIT 1;
SELECT vocables FROM vocals GROUP BY vocables ORDER BY COUNT(*) DESC LIMIT 1;
SELECT vocals.type FROM vocals JOIN band ON vocals.bandmate = band.id WHERE band.firstname = 'Heilo' GROUP BY vocals.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type FROM vocals WHERE bandmate IN (SELECT id FROM band WHERE lastname = 'Heilo') GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type FROM vocals WHERE songid IN (SELECT songid FROM songs WHERE title = 'Le Pop');
SELECT DISTINCT vocals.bandmate FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(DISTINCT vocals.type) FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Demon Kitty Rag';
SELECT DISTINCT vocals.bandmate FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Demon Kitty Rag';
SELECT COUNT(*) FROM vocals WHERE type = 'lead';
SELECT COUNT(*) FROM vocals WHERE bandmate = 'lead';
SELECT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN band ON vocals.bandmate = band.id WHERE band.firstname = 'Solveig' AND songs.title = 'A Bar in Amsterdam';
SELECT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN band ON vocals.bandmate = band.id WHERE band.firstname = 'Solveig' AND songs.title = 'A Bar in Amsterdam';
SELECT title FROM songs WHERE songid NOT IN (SELECT songid FROM vocals WHERE type = 'lead');
SELECT title FROM songs WHERE songid NOT IN (SELECT songid FROM vocals WHERE type = 'lead');
SELECT DISTINCT bandmate FROM vocals;
SELECT DISTINCT vocals FROM vocals;
SELECT title FROM albums WHERE type = 'album' AND label = 'produced in year 2010';
SELECT title, label, type FROM albums WHERE type = 'album' AND title LIKE '%2010%';
SELECT bandmate FROM performance WHERE songid = (SELECT songid FROM songs WHERE title = 'Le Pop')
SELECT band.lastname, band.firstname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Le Pop' LIMIT 1;
SELECT firstname FROM band WHERE id IN (SELECT band_id FROM songs GROUP BY band_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT firstname FROM band WHERE id IN (SELECT band_id FROM songs GROUP BY band_id ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT instruments FROM instruments JOIN songs ON instruments.songid = songs.songid JOIN band ON instruments.bandmateid = band.id WHERE band.firstname = 'Heilo' AND songs.title = 'Badlands';
SELECT instruments FROM instruments INNER JOIN songs ON instruments.songid = songs.songid INNER JOIN band ON instruments.bandmateid = band.id WHERE band.lastname = 'Heilo' AND songs.title = 'Badlands';
SELECT COUNT(DISTINCT instruments.instrument) FROM songs JOIN instruments ON songs.songid = instruments.songid WHERE songs.title = 'Badlands';
SELECT COUNT(DISTINCT instruments.bandmateid) FROM songs JOIN instruments ON songs.songid = instruments.songid WHERE songs.title = 'Badlands';
SELECT type FROM vocals WHERE songid IN (SELECT songid FROM songs WHERE title = 'Badlands');
SELECT type FROM vocals WHERE songid IN (SELECT songid FROM songs WHERE title = 'Badlands');
SELECT COUNT(DISTINCT vocals.type) FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(DISTINCT vocals.type) FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(*) FROM ( SELECT songid FROM vocals GROUP BY songid HAVING COUNT(*) > 1 ) AS shared_vocals;
SELECT COUNT(DISTINCT vocals.songid) FROM vocals WHERE vocals.bandmate != 'lead';
SELECT title FROM songs WHERE songid NOT IN (SELECT songid FROM vocals WHERE type = 'back vocal');
SELECT DISTINCT title FROM songs WHERE songid NOT IN (SELECT songid FROM vocals WHERE type = 'back');
SELECT vocals.type FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE band.firstname = 'Solveig' GROUP BY vocals.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type FROM vocals WHERE bandmate IN (SELECT id FROM band WHERE firstname = 'Solveig') GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN band ON vocals.bandmate = band.id WHERE band.lastname = 'Heilo' AND songs.title = 'Der Kapitan';
SELECT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN band ON vocals.bandmate = band.id WHERE band.lastname = 'Heilo' AND songs.title = 'Der Kapitan';
SELECT band.lastname FROM performance INNER JOIN band ON performance.bandmate = band.id GROUP BY band.lastname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT firstname FROM band WHERE id IN (SELECT bandmate FROM performance GROUP BY bandmate ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT vocals.type FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE band.firstname = 'Marianne' GROUP BY vocals.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT vocals.type FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE band.firstname = 'Marianne' GROUP BY vocals.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT firstname, lastname FROM band WHERE id IN (SELECT bandmate FROM performance WHERE songid = (SELECT songid FROM songs WHERE title = 'Der Kapitan') AND bandmate NOT IN (SELECT bandmate FROM vocals WHERE type = 'lead'));
SELECT band.firstname, band.lastname FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN band ON vocals.bandmate = band.id WHERE songs.title = 'Der Kapitan' AND vocals.type = 'back stage';
SELECT title FROM songs WHERE songid NOT IN (SELECT songid FROM vocals WHERE type = 'back vocal');
SELECT title FROM songs WHERE songid NOT IN (SELECT songid FROM vocals WHERE type = 'back');
SELECT title FROM songs WHERE songid IN (SELECT songid FROM tracklists WHERE albumid = (SELECT aid FROM albums WHERE title = 'A Kiss Before You Go: Live in Hamburg'))
SELECT songs.title FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'A Kiss Before You Go: Live in Hamburg';
SELECT songs.songid FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.label = 'Universal Music Group';
SELECT title FROM songs WHERE songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE label = 'Universal Music Group'));
SELECT COUNT(*) FROM songs WHERE songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE type = 'studio'));
SELECT COUNT(*) FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.type = 'studio';
SELECT gender_mf FROM customers WHERE coupon_id IN (SELECT coupon_id FROM discount_coupons WHERE amount_paid_in_full_yn = 'y' AND amount_paid = 500)
SELECT customers.customer_id, customers.first_name, COUNT(bookings.booking_id) FROM customers JOIN bookings ON customers.customer_id = bookings.customer_id GROUP BY customers.customer_id, customers.first_name;
SELECT customer_id, MAX(amount_paid) AS max_total_amount_paid FROM payments GROUP BY customer_id;
SELECT T1.booking_id, T3.amount_paid FROM `bookings` AS T1 INNER JOIN `payments` AS T3 ON T1.booking_id = T3.booking_id GROUP BY T1.booking_id ORDER BY COUNT(T3.payment_id) DESC LIMIT 1;
SELECT product_id FROM products_booked WHERE booked_count = 3;
SELECT product_name FROM products_for_hire WHERE product_id IN (SELECT product_id FROM products_booked WHERE booking_id IN (SELECT booking_id FROM bookings WHERE amount_payable = 102.76));
SELECT bookings.booking_start_date, bookings.booking_end_date FROM bookings JOIN products_booked ON bookings.booking_id = products_booked.booking_id JOIN products_for_hire ON products_booked.product_id = products_for_hire.product_id WHERE products_for_hire.product_name = 'Book collection A';
SELECT product_name FROM products_for_hire WHERE product_id IN (SELECT product_id FROM view_product_availability WHERE status_date = 1);
SELECT COUNT(DISTINCT product_name) FROM products_for_hire;
SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name;
SELECT AVG(amount_paid) FROM payments;
SELECT MAX(booked_amount), MIN(booked_amount), AVG(booked_amount) FROM products_booked;
SELECT distinct payment_type FROM payments;
SELECT product_description FROM products_for_hire WHERE product_name LIKE '%Book%' AND product_description LIKE '%daily hire cost:%'
SELECT COUNT(DISTINCT products_for_hire.product_id) FROM products_for_hire LEFT JOIN products_booked ON products_for_hire.product_id = products_booked.product_id LEFT JOIN bookings ON products_booked.booking_id = bookings.booking_id WHERE bookings.amount_payable <= 200 OR products_booked.booking_id IS NULL;
SELECT DISTINCT discount_coupons.coupon_id FROM discount_coupons JOIN customers ON discount_coupons.coupon_id = customers.coupon_id WHERE customer_id IN ( SELECT customer_id FROM payments WHERE payment_type_code = 'full' GROUP BY customer_id HAVING SUM(amount_paid_in_full_yn) > 0 AND SUM(amount_paid_in_full_yn) < COUNT(*) );
SELECT payment_date FROM payments WHERE amount_paid > 300 OR amount_paid_in_full_yn = 'Check';
SELECT product_name, product_description FROM products_for_hire WHERE product_description = 'Cutlery' AND daily_hire_cost < 20;
SELECT resid, address, rating FROM restaurant;
SELECT address FROM restaurant WHERE restypename = 'Subway';
SELECT rating FROM restaurant WHERE resid = (SELECT resid FROM type_of_restaurant WHERE restypename = 'Subway');
SELECT restypedescription FROM restaurant_type;
SELECT restypedescription FROM restaurant_type WHERE restypeid = (SELECT restypeid FROM type_of_restaurant WHERE resid IN (SELECT resid FROM restaurant WHERE resname = 'Sandwich'));
SELECT restaurant.resid, restaurant.rating FROM restaurant ORDER BY restaurant.rating DESC LIMIT 1;
SELECT age FROM student WHERE lname = 'Smith' AND fname = 'Linda';
SELECT sex FROM student WHERE lname = 'Smith' AND fname = 'Linda';
SELECT fname FROM student WHERE major = 600;
SELECT city_code FROM student WHERE lname = 'Smith' AND fname = 'Linda';
SELECT COUNT(student.stuid) FROM student WHERE student.advisor = 1121;
SELECT advisor, COUNT(*) as num_students FROM student GROUP BY advisor ORDER BY num_students DESC LIMIT 1;
SELECT major, COUNT(*) FROM student GROUP BY major ORDER BY COUNT(*) ASC LIMIT 1;
SELECT major, count(*) FROM student GROUP BY major HAVING count(*) BETWEEN 2 AND 30;
SELECT fname FROM student WHERE age > 18 AND major = 600;
SELECT fname FROM student WHERE age > 18 AND sex = 'F' AND major != 600;
SELECT COUNT(*) FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid WHERE restaurant_type.restypedescription = 'Sandwich';
SELECT SUM(spent) FROM visits_restaurant JOIN student ON visits_restaurant.stuid = student.stuid WHERE student.fname = 'Linda' AND student.lname = 'Smith';
SELECT COUNT(*) FROM visits_restaurant vr JOIN student s ON vr.stuid = s.stuid JOIN restaurant r ON vr.resid = r.resid WHERE s.fname = 'Linda' AND s.lname = 'Smith' AND r.resname = 'Subway';
SELECT time FROM visits_restaurant JOIN student ON visits_restaurant.stuid = student.stuid JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE student.fname = 'Linda' AND student.lname = 'Smith' AND restaurant.resname = 'Subway';
SELECT restaurant.resid, SUM(visits_restaurant.time) AS total_time_spent FROM visits_restaurant JOIN restaurant ON visits_restaurant.resid = restaurant.resid GROUP BY restaurant.resid ORDER BY total_time_spent ASC LIMIT 1;
SELECT student.fname, student.lname FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid GROUP BY student.stuid ORDER BY COUNT(visits_restaurant.resid) DESC LIMIT 1;
SELECT COUNT(DISTINCT last_name) FROM actor;
SELECT COUNT(DISTINCT last_name) FROM actor;
SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT first_name, last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id ORDER BY COUNT(film_actor.film_id) DESC LIMIT 1;
SELECT last_name FROM actor GROUP BY last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT district FROM address GROUP BY district HAVING COUNT(*) >= 2;
SELECT district FROM ( SELECT district, COUNT(*) AS address_count FROM address GROUP BY district ) AS subquery WHERE address_count >= 2;
SELECT phone, postal_code FROM address WHERE address_id = 1031;
SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway';
SELECT city.city, COUNT(address.address_id) AS num_addresses, city.city_id FROM city JOIN address ON city.city_id = address.city_id GROUP BY city.city_id ORDER BY num_addresses DESC LIMIT 1;
SELECT city.city, city.city_id, COUNT(address.address_id) AS num_addresses FROM city JOIN address ON city.city_id = address.city_id GROUP BY city.city_id ORDER BY num_addresses DESC LIMIT 1;
SELECT COUNT(*) FROM address WHERE district = 'California';
SELECT COUNT(*) FROM address WHERE address LIKE '%California%';
SELECT title, film_id FROM film WHERE rental_rate = 0.99 AND film_id IN (SELECT film_id FROM inventory GROUP BY film_id HAVING count(*) < 3);
SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING count(*) < 3;
SELECT COUNT(city.city_id) FROM city JOIN country ON city.country_id = country.country_id WHERE country.country_id = (SELECT country_id FROM country WHERE country = 'Australia');
SELECT COUNT(city.city_id) FROM city JOIN country ON city.country_id = country.country_id WHERE country.country_id = 'Australia';
SELECT country.country FROM country JOIN city ON country.country_id = city.country_id GROUP BY country.country HAVING COUNT(city.city_id) >= 3;
SELECT country FROM country JOIN city ON country.country_id = city.country_id GROUP BY country HAVING COUNT(city.city_id) >= 3;
SELECT payment_date FROM payment JOIN staff ON payment.staff_id = staff.staff_id WHERE payment.amount > 10 AND staff.first_name = 'Elsa';
SELECT payment_date FROM payment WHERE amount > 10 OR staff_id IN ( SELECT staff_id FROM staff WHERE first_name = 'Elsa' );
SELECT COUNT(customer_id) FROM customer WHERE active = 1;
SELECT COUNT(*) FROM customer;
SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1;
SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1;
SELECT title, film_id, description FROM film JOIN film_actor ON film.film_id = film_actor.film_id GROUP BY film.film_id ORDER BY COUNT(film_actor.actor_id) DESC LIMIT 1;
SELECT title, film_id, description FROM film INNER JOIN film_actor ON film.film_id = film_actor.film_id GROUP BY film.film_id ORDER BY COUNT(film_actor.actor_id) DESC LIMIT 1;
SELECT actor.first_name, actor.last_name, actor.actor_id FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id, actor.first_name, actor.last_name ORDER BY COUNT(film_actor.film_id) DESC LIMIT 1;
SELECT first_name, last_name, actor_id FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id, first_name, last_name ORDER BY COUNT(film_actor.film_id) DESC LIMIT 1;
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id, actor.first_name, actor.last_name HAVING COUNT(film_actor.film_id) > 30;
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T1.actor_id HAVING COUNT(*) > 30;
SELECT store.store_id FROM store JOIN inventory ON store.store_id = inventory.store_id GROUP BY store.store_id ORDER BY COUNT(inventory.inventory_id) DESC LIMIT 1;
SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(inventory_id) DESC LIMIT 1;
SELECT SUM(amount) FROM payment;
SELECT SUM(amount) FROM payment;
SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(T2.amount) ASC LIMIT 1;
SELECT customer.first_name, customer.last_name, customer.customer_id FROM customer INNER JOIN payment ON customer.customer_id = payment.customer_id GROUP BY customer.customer_id ORDER BY SUM(payment.amount) ASC LIMIT 1;
SELECT t3.name FROM film AS t1 INNER JOIN film_category AS t2 ON t1.film_id = t2.film_id INNER JOIN category AS t3 ON t2.category_id = t3.category_id WHERE t1.title = 'HUNGER ROOF' LIMIT 1;
SELECT T2.name FROM film AS T1 INNER JOIN film_category AS T3 ON T1.film_id = T3.film_id INNER JOIN category AS T2 ON T3.category_id = T2.category_id WHERE T1.title = 'HUNGER ROOF' LIMIT 1;
SELECT category.name, category.category_id, COUNT(film.film_id) AS film_count FROM category JOIN film_category ON category.category_id = film_category.category_id GROUP BY category.category_id, category.name;
SELECT name, category_id, COUNT(film_id) AS film_count FROM category JOIN film_category ON category.category_id = film_category.category_id GROUP BY category.category_id, name;
SELECT film.film_id, film.title FROM film JOIN inventory ON film.film_id = inventory.film_id GROUP BY film.film_id, film.title ORDER BY COUNT(inventory.inventory_id) DESC LIMIT 1;
SELECT title, film_id FROM film WHERE film_id = (SELECT film_id FROM inventory GROUP BY film_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT film.title, inventory.inventory_id FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN rental ON inventory.inventory_id = rental.inventory_id GROUP BY inventory.inventory_id ORDER BY COUNT(rental.rental_id) DESC LIMIT 1;
SELECT title, inventory_id FROM film INNER JOIN inventory ON film.film_id = inventory.film_id INNER JOIN rental ON inventory.inventory_id = rental.inventory_id GROUP BY inventory_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT language_id) FROM film;
SELECT COUNT(DISTINCT language_id) FROM film;
SELECT title FROM film WHERE rating = 'R';
SELECT title FROM film WHERE rating = 'R';
SELECT address FROM address WHERE address_id = (SELECT address_id FROM store WHERE store_id = 1);
SELECT address FROM store JOIN address ON store.address_id = address.address_id WHERE store.store_id = 1;
SELECT staff_id, first_name, last_name FROM staff WHERE staff_id IN (SELECT staff_id FROM payment GROUP BY staff_id ORDER BY COUNT(*) ASC LIMIT 1)
SELECT staff_id, first_name, last_name FROM staff WHERE staff_id IN (SELECT staff_id FROM payment GROUP BY staff_id ORDER BY COUNT(*) ASC LIMIT 1)
SELECT name FROM language WHERE language_id = (SELECT original_language_id FROM film WHERE title = 'AIRPORT POLLOCK');
SELECT T1.name FROM language AS T1 INNER JOIN film AS T2 ON T1.language_id = T2.language_id WHERE T2.title = 'AIRPORT POLLOCK' LIMIT 1;
SELECT COUNT(*) FROM store;
SELECT COUNT(*) FROM store;
SELECT COUNT(DISTINCT rating) FROM film;
SELECT COUNT(DISTINCT rating) FROM film;
SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%';
SELECT title FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = 'Deleted Scenes';
SELECT COUNT(inventory.inventory_id) FROM inventory JOIN store ON inventory.store_id = store.store_id WHERE store.store_id = 1;
SELECT COUNT(inventory.inventory_id) FROM inventory JOIN store ON inventory.store_id = store.store_id WHERE store.store_id = 1;
SELECT MIN(last_update) FROM payment;
SELECT MIN(last_update) FROM payment;
SELECT email, address FROM customer JOIN address ON customer.address_id = address.address_id WHERE first_name = 'Linda' LIMIT 1;
SELECT address.address2, customer.email FROM customer JOIN address ON customer.address_id = address.address_id WHERE customer.first_name = 'Linda' LIMIT 1;
SELECT title FROM film WHERE length > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200;
SELECT title FROM film WHERE (length > 100 OR rating = 'PG') AND replacement_cost <= 200;
SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1;
SELECT T1.first_name || ' ' || T1.last_name AS full_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_id LIMIT 1;
SELECT T1.first_name || ' ' || T1.last_name FROM staff AS T1 INNER JOIN rental AS T2 ON T1.staff_id = T2.staff_id INNER JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'April' AND T3.last_name = 'Burns' LIMIT 1;
SELECT DISTINCT staff.last_name || ', ' || staff.first_name AS full_staff_name FROM staff JOIN rental ON staff.staff_id = rental.staff_id JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'April' AND customer.last_name = 'Burns'
SELECT store.store_id FROM store JOIN customer ON store.store_id = customer.store_id GROUP BY store.store_id ORDER BY COUNT(customer.customer_id) DESC LIMIT 1;
SELECT store.store_id FROM store JOIN customer ON store.store_id = customer.store_id GROUP BY store.store_id ORDER BY COUNT(customer.customer_id) DESC LIMIT 1;
SELECT MAX(amount) FROM payment;
SELECT MAX(amount) FROM payment;
SELECT address FROM staff JOIN address ON staff.address_id = address.address_id WHERE staff.first_name = 'Elsa';
SELECT address.address2 FROM staff JOIN address ON staff.address_id = address.address_id WHERE staff.first_name = 'Elsa';
SELECT DISTINCT first_name FROM customer WHERE customer_id NOT IN (SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01')
SELECT DISTINCT T1.first_name FROM customer AS T1 WHERE NOT EXISTS(SELECT 1 FROM rental AS T2 INNER JOIN staff AS T3 ON T2.staff_id = T3.staff_id WHERE T2.customer_id = T1.customer_id AND T2.rental_date > '2005-08-23 02:06:01')
SELECT COUNT(*) FROM driver;
SELECT name, location, age FROM driver JOIN school ON driver.driver_id = school_bus.driver_id JOIN school ON school_bus.school_id = school.school_id;
SELECT home_city, COUNT(driver_id) FROM driver GROUP BY home_city;
SELECT driver_id FROM driver ORDER BY age DESC;
SELECT DISTINCT location FROM school;
SELECT location FROM school JOIN school_bus ON school.school_id = school_bus.school_id JOIN driver ON school_bus.driver_id = driver.driver_id GROUP BY location ORDER BY COUNT(*) DESC LIMIT 1;
SELECT party FROM driver WHERE location = 'Hartford' AND age > 40;
SELECT location FROM school WHERE school_id IN (SELECT school_id FROM school_bus WHERE driver_id IN (SELECT driver_id FROM driver WHERE age > 40) GROUP BY driver_id HAVING COUNT(*) > 1);
SELECT location FROM school WHERE school_id NOT IN (SELECT school_id FROM school_bus JOIN driver ON school_bus.driver_id = driver.driver_id WHERE driver.age > 40);
SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus);
SELECT grade FROM school GROUP BY grade HAVING COUNT(*) = 2;
SELECT school.name, driver.name FROM school_bus INNER JOIN school ON school_bus.school_id = school.school_id INNER JOIN driver ON school_bus.driver_id = driver.driver_id;
SELECT MAX(age) AS max_years, MIN(age) AS min_years, AVG(age) AS avg_years FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id;
SELECT school.name, school.type FROM school LEFT JOIN school_bus ON school.school_id = school_bus.school_id WHERE school_bus.school_id IS NULL;
SELECT type, COUNT(*) as number_of_buses FROM school JOIN school_bus ON school.school_id = school_bus.school_id GROUP BY type;
SELECT COUNT(*) FROM driver WHERE location = 'Hartford' OR age < 40;
SELECT name FROM driver WHERE age < 40 AND party = 'Hartford';
SELECT name FROM driver WHERE driver_id = (SELECT driver_id FROM school_bus ORDER BY years_working DESC LIMIT 1)
SELECT COUNT(*) FROM school;
SELECT COUNT(*) FROM school;
SELECT location FROM school ORDER BY enrollment ASC;
SELECT location FROM school ORDER BY founded ASC;
SELECT location FROM school ORDER BY founded_year DESC;
SELECT location FROM school ORDER BY enrollment DESC;
SELECT enrollment FROM school WHERE school_id NOT IN (SELECT school_id FROM school_details WHERE denomination = 'Catholic');
SELECT enrollment FROM school WHERE school_id NOT IN (SELECT school_id FROM school_details WHERE denomination = 'Catholic');
SELECT AVG(class) FROM school_details;
SELECT AVG(school_details.class) AS average_enrollment FROM school_details;
SELECT DISTINCT school.location FROM player INNER JOIN school ON player.school_id = school.school_id ORDER BY school.location ASC;
SELECT player, school_details.league FROM player INNER JOIN school_details ON player.school_id = school_details.school_id ORDER BY school_details.league ASC;
SELECT COUNT(DISTINCT position) FROM player;
SELECT COUNT(DISTINCT player_id) FROM player;
SELECT player_id FROM player WHERE age = (SELECT MAX(age) FROM player);
SELECT school.location FROM player INNER JOIN school ON player.school_id = school.school_id ORDER BY player.age DESC LIMIT 1;
SELECT DISTINCT school_details.league FROM player INNER JOIN school ON player.school_id = school.school_id INNER JOIN school_details ON school.school_id = school_details.school_id ORDER BY player.age DESC LIMIT 5;
SELECT T2.location FROM player AS T1 INNER JOIN school AS T2 ON T1.school_id = T2.school_id ORDER BY T1.age DESC LIMIT 5;
SELECT player.team, school.location FROM player JOIN school ON player.school_id = school.school_id;
SELECT team, school.location FROM player INNER JOIN school ON player.school_id = school.school_id;
SELECT location FROM school WHERE school_id IN (SELECT school_id FROM player GROUP BY school_id HAVING COUNT(*) > 1);
SELECT location FROM school WHERE school_id IN (SELECT school_id FROM player GROUP BY school_id HAVING COUNT(player) > 1);
SELECT denomination FROM school WHERE school_id = (SELECT school_id FROM player GROUP BY school_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT school FROM school JOIN player ON school.school_id = player.school_id GROUP BY school ORDER BY COUNT(*) DESC LIMIT 1;
SELECT school, nickname FROM school;
SELECT school.location, school.nickname FROM school;
SELECT denomination, COUNT(*) FROM school GROUP BY denomination;
SELECT denomination, COUNT(*) FROM school_details GROUP BY denomination;
SELECT denomination, COUNT(*) AS num_schools FROM school GROUP BY denomination ORDER BY num_schools DESC;
SELECT denomination, COUNT(*) AS school_count FROM school GROUP BY denomination ORDER BY school_count DESC;
SELECT school_colors FROM school WHERE school_id = (SELECT school_id FROM school_details ORDER BY enrollment DESC LIMIT 1)
SELECT school_colors FROM school INNER JOIN school_details ON school.school_id = school_details.school_id ORDER BY school_details.enrollment DESC LIMIT 1;
SELECT location FROM school WHERE school_id NOT IN (SELECT school_id FROM player);
SELECT location FROM school WHERE school_id NOT IN (SELECT school_id FROM player);
SELECT denomination FROM school WHERE school_id IN ( SELECT school_id FROM school WHERE founding_year < 1890 ) INTERSECT ( SELECT school_id FROM school WHERE founding_year > 1900 );
SELECT denomination FROM school WHERE school_id IN (SELECT school_id FROM school WHERE founding_year < 1890) INTERSECT SELECT denomination FROM school WHERE school_id IN (SELECT school_id FROM school WHERE founding_year > 1900);
SELECT school FROM school_details WHERE division != '1' INTERSECT SELECT school FROM school;
SELECT nickname FROM school_details WHERE division != 1;
SELECT denomination FROM school GROUP BY denomination HAVING COUNT(*) > 1;
SELECT denomination FROM school GROUP BY denomination HAVING COUNT(*) > 1;
SELECT country.name, league.name FROM country INNER JOIN league ON country.id = league.country_id;
SELECT COUNT(*) FROM league WHERE name = 'England';
SELECT AVG(weight) FROM player;
SELECT MAX(height), MIN(height) FROM player;
SELECT DISTINCT T1.player_name FROM `player` AS T1 INNER JOIN `player_attributes` AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > (SELECT AVG(overall_rating) FROM `player_attributes`)
SELECT DISTINCT T1.player_name FROM `player` AS T1 INNER JOIN `player_attributes` AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = (SELECT MAX(`dribbling`) FROM `player_attributes`)
SELECT DISTINCT T2.player_name FROM player_attributes AS T1 INNER JOIN player AS T2 ON T1.player_api_id = T2.player_api_id WHERE T1.crossing > 90 AND T2.preferred_foot = 'right'
SELECT DISTINCT T1.player_name FROM `player` AS T1 INNER JOIN `player_attributes` AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = 'Left' AND T1.overall_rating BETWEEN 85 AND 90;
SELECT preferred_foot, AVG(player_rating) FROM player_attributes JOIN player ON player_attributes.player_api_id = player.player_api_id GROUP BY preferred_foot;
SELECT COUNT(*) FROM player_attributes WHERE preferred_foot = 'right' AND player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE overall_rating > 80) UNION SELECT COUNT(*) FROM player_attributes WHERE preferred_foot = 'left' AND player_fifa_api_id IN (SELECT player_fifa_api_id FROM player WHERE overall_rating > 80);
SELECT player.id FROM player JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.height >= 180 AND player_attributes.overall_rating > 85;
SELECT player.player_api_id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id AND player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player_attributes.preferred_foot = 'Left' AND player.height BETWEEN 180 AND 190;
SELECT player_name FROM player p JOIN player_attributes pa ON p.player_api_id = pa.player_api_id ORDER BY pa.overall_rating DESC LIMIT 3;
SELECT `player_api_id`, `birthday` FROM `player` INNER JOIN `player_attributes` ON `player.player_api_id` = `player_attributes.player_api_id` ORDER BY `player_attributes.potential` DESC LIMIT 5;
SELECT district_name FROM district ORDER BY city_area DESC;
SELECT district_name FROM district ORDER BY city_area DESC;
SELECT dimensions FROM product GROUP BY dimensions HAVING COUNT(product_id) > 3;
SELECT MAX(area_size) FROM store WHERE store_id IN (SELECT store_id FROM store_product GROUP BY store_id HAVING COUNT(product_id) > 3);
SELECT district_name, city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000;
SELECT district_name, city_population FROM district WHERE city_population BETWEEN 200000 AND 2000000;
SELECT district.headquartered_city FROM district WHERE city_area > 10 OR city_population > 100000;
SELECT district.headquartered_city FROM district WHERE district.city_area > 10 OR district.city_population > 100000;
SELECT district FROM district ORDER BY city_population DESC LIMIT 1;
SELECT district.headquartered_city FROM district ORDER BY city_population DESC LIMIT 1;
SELECT district.city_area FROM district ORDER BY district.city_area ASC LIMIT 1;
SELECT district FROM district ORDER BY city_area ASC LIMIT 1;
SELECT district.city_population FROM district INNER JOIN store_district ON district.district_id = store_district.district_id GROUP BY district.district_id ORDER BY district.city_population DESC LIMIT 3;
SELECT SUM(city_population) FROM district ORDER BY city_population DESC LIMIT 3;
SELECT store_name, COUNT(*) FROM store GROUP BY store_name;
SELECT store_name, COUNT(*) FROM store GROUP BY store_name;
SELECT store_name FROM store INNER JOIN store_district ON store.store_id = store_district.store_id INNER JOIN district ON store_district.district_id = district.district_id WHERE district.headquartered_city = 'Khanewal District';
SELECT store_name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE district.headquartered_city = 'Khanewal District';
SELECT store_name FROM store WHERE store_id IN (SELECT store_id FROM store_district WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1));
SELECT store.name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE district.city_population = (SELECT MAX(city_population) FROM district)
SELECT district.city_name FROM district INNER JOIN store_district ON district.district_id = store_district.district_id INNER JOIN store ON store.store_id = store_district.store_id WHERE store.type = 'Headquarter' AND store.name = 'Blackville';
SELECT district.city_area FROM district INNER JOIN store_district ON district.district_id = store_district.district_id INNER JOIN store ON store.store_id = store_district.store_id WHERE store.type = 'Headquarter' AND store.name = 'Blackville';
SELECT district.headquartered_city, COUNT(store.store_id) AS num_stores FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id GROUP BY district.headquartered_city;
SELECT district.district_name, COUNT(store.store_id) AS store_count FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Headquarter' GROUP BY district.district_name;
SELECT headquartered_city FROM district JOIN store_district ON district.district_id = store_district.district_id GROUP BY headquartered_city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT district.headquartered_city FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store.store_id = store_district.store_id WHERE store.type = 'flagship' GROUP BY district.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT avg(dimensions) FROM product WHERE interface = 'color';
SELECT avg(pages_per_minute_color) FROM product;
SELECT product_id FROM product WHERE product_id IN (SELECT product_id FROM store_product WHERE store_id = (SELECT store_id FROM store WHERE store_name = 'Miramichi'))
SELECT product_id FROM product WHERE product_id IN (SELECT product_id FROM store_product WHERE store_id = (SELECT store_id FROM store WHERE store_name = 'Miramichi'))
SELECT product.product FROM product JOIN store_product ON product.product = store_product.product_id JOIN store ON store_product.store_id = store.store_id WHERE product.max_page_size = 'A4' AND product.dimensions < 5;
SELECT product.product FROM product JOIN store_product ON product.product = store_product.product JOIN store ON store_product.store_id = store.store_id WHERE product.max_page_size = 'A4' AND product.dimensions < 5;
SELECT product FROM product WHERE max_page_size = 'A4' OR pages_per_minute_color < 5;
SELECT product.product FROM product WHERE product.max_page_size = 'A4' OR product.pages_per_minute_color < 5;
SELECT product_id FROM product WHERE dpi LIKE '%Scanner%' OR dimensions LIKE '%Scanner%' OR interface LIKE '%Scanner%';
SELECT product_id FROM product WHERE product_name LIKE '%Scanner%';
SELECT MAX(dimensions) AS max_page_size FROM product;
SELECT MAX(dimensions) AS max_page_size FROM product GROUP BY dimensions ORDER BY COUNT(*) DESC LIMIT 1;
SELECT product FROM product WHERE dimensions != ( SELECT dimensions FROM product GROUP BY dimensions ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT product FROM product WHERE dimensions != ( SELECT dimensions FROM product GROUP BY dimensions ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT SUM(city_area) FROM district WHERE city_area > (SELECT AVG(city_area) FROM district);
SELECT SUM(city_area) FROM district WHERE city_area > (SELECT AVG(city_area) FROM district);
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE store_name = 'city mall') INTERSECT SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE store_name = 'village store'));
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE store_name = 'mall')) INTERSECT SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE store_name = 'village'));
SELECT COUNT(*) FROM region;
SELECT COUNT(*) FROM region;
SELECT region_id, region_name FROM region ORDER BY region_id;
SELECT region_id, region_name FROM region ORDER BY region_id;
SELECT region_code FROM region ORDER BY region_code ASC;
SELECT region_code FROM region ORDER BY region_code ASC;
SELECT region_code FROM region WHERE region_code != 'Denmark';
SELECT region_code FROM region WHERE region_code != 'Denmark';
SELECT COUNT(storm_id) FROM storm WHERE death_records > 0;
SELECT COUNT(DISTINCT storm_id) FROM affected_region WHERE number_city_affected > 0;
SELECT storm.name, storm.number_deaths FROM storm WHERE storm.number_deaths >= 1;
SELECT name, date_active, number_deaths FROM storm WHERE number_deaths >= 1;
SELECT AVG(damage_millions_usd) AS avg_damage, MAX(damage_millions_usd) AS max_damage FROM storm WHERE name IN ( SELECT name FROM storm WHERE dates_active IN ( SELECT dates_active FROM storm WHERE MAX(speed) > 1000 ) );
SELECT AVG(damage_millions_usd) AS average_damage, MAX(damage_millions_usd) AS max_damage FROM storm WHERE name IN ( SELECT name FROM storm WHERE damage_millions_usd > 1000 )
SELECT SUM(number_deaths) AS total_deaths, SUM(damage_millions_usd) AS total_damage FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)
SELECT SUM(T1.number_deaths) AS total_deaths, SUM(T1.damage_millions_usd) AS total_damage FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id WHERE T1.max_speed > (SELECT AVG(max_speed) FROM storm)
SELECT storm.name, storm.damage_millions_usd FROM storm ORDER BY damage_millions_usd DESC;
SELECT storm.name, storm.damage_millions_usd FROM storm ORDER BY storm.damage_millions_usd DESC;
SELECT COUNT(DISTINCT region_name) FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id;
SELECT COUNT(DISTINCT affected_region.region_id) FROM affected_region;
SELECT region_name FROM region EXCEPT SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id;
SELECT region_code FROM region EXCEPT SELECT T1.region_code FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id;
SELECT region.region_code, COUNT(storm.name) FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id GROUP BY region.region_code;
SELECT region.region_name, COUNT(storm.name) AS storms_occurred FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id GROUP BY region.region_name;
SELECT storm.name, COUNT(DISTINCT affected_region.region_id) AS num_affected_regions FROM storm JOIN affected_region ON storm.name = affected_region.storm_id GROUP BY storm.name;
SELECT storm.name, COUNT(DISTINCT affected_region.region_id) AS regions_affected FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.name;
SELECT storm.name, storm.max_speed FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.storm_id ORDER BY COUNT(DISTINCT affected_region.region_id) DESC LIMIT 1;
SELECT storm.name, storm.max_speed FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.storm_id, storm.name, storm.max_speed ORDER BY COUNT(DISTINCT affected_region.region_id) DESC LIMIT 1;
SELECT storm.name FROM storm LEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id WHERE affected_region.region_id IS NULL;
SELECT storm.name FROM storm LEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id WHERE affected_region.region_id IS NULL;
SELECT storm_id FROM affected_region GROUP BY storm_id HAVING COUNT(DISTINCT region_id) >= 2 AND COUNT(number_city_affected) >= 10;
SELECT storm.storm_id FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.storm_id HAVING COUNT(DISTINCT affected_region.region_id) >= 2 AND SUM(affected_region.number_city_affected) >= 10;
SELECT storm.name FROM storm LEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.name HAVING COUNT(affected_region.region_id) < 2;
SELECT storm.name FROM storm WHERE storm.storm_id NOT IN (SELECT storm_id FROM affected_region GROUP BY storm_id HAVING COUNT(region_id) >= 2);
SELECT region.region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON storm.storm_id = affected_region.storm_id WHERE storm.number_deaths >= 10;
SELECT region.region_name FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id INNER JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.number_deaths >= 10;
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = 'Denmark';
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = 'Denmark';
SELECT region.region_code FROM region JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region.region_id HAVING COUNT(DISTINCT affected_region.storm_id) >= 2;
SELECT region_code FROM region WHERE region_id IN (SELECT region_id FROM affected_region GROUP BY region_id HAVING COUNT(storm_id) >= 2);
SELECT region.region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.number_deaths = (SELECT MAX(number_deaths) FROM storm)
SELECT region.region_name FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id INNER JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.number_deaths = (SELECT MAX(number_deaths) FROM storm)
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name IN ('Afghanistan', 'Albania') GROUP BY storm.name HAVING COUNT(DISTINCT region.region_name) = 2;
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name IN ('Afghanistan', 'Albania') GROUP BY storm.name HAVING COUNT(DISTINCT region.region_name) = 2;
SELECT COUNT(*) FROM list;
SELECT COUNT(*) FROM list;
SELECT lastname FROM list WHERE classroom = '111';
SELECT lastname FROM list WHERE classroom = '111';
SELECT DISTINCT lastname FROM list WHERE classroom = '108';
SELECT firstname FROM list WHERE classroom = '108';
SELECT firstname FROM list WHERE classroom = '107';
SELECT lastname FROM list WHERE classroom = '107';
SELECT list.classroom, teachers.grade FROM list JOIN teachers ON list.lastname = teachers.lastname AND list.firstname = teachers.firstname;
SELECT grade, classroom FROM list;
SELECT list.classroom FROM list WHERE list.classroom = '103';
SELECT grade FROM list WHERE classroom = '103';
SELECT list.classroom FROM list WHERE list.classroom = '105';
SELECT grade FROM list WHERE classroom = '105';
SELECT classroom FROM list WHERE grade = '4';
SELECT classroom FROM list WHERE grade = 4;
SELECT classroom FROM list WHERE grade = '5';
SELECT classroom FROM list WHERE classroom = '5';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'fifth grade';
SELECT DISTINCT teachers.firstname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade = '5';
SELECT teachers.lastname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'first grade';
SELECT teachers.lastname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom WHERE list.grade = '1';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom AND teachers.lastname = list.lastname WHERE list.classroom = '110';
SELECT firstname FROM teachers WHERE classroom = '110';
SELECT lastname FROM teachers WHERE classroom = '109';
SELECT lastname FROM teachers WHERE classroom = '109';
SELECT DISTINCT teachers.firstname, list.lastname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom;
SELECT teachers.firstname, list.lastname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom;
SELECT DISTINCT list.firstname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom;
SELECT DISTINCT lastname FROM list;
SELECT DISTINCT list.lastname, list.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE teachers.firstname = 'OTHA' AND teachers.lastname = 'MOYER';
SELECT DISTINCT list.lastname, list.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE teachers.firstname = 'OTHA' AND teachers.lastname = 'MOYER';
SELECT list.firstname, list.lastname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom WHERE teachers.firstname = 'MARROTTE' AND teachers.lastname = 'KIRK';
SELECT list.lastname, list.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE teachers.firstname = 'MARROTTE' AND teachers.lastname = 'KIRK';
SELECT teachers.firstname, teachers.lastname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.firstname = 'EVELINA' AND list.lastname = 'BROMLEY';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.firstname = 'EVELINA' AND list.lastname = 'BROMLEY';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.firstname = 'GELL' AND list.lastname = 'TAMI';
SELECT teachers.firstname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom WHERE list.firstname = 'GELL TAMI';
SELECT COUNT(*) FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'LORIA' AND lastname = 'ONDERSMA');
SELECT COUNT(*) FROM `list` WHERE classroom IN (SELECT classroom FROM `teachers` WHERE firstname = 'LORIA ONDERSMA');
SELECT COUNT(*) FROM `list` WHERE classroom IN (SELECT classroom FROM `teachers` WHERE firstname = 'KAWA' AND lastname = 'GORDON');
SELECT COUNT(*) FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'KAWA' AND lastname = 'GORDON');
SELECT COUNT(*) FROM `list` WHERE classroom IN (SELECT classroom FROM `teachers` WHERE firstname = 'TARRING' AND lastname = 'LEIA');
SELECT COUNT(*) FROM `list` WHERE classroom IN (SELECT classroom FROM `teachers` WHERE firstname = 'TARRING' AND lastname = 'LEIA');
SELECT COUNT(*) FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'CHRISSY' AND lastname = 'NABOZNY');
SELECT COUNT(DISTINCT T1.firstname) FROM `teachers` AS T1 INNER JOIN `list` AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = 'CHRISSY' AND T2.lastname = 'NABOZNY';
SELECT COUNT(*) FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'MADLOCK' AND grade = 'RAY');
SELECT COUNT(DISTINCT T2.firstname) FROM `list` AS T1 INNER JOIN `teachers` AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'MADLOCK' AND T1.lastname = 'RAY';
SELECT DISTINCT list.firstname FROM list WHERE list.grade = '1' AND list.classroom NOT IN ( SELECT teachers.classroom FROM teachers WHERE teachers.firstname = 'OTHA' AND teachers.lastname = 'MOYER' );
SELECT T2.firstname, T2.lastname FROM `teachers` AS T1 INNER JOIN `list` AS T2 ON T1.classroom = T2.classroom WHERE T2.grade = 'first' AND T1.firstname != 'OTHA' AND T1.lastname != 'MOYER';
SELECT DISTINCT T2.firstname FROM `teachers` AS T1 INTERSECT SELECT DISTINCT T2.firstname FROM `list` AS T2 WHERE T2.grade = 'third' AND T1.firstname != 'COVIN JEROME' AND T1.classroom = T2.classroom;
SELECT DISTINCT T2.firstname FROM `teachers` AS T1 INNER JOIN `list` AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'COVIN JEROME' AND T2.grade = 'third' EXCEPT SELECT DISTINCT T2.firstname FROM `teachers` AS T1 INNER JOIN `list` AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = 'COVIN JEROME' AND T2.grade != 'third';
SELECT grade, COUNT(DISTINCT classroom) AS num_classrooms, SUM(students) AS total_students FROM list GROUP BY grade;
SELECT grade, COUNT(DISTINCT classroom) AS num_classrooms, COUNT(*) AS total_students FROM list GROUP BY grade;
SELECT classroom, count(*) as numberOfGrades FROM list GROUP BY classroom;
SELECT classroom, COUNT(DISTINCT grade) FROM list GROUP BY classroom;
SELECT list.grade FROM list GROUP BY list.grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT list.classroom FROM list GROUP BY list.classroom ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*), classroom FROM list GROUP BY classroom;
SELECT classroom, COUNT(*) as student_count FROM list GROUP BY classroom;
SELECT classroom, COUNT(*) AS total_students FROM list WHERE classroom = '0' GROUP BY classroom;
SELECT classroom, COUNT(*) FROM list WHERE classroom = '0' GROUP BY classroom;
SELECT list.classroom, COUNT(*) AS total_students FROM list WHERE list.classroom LIKE '4%' GROUP BY list.classroom;
SELECT list.classroom, COUNT(*) AS total_students FROM list WHERE list.classroom LIKE '4%' GROUP BY list.classroom;
SELECT teachers.firstname FROM teachers JOIN list ON teachers.classroom = list.classroom GROUP BY teachers.firstname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT t.firstname, t.lastname FROM teachers t INNER JOIN list l ON t.classroom = l.classroom GROUP BY t.firstname, t.lastname ORDER BY COUNT(l.lastname) DESC LIMIT 1;
SELECT COUNT(*) FROM list;
SELECT COUNT(*) FROM list GROUP BY grade;
SELECT course_id FROM student_course_registrations GROUP BY course_id ORDER BY COUNT(student_id) DESC LIMIT 1;
SELECT courses.course_name FROM courses JOIN student_course_registrations ON courses.course_id = student_course_registrations.course_id GROUP BY courses.course_name ORDER BY COUNT(student_course_registrations.student_id) DESC LIMIT 1;
SELECT student_id FROM student_course_registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT student_id, COUNT(course_id) AS course_count FROM student_course_registrations GROUP BY student_id));
SELECT student_id FROM student_course_registrations GROUP BY student_id HAVING COUNT(course_id) = (SELECT MIN(course_count) FROM (SELECT student_id, COUNT(course_id) AS course_count FROM student_course_registrations GROUP BY student_id));
SELECT first_name, last_name FROM people WHERE person_id IN (SELECT candidate_id FROM candidates);
SELECT first_name, last_name FROM people WHERE person_id IN (SELECT candidate_id FROM candidates);
SELECT student_id FROM students WHERE student_id NOT IN (SELECT DISTINCT student_id FROM student_course_attendance);
SELECT DISTINCT students.student_id FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id WHERE students.student_id NOT IN (SELECT student_id FROM student_course_attendance)
SELECT student_id FROM student_course_attendance;
SELECT distinct student_id FROM student_course_attendance;
SELECT student_course_registrations.student_id, courses.course_description FROM student_course_registrations JOIN courses ON student_course_registrations.course_id = courses.course_id;
SELECT students.student_details FROM student_course_registrations JOIN students ON student_course_registrations.student_id = students.student_id ORDER BY student_course_registrations.course_id DESC LIMIT 1;
SELECT DISTINCT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN ( SELECT course_id, MAX(date_of_attendance) AS latest_attendance_date FROM student_course_attendance GROUP BY course_id ) recent_attendance ON student_course_registrations.course_id = recent_attendance.course_id JOIN student_course_attendance ON student_course_attendance.course_id = recent_attendance.course_id AND student_course_attendance.date_of_attendance = recent_attendance.latest_attendance_date;
SELECT COUNT(DISTINCT student_course_attendance.student_id) FROM student_course_attendance JOIN student_course_registrations ON student_course_attendance.student_id = student_course_registrations.student_id AND student_course_attendance.course_id = student_course_registrations.course_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'English';
SELECT COUNT(DISTINCT student_course_attendance.student_id) FROM student_course_attendance JOIN student_course_registrations ON student_course_attendance.student_id = student_course_registrations.student_id AND student_course_attendance.course_id = student_course_registrations.course_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'English';
SELECT COUNT(DISTINCT student_course_attendance.course_id) FROM student_course_attendance JOIN student_course_registrations ON student_course_attendance.course_id = student_course_registrations.course_id AND student_course_attendance.student_id = student_course_registrations.student_id WHERE student_course_registrations.student_id = 171;
SELECT COUNT(DISTINCT student_course_attendance.course_id) FROM student_course_attendance JOIN student_course_registrations ON student_course_attendance.course_id = student_course_registrations.course_id AND student_course_attendance.student_id = student_course_registrations.student_id WHERE student_course_attendance.student_id = 171;
SELECT person_id FROM people WHERE email = 'stanley.monahan@example.org';
SELECT person_id FROM people WHERE email = 'stanley.monahan@example.org';
SELECT student_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1;
SELECT candidate_details FROM candidates WHERE candidate_details IN (SELECT student_id FROM student_course_attendance ORDER BY date_of_attendance DESC LIMIT 1) LIMIT 1;
SELECT T2.student_details FROM student_course_registrations AS T1 INNER JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id GROUP BY students.student_id ORDER BY COUNT(student_course_registrations.course_id) DESC LIMIT 1;
SELECT student_id, COUNT(course_id) FROM student_course_registrations GROUP BY student_id;
SELECT student_id, COUNT(DISTINCT course_id) AS num_courses_registered FROM student_course_registrations GROUP BY student_id;
SELECT courses.course_name, COUNT(student_course_registrations.student_id) AS num_registered_students FROM courses JOIN student_course_registrations ON courses.course_id = student_course_registrations.course_id GROUP BY courses.course_name;
SELECT course_id, COUNT(student_id) AS num_students_registered, course_name FROM student_course_registrations JOIN courses ON student_course_registrations.course_id = courses.course_id GROUP BY course_id, course_name;
SELECT candidates.candidate_id FROM candidate_assessments JOIN candidates ON candidate_assessments.candidate_id = candidates.candidate_id WHERE candidate_assessments.asessment_outcome_code = 'Pass';
SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'Pass';
SELECT T2.middle_name FROM `candidate_assessments` AS T1 INNER JOIN `candidates` AS T3 ON T1.candidate_id = T3.candidate_id INNER JOIN `people` AS T2 ON T3.candidate_id = T2.person_id WHERE T1.qualification = 'Fail' LIMIT 1;
SELECT T2.phone_number FROM `candidate_assessments` AS T1 INNER JOIN `candidates` AS T3 ON T1.candidate_id = T3.candidate_id INNER JOIN `people` AS T2 ON T3.candidate_id = T2.person_id WHERE T1.qualification = 'Fail'
SELECT student_id FROM student_course_registrations WHERE course_id = 301;
SELECT student_id FROM student_course_registrations WHERE course_id = '301';
SELECT student_id FROM student_course_registrations WHERE course_id = 301 ORDER BY registration_date DESC LIMIT 1;
SELECT student_id FROM student_course_registrations WHERE course_id = 301 ORDER BY registration_date DESC LIMIT 1;
SELECT DISTINCT addresses.line_1 FROM addresses JOIN people_addresses ON addresses.address_id = people_addresses.address_id JOIN people ON people_addresses.person_id = people.person_id;
SELECT DISTINCT city FROM addresses WHERE address_id IN (SELECT address_id FROM people_addresses WHERE date_to IS NULL OR date_to > CURRENT_DATE);
SELECT DISTINCT addresses.city FROM addresses JOIN people_addresses ON addresses.address_id = people_addresses.address_id JOIN students ON students.student_id = people_addresses.person_id;
SELECT DISTINCT addresses.city FROM addresses JOIN people_addresses ON addresses.address_id = people_addresses.address_id JOIN students ON students.student_id = people_addresses.person_id;
SELECT course_description FROM courses ORDER BY course_description ASC;
SELECT course_description FROM courses ORDER BY course_description ASC;
SELECT first_name FROM people ORDER BY first_name ASC;
SELECT first_name FROM people ORDER BY first_name ASC;
SELECT DISTINCT student_id FROM student_course_registrations UNION SELECT DISTINCT student_id FROM student_course_attendance;
SELECT distinct student_id FROM student_course_registrations UNION SELECT distinct student_id FROM student_course_attendance;
SELECT DISTINCT course_id FROM student_course_attendance WHERE student_id = 121 UNION SELECT DISTINCT course_id FROM student_course_registrations WHERE student_id = 121;
SELECT DISTINCT course_id FROM student_course_attendance WHERE student_id = 121 UNION SELECT DISTINCT course_id FROM student_course_registrations WHERE student_id = 121;
SELECT people.* FROM people JOIN students ON people.person_id = students.student_id JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id WHERE NOT EXISTS ( SELECT 1 FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id );
SELECT students.student_details FROM students LEFT JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id LEFT JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id AND students.student_id = student_course_attendance.student_id WHERE student_course_attendance.date_of_attendance IS NULL;
SELECT student_id FROM student_course_registrations ORDER BY registration_date;
SELECT student_id FROM student_course_registrations ORDER BY registration_date;
SELECT DISTINCT student_course_attendance.student_id FROM student_course_attendance JOIN student_course_registrations ON student_course_attendance.student_id = student_course_registrations.student_id AND student_course_attendance.course_id = student_course_registrations.course_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name LIKE '%statistics%' ORDER BY student_course_attendance.date_of_attendance;
SELECT DISTINCT student_course_attendance.student_id FROM student_course_attendance JOIN student_course_registrations ON student_course_attendance.student_id = student_course_registrations.student_id AND student_course_attendance.course_id = student_course_registrations.course_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_description LIKE '%statistics%' ORDER BY student_course_attendance.date_of_attendance;
SELECT COUNT(*) FROM submission;
SELECT COUNT(*) FROM submission;
SELECT author FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id ORDER BY score ASC;
SELECT author FROM submission ORDER BY submission_id ASC;
SELECT DISTINCT submission.college, submission.author FROM submission;
SELECT submission.author, submission.college FROM submission;
SELECT DISTINCT author FROM submission WHERE author LIKE '%Florida%' OR author LIKE '%Temple%';
SELECT author FROM submission WHERE author IN ('Florida', 'Temple');
SELECT AVG(score) FROM submission;
SELECT AVG(*) FROM submission;
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance ORDER BY result DESC LIMIT 1)
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE venue = 'highest_score_venue')) ORDER BY score DESC LIMIT 1;
SELECT college, COUNT(DISTINCT submission_id) AS num_authors FROM submission GROUP BY college;
SELECT college, COUNT(DISTINCT author) FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id GROUP BY college;
SELECT college FROM submission GROUP BY college ORDER BY COUNT(*) DESC LIMIT 1;
SELECT college FROM author JOIN submission ON author.author_id = submission.author GROUP BY college ORDER BY COUNT(*) DESC LIMIT 1;
SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE venue = 'VenueA')) INTERSECT SELECT college FROM submission WHERE score > 90) AND college IN (SELECT college FROM submission WHERE score < 80)
SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM submission WHERE score > 90) INTERSECT SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM submission WHERE score < 80);
SELECT author, result FROM submission INNER JOIN acceptance ON submission.submission_id = acceptance.submission_id;
SELECT submission.author, acceptance.result FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id;
SELECT submission_id FROM submission WHERE score = (SELECT MAX(score) FROM submission);
SELECT result FROM acceptance WHERE result = (SELECT MAX(result) FROM acceptance);
SELECT college, COUNT(DISTINCT workshop_id) AS num_workshops_submitted FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id GROUP BY college;
SELECT college, COUNT(DISTINCT workshop_id) FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id GROUP BY college;
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id GROUP BY submission.college HAVING COUNT(DISTINCT acceptance.workshop_id) > 1;
SELECT author FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id GROUP BY author HAVING COUNT(DISTINCT acceptance.workshop_id) > 1;
SELECT venue, date FROM workshop ORDER BY venue ASC;
SELECT venue, name FROM workshop ORDER BY venue ASC;
SELECT DISTINCT author FROM submission WHERE submission_id NOT IN (SELECT submission_id FROM acceptance)
SELECT author FROM submission WHERE submission_id NOT IN (SELECT submission_id FROM acceptance);
SELECT name FROM business WHERE rating > 4.5;
SELECT DISTINCT business.name FROM business INNER JOIN review ON business.bid = review.business_id WHERE business.rating = 3.5;
SELECT user.uid FROM user WHERE user.name = 'Michelle';
SELECT DISTINCT city FROM business WHERE name = 'Whataburger';
SELECT neighbourhood.neighbourhood_name FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE business.name = 'MGM Grand Buffet'
SELECT city FROM business WHERE rating < 1.5;
SELECT DISTINCT city FROM business WHERE name = 'Taj Mahal';
SELECT text FROM review WHERE business_id IN (SELECT business_id FROM business WHERE rating < 1);
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating > 3.5;
SELECT city FROM business WHERE name = 'Taj Mahal' GROUP BY city;
SELECT rid, business_id, rating, text FROM review WHERE user_id = (SELECT uid FROM user WHERE name = 'Niloofar');
SELECT business.business_id FROM business INNER JOIN review ON business.business_id = review.business_id WHERE review.user_id = (SELECT uid FROM user WHERE name = 'Niloofar')
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.user_id = (SELECT uid FROM user WHERE name = 'Niloofar') AND review.rating = 5;
SELECT review.text FROM review JOIN user ON review.uid = user.uid JOIN business ON review.business_id = business.business_id JOIN category ON business.business_id = category.business_id WHERE user.name = 'Michelle' AND category.category_name = 'Italian';
SELECT COUNT(*) FROM review WHERE business_id IN (SELECT business_id FROM business WHERE name = 'Cafe Zinho' AND state = 'Texas');
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.id = 'Italian' AND EXISTS ( SELECT 1 FROM review WHERE review.business_id = business.business_id AND review.rating = 5 )
SELECT neighbourhood.id FROM neighbourhood INNER JOIN business ON neighbourhood.business_id = business.business_id INNER JOIN category ON business.business_id = category.business_id WHERE business.name = 'Madison' AND category.category_name = 'Italian Restaurant';
SELECT neighbourhood.id FROM neighbourhood INNER JOIN business ON neighbourhood.business_id = business.bid INNER JOIN category ON business.business_id = category.business_id WHERE business.city = 'Madison' AND category.category_name = 'Italian' AND business.business_id IN (SELECT business_id FROM review GROUP BY business_id HAVING AVG(stars) < 2.5)
SELECT name FROM business WHERE city = 'Pennsylvania';
SELECT name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'restaurant' AND city = 'Pennsylvania';
SELECT rid FROM review WHERE business_id IN (SELECT business_id FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Pet Groomers') GROUP BY business_id HAVING COUNT(rid) > 100;
SELECT business_id FROM business WHERE city = 'Los Angeles' AND bid = 'brewery'
SELECT business_id FROM business WHERE city = 'Los Angeles' AND bid = 'brewery'
SELECT business_id FROM business WHERE city = 'Los Angeles' AND bid = 'brewery'
SELECT DISTINCT user.name FROM user JOIN review ON user.uid = review.user_id JOIN business ON review.business_id = business.business_id WHERE business.name = 'Mesa Grill';
SELECT full_address FROM business WHERE name = 'Walmart' AND state = 'Los Angeles';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id JOIN user ON review.uid = user.uid WHERE user.name = 'Patrick' AND business.city = 'Dallas';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id JOIN user ON review.user_id = user.uid WHERE business.city = 'Dallas' AND user.name = 'Patrick';
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.uid WHERE user.name = 'Patrick' AND business.city = 'Bar'
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.uid WHERE user.name = 'Patrick' AND review.rating >= 3 AND business.name LIKE '%Bar%'
SELECT name FROM user WHERE uid IN (SELECT user_id FROM tip WHERE business_id IN (SELECT bid FROM business WHERE name = 'Barrio Cafe') AND year = 2015);
SELECT review.business_id FROM business JOIN review ON business.business_id = review.business_id WHERE state = 'Texas' AND rating < 2;
SELECT business_id FROM business WHERE category = 'Seafood' AND city = 'Los Angeles';
SELECT category_name FROM category WHERE category_name = 'Seafood' AND business_id IN (SELECT business_id FROM business WHERE city = 'Los Angeles');
SELECT DISTINCT business.business_id FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Los Angeles' AND category.id = 'Seafood';
SELECT rating, rid, business_id, text FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Patrick' AND rating > 4;
SELECT name FROM business WHERE name LIKE '%Apple Store%' AND business_id IN (SELECT business_id FROM neighbourhood WHERE id = 'Los Angeles');
SELECT business.name FROM business WHERE business.city = 'Dallas' AND business.rating > 4.5;
SELECT neighbourhood.id FROM neighbourhood INNER JOIN business ON neighbourhood.business_id = business.bid WHERE business.name = 'Flat Top Grill';
SELECT text FROM tip WHERE business_id IN (SELECT business_id FROM business WHERE name = 'Vintner Grill') AND tip_id IN (SELECT tip_id FROM tip WHERE likes > 9)
SELECT * FROM review WHERE business_id IN (SELECT bid FROM business WHERE name = 'Kabob Palace') AND year = 2014;
SELECT DISTINCT user_id FROM tip INNER JOIN business ON tip.business_id = business.business_id WHERE business.city = 'Dallas';
SELECT DISTINCT T1.city FROM business AS T1 JOIN restaurant AS T2 ON T1.business_id = T2.business_id WHERE T1.state = 'TX' AND T2.name = 'MGM Grand Buffet'
SELECT DISTINCT user.name FROM user JOIN tip ON user.uid = tip.user_id JOIN category ON tip.business_id = category.business_id WHERE category.category_name = 'Pet Groomers';
SELECT text FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Cafe Zinho' AND business.state = 'Texas';
SELECT DISTINCT user.uid FROM user JOIN review ON user.user_id = review.user_id JOIN business ON review.business_id = business.bid JOIN category ON business.bid = category.business_id WHERE category.category_name = 'restaurant';
SELECT tip.text FROM tip JOIN business ON tip.business_id = business.bid WHERE business.name = 'Cafe Zinho' AND business.state = 'Pennsylvania' AND tip.year = 2010;
SELECT DISTINCT user.uid FROM user JOIN review ON user.user_id = review.user_id JOIN business ON review.business_id = business.bid WHERE business.name LIKE '%restaurant%' AND review.year = 2010;
SELECT tip.text FROM tip JOIN user ON tip.user_id = user.uid WHERE user.uid IN ( SELECT review.user_id FROM review WHERE review.year = 2012 );
SELECT text FROM review WHERE business_id IN (SELECT business_id FROM business WHERE rating = 2.5);
SELECT COUNT(business.business_id) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE business.name LIKE '%Escape Game%' AND neighbourhood.id = 'Madison';
SELECT COUNT(*) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE business.name LIKE '%escape game%' AND neighbourhood.id = 'Madison';
SELECT COUNT(*) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE business.name LIKE '%escape game%' AND neighbourhood.id = 'Madison';
SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE category.category_name = 'Escape Games' AND neighbourhood.id = 'Madison';
SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Escape Game' AND business.name = 'Madison';
SELECT COUNT(*) FROM business JOIN review ON business.business_id = review.business_id WHERE business.review_count > 3.5 AND business.name LIKE '%restaurant%';
SELECT SUM(count) FROM checkin WHERE business_id IN (SELECT bid FROM business WHERE name LIKE '%Moroccan%' AND city = 'Los Angeles')
SELECT SUM(count) FROM checkin WHERE business_id IN (SELECT bid FROM business WHERE city = 'Los Angeles' AND name LIKE '%Moroccan%') AND day = 'Friday';
SELECT T1.day, SUM(T1.count) FROM checkin AS T1 JOIN business AS T2 ON T1.business_id = T2.business_id JOIN category AS T3 ON T2.business_id = T3.business_id WHERE T2.city = 'Los Angeles' AND T3.category_name = 'Moroccan' GROUP BY T1.day;
SELECT state, SUM(count) AS total_checkins FROM business JOIN category ON business.bid = category.business_id JOIN checkin ON business.bid = checkin.business_id WHERE category.category_name = 'Italian Deli' AND day = 'Sunday' GROUP BY state;
SELECT COUNT(*) FROM review WHERE user_id = (SELECT uid FROM user WHERE name = 'Niloofar') AND year = 2015;
SELECT avg(review.stars) FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Michelle';
SELECT count FROM checkin WHERE business_id = (SELECT bid FROM business WHERE name = 'Cafe Zinho') AND day = 'Friday';
SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Sushi Too' AND business.city = 'Pittsburgh'
SELECT COUNT(*) FROM business JOIN review ON business.business_id = review.business_id WHERE business.city = 'Pittsburgh' AND review.stars = 4.5;
SELECT COUNT(*) FROM tip WHERE month BETWEEN '2015-01' AND '2015-12';
SELECT SUM(tip.like_count) FROM tip INNER JOIN user ON tip.user_id = user.uid WHERE user.name = 'Niloofar';
SELECT SUM(tip.tip_id) AS total_likes FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Cafe Zinho';
SELECT SUM(tip.likes) FROM tip JOIN user ON tip.user_id = user.uid WHERE user.name = 'Niloofar' AND tip.text LIKE '%Cafe Zinho%'
SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.user_id WHERE user.name = 'Michelle' AND tip.year = 2010;
SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.user_id WHERE user.name = 'Michelle' AND tip.year = 2010;
SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.uid WHERE user.name = 'Michelle' AND tip.month = 'April';
SELECT COUNT(*) FROM business WHERE city = 'Texas' AND category = 'restaurant';
SELECT COUNT(*) FROM business JOIN review ON business.bid = review.business_id WHERE business.city = 'Dallas' AND business.state = 'TX' AND review.rating > 3.5 AND business.category = 'Bars';
SELECT COUNT(*) FROM business JOIN review ON business.bid = review.business_id WHERE business.city = 'Dallas' AND business.state = 'TX' AND review.rating > 3.5 AND business.category LIKE '%Bar%'
SELECT COUNT(*) FROM review WHERE business_id IN (SELECT business_id FROM business WHERE name = 'Texas de Brazil' AND city = 'Dallas' AND state = 'Texas');
SELECT COUNT(*) FROM review WHERE business_id IN (SELECT business_id FROM business WHERE name = 'Bistro Di Napoli') AND year = 2015;
SELECT COUNT(business.business_id) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.id = 'Hazelwood' AND business.name LIKE '%restaurant%';
SELECT COUNT(*) FROM business WHERE name = 'Starbucks' AND city = 'Dallas';
SELECT review_count FROM business WHERE name = 'Acacia Cafe';
SELECT AVG(count) AS avg_checkins_per_day FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.name = 'Barrio Cafe';
SELECT COUNT(*) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.id = 'Stone Meadows';
SELECT COUNT(*) FROM review WHERE user_id IN (SELECT uid FROM user WHERE name = 'Adrienne');
SELECT COUNT(*) FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Michelle' AND review.month = '2014-03';
SELECT COUNT(DISTINCT review.business_id) FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Michelle' AND review.rating IS NOT NULL AND EXISTS ( SELECT 1 FROM tip WHERE tip.user_id = user.uid AND tip.year = 2010 );
SELECT COUNT(bid) FROM business JOIN review ON business.bid = review.business_id JOIN user ON review.user_id = user.user_id WHERE business.city = 'San Diego' AND user.uid = 'Christine' AND review.year = 2010;
SELECT COUNT(*) FROM business WHERE name = 'Target' AND state = 'Los Angeles';
SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.bid WHERE business.name = 'Irish Pub' AND business.city = 'Dallas';
SELECT AVG(review.*) FROM review WHERE review.year = 2014;
SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Vintner Grill' AND review.year = 2010;
SELECT COUNT(*) FROM review WHERE business_id IN (SELECT business_id FROM business JOIN neighbourhood ON business.bid = neighbourhood.business_id WHERE neighbourhood.id = 'South Summerlin');
SELECT COUNT(*) FROM user WHERE uid = 'Michelle';
SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'restaurant';
SELECT COUNT(DISTINCT business.city) FROM business WHERE business.name = 'Panda Express';
SELECT COUNT(*) FROM tip INNER JOIN user ON tip.user_id = user.user_id WHERE user.name = 'Michelle';
SELECT SUM(T2.cid) FROM neighbourhood AS T1 INNER JOIN checkin AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Brighton Heights'
SELECT COUNT(*) FROM review WHERE strftime('%m', year) = '03';
SELECT strftime('%m', year) AS month, COUNT(*) AS tip_count FROM tip GROUP BY month;
SELECT COUNT(DISTINCT neighbourhood.id) FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id WHERE business.rating = 5 AND business.city = 'Madison';
SELECT name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Moroccan' AND city = 'Texas';
SELECT business.name FROM business JOIN checkin ON business.bid = checkin.business_id GROUP BY business.bid ORDER BY count DESC LIMIT 1;
SELECT neighbourhood.id FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id WHERE business.name = 'Madison' GROUP BY neighbourhood.id ORDER BY COUNT(business.business_id) DESC LIMIT 1;
SELECT name FROM business WHERE city = 'Dallas' AND category LIKE '%Mexican%' AND rating >= 3.5;
SELECT name FROM business JOIN category ON business.business_id = category.business_id WHERE city = 'Dallas' AND category_name = 'Mexican' AND rating > 3.5;
SELECT name FROM business WHERE city = 'Dallas' AND bid = 'Valet Service'
SELECT business.name FROM business JOIN category ON business.bid = category.business_id JOIN neighbourhood ON business.bid = neighbourhood.business_id WHERE category.category_name = 'Italian' AND neighbourhood.id = 'Meadowood' AND business.city = 'Madison';
SELECT name FROM business WHERE city = 'Los Angeles' AND category = 'Bars' AND review_count >= 30 AND rating > 3;
SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id WHERE business.name LIKE '%Egyptian%' AND neighbourhood.id = 'Edinburgh';
SELECT name FROM user WHERE uid IN (SELECT user_id FROM review GROUP BY user_id HAVING AVG(rating) < 3)
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.month = 'April' GROUP BY business.name ORDER BY COUNT(review.rid) DESC LIMIT 1;
SELECT business.name FROM business JOIN category ON business.bid = category.business_id GROUP BY business.name ORDER BY COUNT(category.id) DESC LIMIT 1;
