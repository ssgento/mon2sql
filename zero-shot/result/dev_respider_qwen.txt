SELECT COUNT(*) FROM architect WHERE nationality = 'female';
SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name;
SELECT max(bridge.length), architect.name FROM bridge INNER JOIN architect ON bridge.architect_id = architect.id GROUP BY architect.name ORDER BY bridge.length DESC LIMIT 1;
SELECT AVG(length_meters * 3.28084) AS average_length_feet FROM bridge;
SELECT name, built_year FROM mill WHERE architect_id IN (SELECT architect_id FROM bridge WHERE name = 'Grondzeiler');
SELECT DISTINCT architect.name, architect.nationality FROM architect JOIN mill ON architect.id = mill.architect_id;
SELECT name FROM mill WHERE id NOT IN (SELECT architect_id FROM bridge WHERE location = 'Donceel');
SELECT DISTINCT mill.type FROM mill JOIN architect ON mill.architect_id = architect.id WHERE architect.nationality IN ('American', 'Canadian');
SELECT architect.id, architect.name FROM architect JOIN bridge ON architect.id = bridge.architect_id GROUP BY architect.id HAVING COUNT(bridge.id) >= 3;
SELECT T1.id, T1.name, T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id, T1.name, T1.nationality ORDER BY COUNT(T2.id) DESC LIMIT 1;
SELECT a.id, a.name, a.gender FROM architect a JOIN bridge b ON a.id = b.architect_id GROUP BY a.id, a.name, a.gender HAVING COUNT(DISTINCT b.name) = 2 UNION SELECT a.id, a.name, a.gender FROM architect a JOIN mill m ON a.id = m.architect_id GROUP BY a.id, a.name, a.gender HAVING COUNT(DISTINCT m.name) = 1;
SELECT location FROM bridge WHERE id IN (SELECT id FROM mill WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge')
SELECT mill.name FROM mill WHERE mill.name LIKE '%Moulin%';
SELECT DISTINCT T1.name FROM `mill` AS T1 INNER JOIN `architect` AS T2 ON T1.architect_id = T2.id WHERE T2.id IN (SELECT `architect_id` FROM `bridge` WHERE `length_feet` > 240);
SELECT name, COUNT(*) AS count FROM mill GROUP BY name ORDER BY count DESC LIMIT 1;
SELECT COUNT(DISTINCT architect.id) FROM architect LEFT JOIN mill ON architect.id = mill.architect_id AND mill.year < 1850 WHERE mill.id IS NULL;
SELECT bridge.name FROM bridge JOIN architect ON bridge.architect_id = architect.id WHERE architect.nationality = 'American' ORDER BY bridge.length_meters DESC;
SELECT location FROM cinema WHERE capacity <= 800;
SELECT location FROM cinema WHERE cinema_id IN (SELECT cinema_id FROM schedule WHERE strftime('%Y', show_times_per_day) = '2010') INTERSECT SELECT location FROM cinema WHERE cinema_id IN (SELECT cinema_id FROM schedule WHERE strftime('%Y', show_times_per_day) = '2011');
SELECT COUNT(*) FROM cinema;
SELECT COUNT(*) FROM cinema;
SELECT cinema.name, cinema.capacity FROM cinema;
SELECT cinema_id, location FROM cinema WHERE capacity > (SELECT AVG(capacity) FROM cinema)
SELECT name FROM cinema;
SELECT DISTINCT cinema.name FROM cinema;
SELECT name, location FROM cinema ORDER BY location DESC;
SELECT cinema.name, cinema.location FROM cinema ORDER BY cinema.capacity DESC LIMIT 1;
SELECT avg(capacity), min(capacity), max(capacity) FROM cinema WHERE cinema_id IN ( SELECT cinema_id FROM schedule WHERE film_id IN ( SELECT film_id FROM film WHERE directed_by LIKE '2011%' OR directed_by LIKE '2012%' OR directed_by LIKE '2013%' OR directed_by LIKE '2014%' OR directed_by LIKE '2015%' OR directed_by LIKE '2016%' OR directed_by LIKE '2017%' OR directed_by LIKE '2018%' OR directed_by LIKE '2019%' OR directed_by LIKE '2020%' OR directed_by LIKE '2021%' ) )
SELECT location, COUNT(cinema_id) FROM cinema GROUP BY location;
SELECT location FROM cinema WHERE cinema_id IN (SELECT cinema_id FROM schedule WHERE film_id IN (SELECT film_id FROM film WHERE directed_by = 'Christopher Nolan')) GROUP BY location ORDER BY COUNT(*) DESC LIMIT 1;
SELECT location FROM cinema WHERE cinema_id IN (SELECT cinema_id FROM schedule GROUP BY cinema_id HAVING COUNT(*) > 1) INTERSECT SELECT location FROM cinema WHERE capacity > 300;
SELECT location FROM cinema WHERE capacity > 300 GROUP BY location HAVING COUNT(*) >= 2;
SELECT title, director FROM film;
SELECT title, director FROM film;
SELECT DISTINCT director FROM film;
SELECT DISTINCT director FROM film;
SELECT director, COUNT(*) FROM film GROUP BY director;
SELECT cinema_id, date, COUNT(*) AS total_show_times FROM schedule GROUP BY cinema_id, date;
SELECT film.title, MAX(schedule.show_times_per_day) AS max_price FROM film INNER JOIN schedule ON film.film_id = schedule.film_id GROUP BY film.title;
SELECT film.rank_in_series, MAX(schedule.show_times_per_day) FROM film JOIN schedule ON film.film_id = schedule.film_id GROUP BY film.rank_in_series;
SELECT cinema.name, film.title, schedule.date, schedule.price FROM schedule JOIN film ON schedule.film_id = film.film_id JOIN cinema ON schedule.cinema_id = cinema.cinema_id;
SELECT title, directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule);
SELECT director FROM film JOIN schedule ON film.film_id = schedule.film_id GROUP BY director ORDER BY SUM(show_times_per_day) DESC LIMIT 1;
SELECT location FROM cinema WHERE cinema_id IN (SELECT cinema_id FROM schedule GROUP BY cinema_id HAVING COUNT(*) > 1) AND capacity > 300;
SELECT location FROM cinema WHERE cinema_id IN (SELECT cinema_id FROM schedule GROUP BY cinema_id HAVING COUNT(*) > 1) AND capacity > 300;
SELECT COUNT(*) FROM film WHERE title LIKE '%Dummy%';
SELECT COUNT(*) FROM film WHERE film_id IN (SELECT film_id FROM schedule WHERE cinema_id IN (SELECT cinema_id FROM cinema WHERE location = 'Dummy'));
SELECT COUNT(*) FROM course;
SELECT COUNT(*) FROM course;
SELECT COUNT(*) FROM course WHERE hours > 2;
SELECT COUNT(*) FROM course WHERE hours > 2;
SELECT cid FROM course WHERE credits = 1;
SELECT cid FROM course WHERE credits = 1;
SELECT cid FROM course WHERE instructor IN (SELECT facid FROM faculty WHERE days = 'MTW');
SELECT cid FROM course WHERE days LIKE '%MTW%';
SELECT COUNT(*) FROM department WHERE dname LIKE 'AS%';
SELECT COUNT(*) FROM department WHERE building = 'AS';
SELECT phone FROM department WHERE room = '268';
SELECT phone FROM department WHERE room = '268';
SELECT COUNT(DISTINCT enrolled_in.stuid) FROM enrolled_in JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE gradeconversion.lettergrade = 'B';
SELECT COUNT(DISTINCT enrolled_in.stuid) FROM enrolled_in JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE gradeconversion.lettergrade = 'B';
SELECT MAX(gradeconversion.lettergrade), MIN(gradeconversion.lettergrade) FROM gradeconversion;
SELECT MAX(grade), MIN(grade) FROM gradeconversion;
SELECT DISTINCT first_name FROM student WHERE first_name LIKE '%a%';
SELECT DISTINCT first_name FROM student WHERE first_name LIKE '%a%';
SELECT fname, lname FROM faculty WHERE sex = 'M' AND building = 'NEB';
SELECT fname FROM faculty WHERE sex = 'M' AND building = 'NEB';
SELECT room FROM faculty WHERE building = 'NEB' AND facid IN (SELECT facid FROM member_of WHERE appt_type = 'professor');
SELECT DISTINCT T1.room FROM faculty AS T1 INNER JOIN member_of AS T2 ON T1.facid = T2.facid WHERE T1.building = 'NEB' AND T2.appt_type = 'professor';
SELECT dname FROM department WHERE building = 'Mergenthaler';
SELECT dname FROM department WHERE building = 'Mergenthaler';
SELECT * FROM course ORDER BY hours ASC;
SELECT cid, cname, days, hours FROM course ORDER BY hours ASC;
SELECT cid FROM course ORDER BY credits;
SELECT cid FROM course ORDER BY credits;
SELECT firstname FROM student ORDER BY age DESC;
SELECT DISTINCT first_name FROM student ORDER BY age DESC;
SELECT lname FROM student WHERE sex = 'F' ORDER BY age DESC;
SELECT last_name FROM student WHERE sex = 'F' ORDER BY age DESC;
SELECT DISTINCT facult.last FROM faculty WHERE facult.building = 'Barton' ORDER BY facult.last ASC;
SELECT lname FROM faculty WHERE building = 'Barton' ORDER BY lname;
SELECT DISTINCT faculty.fname FROM faculty WHERE faculty.rank = 'Professor' ORDER BY faculty.fname ASC;
SELECT DISTINCT firstname FROM faculty WHERE rank = 'Professor' ORDER BY firstname;
SELECT department.dname FROM minor_in JOIN department ON minor_in.dno = department.dno GROUP BY department.dname ORDER BY COUNT(minor_in.stuid) DESC LIMIT 1;
SELECT department.dname FROM minor_in JOIN department ON minor_in.dno = department.dno GROUP BY department.dname ORDER BY COUNT(minor_in.stuid) DESC LIMIT 1;
SELECT dname FROM department WHERE dno NOT IN (SELECT dno FROM minor_in)
SELECT dname FROM department WHERE dno NOT IN (SELECT dno FROM minor_in)
SELECT department.name FROM department JOIN member_of ON department.dno = member_of.dno GROUP BY department.name ORDER BY COUNT(member_of.facid) ASC LIMIT 1;
SELECT dname FROM department JOIN member_of ON department.dno = member_of.dno GROUP BY department.dno ORDER BY COUNT(member_of.facid) ASC LIMIT 1;
SELECT dno FROM member_of GROUP BY dno ORDER BY COUNT(*) ASC LIMIT 1;
SELECT appt_type FROM member_of GROUP BY appt_type ORDER BY COUNT(*) ASC LIMIT 1;
SELECT fname, lname FROM faculty WHERE facid IN (SELECT instructor FROM course GROUP BY instructor ORDER BY COUNT(*) DESC LIMIT 3)
SELECT fname, lname FROM faculty WHERE facid IN (SELECT instructor FROM course GROUP BY instructor ORDER BY COUNT(cid) DESC LIMIT 3);
SELECT T2.building FROM `course` AS T1 INNER JOIN `faculty` AS T2 ON T1.instructor = T2.facid GROUP BY T1.instructor ORDER BY COUNT(T1.cid) DESC LIMIT 1
SELECT T2.building FROM `course` AS T1 INNER JOIN `faculty` AS T2 ON T1.instructor = T2.facid GROUP BY T1.instructor ORDER BY COUNT(*) DESC LIMIT 1;
SELECT cname FROM course WHERE cid IN (SELECT cid FROM enrolled_in GROUP BY cid HAVING COUNT(*) >= 5)
SELECT cname FROM course WHERE cid IN (SELECT cid FROM enrolled_in GROUP BY cid HAVING COUNT(*) >= 5)
SELECT DISTINCT faculty.fname, faculty.lname FROM faculty JOIN course ON faculty.facid = course.instructor WHERE course.cid = (SELECT cid FROM course WHERE cname = 'course_name');
SELECT DISTINCT T1.fname, T1.lname FROM faculty AS T1 JOIN course AS T2 ON T1.facid = T2.instructor WHERE T2.cid = 'COMPUTER LITERACY'
SELECT dname, room FROM department WHERE dno = (SELECT dno FROM course WHERE cid = 'INTRODUCTION TO COMPUTER SCIENCE');
SELECT T2.dname, T2.room FROM course AS T1 INNER JOIN department AS T2 ON T1.dno = T2.dno WHERE T1.cid = 'INTRODUCTION TO COMPUTER SCIENCE';
SELECT student.fname, student.lname, gradeconversion.grade_points FROM enrolled_in JOIN student ON enrolled_in.stuid = student.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade;
SELECT student.fname, gradeconversion.gradepoint FROM enrolled_in JOIN student ON enrolled_in.stuid = student.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade;
SELECT DISTINCT T1.fname FROM student AS T1 JOIN enrolled_in AS T2 ON T1.stuid = T2.stuid JOIN gradeconversion AS T3 ON T2.grade = T3.lettergrade WHERE T3.gpa >= 3.8;
SELECT DISTINCT T1.fname FROM student AS T1 JOIN enrolled_in AS T2 ON T1.stuid = T2.stuid JOIN gradeconversion AS T3 ON T2.grade = T3.lettergrade WHERE T3.gpa >= 3.8;
SELECT DISTINCT T1.fname FROM faculty AS T1 JOIN member_of AS T2 ON T1.facid = T2.facid WHERE T2.dno = 520;
SELECT fname, lname FROM faculty WHERE facid IN (SELECT facid FROM member_of WHERE dno = 520);
SELECT fname, lname FROM student WHERE stuid IN (SELECT stuid FROM minor_in WHERE dno = 140);
SELECT fname, lname FROM student WHERE stuid IN (SELECT stuid FROM minor_in WHERE dno = 140);
SELECT lname FROM faculty WHERE facid IN (SELECT facid FROM member_of WHERE dno = (SELECT dno FROM department WHERE dname = 'Computer Science'));
SELECT lname FROM faculty INNER JOIN member_of ON faculty.facid = member_of.facid INNER JOIN department ON member_of.dno = department.dno WHERE department.dname = 'Computer Science';
SELECT AVG(gradeconversion.lettergrade) FROM student JOIN enrolled_in ON student.stuid = enrolled_in.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE student.sex = 'Smith';
SELECT AVG(gradeconversion.gradepoint) FROM student JOIN enrolled_in ON student.stuid = enrolled_in.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE student.last_name = 'Smith';
SELECT MAX(T2.grade), MIN(T2.grade) FROM student AS T1 JOIN enrolled_in AS T2 ON T1.stuid = T2.stuid WHERE T1.city = 'NYC'
SELECT MAX(T2.gradepoints), MIN(T2.gradepoints) FROM enrolled_in AS T1 INNER JOIN gradeconversion AS T2 ON T1.grade = T2.lettergrade WHERE T1.stuid IN (SELECT stuid FROM student WHERE city = 'NYC')
SELECT cid FROM course WHERE credits = 3 OR (credits = 1 AND hours = 4);
SELECT cid FROM course WHERE credits = 3 OR (credits = 1 AND hours = 4);
SELECT division FROM department WHERE building = 'NEB' AND division IN ('AS', 'EN');
SELECT division FROM department WHERE division = 'AS' OR (division = 'EN' AND building = 'NEB');
SELECT fname FROM student WHERE stuid NOT IN (SELECT stuid FROM enrolled_in);
SELECT fname FROM student WHERE stuid NOT IN (SELECT stuid FROM enrolled_in);
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT avg(age), min(age), max(age) FROM singer WHERE country = 'France';
SELECT avg(age), min(age), max(age) FROM singer WHERE nationality = 'French';
SELECT song_release_year, name FROM singer ORDER BY age ASC LIMIT 1;
SELECT song_release_year, name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.singer_id ORDER BY age ASC LIMIT 1;
SELECT DISTINCT singer.name FROM singer WHERE singer.age > 20;
SELECT DISTINCT singer.name FROM singer WHERE singer.age > 20;
SELECT country, COUNT(*) FROM singer GROUP BY country;
SELECT COUNT(singer_id), country FROM singer GROUP BY country;
SELECT name FROM singer WHERE age > (SELECT AVG(age) FROM singer)
SELECT DISTINCT T1.name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.age > (SELECT AVG(age) FROM singer)
SELECT name, location FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(highest), AVG(average) FROM stadium;
SELECT average, MAX(highest) FROM stadium;
SELECT location, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);
SELECT stadium.location, stadium.capacity FROM stadium WHERE stadium.average = (SELECT MAX(average) FROM stadium);
SELECT COUNT(*) FROM concert WHERE theme IN ('2014', '2015');
SELECT COUNT(*) FROM concert WHERE concert_name LIKE '2014%' OR concert_name LIKE '2015%';
SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
SELECT stadium_id, COUNT(*) as num_concerts FROM concert GROUP BY stadium_id;
SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.stadium_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year > 2013 GROUP BY stadium.stadium_id ORDER BY COUNT(concert.concert_id) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year FROM concert GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);
SELECT DISTINCT T1.name FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.singer_id = T2.singer_id INNER JOIN `concert` AS T3 ON T2.concert_id = T3.concert_id WHERE T1.age > 40 INTERSECT SELECT DISTINCT T1.name FROM `singer` AS T1 INNER JOIN `singer_in_concert` AS T2 ON T1.singer_id = T2.singer_id INNER JOIN `concert` AS T3 ON T2.concert_id = T3.concert_id WHERE T1.age < 30;
SELECT name FROM stadium EXCEPT SELECT T1.name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id = T2.stadium_id WHERE T2.year = 2014;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014)
SELECT concert.name, concert.theme, COUNT(singer_in_concert.singer_id) AS singer_count FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id;
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT singer.name, COUNT(concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;
SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.concert_name LIKE '2014%';
SELECT DISTINCT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.concert_name LIKE '2014%'
SELECT T1.name, T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id = T2.singer_id WHERE T1.name LIKE '%Hey%'
SELECT name, country FROM singer WHERE singer_id IN (SELECT singer_id FROM singer_in_concert WHERE concert_id IN (SELECT concert_id FROM concert WHERE concert_name LIKE '%Hey%'))
SELECT location, name FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2014) INTERSECT SELECT location, name FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year = 2015);
SELECT location, name FROM stadium WHERE stadium_id IN ( SELECT stadium_id FROM concert WHERE year = 2014 INTERSECT SELECT stadium_id FROM concert WHERE year = 2015 );
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT COUNT(*) FROM premises;
SELECT DISTINCT address_type_code FROM customer_addresses;
SELECT premise_details, premise_type FROM premises ORDER BY premise_type;
SELECT premise_details, COUNT(*) FROM premises GROUP BY premise_details;
SELECT DISTINCT products.product_category, COUNT(DISTINCT mailshot_campaigns.mailshot_id) AS num_mailshots FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN mailshot_customers ON order_items.order_id = mailshot_customers.customer_id GROUP BY products.product_category;
SELECT customer_name, customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)
SELECT T2.customer_phone, T2.customer_email FROM mailshot_customers AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'
SELECT outcome_code, COUNT(*) FROM mailshot_customers GROUP BY outcome_code;
SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM mailshot_customers WHERE mailshot_customer_date IN (SELECT mailshot_customer_date FROM customer_orders WHERE order_status_code = 'Order') GROUP BY customer_id HAVING COUNT(*) >= 2)
SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM mailshot_customers GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT DISTINCT T1.customer_name, T1.customer_payment_method FROM customers AS T1 WHERE T1.customer_id IN (SELECT T2.customer_id FROM mailshot_customers AS T2 INNER JOIN mailshot_campaigns AS T3 ON T2.mailshot_id = T3.mailshot_id WHERE T3.mailshot_outcome = 'Order') AND T1.customer_id IN (SELECT T4.customer_id FROM mailshot_customers AS T4 INNER JOIN mailshot_campaigns AS T5 ON T4.mailshot_id = T5.mailshot_id WHERE T5.mailshot_outcome = 'No Response');
SELECT premises.premises_type, customer_addresses.premise_id FROM customer_addresses JOIN premises ON customer_addresses.premise_id = premises.premise_id;
SELECT DISTINCT premise_id FROM customer_addresses;
SELECT customer_orders.order_shipping_charges, customer_orders.customer_id FROM customer_orders WHERE customer_orders.order_status_code IN ('Cancelled', 'Paid');
SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_orders WHERE shipping_method_code = 'FedEx' AND order_status_code = 'Paid');
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM accounts;
SELECT account_id, customer_id, account_name FROM accounts;
SELECT account_id, customer_id, account_name FROM accounts;
SELECT other_account_details FROM accounts WHERE account_id = 338;
SELECT other_account_details FROM accounts WHERE account_id = 338;
SELECT T1.customer_first_name, T1.customer_last_name, T1.customer_phone FROM `customers` AS T1 INNER JOIN `accounts` AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_id = '162' LIMIT 1;
SELECT T1.customer_last_name, T1.customer_phone FROM customers AS T1 JOIN accounts AS T2 ON T1.customer_id = T2.customer_id WHERE T2.account_id = '162';
SELECT COUNT(account_id) FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE card_id IN (SELECT card_id FROM customers_cards WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte')));
SELECT COUNT(*) FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE card_id IN (SELECT card_id FROM customers_cards WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_last_name = 'Turcotte' AND customer_first_name = 'Art')));
SELECT c.customer_first_name || ' ' || c.customer_last_name AS customer_id, COUNT(a.account_id) AS number_of_accounts FROM customers AS c JOIN financial_transactions AS ft ON c.customer_first_name || ' ' || c.customer_last_name = ft.card_id JOIN accounts AS a ON ft.account_id = a.account_id GROUP BY c.customer_first_name || ' ' || c.customer_last_name;
SELECT COUNT(account_id), customer_id FROM accounts GROUP BY customer_id;
SELECT customer_id, COUNT(account_id) AS num_accounts FROM ( SELECT DISTINCT customer_first_name || ' ' || customer_last_name AS customer_id, account_id FROM customers INNER JOIN financial_transactions ON customers.customer_phone = financial_transactions.card_id INNER JOIN customers_cards ON financial_transactions.card_id = customers_cards.card_id INNER JOIN accounts ON financial_transactions.account_id = accounts.account_id ) AS subquery GROUP BY customer_id ORDER BY num_accounts DESC LIMIT 1;
SELECT customer_id, COUNT(account_id) AS account_count FROM accounts GROUP BY customer_id ORDER BY account_count DESC LIMIT 1;
SELECT customer_last_name, customer_first_name, customer_id FROM customers WHERE customer_id IN ( SELECT customer_id FROM accounts GROUP BY customer_id ORDER BY COUNT(account_id) ASC LIMIT 1 );
SELECT T2.customer_id, T2.customer_last_name FROM (SELECT account_id, COUNT(*) AS account_count FROM accounts GROUP BY account_id ORDER BY account_count LIMIT 1) AS T1 INNER JOIN customers_cards ON T1.account_id = customers_cards.card_id INNER JOIN customers AS T2 ON customers_cards.card_id = T2.customer_id;
SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts);
SELECT COUNT(DISTINCT customer_id) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_cards WHERE card_id IN (SELECT card_id FROM financial_transactions));
SELECT customer_last_name, customer_id FROM customers EXCEPT SELECT T1.customer_last_name, T1.customer_id FROM customers AS T1 JOIN customers_cards AS T2 ON T1.customer_id = T2.customer_id JOIN financial_transactions AS T3 ON T2.card_id = T3.card_id JOIN accounts AS T4 ON T3.account_id = T4.account_id;
SELECT customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts);
SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM customers AS T1 INNER JOIN customers_cards AS T2 ON T1.customer_id = T2.customer_id INNER JOIN financial_transactions AS T3 ON T2.card_id = T3.card_id INNER JOIN accounts AS T4 ON T3.account_id = T4.account_id;
SELECT T2.customer_last_name FROM accounts AS T1 INNER JOIN customers AS T2 ON T1.account_id = T2.customer_id
SELECT COUNT(DISTINCT customer_id) FROM customers_cards WHERE card_id IN (SELECT card_id FROM financial_transactions WHERE account_id IN (SELECT account_id FROM accounts));
SELECT COUNT(DISTINCT customer_id) FROM customers_cards WHERE card_id IN (SELECT card_id FROM financial_transactions WHERE account_id IN (SELECT account_id FROM accounts));
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT customer_id, customer_last_name, customer_first_name, customer_phone FROM customers;
SELECT customer_id, customer_last_name, customer_phone FROM customers;
SELECT customer_phone, customer_email FROM customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';
SELECT customer_phone, customer_email FROM customers WHERE customer_first_name = 'Aniyah' AND customer_last_name = 'Feest';
SELECT COUNT(card_id) FROM customers_cards;
SELECT COUNT(*) FROM customers_cards;
SELECT card_id, customer_id, card_type_code, card_number FROM customers_cards;
SELECT card_id, customer_id, card_type_code, date_valid_from FROM customers_cards;
SELECT date_valid_from, date_valid_to FROM customers_cards WHERE card_number = '4560596484842';
SELECT date_valid_from, date_valid_to FROM customers_cards WHERE card_number = 4560596484842;
SELECT customer_last_name, customer_first_name, customer_phone FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_cards WHERE card_id = 4560596484842) LIMIT 1;
SELECT T1.customer_last_name, T1.customer_phone FROM `customers` AS T1 INNER JOIN `customers_cards` AS T2 ON T1.customer_id = T2.customer_id WHERE T2.card_id = '4560596484842' LIMIT 1;
SELECT COUNT(card_id) FROM customers_cards WHERE card_id IN (SELECT card_id FROM customers_cards WHERE customer_id = (SELECT customer_id FROM customers WHERE customer_last_name = 'Turcotte' AND customer_first_name = 'Art'))
SELECT COUNT(card_id) FROM customers_cards WHERE card_id IN (SELECT card_id FROM customers_cards JOIN customers ON customers_cards.customer_id = customers.customer_id WHERE customer_first_name = 'Art' AND customer_last_name = 'Turcotte');
SELECT COUNT(card_id) FROM customers_cards WHERE card_number LIKE '4%' OR card_number LIKE '50';
SELECT COUNT(*) FROM customers_cards WHERE card_type = 'Debit';
SELECT COUNT(*) FROM customers_cards JOIN customers ON customers_cards.card_id = customers.customer_id WHERE customers.customer_first_name = 'Blanche' AND customers.customer_last_name = 'Huels';
SELECT COUNT(*) FROM customers_cards JOIN customers ON customers_cards.customer_id = customers.customer_id WHERE customers.customer_first_name = 'Blanche' AND customers.customer_last_name = 'Huels' AND customers_cards.card_type_code = 'credit';
SELECT customer_id, COUNT(card_id) AS num_cards_owned FROM customers_cards GROUP BY customer_id;
SELECT customer_id, COUNT(DISTINCT card_id) AS card_count FROM customers_cards GROUP BY customer_id;
SELECT card_id, COUNT(*) AS card_count FROM customers_cards GROUP BY card_id ORDER BY card_count DESC LIMIT 1;
SELECT c.customer_id, COUNT(cc.card_id) AS card_count FROM customers AS c JOIN customers_cards AS cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id ORDER BY card_count DESC LIMIT 1;
SELECT customer_id, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_cards GROUP BY customer_id HAVING COUNT(*) >= 2);
SELECT customer_id, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM customers_cards GROUP BY customer_id HAVING COUNT(*) > 1);
SELECT c.customer_id, c.customer_last_name, c.customer_first_name FROM customers c JOIN customers_cards cc ON c.customer_id = cc.customer_id JOIN financial_transactions ft ON cc.card_id = ft.card_id GROUP BY c.customer_id, c.customer_last_name, c.customer_first_name ORDER BY COUNT(DISTINCT ft.account_id) ASC LIMIT 1;
SELECT c.customer_id, c.customer_last_name FROM customers AS c JOIN customers_cards AS cc ON c.customer_id = cc.customer_id JOIN financial_transactions AS ft ON cc.card_id = ft.card_id GROUP BY c.customer_id, c.customer_last_name ORDER BY COUNT(DISTINCT ft.account_id) ASC LIMIT 1;
SELECT card_type_code, COUNT(*) FROM customers_cards GROUP BY card_type_code;
SELECT card_type, COUNT(*) FROM customers_cards GROUP BY card_type;
SELECT card_type_code FROM customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT card_number FROM customers_cards GROUP BY card_number ORDER BY COUNT(*) DESC LIMIT 1;
SELECT card_type_code FROM customers_cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5;
SELECT card_type_code FROM ( SELECT card_type_code, COUNT(*) AS card_count FROM customers_cards GROUP BY card_type_code ) AS card_counts WHERE card_count >= 5;
SELECT card_type_code, COUNT(DISTINCT customer_id) FROM customers_cards GROUP BY card_type_code;
SELECT card_number, COUNT(DISTINCT customer_id) FROM customers_cards GROUP BY card_number;
SELECT customer_id, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customers_cards)
SELECT customer_id, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT card_id FROM customers_cards);
SELECT DISTINCT card_type_code FROM customers_cards;
SELECT DISTINCT card_type_code FROM customers_cards;
SELECT COUNT(DISTINCT card_number) FROM customers_cards;
SELECT COUNT(DISTINCT card_number) FROM customers_cards;
SELECT DISTINCT transaction_id FROM financial_transactions;
SELECT DISTINCT transaction_type FROM financial_transactions;
SELECT COUNT(DISTINCT transaction_id) FROM financial_transactions;
SELECT COUNT(DISTINCT transaction_id) FROM financial_transactions;
SELECT AVG(amount) AS average_transaction_amount, SUM(amount) AS total_transaction_amount FROM financial_transactions;
SELECT AVG(amount) AS average_transaction_amount, SUM(amount) AS total_transaction_amount FROM financial_transactions;
SELECT card_type_code, COUNT(*) FROM financial_transactions JOIN customers_cards ON financial_transactions.card_id = customers_cards.card_id GROUP BY card_type_code;
SELECT card_type_code, COUNT(*) FROM financial_transactions JOIN customers_cards ON financial_transactions.card_id = customers_cards.card_id GROUP BY card_type_code;
SELECT transaction_type, COUNT(*) FROM financial_transactions GROUP BY transaction_type;
SELECT DISTINCT card_type_code, COUNT(*) FROM financial_transactions ft JOIN customers_cards cc ON ft.card_id = cc.card_id GROUP BY card_type_code;
SELECT transaction_type FROM financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1;
SELECT card_type_code FROM customers_cards WHERE card_id IN (SELECT card_id FROM financial_transactions GROUP BY card_id ORDER BY SUM(transaction_amount) DESC LIMIT 1) LIMIT 1;
SELECT accounts.account_id, COUNT(financial_transactions.transaction_id) AS transaction_count FROM accounts JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id GROUP BY accounts.account_id;
SELECT accounts.account_id, COUNT(financial_transactions.transaction_id) FROM financial_transactions JOIN accounts ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.account_id;
SELECT documents.document_name, documents.access_count FROM documents ORDER BY documents.document_name ASC;
SELECT documents.document_name, COUNT(document_functional_areas.functional_area_code) AS access_count FROM documents JOIN document_functional_areas ON documents.document_code = document_functional_areas.document_code GROUP BY documents.document_name ORDER BY documents.document_name ASC;
SELECT documents.document_name, COUNT(*) AS access_count FROM documents JOIN document_sections ON documents.document_code = document_sections.document_code GROUP BY documents.document_name ORDER BY access_count DESC LIMIT 1;
SELECT documents.document_name, COUNT(*) AS access_count FROM documents JOIN document_accesses ON documents.document_code = document_accesses.document_code GROUP BY documents.document_name ORDER BY access_count DESC LIMIT 1;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING COUNT(document_code) > 4;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING COUNT(*) >= 4;
SELECT SUM(access_count) FROM documents WHERE document_structure_code = (SELECT document_structure_code FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT SUM(access_count) FROM documents WHERE document_structure_code IN (SELECT document_structure_code FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 1);
SELECT AVG(access_count) FROM documents;
SELECT AVG(access_count) FROM documents;
SELECT document_structures.document_structure_description FROM documents JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code ORDER BY documents.access_count ASC LIMIT 1;
SELECT document_structures.document_structure_description FROM documents JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code GROUP BY documents.document_structure_code ORDER BY MIN(documents.access_count) LIMIT 1;
SELECT document_structure_code FROM documents WHERE document_name = 'David CV';
SELECT document_structure_code FROM documents WHERE document_name = 'David CV';
SELECT documents.document_name FROM documents JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code WHERE document_structures.document_structure_description IN ( SELECT document_structure_description FROM documents JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code GROUP BY document_structure_description ORDER BY COUNT(*) DESC LIMIT 3 ) AND documents.document_code IN ( SELECT document_code FROM documents GROUP BY document_code ORDER BY access_count DESC LIMIT 3 );
SELECT documents.document_name FROM documents JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code GROUP BY documents.document_name, documents.document_structure_code HAVING documents.document_structure_code IN ( SELECT document_structure_code FROM documents JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code GROUP BY documents.document_structure_code ORDER BY COUNT(*) DESC LIMIT 3 ) AND documents.document_name IN ( SELECT document_name FROM documents GROUP BY documents.document_name ORDER BY COUNT(*) DESC LIMIT 3 );
SELECT document_name FROM documents GROUP BY document_name HAVING SUM(access_count) > 10000;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING SUM(access_count) <= 10000;
SELECT section_code FROM document_sections JOIN documents ON document_sections.document_code = documents.document_code WHERE documents.document_type_code = 'David CV';
SELECT section_id FROM document_sections WHERE document_code IN (SELECT document_code FROM documents WHERE document_name = 'David CV')
SELECT documents.document_code FROM documents LEFT JOIN document_sections ON documents.document_code = document_sections.document_code WHERE document_sections.section_id IS NULL;
SELECT document_code FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)
SELECT user_login, password FROM users WHERE role_code IN (SELECT role_code FROM users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT user_login, password FROM users WHERE role_code IN (SELECT role_code FROM users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1)
SELECT AVG(access_count) FROM documents JOIN document_functional_areas ON documents.document_code = document_functional_areas.document_code JOIN functional_areas ON document_functional_areas.functional_area_code = functional_areas.functional_area_code WHERE functional_areas.functional_area_description = 'Acknowledgement';
SELECT AVG(access_count) FROM documents JOIN document_functional_areas ON documents.document_code = document_functional_areas.document_code JOIN functional_areas ON document_functional_areas.functional_area_code = functional_areas.functional_area_code WHERE functional_areas.functional_area_description = 'Acknowledgement';
SELECT document_code FROM documents WHERE document_code NOT IN (SELECT DISTINCT document_sections.document_code FROM document_sections JOIN document_sections_images ON document_sections.section_id = document_sections_images.section_id);
SELECT documents.document_code FROM documents WHERE document_code NOT IN (SELECT DISTINCT document_sections.document_code FROM document_sections INNER JOIN document_sections_images ON document_sections.section_id = document_sections_images.section_id);
SELECT documents.document_code FROM documents JOIN document_sections ON documents.document_code = document_sections.document_code GROUP BY documents.document_code ORDER BY COUNT(document_sections.section_id) DESC LIMIT 1;
SELECT documents.document_name FROM documents JOIN document_sections ON documents.document_code = document_sections.section_code GROUP BY documents.document_name ORDER BY COUNT(document_sections.section_id) DESC LIMIT 1;
SELECT document_code FROM documents WHERE document_code LIKE '%CV%';
SELECT document_code FROM documents WHERE document_code LIKE '%CV%';
SELECT COUNT(user_id) FROM users;
SELECT COUNT(user_id) FROM users;
SELECT role_description FROM roles WHERE role_code = (SELECT role_code FROM users WHERE login_attempts > 0 GROUP BY role_code ORDER BY COUNT(user_id) DESC LIMIT 1);
SELECT description FROM roles WHERE role_code IN (SELECT role_code FROM users WHERE user_id IS NOT NULL GROUP BY role_code ORDER BY COUNT(user_id) DESC LIMIT 1);
SELECT AVG(access_count) FROM ( SELECT COUNT(*) AS access_count FROM documents INNER JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code GROUP BY documents.document_structure_code ORDER BY COUNT(*) ASC LIMIT 1 ) AS least_popular;
SELECT AVG(access_count) FROM documents JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code WHERE document_structures.document_structure_code IN ( SELECT document_structure_code FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) ASC LIMIT 1 );
SELECT image_alt_text, image_url FROM images ORDER BY image_alt_text;
SELECT image_alt_text, image_url FROM images ORDER BY image_alt_text ASC;
SELECT roles.role_description, COUNT(users.user_id) AS user_count FROM users JOIN roles ON users.role_code = roles.role_code GROUP BY roles.role_description;
SELECT roles.role_code, COUNT(users.user_id) FROM users INNER JOIN roles ON users.role_code = roles.role_code GROUP BY roles.role_code;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING COUNT(document_code) > 2;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING COUNT(*) > 2;
SELECT COUNT(*) FROM courses;
SELECT COUNT(course_id) FROM courses;
SELECT course_description FROM courses WHERE subject_id = 'database';
SELECT course_description FROM courses WHERE course_id IN (SELECT course_id FROM courses WHERE subject_id = 'database');
SELECT address_line_1 FROM course_authors_and_tutors WHERE author_tutor_atb = 'Cathrine';
SELECT address_line_1 FROM course_authors_and_tutors WHERE author_tutor_atb = 'Cathrine';
SELECT address FROM course_authors_and_tutors;
SELECT address FROM course_authors_and_tutors;
SELECT family_name, author_tutor_atb FROM course_authors_and_tutors;
SELECT family_name, author_tutor_atb FROM course_authors_and_tutors;
SELECT date_of_enrollment, date_of_completion FROM student_course_enrolment;
SELECT date_of_enrollment, date_of_completion FROM student_course_enrolment;
SELECT COUNT(DISTINCT student_course_enrolment.student_id) FROM student_course_enrolment;
SELECT COUNT(DISTINCT student_course_enrolment.student_id) FROM student_course_enrolment;
SELECT COUNT(DISTINCT course_id) FROM student_course_enrolment;
SELECT COUNT(DISTINCT course_id) FROM student_course_enrolment;
SELECT date_of_enrolment FROM student_course_enrolment WHERE registration_id IN (SELECT registration_id FROM student_tests_taken WHERE test_result = 'Pass');
SELECT test_result, date_of_enrolment FROM student_tests_taken INNER JOIN student_course_enrolment ON student_tests_taken.registration_id = student_course_enrolment.registration_id WHERE test_result = 'Pass';
SELECT COUNT(*) FROM student_tests_taken WHERE result = 'Fail';
SELECT COUNT(*) FROM student_tests_taken WHERE result = 'Fail';
SELECT student_id FROM students WHERE family_name = 'Ward';
SELECT login_name FROM students INNER JOIN course_authors_and_tutors ON students.student_id = course_authors_and_tutors.author_id WHERE students.family_name = 'Ward';
SELECT MAX(date_of_registration) FROM students WHERE family_name IN ('Jaskolski', 'Langosh');
SELECT MAX(date_of_registration) FROM students WHERE family_name IN ('Jaskolski', 'Langosh');
SELECT COUNT(DISTINCT students.student_id) FROM students JOIN course_authors_and_tutors ON students.middle_name LIKE '%' || course_authors_and_tutors.personal_name || '%' WHERE course_authors_and_tutors.personal_name LIKE '%son%';
SELECT COUNT(*) FROM students WHERE middle_name LIKE '%son%' OR family_name LIKE '%son%';
SELECT course_name FROM courses;
SELECT subject_id FROM subjects;
SELECT * FROM course_authors_and_tutors ORDER BY login_name ASC;
SELECT login_name FROM course_authors_and_tutors ORDER BY login_name ASC;
SELECT family_name, middle_name FROM students ORDER BY family_name ASC;
SELECT family_name, personal_name FROM students ORDER BY family_name ASC;
SELECT test_result, COUNT(*) AS count FROM student_tests_taken GROUP BY test_result ORDER BY count DESC;
SELECT test_result, COUNT(DISTINCT student_tests_taken.registration_id) FROM student_tests_taken GROUP BY test_result;
SELECT login_name FROM course_authors_and_tutors WHERE author_id IN (SELECT author_id FROM courses WHERE course_name = 'advanced database');
SELECT login_name FROM course_authors_and_tutors WHERE author_id IN (SELECT author_id FROM courses WHERE course_name = 'advanced database')
SELECT address_line_1 FROM course_authors_and_tutors WHERE author_id IN (SELECT author_id FROM courses WHERE course_name IN ('operating system', 'data structure'))
SELECT address FROM course_authors_and_tutors WHERE author_id IN (SELECT author_id FROM courses WHERE course_name IN ('operating system', 'data structure'))
SELECT personal_name, family_name, author_id FROM course_authors_and_tutors WHERE author_id IN ( SELECT author_id FROM courses GROUP BY author_id ORDER BY COUNT(course_id) DESC LIMIT 1 )
SELECT personal_name, family_name, author_id FROM course_authors_and_tutors JOIN courses ON course_authors_and_tutors.author_id = courses.author_id GROUP BY courses.author_id ORDER BY COUNT(courses.course_id) DESC LIMIT 1;
SELECT author_id, address FROM course_authors_and_tutors WHERE author_id IN (SELECT author_id FROM courses GROUP BY author_id HAVING COUNT(course_id) >= 2);
SELECT author_id, address FROM course_authors_and_tutors WHERE author_id IN (SELECT author_id FROM courses GROUP BY author_id HAVING COUNT(course_id) > 1);
SELECT course_description FROM courses WHERE author_id IN (SELECT author_id FROM course_authors_and_tutors WHERE login_name = 'Julio');
SELECT T1.course_name FROM courses AS T1 JOIN course_authors_and_tutors AS T2 ON T1.author_id = T2.author_id WHERE T2.login_name = 'Julio'
SELECT course_name, course_description FROM courses INNER JOIN subjects ON courses.subject_id = subjects.subject_id WHERE subjects.subject_name = 'Computer Science';
SELECT course_name, course_description FROM courses INNER JOIN subjects ON courses.subject_id = subjects.subject_id WHERE subjects.subject_name = 'Computer Science';
SELECT subjects.subject_id, subjects.subject_name, COUNT(courses.course_id) AS num_courses FROM subjects JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name;
SELECT subjects.subject_id, subjects.subject_name, COUNT(courses.course_id) AS num_courses FROM subjects JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name;
SELECT subjects.subject_id, subjects.subject_name, COUNT(courses.course_id) AS num_courses FROM subjects JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name ORDER BY num_courses ASC;
SELECT subjects.subject_id, subjects.subject_name, COUNT(courses.course_id) AS num_courses FROM subjects JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name ORDER BY num_courses ASC;
SELECT date_of_completion FROM student_course_enrolment WHERE course_id IN (SELECT course_id FROM courses WHERE course_description = 'Spanish');
SELECT date_of_completion FROM student_course_enrolment JOIN courses ON student_course_enrolment.course_id = courses.course_id WHERE courses.course_name = 'Spanish';
SELECT courses.course_name FROM student_course_enrolment INNER JOIN courses ON student_course_enrolment.course_id = courses.course_id GROUP BY courses.course_name ORDER BY COUNT(student_course_enrolment.registration_id) DESC LIMIT 1;
SELECT course_name FROM courses JOIN student_course_enrolment ON courses.course_id = student_course_enrolment.course_id GROUP BY courses.course_name ORDER BY COUNT(student_course_enrolment.student_id) DESC LIMIT 1;
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_enrolment GROUP BY course_id HAVING COUNT(student_id) = 1);
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_enrolment GROUP BY course_id HAVING COUNT(student_id) = 1);
SELECT courses.course_description, course_authors_and_tutors.personal_name FROM courses JOIN student_course_enrolment ON courses.course_id = student_course_enrolment.course_id JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id GROUP BY courses.course_id HAVING COUNT(student_course_enrolment.student_id) > 2;
SELECT courses.course_description, courses.course_name FROM courses INNER JOIN student_course_enrolment ON courses.course_id = student_course_enrolment.course_id GROUP BY courses.course_id HAVING COUNT(student_course_enrolment.student_id) > 2;
SELECT courses.course_name, COUNT(student_course_enrolment.student_id) AS enrollment_count FROM courses JOIN student_course_enrolment ON courses.course_id = student_course_enrolment.course_id GROUP BY courses.course_name;
SELECT courses.course_name, COUNT(student_course_enrolment.student_id) AS enrolled_students FROM courses JOIN student_course_enrolment ON courses.course_id = student_course_enrolment.course_id GROUP BY courses.course_name;
SELECT date_of_completion FROM student_course_enrolment WHERE registration_id IN ( SELECT registration_id FROM student_tests_taken WHERE result = 'Pass' );
SELECT date_of_completion FROM student_course_enrolment WHERE registration_id IN (SELECT registration_id FROM student_tests_taken WHERE result = 'Pass');
SELECT date_test_taken FROM student_tests_taken WHERE result = 'Fail';
SELECT date_test_taken FROM student_tests_taken WHERE result = 'Fail';
SELECT date_of_enrolment, date_of_completion FROM student_course_enrolment INNER JOIN students ON student_course_enrolment.student_id = students.student_id INNER JOIN course_authors_and_tutors ON students.student_id = course_authors_and_tutors.author_id WHERE course_authors_and_tutors.personal_name = 'Karson';
SELECT date_of_enrolment, date_of_completion FROM student_course_enrolment JOIN students ON student_course_enrolment.student_id = students.student_id WHERE students.personal_name = 'Karson';
SELECT student_course_enrolment.date_of_enrollment, student_course_enrolment.date_of_completion FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id WHERE students.family_name = 'Zieme' AND students.student_id = 'Bernie';
SELECT date_of_completion FROM student_course_enrolment WHERE student_id IN (SELECT student_id FROM students WHERE family_name = 'Zieme' AND personal_name = 'Bernie')
SELECT students.student_id, students.login_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id GROUP BY students.student_id, students.login_name ORDER BY COUNT(student_course_enrolment.registration_id) DESC LIMIT 1;
SELECT students.student_id, course_authors_and_tutors.login_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id JOIN course_authors_and_tutors ON students.student_id = course_authors_and_tutors.author_tutor_atb GROUP BY students.student_id, course_authors_and_tutors.login_name ORDER BY COUNT(student_course_enrolment.course_id) DESC LIMIT 1;
SELECT students.student_id, students.personal_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id GROUP BY students.student_id, students.personal_name HAVING COUNT(student_course_enrolment.registration_id) >= 2;
SELECT T2.student_id, T2.personal_name FROM student_course_enrolment AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id, T2.personal_name HAVING COUNT(T1.registration_id) >= 2;
SELECT student_id, middle_name FROM students WHERE student_id IN (SELECT student_id FROM student_course_enrolment GROUP BY student_id HAVING COUNT(*) <= 2);
SELECT student_id, middle_name FROM student_course_enrolment GROUP BY student_id, middle_name HAVING COUNT(DISTINCT course_id) <= 2;
SELECT DISTINCT family_name FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_enrolment)
SELECT personal_name FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_enrolment)
SELECT COUNT(*) FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_enrolment);
SELECT COUNT(*) FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_enrolment);
SELECT login_name FROM (SELECT personal_name AS login_name FROM course_authors_and_tutors UNION SELECT personal_name AS login_name FROM students) AS combined_names GROUP BY login_name HAVING COUNT(login_name) > 1;
SELECT login_name FROM (SELECT author_id AS id, password AS login_name FROM course_authors_and_tutors UNION SELECT student_id AS id, password AS login_name FROM students) AS combined_users GROUP BY login_name HAVING COUNT(id) > 1;
SELECT DISTINCT middle_name FROM students INTERSECT SELECT DISTINCT middle_name FROM course_authors_and_tutors;
SELECT DISTINCT personal_name FROM ( SELECT login_name AS personal_name FROM course_authors_and_tutors UNION SELECT middle_name AS personal_name FROM students ) AS combined_names GROUP BY personal_name HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM farm;
SELECT COUNT(*) FROM farm;
SELECT sum(working_horses) AS total_horses FROM farm GROUP BY farm_id ORDER BY total_horses ASC;
SELECT farm_id, SUM(working_horses) AS total_horses FROM farm GROUP BY farm_id ORDER BY total_horses ASC;
SELECT hosts FROM farm_competition WHERE competition_id NOT IN (SELECT competition_id FROM competition_record WHERE theme = 'Aliens')
SELECT DISTINCT hosts FROM farm_competition WHERE competition_id NOT IN (SELECT competition_id FROM competition_record WHERE theme = 'Aliens');
SELECT theme FROM farm_competition ORDER BY year ASC;
SELECT theme FROM farm_competition ORDER BY year ASC;
SELECT AVG(total_horses) FROM farm WHERE total_horses > 5000;
SELECT AVG(working_horses) FROM farm WHERE total_cattle > 5000;
SELECT max(total_cows), min(total_cows) FROM farm;
SELECT MAX(total_cows), MIN(total_cows) FROM farm;
SELECT COUNT(DISTINCT status) FROM city;
SELECT COUNT(DISTINCT status) FROM farm;
SELECT status FROM city ORDER BY population DESC;
SELECT status FROM city ORDER BY population DESC;
SELECT status, official_name FROM city ORDER BY population DESC LIMIT 1;
SELECT status, city FROM city ORDER BY population DESC LIMIT 1;
SELECT year, official_name FROM farm_competition fc INNER JOIN city c ON fc.host_city_id = c.city_id;
SELECT DISTINCT farm_competition.theme, city.status FROM farm_competition INNER JOIN city ON farm_competition.host_city_id = city.city_id;
SELECT official_name FROM city WHERE city_id IN (SELECT hosts FROM farm_competition GROUP BY hosts HAVING COUNT(*) > 1);
SELECT official_name FROM city WHERE city_id IN (SELECT hosts FROM farm_competition GROUP BY hosts HAVING COUNT(*) > 1);
SELECT status FROM city WHERE city_id = (SELECT hosts FROM farm_competition GROUP BY hosts ORDER BY COUNT(*) DESC LIMIT 1)
SELECT status FROM city WHERE city_id = (SELECT hosts FROM farm_competition GROUP BY hosts ORDER BY COUNT(*) DESC LIMIT 1) LIMIT 1;
SELECT theme FROM farm_competition INNER JOIN city ON farm_competition.host_city_id = city.city_id WHERE population > 1000;
SELECT theme FROM farm_competition INNER JOIN city ON farm_competition.host_city_id = city.city_id WHERE city.population > 1000;
SELECT status, AVG(population) FROM city GROUP BY status;
SELECT status, AVG(population) AS avg_population FROM city GROUP BY status;
SELECT status, COUNT(*) as city_count FROM city GROUP BY status ORDER BY city_count DESC;
SELECT status, COUNT(*) as frequency FROM city GROUP BY status ORDER BY frequency ASC;
SELECT most_common_status FROM ( SELECT official_name, status, COUNT(*) AS count FROM city GROUP BY official_name, status ORDER BY count DESC LIMIT 1 ) AS subquery;
SELECT most_common_status FROM ( SELECT official_name, status, COUNT(*) AS count FROM city GROUP BY official_name, status ORDER BY count DESC LIMIT 1 );
SELECT status FROM city WHERE city_id NOT IN (SELECT host_city_id FROM farm_competition)
SELECT official_name FROM city WHERE city_id NOT IN (SELECT host_city_id FROM farm_competition)
SELECT status FROM city WHERE population > 1500 INTERSECT SELECT status FROM city WHERE population < 500;
SELECT status FROM city WHERE population > 1500 INTERSECT SELECT status FROM city WHERE population < 500;
SELECT status FROM city WHERE population > 1500 OR population < 500;
SELECT status FROM city WHERE population > 1500 OR population < 500;
SELECT census_ranking FROM city WHERE official_name != 'Village';
SELECT census_ranking FROM city WHERE official_name != 'Village'
SELECT COUNT(*) FROM flight WHERE velocity > 200;
SELECT flight.number, flight.date, flight.pilot FROM flight ORDER BY flight.altitude;
SELECT id, country, city, name FROM airport ORDER BY name ASC;
SELECT MAX(principal_activities) FROM operate_company;
SELECT velocity FROM flight JOIN operate_company ON flight.company_id = operate_company.id WHERE operate_company.principal_activities = 'pilot' AND operate_company.type = 'Thompson';
SELECT operate_company.name, operate_company.type FROM operate_company INNER JOIN flight ON operate_company.id = flight.company_id;
SELECT name FROM airport WHERE city != 'Iceland';
SELECT distinct operate_company.type FROM flight JOIN operate_company ON flight.company_id = operate_company.id WHERE flight.velocity < 200;
SELECT operate_company.id, operate_company.name FROM operate_company JOIN flight ON operate_company.id = flight.company_id GROUP BY operate_company.id, operate_company.name HAVING COUNT(*) > 1;
SELECT T1.id, T1.name, T1.iata FROM `airport` AS T1 JOIN `flight` AS T2 ON T1.id = T2.airport_id GROUP BY T1.iata ORDER BY count(*) DESC LIMIT 1;
SELECT DISTINCT pilot FROM flight JOIN airport ON flight.airport_id = airport.id JOIN operate_company ON flight.company_id = operate_company.id WHERE operate_company.principal_activities = 'United States' OR airport.name = 'Billund Airport';
SELECT principal_activities, COUNT(*) AS count FROM operate_company GROUP BY principal_activities ORDER BY count DESC LIMIT 1;
SELECT COUNT(DISTINCT airport.id) FROM airport WHERE airport.id NOT IN ( SELECT flight.airport_id FROM flight JOIN operate_company ON flight.company_id = operate_company.id WHERE operate_company.principal_activities = 'pilot' AND operate_company.id IN ( SELECT operate_company.id FROM operate_company WHERE operate_company.type = 'person' AND operate_company.principal_activities = 'pilot' AND operate_company.incorporated_in LIKE '%Thompson%' ) );
SELECT pilot FROM flight WHERE company_id IN ( SELECT id FROM operate_company WHERE principal_activities = 'Cargo' ) INTERSECT SELECT pilot FROM flight WHERE company_id IN ( SELECT id FROM operate_company WHERE principal_activities = 'Catering services' );
SELECT DISTINCT city FROM airport WHERE city LIKE '%international%';
SELECT airport.name, COUNT(DISTINCT flight.company_id) AS num_operating_companies FROM flight JOIN airport ON flight.airport_id = airport.id GROUP BY airport.name;
SELECT COUNT(*), T1.city FROM `airport` AS T1 GROUP BY T1.city
SELECT incorporated_in FROM operate_company WHERE id IN (SELECT airport_id FROM airport GROUP BY airport_id HAVING COUNT(*) > 2) GROUP BY incorporated_in;
SELECT pilot FROM flight GROUP BY pilot ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM furniture;
SELECT name, furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1;
SELECT SUM(T2.price_in_dollar) AS total_market_rate FROM ( SELECT furniture_id, SUM(price_in_dollar) AS total_sales FROM furniture_manufacte GROUP BY furniture_id ORDER BY total_sales DESC LIMIT 2 ) AS T1 JOIN furniture_manufacte AS T2 ON T1.furniture_id = T2.furniture_id;
SELECT furniture.num_of_component, furniture.furniture_id FROM furniture WHERE furniture.num_of_component > 10;
SELECT name, market_rate FROM furniture WHERE furniture_id IN (SELECT furniture_id FROM furniture_manufacte GROUP BY furniture_id ORDER BY SUM(price_in_dollar) ASC LIMIT 1)
SELECT furniture_id FROM furniture_manufacte WHERE price_in_dollar < (SELECT MAX(price_in_dollar) FROM furniture_manufacte)
SELECT name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1;
SELECT AVG(num_of_shops) FROM manufacturer WHERE num_of_shops > 20;
SELECT name, manufacturer_id FROM manufacturer ORDER BY open_year;
SELECT name, year_of_opening FROM manufacturer WHERE num_of_factories < 10 OR num_of_shops > 10;
SELECT avg(num_of_factories), max(num_of_shops) FROM manufacturer WHERE name IN ( SELECT name FROM manufacturer WHERE manufacturer_id IN ( SELECT manufacturer_id FROM furniture_manufacte WHERE furniture_id IN ( SELECT furniture_id FROM furniture ) ) AND strftime('%Y', name) < '1990' )
SELECT manufacturer.manufacturer_id, num_of_shops FROM manufacturer JOIN furniture_manufacte ON manufacturer.manufacturer_id = furniture_manufacte.manufacturer_id JOIN furniture ON furniture_manufacte.furniture_id = furniture.furniture_id ORDER BY furniture_manufacte.price_in_dollar DESC LIMIT 1;
SELECT manufacturer.name, COUNT(DISTINCT furniture_manufacte.furniture_id) AS num_of_furniture_types FROM manufacturer JOIN furniture_manufacte ON manufacturer.manufacturer_id = furniture_manufacte.manufacturer_id GROUP BY manufacturer.name;
SELECT furniture.name, furniture_manufacte.price_in_dollar FROM furniture JOIN furniture_manufacte ON furniture.furniture_id = furniture_manufacte.furniture_id;
SELECT furniture.name, furniture.market_rate FROM furniture LEFT JOIN furniture_manufacte ON furniture.furniture_id = furniture_manufacte.furniture_id WHERE furniture_manufacte.manufacturer_id IS NULL;
SELECT manufacturer.name FROM manufacturer JOIN furniture_manufacte ON manufacturer.manufacturer_id = furniture_manufacte.manufacturer_id JOIN furniture ON furniture_manufacte.furniture_id = furniture.furniture_id WHERE furniture.name IN ( SELECT name FROM furniture WHERE market_rate < 6 ) INTERSECT SELECT manufacturer.name FROM manufacturer JOIN furniture_manufacte ON manufacturer.manufacturer_id = furniture_manufacte.manufacturer_id JOIN furniture ON furniture_manufacte.furniture_id = furniture.furniture_id WHERE furniture.name IN ( SELECT name FROM furniture WHERE market_rate > 10 );
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT name FROM visitor ORDER BY membership_level DESC;
SELECT AVG(age) FROM visitor WHERE id NOT IN (SELECT visitor_id FROM visit JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.num_of_staff > 4);
SELECT name, membership_level FROM visitor WHERE membership_level > 4 ORDER BY age DESC;
SELECT id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009;
SELECT open_year, num_of_staff FROM museum WHERE museum_id = (SELECT museum_id FROM museum WHERE name = 'Plaza Museum');
SELECT name FROM museum WHERE staff_count > (SELECT MIN(staff_count) FROM museum WHERE open_year > 2010);
SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(DISTINCT visit.museum_id) > 1;
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id ORDER BY SUM(visit.total_spent) DESC LIMIT 1;
SELECT museum.id, museum.name FROM museum INNER JOIN visit ON museum.museum_id = visit.museum_id GROUP BY museum.museum_id ORDER BY COUNT(visit.visitor_id) DESC LIMIT 1;
SELECT name FROM museum WHERE museum_id NOT IN (SELECT DISTINCT museum_id FROM visit);
SELECT visitor.name, visitor.age FROM visit JOIN visitor ON visit.visitor_id = visitor.id ORDER BY visit.num_of_ticket DESC LIMIT 1;
SELECT AVG(total_spent), MAX(total_spent) FROM visit;
SELECT SUM(visit.total_spent) FROM visit JOIN visitor ON visit.visitor_id = visitor.id WHERE visitor.level_of_membership = 1;
SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009 INTERSECT SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011;
SELECT COUNT(DISTINCT visitor.id) FROM visitor WHERE visitor.id NOT IN ( SELECT visit.visitor_id FROM visit INNER JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2010 )
SELECT COUNT(*) FROM museum WHERE year_opened > 2013 OR year_opened < 2008;
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT grade, id FROM highschooler;
SELECT grade FROM highschooler;
SELECT id, name FROM highschooler;
SELECT grade FROM highschooler WHERE id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT grade FROM highschooler WHERE id IN (SELECT student_id FROM likes WHERE liked_id IN (SELECT id FROM highschooler WHERE name = 'Kyle')) LIMIT 1;
SELECT id FROM highschooler WHERE grade = '10';
SELECT id FROM highschooler WHERE grade = '10';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM highschooler WHERE grade IN ('9', '10');
SELECT COUNT(*) FROM highschooler WHERE grade IN ('9', '10');
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;
SELECT COUNT(name), grade FROM highschooler GROUP BY grade;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name;
SELECT highschooler.id, highschooler.grade, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id, highschooler.grade;
SELECT highschooler.id, highschooler.grade, COUNT(friend.friend_id) AS friend_count FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id, highschooler.grade;
SELECT id FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT id FROM highschooler WHERE id IN (SELECT liked_id FROM likes GROUP BY liked_id HAVING COUNT(*) >= 3);
SELECT id FROM highschooler WHERE id IN (SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 3);
SELECT T2.id FROM friend AS T1 JOIN highschooler AS T2 ON T1.friend_id = T2.id WHERE T1.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT T2.name FROM `friend` AS T1 INNER JOIN `highschooler` AS T2 ON T1.friend_id = T2.id WHERE T1.student_id = (SELECT `id` FROM `highschooler` WHERE `name` = 'Kyle')
SELECT COUNT(*) FROM friend WHERE friend_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM friend WHERE friend_id IN (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT highschooler.id FROM highschooler WHERE highschooler.id NOT IN (SELECT student_id FROM friend);
SELECT highschooler.id FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.friend_id IS NULL;
SELECT name FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT DISTINCT h.id FROM highschooler h INNER JOIN friend f ON h.id = f.student_id INNER JOIN likes l ON h.id = l.liked_id;
SELECT DISTINCT student_id FROM likes INTERSECT SELECT DISTINCT student_id FROM friend;
SELECT DISTINCT name FROM highschooler WHERE id IN (SELECT student_id FROM likes) AND id IN (SELECT student_id FROM friend);
SELECT DISTINCT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.liked_id JOIN friend ON highschooler.id = friend.student_id;
SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;
SELECT student_id, COUNT(*) FROM likes GROUP BY student_id;
SELECT name, COUNT(likes.liked_id) as likes_count FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT name, COUNT(*) as likes_count FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name ORDER BY COUNT(likes.liked_id) DESC LIMIT 1;
SELECT name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name ORDER BY COUNT(likes.liked_id) DESC LIMIT 1;
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT name FROM highschooler WHERE id IN (SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2)
SELECT id FROM highschooler WHERE grade > 5 INTERSECT SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(DISTINCT friend_id) >= 2;
SELECT id FROM highschooler WHERE grade > 5 INTERSECT SELECT student_id FROM friend GROUP BY student_id HAVING COUNT(*) >= 2;
SELECT COUNT(*) FROM likes WHERE liked_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT student_id FROM friend);
SELECT MIN(highschooler.grade) FROM highschooler WHERE NOT EXISTS(SELECT * FROM friend WHERE friend.student_id = highschooler.id);
SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend);
SELECT COUNT(*) FROM party;
SELECT COUNT(*) FROM party;
SELECT theme FROM party ORDER BY number_of_hosts ASC;
SELECT theme FROM party ORDER BY number_of_hosts ASC;
SELECT theme, location FROM party;
SELECT theme, location FROM party;
SELECT first_year, last_year FROM party WHERE location IN ('Spring', 'Teqnology');
SELECT first_year, last_year FROM party WHERE location IN ('Spring', 'Teqnology');
SELECT AVG(COUNT(host_id)) AS avg_hosts_per_party FROM party_host GROUP BY party_id
SELECT AVG(COUNT(*)) AS avg_hosts_per_party FROM party_host GROUP BY party_id;
SELECT location FROM party JOIN party_host ON party.party_id = party_host.party_id GROUP BY party.location ORDER BY COUNT(party_host.host_id) DESC LIMIT 1;
SELECT location FROM party JOIN party_host ON party.party_id = party_host.party_id GROUP BY party.location ORDER BY COUNT(party_host.host_id) DESC LIMIT 1;
SELECT nationality, COUNT(*) FROM host GROUP BY nationality;
SELECT nationality, COUNT(*) FROM host GROUP BY nationality;
SELECT nationality FROM host GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM host GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT nation FROM host WHERE age > 45 INTERSECT SELECT DISTINCT nation FROM host WHERE age < 35;
SELECT DISTINCT nation FROM host WHERE age > 45 INTERSECT SELECT DISTINCT nation FROM host WHERE age < 35;
SELECT party.party_theme, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id WHERE party_host.is_main_in_charge = 1;
SELECT party.theme, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id WHERE party_host.is_main_in_charge = 1;
SELECT party.location, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id ORDER BY host.age ASC;
SELECT party.location, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id WHERE party_host.is_main_in_charge = 1 ORDER BY host.age ASC;
SELECT location FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id WHERE host.age > 50;
SELECT location FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id WHERE host.age > 50;
SELECT name FROM host WHERE host_id IN (SELECT host_id FROM party_host WHERE party_id IN (SELECT party_id FROM party WHERE number_of_hosts > 20));
SELECT T3.first_name, T3.last_name FROM party AS T1 INNER JOIN party_host AS T2 ON T1.party_id = T2.party_id INNER JOIN host AS T3 ON T2.host_id = T3.host_id GROUP BY T1.party_id HAVING COUNT(T2.host_id) > 20;
SELECT name, nationality FROM host WHERE age = (SELECT MAX(age) FROM host);
SELECT name, nationality FROM host WHERE age = (SELECT MAX(age) FROM host);
SELECT name FROM host WHERE host_id NOT IN (SELECT host_id FROM party_host);
SELECT name FROM host WHERE host_id NOT IN (SELECT host_id FROM party_host);
SELECT COUNT(*) FROM phone;
SELECT phone_id FROM phone ORDER BY price ASC;
SELECT memory_in_g FROM phone;
SELECT DISTINCT carrier FROM phone WHERE memory > 32;
SELECT name FROM phone WHERE phone_id IN (SELECT phone_id FROM phone_market WHERE market_id IN (SELECT market_id FROM market WHERE ranking = 1 OR ranking = 3));
SELECT name FROM phone ORDER BY price DESC LIMIT 1;
SELECT name, COUNT(*) FROM phone GROUP BY name;
SELECT name FROM phone GROUP BY name ORDER BY COUNT(phone_id) DESC LIMIT 1;
SELECT carrier FROM phone WHERE memory_in_g < 32 INTERSECT SELECT carrier FROM phone WHERE memory_in_g > 64;
SELECT phone.name, market.district FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id JOIN market ON phone_market.market_id = market.market_id;
SELECT phone.name, market.district FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id JOIN market ON phone_market.market_id = market.market_id ORDER BY market.ranking ASC;
SELECT name FROM phone INNER JOIN phone_market ON phone.id = phone_market.phone_id INNER JOIN market ON market.id = phone_market.market_id WHERE market.num_of_shops > 50;
SELECT phone.phone_id, phone.price, phone.memory_in_g, SUM(phone_market.num_of_stock) as total_stock FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id GROUP BY phone.phone_id, phone.price, phone.memory_in_g;
SELECT phone.phone_id FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id GROUP BY phone.phone_id HAVING SUM(phone_market.num_of_stock) > 2000 ORDER BY SUM(phone_market.num_of_stock) DESC;
SELECT name FROM phone WHERE phone_id NOT IN (SELECT phone_id FROM phone_market);
SELECT catalog_entry_id FROM catalog_contents;
SELECT catalog_entry_id FROM catalog_contents;
SELECT attribute_name FROM attribute_definitions GROUP BY attribute_name HAVING COUNT(*) > 3;
SELECT attribute_name FROM attribute_definitions GROUP BY attribute_name HAVING COUNT(attribute_id) > 3;
SELECT attribute_data_type FROM attribute_definitions WHERE attribute_id IN (SELECT attribute_id FROM catalog_contents_additional_attributes WHERE attribute_value = 'Green');
SELECT attribute_data_type FROM attribute_definitions WHERE attribute_id = (SELECT attribute_id FROM attribute_definitions WHERE attribute_name = 'Green');
SELECT catalog_structure.catalog_level_number, catalog_id FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10;
SELECT catalog_structure.catalog_level_number, catalog_structure.catalog_id FROM catalog_structure WHERE catalog_structure.catalog_level_number BETWEEN 5 AND 10;
SELECT catalog_name FROM catalogs WHERE catalog_name LIKE '%Murray%';
SELECT catalog_name FROM catalogs WHERE catalog_name LIKE '%Murray%';
SELECT catalog_name FROM catalogs GROUP BY catalog_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1;
SELECT catalogs.catalog_name, catalogs.date_of_latest_revision FROM catalogs JOIN catalog_structure ON catalogs.catalog_id = catalog_structure.catalog_id WHERE catalog_structure.catalog_level_number > 5;
SELECT catalogs.catalog_name, catalogs.date_of_latest_revision FROM catalogs JOIN catalog_structure ON catalogs.catalog_id = catalog_structure.catalog_id WHERE catalog_structure.catalog_level_number > 5;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents INNER JOIN catalog_contents_additional_attributes ON catalog_contents.catalog_entry_id = catalog_contents_additional_attributes.catalog_entry_id GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents INNER JOIN catalog_contents_additional_attributes ON catalog_contents.catalog_entry_id = catalog_contents_additional_attributes.catalog_entry_id GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1;
SELECT catalog_name FROM catalogs WHERE catalog_id = (SELECT catalog_id FROM catalog_structure WHERE catalog_level_number = (SELECT catalog_level_number FROM catalog_contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM catalog_contents)));
SELECT catalog_name FROM catalogs WHERE catalog_id = (SELECT catalog_id FROM catalog_structure WHERE catalog_level_number = (SELECT catalog_level_number FROM catalog_contents ORDER BY price_in_euros * 1.085 ASC LIMIT 1));
SELECT catalog_structure.catalog_level_number FROM catalog_contents JOIN catalog_structure ON catalog_contents.catalog_level_number = catalog_structure.catalog_level_number WHERE catalog_contents.price_in_euros = (SELECT MIN(price_in_euros) FROM catalog_contents)
SELECT AVG(price_in_dollars * 0.91), MIN(price_in_dollars * 0.91) FROM catalog_contents;
SELECT AVG(price_in_dollars * 0.91) AS avg_price_euro, MIN(price_in_dollars * 0.91) AS min_price_euro FROM catalog_contents;
SELECT catalog_entry_id FROM catalog_contents ORDER BY height DESC LIMIT 1;
SELECT catalog_entry_id FROM catalog_contents ORDER BY height DESC LIMIT 1;
SELECT catalog_contents.product_stock_number FROM catalog_contents INNER JOIN catalog_contents_additional_attributes ON catalog_contents.catalog_entry_id = catalog_contents_additional_attributes.catalog_entry_id WHERE attribute_id = 'capacity' ORDER BY attribute_value ASC LIMIT 1;
SELECT catalog_entry_id FROM catalog_contents ORDER BY capacity ASC LIMIT 1;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents WHERE catalog_contents.catalog_entry_id LIKE '2%'
SELECT catalog_entry_id FROM catalog_contents WHERE product_stock_number LIKE '2%'
SELECT catalog_entry_id FROM catalog_contents WHERE catalog_level_number = 8;
SELECT catalog_entry_id FROM catalog_contents WHERE catalog_level_number = 8;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents WHERE height > 5 OR width < 3;
SELECT catalog_entry_id FROM catalog_contents WHERE length < 3 OR length > 5;
SELECT attribute_definitions.attribute_id, attribute_definitions.attribute_data_type FROM attribute_definitions JOIN catalog_contents_additional_attributes ON attribute_definitions.attribute_id = catalog_contents_additional_attributes.attribute_id WHERE catalog_contents_additional_attributes.attribute_value = 0;
SELECT attribute_definitions.attribute_name, catalog_contents_additional_attributes.attribute_id FROM attribute_definitions JOIN catalog_contents_additional_attributes ON attribute_definitions.attribute_name = catalog_contents_additional_attributes.attribute_id WHERE catalog_contents_additional_attributes.attribute_value = 0;
SELECT catalog_contents.capacity, catalog_contents.catalog_entry_id FROM catalog_contents WHERE price_in_euros * 1.1 > 700;
SELECT catalog_entry_id, capacity FROM catalog_contents WHERE price_in_dollars > 700;
SELECT date_of_publication FROM catalogs GROUP BY date_of_publication HAVING COUNT(*) > 1;
SELECT date_of_publication FROM catalogs GROUP BY date_of_publication HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM catalog_contents;
SELECT COUNT(*) FROM catalog_contents;
SELECT product_stock_number FROM catalog_contents WHERE catalog_entry_id > 8;
SELECT catalog_entry_id FROM catalog_contents WHERE next_entry_id > 8;
SELECT COUNT(*) FROM scientists;
SELECT COUNT(*) FROM scientists;
SELECT SUM(assignedto.hours) FROM assignedto;
SELECT SUM(T2.hours) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project
SELECT COUNT(DISTINCT scientist) FROM assignedto;
SELECT COUNT(DISTINCT scientist) FROM assignedto;
SELECT COUNT(DISTINCT name) FROM projects;
SELECT COUNT(DISTINCT name) FROM projects;
SELECT AVG(hours) FROM projects;
SELECT AVG(hours) FROM projects;
SELECT name FROM projects ORDER BY duration DESC LIMIT 1;
SELECT name FROM projects WHERE code IN (SELECT project FROM assignedto GROUP BY project ORDER BY SUM(hours) DESC LIMIT 1) LIMIT 1;
SELECT DISTINCT projects.code FROM projects WHERE projects.hours > (SELECT AVG(hours) FROM projects);
SELECT DISTINCT projects.code FROM projects WHERE projects.hours > (SELECT AVG(hours) FROM projects);
SELECT T1.name, T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.code ORDER BY COUNT(T2.scientist) DESC LIMIT 1;
SELECT projects.name, projects.hours FROM projects JOIN assignedto ON projects.code = assignedto.project GROUP BY projects.code ORDER BY COUNT(assignedto.scientist) DESC LIMIT 1;
SELECT projects.name FROM projects JOIN assignedto ON projects.code = assignedto.project JOIN scientists ON assignedto.scientist = scientists.name WHERE scientists.name LIKE '%Smith%';
SELECT projects.name FROM projects JOIN assignedto ON projects.code = assignedto.project JOIN scientists ON assignedto.scientist = scientists.name WHERE scientists.name LIKE '%Smith%';
SELECT SUM(projects.hours) FROM projects JOIN assignedto ON projects.code = assignedto.project JOIN scientists ON assignedto.scientist = scientists.name WHERE scientists.name IN ('Michael Rogers', 'Carol Smith');
SELECT SUM(T2.hours) FROM assignedto AS T1 INNER JOIN projects AS T2 ON T1.project = T2.code WHERE T1.scientist IN ((SELECT ssn FROM scientists WHERE name = 'Michael Rogers') OR (SELECT ssn FROM scientists WHERE name = 'Carol Smith'))
SELECT name FROM projects WHERE hours BETWEEN 100 AND 300;
SELECT code FROM projects WHERE hours BETWEEN 100 AND 300;
SELECT scientists.name FROM scientists JOIN assignedto ON scientists.name = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.name = 'Matter of Time' INTERSECT SELECT scientists.name FROM scientists JOIN assignedto ON scientists.name = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.name = 'A Puzzling Parallax';
SELECT scientists.name FROM scientists JOIN assignedto ON scientists.name = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.name IN ('Matter of Time', 'A Puzzling Pattern') GROUP BY scientists.name HAVING COUNT(DISTINCT projects.name) = 2;
SELECT ssn FROM scientists ORDER BY ssn ASC;
SELECT ssn FROM scientists ORDER BY ssn ASC;
SELECT projects.name, COUNT(DISTINCT assignedto.scientist) FROM projects JOIN assignedto ON projects.name = assignedto.project GROUP BY projects.name;
SELECT projects.name, COUNT(DISTINCT assignedto.scientist) FROM projects JOIN assignedto ON projects.code = assignedto.project GROUP BY projects.name;
SELECT COUNT(DISTINCT assignedto.scientist) FROM assignedto JOIN projects ON assignedto.project = projects.code WHERE projects.hours > 300;
SELECT projects.name, COUNT(assignedto.scientist) FROM projects JOIN assignedto ON projects.code = assignedto.project WHERE projects.hours > 300 GROUP BY projects.name;
SELECT scientists.name, COUNT(assignedto.project) AS num_projects FROM scientists JOIN assignedto ON scientists.name = assignedto.scientist GROUP BY scientists.name;
SELECT scientists.name, COUNT(assignedto.project) AS project_count FROM scientists JOIN assignedto ON scientists.name = assignedto.scientist GROUP BY scientists.name;
SELECT scientists.ssn, scientists.name FROM scientists INNER JOIN assignedto ON scientists.ssn = assignedto.scientist INNER JOIN projects ON assignedto.project = projects.code WHERE projects.hours = (SELECT MAX(hours) FROM projects);
SELECT ssn, name FROM scientists WHERE ssn IN (SELECT scientist FROM assignedto WHERE project = (SELECT code FROM projects ORDER BY hours DESC LIMIT 1));
SELECT scientists.name FROM scientists INNER JOIN assignedto ON scientists.name = assignedto.scientist;
SELECT DISTINCT scientists.name FROM scientists INNER JOIN assignedto ON scientists.name = assignedto.scientist;
SELECT projects.code FROM projects EXCEPT SELECT projects.code FROM projects JOIN assignedto ON projects.code = assignedto.project;
SELECT projects.code FROM projects EXCEPT SELECT projects.code FROM projects JOIN assignedto ON projects.code = assignedto.project;
SELECT scientists.name FROM scientists LEFT JOIN assignedto ON scientists.name = assignedto.scientist WHERE assignedto.project IS NULL;
SELECT scientists.name FROM scientists LEFT JOIN assignedto ON scientists.name = assignedto.scientist WHERE assignedto.project IS NULL;
SELECT COUNT(*) FROM scientists WHERE name NOT IN (SELECT scientist FROM assignedto);
SELECT COUNT(*) FROM scientists WHERE name NOT IN (SELECT scientist FROM assignedto);
SELECT name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM assignedto WHERE project IN (SELECT code FROM projects WHERE hours = (SELECT MAX(hours) FROM projects)));
SELECT name FROM scientists WHERE ssn NOT IN (SELECT scientist FROM assignedto WHERE project IN (SELECT code FROM projects WHERE hours = (SELECT MAX(hours) FROM projects)));
SELECT scientists.name, projects.code, projects.hours FROM scientists JOIN assignedto ON scientists.name = assignedto.scientist JOIN projects ON assignedto.project = projects.code ORDER BY projects.code ASC, scientists.name ASC;
SELECT scientists.name, projects.name, assignedto.hours FROM scientists JOIN assignedto ON scientists.name = assignedto.scientist JOIN projects ON assignedto.project = projects.code ORDER BY projects.name ASC, scientists.name ASC;
SELECT p.name AS project_name, s.name AS scientist_name FROM projects p JOIN assignedto a ON p.code = a.project JOIN scientists s ON a.scientist = s.name WHERE p.hours = (SELECT MIN(hours) FROM projects)
SELECT T1.name, T3.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project JOIN scientists AS T3 ON T2.scientist = T3.ssn ORDER BY T1.hours ASC LIMIT 1;
SELECT COUNT(*) FROM ship;
SELECT COUNT(*) FROM ship;
SELECT ship.name FROM ship ORDER BY ship.ton ASC;
SELECT name FROM ship ORDER BY tonnage ASC;
SELECT type, name FROM ship;
SELECT type, name FROM ship;
SELECT name FROM ship WHERE nationality != 'United States';
SELECT name FROM ship WHERE type != 'United States';
SELECT name FROM ship WHERE nationality IN ('United States', 'United Kingdom');
SELECT name FROM ship WHERE type IN ('US', 'UK');
SELECT name FROM ship ORDER BY ship_id DESC LIMIT 1;
SELECT name FROM ship ORDER BY tonnage DESC LIMIT 1;
SELECT nationality, COUNT(*) FROM ship GROUP BY nationality;
SELECT nationality, COUNT(*) FROM ship GROUP BY nationality;
SELECT nationality FROM ship GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nationality FROM ship GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT nation FROM ( SELECT ship_id, COUNT(*) AS ship_count FROM ship GROUP BY nation ) AS ship_counts WHERE ship_count > 2;
SELECT nation FROM ( SELECT ship_id, COUNT(*) AS ship_count FROM ship GROUP BY nation ) AS ship_counts WHERE ship_count > 2;
SELECT type, AVG(tonnage) AS average_tonnage FROM ship GROUP BY type;
SELECT type, AVG(tonnage) AS average_tonnage FROM ship GROUP BY type;
SELECT mission.code, mission.fate, ship.name FROM mission JOIN ship ON mission.ship_id = ship.ship_id;
SELECT mission.code, mission.fate, ship.name FROM mission JOIN ship ON mission.ship_id = ship.ship_id;
SELECT ship.name FROM mission JOIN ship ON mission.ship_id = ship.ship_id WHERE mission.launched_year > 1928;
SELECT ship.name FROM mission JOIN ship ON mission.ship_id = ship.ship_id WHERE mission.launched_year > 1928;
SELECT DISTINCT fate FROM mission JOIN ship ON mission.ship_id = ship.ship_id WHERE ship.nationality = 'United States';
SELECT DISTINCT mission.fate FROM mission INNER JOIN ship ON mission.ship_id = ship.ship_id WHERE ship.name LIKE '%United States%';
SELECT ship.name FROM ship WHERE ship.ship_id NOT IN (SELECT mission.ship_id FROM mission);
SELECT name FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM mission);
SELECT type FROM ship WHERE ship_id IN (SELECT ship_id FROM ship WHERE tonnage > 6000) INTERSECT SELECT type FROM ship WHERE ship_id IN (SELECT ship_id FROM ship WHERE tonnage < 4000);
SELECT type FROM ship WHERE ship_id IN (SELECT ship_id FROM mission WHERE tonnage > 6000) INTERSECT SELECT type FROM ship WHERE ship_id IN (SELECT ship_id FROM mission WHERE tonnage < 4000);
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT singer_id FROM singer ORDER BY net_worth_millions ASC;
SELECT name FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT citizenship, birth_year FROM singer;
SELECT name FROM singer WHERE citizenship != 'France';
SELECT name FROM singer WHERE nationality != 'French';
SELECT name FROM singer WHERE substr(citizenship, 1, 4) IN ('1948', '1949');
SELECT name FROM singer WHERE substr(citizenship, 1, 4) IN ('1948', '1949');
SELECT name FROM singer ORDER BY net_worth DESC LIMIT 1;
SELECT singer_id FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship;
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT citizenship, MAX(sales) AS max_net_worth FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY citizenship;
SELECT citizenship, MAX(net_worth) AS max_net_worth FROM singer GROUP BY citizenship;
SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT title, name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT DISTINCT name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE sales > 300000;
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);
SELECT name FROM singer WHERE singer_id IN (SELECT singer_id FROM song GROUP BY singer_id HAVING COUNT(*) > 1);
SELECT singer.name, SUM(song.sales) AS total_song_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name, SUM(song.sales) AS total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT name FROM singer WHERE singer_id NOT IN (SELECT DISTINCT singer_id FROM song);
SELECT name FROM singer WHERE singer_id NOT IN (SELECT DISTINCT singer_id FROM song);
SELECT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year > 1955;
SELECT T1.citizenship FROM `singer` AS T1 INNER JOIN `song` AS T2 ON T1.singer_id = T2.singer_id WHERE T1.birth_year < 1945 INTERSECT SELECT T1.citizenship FROM `singer` AS T1 INNER JOIN `song` AS T2 ON T1.singer_id = T2.singer_id WHERE T1.birth_year > 1955;
SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club;
SELECT DISTINCT region FROM club ORDER BY region ASC;
SELECT DISTINCT region FROM club ORDER BY region ASC;
SELECT AVG(gold) FROM club_rank;
SELECT AVG(gold) FROM club_rank;
SELECT DISTINCT type, country FROM competition;
SELECT DISTINCT competition, country FROM competition;
SELECT DISTINCT year FROM competition WHERE competition_type != 'Tournament';
SELECT DISTINCT year FROM competition WHERE competition_type != 'Tournament';
SELECT max(silver), min(silver) FROM club_rank;
SELECT max(silver), min(silver) FROM club_rank;
SELECT COUNT(*) FROM club_rank WHERE gold + silver + bronze < 10;
SELECT COUNT(*) FROM club_rank WHERE gold + silver + bronze < 10;
SELECT name FROM club ORDER BY start_year ASC;
SELECT club_id FROM club ORDER BY start_year ASC;
SELECT name FROM club ORDER BY name DESC;
SELECT club_id FROM club ORDER BY club_id DESC;
SELECT T2.region, T1.player FROM player AS T1 INNER JOIN club AS T2 ON T1.club_id = T2.club_id;
SELECT club.region, player.position, player.name FROM club JOIN player ON club.club_id = player.club_id;
SELECT DISTINCT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id = T2.club_id WHERE T2.position = 'Right Wing'
SELECT DISTINCT T1.name FROM club AS T1 JOIN player AS T2 ON T1.club_id = T2.club_id WHERE T2.position = 'Right Wing'
SELECT AVG(points) FROM player WHERE club_id IN (SELECT club_id FROM club WHERE name = 'AIB');
SELECT AVG(points) FROM player WHERE club_id IN (SELECT club_id FROM club WHERE name = 'AIB');
SELECT position, AVG(points) AS avg_points FROM player GROUP BY position;
SELECT position, AVG(points) AS avg_points FROM player GROUP BY position;
SELECT position FROM (SELECT AVG(points) AS avg_points, position FROM player GROUP BY position HAVING avg_points > 20) AS avg_pos;
SELECT position FROM ( SELECT T1.position, AVG(T1.points) AS avg_points FROM player AS T1 GROUP BY T1.position ) AS subquery WHERE avg_points > 20
SELECT competition, count(*) FROM competition GROUP BY competition;
SELECT type, COUNT(*) FROM competition GROUP BY type;
SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT competition_type FROM competition GROUP BY competition_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT competition.type FROM competition GROUP BY competition.type HAVING COUNT(*) <= 5;
SELECT type FROM competition GROUP BY type HAVING COUNT(*) = 5;
SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);
SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player);
SELECT position FROM (SELECT DISTINCT club_id AS club_id FROM player WHERE points > 20) AS high_scorers INTERSECT (SELECT DISTINCT club_id AS club_id FROM player WHERE points < 10) AS low_scorers;
SELECT name FROM player WHERE points > 20 INTERSECT SELECT name FROM player WHERE points < 10;
SELECT SUM(apps) FROM player;
SELECT SUM(apps) FROM player;
SELECT COUNT(DISTINCT position) FROM player;
SELECT COUNT(DISTINCT position) FROM player;
SELECT DISTINCT T1.name FROM `player` AS T1 INNER JOIN `club_rank` AS T2 ON T1.club_id = T2.club_id WHERE T1.points > (SELECT AVG(points) FROM player)
SELECT DISTINCT player FROM player WHERE points > (SELECT AVG(points) FROM player);
SELECT COUNT(*) AS num_players, club_id FROM player WHERE points < 30 GROUP BY club_id;
SELECT COUNT(*) FROM player WHERE points < 30 GROUP BY club_id;
SELECT country FROM competition WHERE competition LIKE '%Tournament%' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT region FROM club WHERE club_id IN (SELECT club_id_1 FROM competition_result WHERE competition_id IN (SELECT competition_id FROM competition WHERE competition_type = 'tournament')) GROUP BY region ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT country FROM competition WHERE competition_id IN (SELECT competition_id FROM competition WHERE type = 'Friendly') INTERSECT SELECT DISTINCT country FROM competition WHERE competition_id IN (SELECT competition_id FROM competition WHERE type = 'Tournament');
SELECT DISTINCT country FROM competition WHERE competition_type = 'friendly' INTERSECT SELECT DISTINCT country FROM competition WHERE competition_type = 'tournament';
SELECT country FROM competition WHERE competition_type != 'Friendly' GROUP BY country;
SELECT country FROM competition WHERE competition_type != 'friendly' GROUP BY country;
SELECT COUNT(*) FROM event;
SELECT event.year, event.id FROM event ORDER BY event.year DESC;
SELECT event.name FROM event INNER JOIN stadium ON event.stadium_id = stadium.id ORDER BY event.year DESC LIMIT 1;
SELECT COUNT(*) FROM stadium;
SELECT `name` FROM `stadium` ORDER BY `capacity` DESC LIMIT 1;
SELECT DISTINCT city FROM stadium WHERE capacity < (SELECT AVG(capacity) FROM stadium);
SELECT nationality FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON event.id = record.event_id JOIN stadium ON stadium.id = event.stadium_id GROUP BY nationality ORDER BY COUNT(DISTINCT stadium.id) DESC LIMIT 1;
SELECT nationality FROM swimmer GROUP BY nationality HAVING COUNT(DISTINCT stadium_id) <= 3;
SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000;
SELECT COUNT(DISTINCT city) FROM stadium WHERE id IN (SELECT stadium_id FROM event WHERE year < 2006);
SELECT country, COUNT(id) AS stadium_count FROM stadium GROUP BY country;
SELECT country FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event WHERE year > 2006)
SELECT COUNT(*) FROM stadium WHERE city != 'Russia';
SELECT name FROM swimmer ORDER BY meter_100 ASC;
SELECT COUNT(DISTINCT swimmer.country) FROM swimmer;
SELECT name FROM swimmer GROUP BY name HAVING COUNT(*) > 1;
SELECT result FROM record WHERE swimmer_id IN (SELECT id FROM swimmer WHERE nationality = 'Australia') AND (event_id IN (SELECT id FROM event WHERE meter_200 = 1) OR event_id IN (SELECT id FROM event WHERE meter_300 = 1));
SELECT swimmer.name FROM swimmer JOIN record ON swimmer.id = record.swimmer_id WHERE record.result = 'win';
SELECT stadium.name FROM stadium JOIN event ON stadium.id = event.stadium_id GROUP BY stadium.id ORDER BY COUNT(event.id) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM stadium JOIN event ON stadium.id = event.stadium_id WHERE event.name = 'World Junior';
SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)
SELECT swimmer.name FROM swimmer JOIN record ON swimmer.id = record.swimmer_id GROUP BY swimmer.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT swimmer.name FROM swimmer JOIN record ON swimmer.id = record.swimmer_id GROUP BY swimmer.name HAVING COUNT(record.id) >= 2;
SELECT swimmer.name, stadium.country FROM record JOIN swimmer ON record.swimmer_id = swimmer.id JOIN event ON record.event_id = event.id JOIN stadium ON event.stadium_id = stadium.id WHERE record.result = 'win' GROUP BY swimmer.name, stadium.country HAVING COUNT(*) > 1;
SELECT swimmer.name FROM swimmer WHERE swimmer.id NOT IN (SELECT record.swimmer_id FROM record)
SELECT swimmer.name FROM record JOIN swimmer ON record.swimmer_id = swimmer.id WHERE record.event_id IN (SELECT event_id FROM record WHERE result = 'win') INTERSECT SELECT swimmer.name FROM record JOIN swimmer ON record.swimmer_id = swimmer.id WHERE record.event_id IN (SELECT event_id FROM record WHERE result = 'loss');
SELECT stadium.name FROM stadium JOIN event ON stadium.id = event.stadium_id JOIN record ON event.id = record.event_id JOIN swimmer ON record.swimmer_id = swimmer.id WHERE swimmer.country = 'Australia' GROUP BY stadium.name;
SELECT stadium.name FROM stadium JOIN event ON stadium.id = event.stadium_id JOIN record ON event.id = record.event_id JOIN swimmer ON record.swimmer_id = swimmer.id GROUP BY stadium.name ORDER BY COUNT(DISTINCT swimmer.name) DESC LIMIT 1;
SELECT swimmer.* FROM swimmer;
SELECT AVG(capacity) FROM stadium WHERE id IN (SELECT stadium_id FROM event WHERE YEAR = 2005);
SELECT COUNT(*) FROM investors;
SELECT * FROM investors;
SELECT DISTINCT lot_id FROM lots;
SELECT MAX(transaction_amount) FROM transactions;
SELECT transaction_date, share_count FROM transactions;
SELECT SUM(purchases.purchase_details) AS total_share FROM transactions JOIN purchases ON transactions.transaction_id = purchases.purchase_transaction_id WHERE transactions.transaction_type_code = 'BUY';
SELECT transactions.transaction_id FROM transactions WHERE transactions.transaction_type_code = 'PUR';
SELECT date_of_transaction FROM transactions WHERE transaction_type_code = 'SALE';
SELECT AVG(purchases.purchase_details) FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code JOIN purchases ON transactions.transaction_id = purchases.purchase_transaction_id WHERE transactions.transaction_type_code = 'SALE';
SELECT description FROM ref_transaction_types WHERE transaction_type_code = 'PUR';
SELECT MIN(share_count) FROM transactions WHERE transaction_type_code = 'PUR' AND share_count > 50;
SELECT MAX(share_count) FROM transactions WHERE share_count < 10000;
SELECT date_of_transaction FROM transactions WHERE share_count > 100 OR amount_of_transaction > 1000;
SELECT ref_transaction_types.transaction_type_description, transactions.date_of_transaction FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code WHERE transactions.share_count < 10;
SELECT DISTINCT investor_details FROM investors WHERE investor_id IN (SELECT investor_id FROM transactions WHERE share_count > 100);
SELECT COUNT(DISTINCT ref_transaction_types.transaction_type_description) FROM transactions INNER JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code;
SELECT lot_details, investor_id FROM lots;
SELECT lot_id FROM lots WHERE investor_id IN (SELECT investor_id FROM investors WHERE investor_details = 'l');
SELECT * FROM purchases JOIN transactions ON purchases.purchase_transaction_id = transactions.transaction_id WHERE transactions.transaction_type_code = 'PURCHASE' AND transactions.amount > 10000;
SELECT sales_transaction_id FROM sales WHERE sales_transaction_id IN (SELECT transaction_id FROM transactions WHERE amount_of_transaction < 3000);
SELECT lots.* FROM lots JOIN transactions_lots ON lots.lot_id = transactions_lots.lot_id JOIN transactions ON transactions_lots.transaction_id = transactions.transaction_id WHERE transactions.amount_of_transaction < 50;
SELECT lot_details FROM lots WHERE investor_id IN (SELECT investor_id FROM transactions INNER JOIN transactions_lots ON transactions.transaction_id = transactions_lots.transaction_id WHERE transactions.amount_of_transaction > 100 AND transactions.transaction_type_code = 'PUR')
SELECT ref_transaction_types.transaction_type_description, AVG(transactions.amount_of_transaction) AS avg_amount FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code GROUP BY ref_transaction_types.transaction_type_description;
SELECT ref_transaction_types.transaction_type_description, MAX(transactions.share_count) AS max_share_count, MIN(transactions.share_count) AS min_share_count FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code GROUP BY ref_transaction_types.transaction_type_description;
SELECT investor_id, AVG(share_count) AS average_share_count FROM transactions GROUP BY investor_id;
SELECT investors.investor_details, AVG(transactions.share_count) AS avg_share_count FROM transactions JOIN investors ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_details ORDER BY avg_share_count;
SELECT investor_id, AVG(amount_of_transaction) AS average_amount FROM transactions GROUP BY investor_id;
SELECT AVG(transactions_lots.lot_id) AS avg_transactions_per_lot FROM transactions JOIN transactions_lots ON transactions.transaction_id = transactions_lots.transaction_id;
SELECT lots.lot_id, AVG(transactions_lots.transaction_id) AS avg_transactions FROM transactions_lots JOIN lots ON transactions_lots.lot_id = lots.lot_id GROUP BY lots.lot_id ORDER BY avg_transactions;
SELECT investor_id, COUNT(transaction_id) FROM transactions WHERE transaction_type_code = 'SALE' GROUP BY investor_id HAVING COUNT(transaction_id) > 0;
SELECT investors.investor_details, COUNT(transactions.transaction_id) AS num_transactions FROM transactions JOIN investors ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_details;
SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(transaction_type_code) ASC LIMIT 1;
SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ref_transaction_types.transaction_type_code FROM transactions INNER JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code GROUP BY ref_transaction_types.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT investor_id, investor_details FROM investors WHERE investor_id IN ( SELECT investor_id FROM transactions GROUP BY investor_id ORDER BY COUNT(transaction_id) DESC LIMIT 1 );
SELECT investor_id, investor_details FROM investors JOIN transactions ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_id, investor_details ORDER BY COUNT(transactions.transaction_id) DESC LIMIT 3;
SELECT investor_id FROM transactions GROUP BY investor_id HAVING COUNT(*) >= 2;
SELECT DISTINCT T2.investor_details FROM `transactions` AS T1 INNER JOIN `investors` AS T2 ON T1.investor_id = T2.investor_id WHERE T1.transaction_type_code = 'SALE' GROUP BY T2.investor_details HAVING COUNT(T1.transaction_id) >= 2;
SELECT date_of_transaction FROM transactions WHERE share_count >= 100 OR amount_of_transaction > 100;
SELECT transactions.date_of_transaction, transactions.amount_of_transaction FROM transactions JOIN sales ON sales.sales_transaction_id = transactions.transaction_id UNION ALL SELECT transactions.date_of_transaction, transactions.amount_of_transaction FROM transactions JOIN purchases ON purchases.purchase_transaction_id = transactions.transaction_id;
SELECT lot_details FROM lots WHERE lot_id NOT IN (SELECT lot_id FROM transactions_lots)
SELECT COUNT(*) FROM station;
SELECT station.name, station.location, COUNT(train_station.station_id) AS number_of_platforms FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name, station.location;
SELECT name FROM station;
SELECT station.name, SUM(annual_entry_exit) AS total_passengers FROM station JOIN train_station ON station.station_id = train_station.station_id WHERE station.location != 'London' GROUP BY station.name;
SELECT T1.name, T1.main_services FROM station AS T1 JOIN train_station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY COUNT(*) DESC LIMIT 3;
SELECT AVG(annual_entry_exit) AS avg_passengers, MAX(annual_entry_exit) AS max_passengers FROM station WHERE location IN ('London', 'Glasgow');
SELECT location, SUM(number_of_platforms) AS total_number_of_platforms FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY location;
SELECT location FROM station WHERE number_of_platforms >= 15 INTERSECT SELECT station.location FROM station JOIN train_station ON station.station_id = train_station.station_id JOIN train ON train_station.train_id = train.train_id GROUP BY station.location HAVING SUM(train.time) > 25;
SELECT location FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station GROUP BY station_id HAVING COUNT(*) >= 15);
SELECT station.name FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name ORDER BY COUNT(train_station.train_id) DESC LIMIT 1;
SELECT location, time, service FROM station INNER JOIN train_station ON station.station_id = train_station.station_id INNER JOIN train ON train.train_id = train_station.train_id;
SELECT COUNT(*) FROM train;
SELECT service, time FROM train ORDER BY time;
SELECT station.name, COUNT(train_station.train_id) AS number_of_trains FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name;
SELECT train.name, station.name FROM train JOIN train_station ON train.train_id = train_station.train_id JOIN station ON train_station.station_id = station.station_id;
SELECT train.name, train.time FROM train JOIN train_station ON train.train_id = train_station.train_id JOIN station ON train_station.station_id = station.station_id WHERE station.location = 'London' ORDER BY train.time DESC;
SELECT station.name FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name ORDER BY COUNT(train_station.train_id) DESC LIMIT 1;
SELECT station.name FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name HAVING COUNT(train_station.train_id) >= 2;
SELECT name FROM station GROUP BY name HAVING COUNT(station_id) = 1;
SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station);
SELECT name FROM station WHERE station_id IN (SELECT station_id FROM train_station WHERE train_id IN (SELECT train_id FROM train WHERE service = 'Ananthapuri Express') INTERSECT SELECT station_id FROM train_station WHERE train_id IN (SELECT train_id FROM train WHERE service = 'Guruvayur Express'))
SELECT DISTINCT name FROM train WHERE train_id NOT IN (SELECT train_id FROM train_station WHERE station_id IN (SELECT station_id FROM station WHERE name LIKE '%London%'));
SELECT name, location FROM station ORDER BY annual_interchanges DESC;
SELECT COUNT(*) FROM area_code_state;
SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM votes;
SELECT MAX(state) AS max_area_code, MIN(state) AS min_area_code FROM area_code_state;
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT DISTINCT contestant_number FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM contestants WHERE contestant_number = 'Jessie Alloway');
SELECT distinct votes.state, votes.created FROM votes;
SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (SELECT contestant_number FROM votes GROUP BY contestant_number HAVING COUNT(*) >= 2);
SELECT contestants.contestant_number, contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.vote_id GROUP BY contestants.contestant_number, contestants.contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1;
SELECT COUNT(*) FROM votes WHERE state IN (SELECT state FROM area_code_state WHERE state = 'NY' OR state = 'CA');
SELECT COUNT(*) FROM contestants WHERE contestant_number NOT IN (SELECT contestant_number FROM votes)
SELECT state FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY state ORDER BY COUNT(*) DESC LIMIT 1;
SELECT created, state, contestants.contestant_number FROM votes INNER JOIN contestants ON votes.contestant_number = contestants.contestant_number WHERE contestant_name = 'Tabatha Gehling';
SELECT DISTINCT area_code_state.area FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') GROUP BY area_code_state.area HAVING COUNT(DISTINCT contestants.contestant_name) = 2;
SELECT contestant_number FROM contestants WHERE contestant_number LIKE '%Al%';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(CASE WHEN matches.winner_id = players.player_id THEN players.birth_date ELSE NULL END - strftime('%Y', 'now')) AS avg_winner_age, AVG(CASE WHEN matches.loser_id = players.player_id THEN players.birth_date ELSE NULL END - strftime('%Y', 'now')) AS avg_loser_age FROM matches JOIN players ON matches.winner_id = players.player_id OR matches.loser_id = players.player_id;
SELECT AVG(losers.age) AS avg_loser_age, AVG(winners.age) AS avg_winner_age FROM matches JOIN players losers ON matches.loser_id = losers.player_id JOIN players winners ON matches.winner_id = winners.player_id;
SELECT AVG(rankings.ranking_points) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id;
SELECT AVG(rankings.ranking_points) FROM matches JOIN rankings ON matches.winner_id = rankings.player_id;
SELECT MAX(ranking_points) FROM rankings WHERE player_id IN (SELECT loser_id FROM matches)
SELECT MIN(ranking_points) AS best_rank_of_losers FROM rankings WHERE player_id IN (SELECT loser_id FROM matches)
SELECT COUNT(DISTINCT players.country_code) FROM players;
SELECT COUNT(DISTINCT country) FROM players;
SELECT COUNT(DISTINCT loser_name) FROM matches;
SELECT COUNT(DISTINCT loser_id) FROM matches;
SELECT tourney_id FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;
SELECT tourney_id FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name FROM matches WHERE year = 2013 INTERSECT SELECT DISTINCT winner_name FROM matches WHERE year = 2016;
SELECT DISTINCT winner_name FROM matches WHERE match_num IN (2013, 2016) GROUP BY winner_name HAVING COUNT(DISTINCT match_num) = 2;
SELECT COUNT(*) FROM matches WHERE strftime('%Y', match_date) IN ('2013', '2016');
SELECT COUNT(*) FROM matches WHERE year(match_num) IN (2013, 2016);
SELECT DISTINCT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.winner_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.winner_name) = 2;
SELECT DISTINCT T1.first_name, T1.country_code FROM players AS T1 INNER JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.winner_name IN ('WTA Championships', 'Australian Open') GROUP BY T1.player_id HAVING COUNT(DISTINCT T2.winner_name) = 2;
SELECT DISTINCT players.first_name, players.country_code FROM players INNER JOIN rankings ON players.player_id = rankings.player_id WHERE players.birth_date = (SELECT MIN(birth_date) FROM players) LIMIT 1;
SELECT DISTINCT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT last_name FROM players ORDER BY birth_date;
SELECT last_name, first_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT last_name FROM players WHERE hand = 'Left' ORDER BY birth_date;
SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id OR T1.player_id = T2.loser_id GROUP BY T1.player_id ORDER BY COUNT(T2.match_num) DESC LIMIT 1;
SELECT T1.first_name, T1.country_code FROM `players` AS T1 JOIN `matches` AS T2 ON T1.player_id = T2.winner_id GROUP BY T1.player_id ORDER BY COUNT(T2.match_num) DESC LIMIT 1;
SELECT substr(match_num, 1, 4) AS year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT substr(matches.match_num, 1, 4) AS year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT players.first_name, players.last_name, rankings.ranking_points FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY matches.winner_id ORDER BY COUNT(matches.winner_id) DESC LIMIT 1;
SELECT winner_name, COUNT(*) AS wins, T3.ranking_points FROM matches AS T1 JOIN players AS T2 ON T1.winner_id = T2.player_id JOIN rankings AS T3 ON T2.player_id = T3.player_id GROUP BY T1.winner_id ORDER BY wins DESC LIMIT 1;
SELECT winner_name FROM matches WHERE winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches) AND winner_id IN (SELECT player_id FROM rankings WHERE tours LIKE '%Australian Open%') LIMIT 1;
SELECT winner_name FROM matches WHERE tournament = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches JOIN players p1 ON matches.winner_id = p1.player_id JOIN players p2 ON matches.loser_id = p2.player_id ORDER BY minutes DESC LIMIT 1;
SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id;
SELECT T2.first_name, AVG(T1.ranking) FROM rankings AS T1 JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT T2.first_name, SUM(T1.ranking_points) FROM rankings AS T1 INNER JOIN players AS T2 ON T1.player_id = T2.player_id GROUP BY T2.first_name;
SELECT COUNT(player_id), country FROM players GROUP BY country;
SELECT hand, COUNT(*) FROM players GROUP BY hand;
SELECT hand FROM players GROUP BY hand ORDER BY COUNT(*) DESC LIMIT 1;
SELECT hand FROM players GROUP BY hand ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT hand FROM players GROUP BY hand HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(*) AS total_tours FROM matches JOIN rankings ON matches.winner_id = rankings.player_id OR matches.loser_id = rankings.player_id GROUP BY ranking_date;
SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT strftime('%Y', matches.match_num) AS year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT strftime('%Y', matches.match_num) AS year, COUNT(*) AS matches_count FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY loser_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY birth_date DESC LIMIT 3;
SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'Left';
SELECT COUNT(DISTINCT matches.winner_id) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'Left';
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE rankings.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY SUM(matches.winner_rank) DESC LIMIT 1;
SELECT COUNT(player_id), loser_hand FROM matches GROUP BY loser_hand;
SELECT COUNT(player_id), loser_hand FROM players INNER JOIN matches ON players.player_id = matches.loser_id OR players.player_id = matches.winner_id GROUP BY loser_hand;
