SELECT DISTINCT fault_log.recorded_by_staff_id FROM fault_log JOIN fault_log_parts ON fault_log.fault_log_entry_id = fault_log_parts.fault_log_entry_id JOIN part_faults ON fault_log_parts.part_fault_id = part_faults.part_fault_id WHERE part_faults.fault_short_name = 'ᠠᠯᠢ ᠠᠯᠢ ᠡᠳ᠋ ᠬᠥᠷᠥᠩᠭᠡ' AND part_faults.fault_description LIKE '%2 ᠬᠡᠰᠡᠭ ᠎ᠲᠡᠢ ᠪᠥᠭᠡᠳ ᠰᠠᠭᠠᠲᠠᠯ%' AND part_faults.fault_description LIKE '%2 ᠠ᠋ᠴᠠ ᠪᠠᠭ᠎ᠠ ᠪᠣᠢ%' AND part_faults.fault_description LIKE '%ᠬᠥᠷᠥᠩᠭᠡ᠎ᠶ᠋ᠢᠨ ᠳ᠋ᠤᠭᠠᠷᠯᠠᠯ ᠪᠣᠯᠤᠨ ᠨᠠᠷᠢᠨ ᠮᠡᠳᠡᠭᠡᠯᠡᠯ᠎ ᠢ ᠵᠢᠭᠰᠠᠭᠠᠵᠤ ᠭᠠᠷᠭ᠎ᠠ ᠃%';
SELECT asset_make, asset_model FROM assets WHERE asset_id IN ( SELECT asset_id FROM fault_log WHERE fault_log_entry_id IN ( SELECT fault_log_entry_id FROM engineer_visits WHERE visit_end_datetime > '2023-04-01' ) ) AND asset_id IN ( SELECT asset_id FROM maintenance_contracts WHERE contract_end_date > '2023-04-01' );
SELECT third_party_companies.company_name FROM third_party_companies JOIN assets ON assets.supplier_company_id = third_party_companies.company_id JOIN maintenance_contracts ON assets.maintenance_contract_id = maintenance_contracts.maintenance_contract_id WHERE maintenance_contracts.contract_end_date > CURRENT_DATE;
SELECT DISTINCT maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers JOIN engineer_skills ON maintenance_engineers.engineer_id = engineer_skills.engineer_id WHERE engineer_skills.skill_id IN ( SELECT skill_id FROM skills_required_to_fix )
SELECT DISTINCT maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers JOIN engineer_skills ON maintenance_engineers.engineer_id = engineer_skills.engineer_id JOIN skills_required_to_fix ON engineer_skills.skill_id = skills_required_to_fix.skill_id WHERE skills_required_to_fix.skill_id IN ( SELECT skill_id FROM skills_required_to_fix GROUP BY skill_id HAVING COUNT(*) > 1 )
SELECT DISTINCT part_faults.part_id FROM parts JOIN part_faults ON parts.part_id = part_faults.part_id JOIN skills_required_to_fix ON part_faults.part_fault_id = skills_required_to_fix.part_fault_id WHERE skill_id = 2;
SELECT DISTINCT maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers JOIN engineer_skills ON maintenance_engineers.engineer_id = engineer_skills.engineer_id JOIN skills ON engineer_skills.skill_id = skills.skill_id JOIN skills_required_to_fix ON skills.skill_id = skills_required_to_fix.skill_id WHERE skills_required_to_fix.part_fault_id = (SELECT part_fault_id FROM skills_required_to_fix LIMIT 1);
SELECT DISTINCT maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers JOIN engineer_skills ON maintenance_engineers.engineer_id = engineer_skills.engineer_id JOIN skills ON engineer_skills.skill_id = skills.skill_id JOIN skills_required_to_fix ON skills.skill_id = skills_required_to_fix.skill_id JOIN part_faults ON skills_required_to_fix.part_fault_id = part_faults.part_fault_id WHERE part_faults.fault_short_name = 'TONONOGLASU';
SELECT asset_make FROM assets WHERE asset_id IN (SELECT asset_id FROM fault_log) LIMIT 1;
SELECT part_faults.fault_short_name FROM part_faults JOIN fault_log_parts ON part_faults.part_fault_id = fault_log_parts.part_fault_id JOIN fault_log ON fault_log_parts.fault_log_entry_id = fault_log.fault_log_entry_id WHERE fault_log.asset_id = ( SELECT asset_id FROM assets WHERE asset_make = 'Toyota' )
SELECT DISTINCT maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers JOIN engineer_visits ON engineer_visits.engineer_id = maintenance_engineers.engineer_id JOIN fault_log ON fault_log.fault_log_entry_id = engineer_visits.fault_log_entry_id WHERE fault_log.fault_description LIKE '%Outer Mongolia%'
SELECT third_party_companies.company_type FROM maintenance_contracts JOIN third_party_companies ON maintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id WHERE maintenance_contracts.contract_end_date > CURRENT_DATE;
SELECT staff_name FROM staff WHERE staff_id IN (SELECT recorded_by_staff_id FROM fault_log GROUP BY recorded_by_staff_id HAVING COUNT(*) > 1) LIMIT 1;
SELECT maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers JOIN engineer_skills ON maintenance_engineers.engineer_id = engineer_skills.engineer_id JOIN skills_required_to_fix ON engineer_skills.skill_id = skills_required_to_fix.skill_id WHERE skills_required_to_fix.skill_id = ( SELECT skill_id FROM skills WHERE skill_description = ' Carpentry ' )
SELECT DISTINCT third_party_companies.company_name FROM assets JOIN third_party_companies ON assets.supplier_company_id = third_party_companies.company_id WHERE assets.asset_disposed_date IS NOT NULL;
SELECT DISTINCT recorded_by_staff_id FROM fault_log;
SELECT DISTINCT maintenance_engineers.first_name, maintenance_engineers.last_name FROM maintenance_engineers JOIN engineer_skills ON maintenance_engineers.engineer_id = engineer_skills.engineer_id JOIN skills ON engineer_skills.skill_id = skills.skill_id JOIN skills_required_to_fix ON skills.skill_id = skills_required_to_fix.skill_id WHERE skills_required_to_fix.part_fault_id IN ( SELECT part_fault_id FROM part_faults WHERE fault_short_name = '蒙古语故障简称' )
SELECT T3.last_name FROM part_faults AS T1 INNER JOIN fault_log_parts AS T2 ON T1.part_fault_id = T2.part_fault_id INNER JOIN fault_log AS T4 ON T2.fault_log_entry_id = T4.fault_log_entry_id INNER JOIN maintenance_engineers AS T3 ON T4.recorded_by_staff_id = T3.engineer_id WHERE T1.part_id = 107
SELECT staff_name FROM staff WHERE staff_id IN (SELECT contact_staff_id FROM engineer_visits WHERE fault_status = 'Fixed')
SELECT staff_name FROM staff WHERE staff_id IN (SELECT contact_staff_id FROM engineer_visits WHERE fault_status = 'Fixed')
SELECT skill_description FROM skills WHERE skill_id IN (SELECT skill_id FROM skills_required_to_fix WHERE part_fault_id IN (SELECT part_fault_id FROM fault_log_parts WHERE fault_log_entry_id IN (SELECT fault_log_entry_id FROM engineer_visits WHERE fault_status = 'Fixed')))
SELECT DISTINCT contact_staff_id FROM engineer_visits WHERE fault_log_entry_id IN (SELECT fault_log_entry_id FROM fault_log WHERE asset_id = (SELECT asset_id FROM fault_log GROUP BY asset_id ORDER BY COUNT(*) DESC LIMIT 1))
SELECT asset_make FROM assets WHERE asset_id IN (SELECT asset_id FROM fault_log);
SELECT DISTINCT T3.first_name, T3.last_name FROM assets AS T1 INNER JOIN maintenance_engineers AS T3 ON T1.maintenance_contract_id = T3.company_id WHERE T1.asset_disposed_date IS NULL
SELECT part_name FROM parts WHERE chargeable_yn = 'Y' LIMIT 1;
SELECT third_party_companies.company_name FROM maintenance_contracts JOIN third_party_companies ON maintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id WHERE maintenance_contracts.contract_end_date > CURRENT_DATE;
SELECT staff_name FROM staff WHERE staff_id IN ( SELECT contact_staff_id FROM engineer_visits WHERE visit_start_datetime LIKE '2023-04-%' AND visit_end_datetime LIKE '2023-04-%' )
SELECT staff.gender FROM staff JOIN engineer_visits ON staff.staff_id = engineer_visits.contact_staff_id JOIN maintenance_engineers ON engineer_visits.engineer_id = maintenance_engineers.engineer_id GROUP BY staff.gender ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT fault_log.recorded_by_staff_id FROM fault_log JOIN fault_log_parts ON fault_log.fault_log_entry_id = fault_log_parts.fault_log_entry_id JOIN part_faults ON fault_log_parts.part_fault_id = part_faults.part_fault_id WHERE part_faults.fault_short_name = 'ᠶᠠᠮᠠᠷ ᠶᠠᠮᠠᠷ';
SELECT title FROM book WHERE issues > (SELECT AVG(issues) FROM book) ORDER BY issues DESC LIMIT 1;
SELECT title FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE publisher = 'publisher_name') LIMIT 1;
SELECT writer FROM book WHERE book_id IN (SELECT book_id FROM publication GROUP BY book_id HAVING COUNT(*) > 1)
SELECT writer FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE publisher = 'ᠴᠢᠶᠠᠨ ᠵᠦᠩ ᠱᠤ᠌');
SELECT writer FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE publication_date >= '2023-01-01')
SELECT book.title FROM publication INNER JOIN book ON publication.book_id = book.book_id WHERE publication.price > 50;
SELECT title FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE price >= 50000);
SELECT book.title FROM book INNER JOIN publication ON book.book_id = publication.book_id WHERE publication.price > 50;
SELECT book.title FROM book JOIN publication ON book.book_id = publication.book_id WHERE publication.price > 3;
SELECT book.book_id FROM publication INNER JOIN book ON publication.book_id = book.book_id WHERE issues > 1;
SELECT title FROM book WHERE writer = 'Байгаль 40000 гаруу намтайн хөгжим'
SELECT book.book_id FROM publication INNER JOIN book ON publication.book_id = book.book_id WHERE issues > 1 AND writer = '诺尔曼';
SELECT title FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE price > 50) ORDER BY issues DESC LIMIT 1;
SELECT title FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE publication_date = '2008-07-02')
SELECT book.title FROM publication INNER JOIN book ON publication.book_id = book.book_id WHERE publication.publisher = '内蒙古出版社' AND publication.price > 50;
SELECT title FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE publisher = '内蒙古人民出版社');
SELECT book.writer FROM book JOIN publication ON book.book_id = publication.book_id WHERE publication.publication_date = (SELECT MAX(publication_date) FROM publication) AND book.issues = (SELECT MAX(issues) FROM book);
SELECT title FROM book WHERE issues > 10000 AND writer IN (SELECT writer FROM book INNER JOIN publication ON book.book_id = publication.book_id GROUP BY writer HAVING SUM(price) > 10000);
SELECT book.title FROM publication JOIN book ON publication.book_id = book.book_id WHERE publication.price = (SELECT MAX(price) FROM publication) LIMIT 1;
SELECT title FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE price > 500)
SELECT title FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE publication_date = '2023-04-01') LIMIT 1;
SELECT I'm sorry, but your request seems to be incomplete or contains non-English characters that I cannot understand. Please provide a complete English question or a clear description of the SQL query you need assistance with, including the specific columns and conditions required.
SELECT Sorry, but your question seems to be incomplete or not properly formatted, especially the last part which appears to be a mix of non-English characters and an unfinished sentence. Could you please provide a complete and clear SQL query request, ensuring it's related to the tables and properties outlined?
SELECT essn FROM dependent WHERE relationship = 'child';
SELECT dnumber FROM department WHERE mgr_ssn IN (SELECT ssn FROM employee WHERE sex = 'F');
SELECT minit FROM employee WHERE lname = 'Buchagan' AND fname = 'Carol';
SELECT lname, fname FROM employee WHERE hours > 5000 AND plocation = 'Mongolia';
SELECT I'm sorry, but your request seems to be incomplete or contains non-English instructions that I cannot understand. Could you please provide a clear, complete SQL query question in English? I'll be glad to help you write the appropriate SQLite SQL query once I have the details.
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MAX(course.staring_date) FROM course);
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date = (SELECT MIN(staring_date) FROM course);
SELECT teacher.hometown FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = '2023-09-01' LIMIT 1;
SELECT teacher.hometown FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = '二年级' LIMIT 1;
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MAX(course.staring_date) FROM course);
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = '2023-09-01' LIMIT 1;
SELECT DISTINCT teacher.hometown FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'grade' AND course_arrange.course_id IN (SELECT course.course_id FROM course WHERE course.staring_date = 'staring_date')
SELECT teacher.hometown FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date = 'ᠪᠠᠭ᠎ᠠ ᠬᠥᠰᠢᠭᠦᠷᠭᠡ᠎ᠶ᠋ᠢᠨ ᠬᠣᠲᠠ ᠲᠣᠭᠣᠷᠢᠭ';
SELECT teacher_id FROM teacher WHERE age BETWEEN 32 AND 33;
SELECT teacher.hometown FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date BETWEEN '2023-03-4' AND '2023-03-8' LIMIT 1;
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MAX(staring_date) FROM course) LIMIT 1;
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date = (SELECT MAX(staring_date) FROM course);
SELECT teacher.hometown FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date = '2023-09-01' LIMIT 1;
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'B';
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date = (SELECT MIN(staring_date) FROM course);
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'grade_value' AND course_arrange.course_id IN (SELECT course.course_id FROM course WHERE course.staring_date = 'start_date_value')
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date = (SELECT MIN(staring_date) FROM course);
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'grade_value' AND teacher.age > (SELECT AVG(age) FROM teacher);
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MIN(staring_date) FROM course);
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'B';
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'A' AND course_arrange.course_id IN (SELECT course.course_id FROM course WHERE course.staring_date > '2023-01-01');
SELECT teacher.hometown FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'Grade 3' AND course_arrange.course_id IN (SELECT course.course_id FROM course WHERE course.staring_date = '2023-09-01') GROUP BY teacher.hometown;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MIN(staring_date) FROM course);
SELECT teacher.hometown FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id WHERE course.staring_date = (SELECT MAX(staring_date) FROM course);
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = '2023-09-01';
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = 'B';
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MIN(staring_date) FROM course);
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.grade = '优秀';
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MIN(staring_date) FROM course);
SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id WHERE course.staring_date = (SELECT MAX(staring_date) FROM course);
SELECT T1.name FROM college AS T1 JOIN member AS T2 ON T1.college_id = T2.college_id WHERE T1.leader_name = '巴特尔'
SELECT T1.country FROM `member` AS T1 INNER JOIN `round` AS T2 ON T1.member_id = T2.member_id GROUP BY T1.country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT T3.name FROM `round` AS T1 INNER JOIN `member` AS T2 ON T1.member_id = T2.member_id INNER JOIN `college` AS T3 ON T2.college_id = T3.college_id WHERE T1.rank_in_round = 1
SELECT T3.name FROM `round` AS T1 INNER JOIN `member` AS T2 ON T1.member_id = T2.member_id INNER JOIN `college` AS T3 ON T2.college_id = T3.college_id WHERE T1.rank_in_round = 1
SELECT T1.name FROM college AS T1 JOIN member AS T2 ON T1.name = T2.college_id WHERE T2.name = 'ᠳᠠᠯᠢ ᠪᠤᠰᠤ';
SELECT T1.name FROM college AS T1 JOIN member AS T2 ON T1.name = T2.college_id WHERE T2.name = 'Büreltuhen Öls Ünd Örd Ögörond Ökömögü Bailingu Kharadadag Uls Baihuyi';
SELECT member.name FROM member JOIN round ON member.member_id = round.member_id WHERE round.rank_in_round = 1;
SELECT T2.name FROM `round` AS T1 INNER JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.rank_in_round = 1
SELECT T1.name FROM member AS T1 JOIN round AS T2 ON T1.member_id = T2.member_id WHERE T2.rank_in_round = 1
SELECT T2.name FROM `round` AS T1 INNER JOIN `member` AS T2 ON T1.member_id = T2.member_id INNER JOIN `college` AS T3 ON T2.college_id = T3.college_id WHERE T1.rank_in_round = 1
SELECT T1.name FROM `member` AS T1 INNER JOIN `college` AS T2 ON T1.college_id = T2.college_id WHERE T2.leader_name = 'ᠺᠠᠨᠠᠳᠠ';
SELECT T2.name FROM `round` AS T1 INNER JOIN member AS T2 ON T1.member_id = T2.member_id INNER JOIN college AS T3 ON T2.college_id = T3.college_id WHERE T3.leader_name = '蒙古国立大学'
SELECT round.rank_in_round, member.name FROM round JOIN member ON round.member_id = member.member_id WHERE round.decoration_theme = 'Өлгий элжидэхьдээ хөрс нь бүрлэхүн ундар бөгөөд обор нэрээрэй' ORDER BY round.rank_in_round;
SELECT T3.name FROM `round` AS T1 INNER JOIN `member` AS T2 ON T1.member_id = T2.member_id INNER JOIN `college` AS T3 ON T2.college_id = T3.college_id WHERE T1.rank_in_round = 1
SELECT T1.name FROM college AS T1 JOIN member AS T2 ON T1.college_id = T2.college_id WHERE T2.country = '蒙古国';
SELECT representative.name FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE election.seats = (SELECT MAX(seats) FROM election);
SELECT name FROM representative WHERE representative_id IN (SELECT representative_id FROM election WHERE seats = 'Speaker')
SELECT representative.name FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE election.seats = (SELECT MAX(seats) FROM election);
SELECT representative.name FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE election.seats = (SELECT MAX(seats) FROM election) LIMIT 1;
SELECT representative.party FROM election JOIN representative ON election.representative_id = representative.representative_id GROUP BY representative.party ORDER BY COUNT(election.election_id) DESC LIMIT 1;
SELECT representative.party FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE election.place = '1st' GROUP BY representative.party ORDER BY COUNT(*) DESC LIMIT 1;
SELECT representative.name FROM representative JOIN election ON representative.representative_id = election.representative_id WHERE representative.party = 'ᠱᠠᠩᠬᠠᠢ' AND election.seats = (SELECT MAX(seats) FROM election WHERE representative.party = 'ᠵᠢᠶᠠᠩᠰᠢ');
SELECT representative.name FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE election.seats = (SELECT MAX(seats) FROM election);
SELECT COUNT(*) FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE votes >= 10000 AND vote_percent > 50;
SELECT representative_id FROM election WHERE vote_percent > 50;
SELECT representative.name FROM representative JOIN election ON representative.representative_id = election.representative_id WHERE election.votes > 5000 AND election.date LIKE '2008%'
SELECT representative.name FROM election JOIN representative ON election.representative_id = representative.representative_id WHERE election.seats = (SELECT MAX(seats) FROM election) LIMIT 1;
SELECT representative.name FROM representative INNER JOIN election ON representative.representative_id = election.representative_id WHERE election.seats = (SELECT MAX(seats) FROM election);
SELECT representative.name FROM representative INNER JOIN election ON representative.representative_id = election.representative_id WHERE election.seats = 1 LIMIT 1;
SELECT representative.name FROM representative INNER JOIN election ON representative.representative_id = election.representative_id WHERE election.seats > 1;
SELECT name FROM representative WHERE representative_id IN (SELECT representative_id FROM election WHERE votes > 5000 AND place = 1)
SELECT representative.name FROM representative JOIN election ON representative.representative_id = election.representative_id WHERE election.seats = (SELECT MAX(seats) FROM election) LIMIT 1;
SELECT representative.name FROM representative JOIN election ON representative.representative_id = election.representative_id WHERE election.votes > 10000 AND election.vote_percent >= 50;
SELECT representative.party FROM representative INNER JOIN election ON representative.representative_id = election.representative_id WHERE representative.name = 'ᠱᠠᠩᠬᠠᠢ' AND election.place = 'ᠬᠦᠪᠡᠢ';
SELECT representative.name FROM representative JOIN election ON representative.representative_id = election.representative_id WHERE election.seats = 1 LIMIT 1;
SELECT country_name FROM country WHERE official_native_language = 'Монгол хэл';
SELECT country_name FROM country WHERE official_native_language = 'Монгол хэл';
SELECT DISTINCT player.player FROM player JOIN match_season ON player.player = match_season.player JOIN team ON player.team = team.team_id JOIN country ON match_season.country = country.country_id WHERE country.capital = 'ULAANBAATAR';
SELECT player FROM match_season WHERE country = (SELECT capital FROM country WHERE official_native_language = 'Mongolian') AND team = (SELECT team FROM player WHERE player = 'Батбаяр');
SELECT country_name FROM country JOIN match_season ON country.country_id = match_season.country JOIN team ON team.team_id = match_season.team JOIN player ON player.team = team.team_id WHERE player.years_played > 5 GROUP BY country_name ORDER BY COUNT(player.player) DESC LIMIT 1;
SELECT player FROM match_season INNER JOIN team ON match_season.team = team.team_id WHERE team.name = 'Yangalban Talayain Tulegdegeriin Uls' AND position = ' Forward'
SELECT DISTINCT player.player FROM player JOIN match_season ON player.player_id = match_season.player JOIN country ON match_season.country = country.country_id WHERE country.capital = 'Ulaanbaatar';
SELECT player FROM match_season WHERE position = 'forward' AND draft_class BETWEEN 2000 AND 2005;
SELECT player.player_id FROM player JOIN match_season ON player.team = match_season.team JOIN country ON match_season.country = country.country_id WHERE country.country_name = 'ᠵᠧᠵᠢᠶᠠᠩ ᠶᠡᠬᠡ ᠰᠤᠷᠭᠠᠭᠤᠯᠢ';
SELECT team FROM player WHERE player_id = 'ᠧᠵᠢᠶᠠᠩ ᠶᠡᠬᠡ ᠰᠤᠷᠭᠠᠭᠤᠯᠢ';
SELECT player FROM match_season WHERE team = 'ᠵᠧᠵᠢᠶᠠᠩ ᠶᠡᠬᠡ ᠰᠤᠷᠭᠠᠭᠤᠯᠢ' INTERSECT SELECT player FROM match_season WHERE team = 'ᠦᠬᠠᠨ ᠶᠡᠬᠡ ᠰᠤᠷᠭᠠᠭᠤᠯᠢ';
SELECT match_season.player FROM match_season JOIN country ON match_season.country = country.country_id WHERE country.country_name = 'ᠵᠧᠵᠢᠶᠠᠩ ᠶᠡᠬᠡ ᠰᠤᠷᠭᠠᠭᠤᠯᠢ' INTERSECT SELECT match_season.player FROM match_season JOIN country ON match_season.country = country.country_id WHERE country.country_name = 'ᠦᠬᠠᠨ ᠶᠡᠬᠡ ᠰᠤᠷᠭᠠᠭᠤᠯᠢ';
SELECT match_season.player FROM match_season JOIN country ON match_season.country = country.country_id WHERE country.capital = 'ULAANBAATAR';
SELECT player FROM match_season JOIN team ON match_season.team = team.team_id WHERE team.name = ' Silk Road Samurais ';
SELECT player.player FROM player INNER JOIN match_season ON player.player_id = match_season.player WHERE match_season.position = 'forward' AND player.total_wl > 200;
SELECT player FROM match_season WHERE season = '2023' AND position = 'Forward';
SELECT player FROM match_season WHERE position = 'forward';
SELECT DISTINCT player.player FROM player JOIN match_season ON player.player_id = match_season.player JOIN team ON player.team = team.team_id WHERE team.name = 'Boston Celtics';
SELECT player FROM match_season WHERE season = '2023' AND position = 'Forward'
SELECT country_name FROM country WHERE country_name = '蒙古国';
SELECT DISTINCT player.player_id FROM player INNER JOIN match_season ON player.team = match_season.team WHERE match_season.season = '2023' AND match_season.position = 'Forward';
SELECT country FROM match_season GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT player.player_id FROM player INNER JOIN match_season ON player.player_id = match_season.player WHERE match_season.season = '2009' AND match_season.position = 'Forward'
SELECT T2.name FROM `player` AS T1 INNER JOIN `team` AS T2 ON T1.team = T2.team_id WHERE T1.singles_wl = '赢' AND T1.doubles_wl = '赢'
SELECT country_name FROM country WHERE country_name LIKE '%Berlin%'
SELECT player FROM match_season JOIN team ON match_season.team = team.team_id WHERE team.name = 'Bayern Munich';
SELECT country_name FROM country WHERE country_name LIKE 'ТӨНГ ЖИЙ' OR country_name LIKE 'ҮХАН ХЭЭ СУРГАГУЛЬ';
SELECT country_name FROM country WHERE country_id IN (SELECT country FROM match_season WHERE team = (SELECT name FROM team WHERE team_id = (SELECT team FROM player WHERE player_id = 'ТӨН ЗҮИ ТҮХЭЭ СУРГАГУЛЬ')));
SELECT country_name FROM country WHERE country_id IN (SELECT country FROM match_season WHERE team IN (SELECT team_id FROM team WHERE name = 'Bayern Munich'))
SELECT country_name FROM country WHERE official_native_language = 'Монгол хэл' LIMIT 1;
SELECT player FROM match_season WHERE position = 'forward' AND draft_class = 2015;
SELECT team FROM player GROUP BY team ORDER BY SUM(years_played) DESC LIMIT 1;
SELECT player_id FROM player WHERE player IN ('ᠬᠠᠩᠵᠧᠦ᠎ᠶ᠋ᠢᠨ', 'ᠨᠣᠭᠣᠭᠠᠨ', 'ᠶ᠋ᠢᠨ ᠬᠣᠲᠠ');
SELECT player FROM match_season JOIN team ON match_season.team = team.team_id WHERE team.name = 'ᠬᠠᠩᠵᠧᠦ᠎ᠶ᠋ᠢᠨ ᠨᠣᠭᠣᠭᠠᠨ ᠬᠣᠲᠠ';
SELECT player_id FROM player WHERE total_wl = (SELECT MAX(total_wl) FROM player);
SELECT player.player_id FROM player JOIN match_season ON player.player_id = match_season.player JOIN team ON player.team = team.team_id JOIN country ON match_season.country = country.country_id WHERE country.country_name = 'China';
SELECT player.player_id FROM player JOIN match_season ON player.team = match_season.team JOIN country ON match_season.country = country.country_id WHERE country.country_name = 'China';
SELECT player.player_id FROM player JOIN match_season ON player.team = match_season.team JOIN country ON match_season.country = country.country_id WHERE country.country_name = 'China'
SELECT DISTINCT match_season.country FROM match_season INNER JOIN team ON match_season.team = team.team_id WHERE team.name = 'Bayern Munich';
SELECT DISTINCT player.player_id FROM player INNER JOIN team ON player.team = team.team_id WHERE team.name = 'Bayern Munich';
SELECT DISTINCT player.player_id FROM player INNER JOIN match_season ON player.player_id = match_season.player INNER JOIN team ON player.team = team.team_id WHERE team.name = 'Uvs Province Team';
SELECT country_name FROM country WHERE official_native_language = 'Монгол хэл' LIMIT 1;
SELECT DISTINCT player.player_id FROM player INNER JOIN match_season ON player.team = match_season.team WHERE match_season.season = 'season_value' AND match_season.position = 'position_value'
SELECT player FROM match_season WHERE position = 'Defenseman' AND draft_pick_number <= 5;
SELECT player_id FROM player WHERE years_played > 5;
SELECT player_id FROM player WHERE years_played > 5;
SELECT match_season.player FROM player JOIN match_season ON player.player_id = match_season.player WHERE match_season.draft_pick_number <= 3 AND match_season.draft_class = 'First Round' ORDER BY player.total_wl DESC LIMIT 1;
SELECT player FROM match_season WHERE season = '2023' AND position = 'Forward' AND team = 'Golden State Warriors';
SELECT match_season.player FROM match_season JOIN player ON match_season.player = player.player_id WHERE player.years_played >= 4;
SELECT DISTINCT player.player_id FROM player INNER JOIN match_season ON player.team = match_season.team WHERE match_season.season = '2005' AND match_season.draft_class = 'First Round' ORDER BY player.total_wl DESC LIMIT 1;
SELECT player_id FROM player WHERE years_played > 5;
SELECT player FROM match_season WHERE season = '2023' AND position = 'Forward';
SELECT player.player FROM player JOIN match_season ON player.player_id = match_season.player JOIN team ON player.team = team.team_id JOIN country ON match_season.country = country.country_id WHERE country.capital = 'Улаанбаатар';
SELECT player.player FROM player INNER JOIN match_season ON player.player_id = match_season.player WHERE match_season.position = 'Forward' AND player.total_wl > 200;
SELECT country_name FROM country WHERE official_native_language = ' Mongolian ';
SELECT DISTINCT match_season.player FROM match_season JOIN country ON match_season.country = country.country_id WHERE country.capital = 'ULAANBAATAR';
SELECT T2.player_id FROM `match_season` AS T1 INNER JOIN `player` AS T2 ON T1.player = T2.player_id WHERE T1.position = 'forward' AND T2.years_played > 5
SELECT player_id FROM player WHERE years_played > 5;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE country = 'Mongolia');
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE injured = 1) LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE killed > 0) LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE killed > 0)
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE year = 2000)
SELECT perpetrator.people_id FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id WHERE people.height > 180 AND people.weight > 90;
SELECT perpetrator.location, COUNT(*) AS total_incidents FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id WHERE people.height > 180 AND people.weight > 90 GROUP BY perpetrator.location ORDER BY total_incidents DESC LIMIT 1;
SELECT perpetrator.country FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id WHERE people.name = 'ᠲᠡᠳᠡᠭᠡᠷ ᠤᠯᠤᠰ';
SELECT DISTINCT people.home_town FROM people INNER JOIN perpetrator ON people.people_id = perpetrator.people_id WHERE perpetrator.killed > 0 AND perpetrator.injured > 0;
SELECT DISTINCT people.name FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id WHERE perpetrator.injured > 0 AND perpetrator.killed = 0;
SELECT DISTINCT people_id FROM perpetrator WHERE location = '《ᠳᠤᠮᠳᠠᠳᠤ ᠤᠯᠤᠰ》' AND year = 2023;
SELECT name FROM people WHERE people_id IN (SELECT perpetrator_id FROM perpetrator WHERE country = 'China');
SELECT DISTINCT people.name FROM people INNER JOIN perpetrator ON people.people_id = perpetrator.people_id WHERE perpetrator.killed > 0 OR perpetrator.injured > 0;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE injured > 0)
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE injured > 0) LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE year = 2015) ORDER BY height DESC LIMIT 1;
SELECT DISTINCT people.name FROM people INNER JOIN perpetrator ON people.people_id = perpetrator.people_id WHERE perpetrator.country = 'Mongolia' AND perpetrator.injured = 0 AND perpetrator.killed = 0;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE year BETWEEN 20 AND 50) LIMIT 20;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM perpetrator WHERE injured > 0)
SELECT DISTINCT people.name FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id WHERE perpetrator.country = 'China' AND perpetrator.killed > 100;
SELECT DISTINCT people.name FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id WHERE perpetrator.injured = 1 OR perpetrator.killed = 1;
SELECT I'm sorry, but your request seems to be incomplete or contains non-English characters without a clear translation or context. Could you please provide a complete and clear question or query in English that you'd like me to translate into an SQLite SQL query?
SELECT I'm sorry, but your request seems to be incomplete or contains non-Latin characters that do not form a clear question in English. Please provide a complete question in English along with the details of the information you need from the given tables, and I will write the SQLite SQL query accordingly.
SELECT station.network_name FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE train.name = 'Хоног таялал';
SELECT destination FROM train;
SELECT station.services FROM station JOIN route ON station.id = route.station_id JOIN train ON train.id = route.train_id WHERE train.name = 'ᠰᠤ ᠴᠢᠶᠠᠨ' AND train.destination = 'ᠰᠢᠦᠢ ᠵᠸᠦ';
SELECT I'm sorry, but your request seems to be incomplete or contains non-textual elements. Please provide a complete and clear SQL query or question that you would like me to translate into an SQL query without explanations, ensuring it adheres to the guidelines provided.
SELECT network_name FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.train_number WHERE train.origin = 'Ulaanbaatar' AND train.destination = 'Beijing'
SELECT I'm sorry, but your request seems to be incomplete or contains non-Latin characters that do not convey a clear SQL question. Please provide a complete and specific SQL query request in English so I can assist you properly.
SELECT station.services FROM station JOIN route ON station.id = route.station_id WHERE route.train_id IN (SELECT train.id FROM train WHERE train.origin = ' ulaanbaatar' AND train.destination = 'darkhan')
SELECT station.services FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE train.destination = 'ᠬᠤ᠌ ᠵᠧᠦ' AND train.origin = 'ᠶ᠋ᠢᠨ ᠬᠠᠮᠤᠭ᠎ᠤ᠋ᠨ';
SELECT destination FROM train WHERE origin = 'London';
SELECT station.network_name FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE train.origin = 'Bayanhongor' AND train.destination = 'Ulaanbaatar' GROUP BY station.network_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT origin FROM train GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT station.local_authority FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE train.time <= '05:00' AND train.interval = 'Daily'
SELECT station.network_name FROM station JOIN route ON station.id = route.station_id WHERE route.train_id IN (SELECT id FROM train WHERE origin = 'New York' AND destination = 'Chicago') LIMIT 1;
SELECT destination FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id WHERE station.local_authority = 'Mongolian National Railway Company';
SELECT church.name FROM church INNER JOIN wedding ON church.church_id = wedding.church_id WHERE wedding.year = 1850 LIMIT 1;
SELECT COUNT(*) FROM wedding WHERE year BETWEEN 1980 AND 1990;
SELECT COUNT(*) FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE church.open_date BETWEEN '1980-01-01' AND '1990-12-31';
SELECT church.name FROM church JOIN wedding ON church.church_id = wedding.church_id JOIN people ON wedding.male_id = people.people_id OR wedding.female_id = people.people_id WHERE people.country = 'Монголия' GROUP BY church.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE church.open_date BETWEEN '1830-01-01' AND '1840-12-31';
SELECT COUNT(*) FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE church.organized_by = 'Алибата Негэгтэйн Он Болуны Тэр Эрдэмтэн Зүлдэгсэн СүмЭэд Язгуур Хөтөлбөрийн Ерөнхийлөгч';
SELECT COUNT(*) FROM wedding WHERE year BETWEEN 1900 AND 1950;
SELECT COUNT(*) FROM people WHERE is_male = 0 AND country = 'China' LIMIT 30;
SELECT people.name FROM people JOIN wedding ON people.people_id = wedding.male_id WHERE people.age = 30 INTERSECT SELECT people.name FROM people JOIN wedding ON people.people_id = wedding.female_id WHERE people.age = 25;
SELECT COUNT(*) FROM wedding JOIN people ON wedding.male_id = people.people_id JOIN church ON wedding.church_id = church.church_id WHERE people.is_male = 1 AND church.name = 'Church Name';
SELECT people.name FROM people JOIN wedding ON people.people_id = wedding.male_id JOIN church ON wedding.church_id = church.church_id WHERE church.organized_by = 'Бүхэл улсын эрх зүйн хууль' AND people.is_male = 1 GROUP BY people.name;
SELECT COUNT(*) FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE church.organized_by = '2014';
SELECT people.name FROM people INNER JOIN wedding ON people.people_id = wedding.male_id OR people.people_id = wedding.female_id WHERE wedding.year = (SELECT MAX(year) FROM wedding) LIMIT 1;
SELECT COUNT(*) FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE church.name = '裕固族婚礼教堂' AND wedding.year = 2015;
SELECT church.open_date FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE wedding.year = 2023 LIMIT 1;
SELECT COUNT(*) FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE church.organized_by = '2016 ᠣᠨ᠎ᠳ᠋ᠤ᠌ ᠬᠤᠷᠢᠮ ᠬᠢᠭᠰᠡᠨ 《ᠺᠠᠨᠠᠳᠠ》 ᠭᠡᠬᠦ ᠪᠣᠢ ᠪᠦᠬᠦᠢ ᠡᠮᠡᠭᠲᠡᠢᠴᠦᠳ᠎ ᠤᠨ ᠨᠡᠷ᠎ᠡ᠎ᠶ᠋ᠢ ᠢᠯᠡᠷᠡᠭᠦᠯᠦᠨ᠎ᠡ ᠃'
SELECT COUNT(*) FROM wedding WHERE strftime('%Y', open_date) = '2016';
SELECT COUNT(*) FROM wedding JOIN people ON wedding.male_id = people.people_id OR wedding.female_id = people.people_id WHERE people.country = 'China' AND people.is_male = 1;
SELECT COUNT(*) FROM wedding;
SELECT church.name FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE wedding.year = 2016;
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Бидэндүү' AND fname = 'Хэдүй'))
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Бүхэцогт' AND fname = 'Батулзаяа'));
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Бидэндүү' AND fname = 'Ямар'));
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS';
SELECT DISTINCT facid FROM faculty_participates_in WHERE actid IN (SELECT actid FROM participates_in WHERE stuid = (SELECT stuid FROM student WHERE lname = 'Бои Бүхэй'));
SELECT activity.activity_name FROM activity INNER JOIN participates_in ON activity.actid = participates_in.actid INNER JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.age > 18;
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.sex = 'F' AND student.major = 'CS';
SELECT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.sex = 'F';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid = (SELECT stuid FROM student WHERE lname = '孛儿只斤·铁木真'));
SELECT facid FROM faculty WHERE lname = '孛儿只斤·额尔德尼';
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'Computer Science' AND student.sex = 'F';
SELECT lname, fname FROM student WHERE major = 'ᠡᠷᠡᠭᠲᠡᠢ';
SELECT activity.activity_name FROM activity INNER JOIN participates_in ON activity.actid = participates_in.actid INNER JOIN student ON participates_in.stuid = student.stuid WHERE student.fname = 'ᠪᠢᠳᠡᠨ᠎ᠳ᠋ᠦ᠍' AND student.lname = 'ᠬᠡᠳᠦᠢ';
SELECT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'Eigenvalue Computations' AND student.sex = 'F';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE fname = 'Ван' AND lname = 'Руи')) INTERSECT SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE fname = 'Ван' AND lname = 'Руи'));
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.fname = 'ᠪᠠᠭᠰᠢ' AND student.lname = 'ᠪᠠᠷᠢᠯᠭ᠎ᠠ';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE sex = '女') INTERSECT SELECT actid FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE sex = '男'));
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Үсарун' AND fname = 'Албан'));
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.sex = 'M' AND student.age > 18;
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE fname = 'ᠪᠣᠢ ᠪᠦᠬᠦᠢ'));
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS'
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Барилга' AND fname = 'Нигэбүрэд'));
SELECT activity.activity_name FROM activity INNER JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid INNER JOIN faculty ON faculty.facid = faculty_participates_in.facid WHERE faculty.lname = 'Байдалай';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Хамугун Олан Багши')) AND actid IN (SELECT actid FROM participates_in WHERE stuid = (SELECT stuid FROM student WHERE lname = 'Бүхэй'));
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE age > 10 AND sex = 'F')) LIMIT 10;
SELECT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.age > 20;
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.sex = 'F';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in) INTERSECT SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in);
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.age > 20;
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'ᠪᠦᠷᠢ᠎ᠳ᠋ᠦ᠍' AND fname = 'ᠶᠢᠨ ᠬᠡᠳᠦᠢ'))
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Алиев' AND fname = 'Батсайхан'));
SELECT activity.activity_name FROM activity INNER JOIN participates_in ON activity.actid = participates_in.actid INNER JOIN student ON participates_in.stuid = student.stuid WHERE student.sex = 'F' AND student.age > 18;
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE rank = 'assistant professor')) LIMIT 1;
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in) INTERSECT SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in);
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = '張') INTERSECT SELECT actid FROM participates_in WHERE stuid = (SELECT stuid FROM student WHERE lname = '王'));
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE fname = 'ᠵᠠᠩ' AND lname = 'ᠴᠢᠩ'))
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.lname = 'Бол CONCAT(Дугчи, Б)' AND student.fname = 'Жил ogruс';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid = (SELECT stuid FROM student WHERE lname = 'Али' AND fname = 'АлиSURUGCH')) AND actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = 'Болгасан' AND fname = 'Бои'));
SELECT DISTINCT student.fname FROM student JOIN participates_in ON student.stuid = participates_in.stuid JOIN activity ON participates_in.actid = activity.actid WHERE activity.activity_name = 'ЉБН ЗГДБС НРЭ БОЛУН ОБОГ ИЛЭРЭЛБЭЛ Х'
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.fname = 'Љ' AND student.lname = 'Бин';
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.age > 18;
SELECT activity.activity_name FROM activity WHERE activity.actid IN (SELECT actid FROM faculty_participates_in) INTERSECT SELECT activity.activity_name FROM activity WHERE activity.actid IN (SELECT actid FROM participates_in);
SELECT activity.activity_name FROM activity INNER JOIN participates_in ON activity.actid = participates_in.actid INNER JOIN student ON participates_in.stuid = student.stuid WHERE student.sex = 'F' AND student.age > 18;
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid = (SELECT stuid FROM student WHERE lname = 'Багсын' AND fname = 'Ажилтан'));
SELECT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.age > 20 AND student.sex = 'F';
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.sex = 'F';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT facid FROM faculty WHERE lname = '蒙古语老师'));
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.lname = 'Батсайхан' AND student.fname = 'Алтан';
SELECT DISTINCT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid JOIN faculty ON faculty.facid = faculty_participates_in.facid WHERE faculty.lname = 'Yamalbar' AND faculty.fname = 'Surugchi';
SELECT DISTINCT student.fname, student.lname FROM student JOIN participates_in ON student.stuid = participates_in.stuid JOIN activity ON participates_in.actid = activity.actid WHERE activity.activity_name = 'ᠶᠠᠮᠠᠷ ᠴᠤ᠌ ᠰᠤᠷᠤᠭᠴᠢ᠎ᠶ᠋ᠢᠨ ᠪᠠᠭᠰᠢ ᠠᠵᠢᠯᠲᠠᠨ᠎ ᠤ ᠨᠣᠮᠧᠷ᠎ ᠢ ᠵᠢᠯᠣᠭᠣᠳᠬᠤ ᠦᠭᠡᠢ';
SELECT DISTINCT lname, fname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in) INTERSECT SELECT DISTINCT lname, fname FROM faculty WHERE facid IN (SELECT advisor FROM student);
SELECT lname, fname FROM faculty WHERE facid IN (SELECT facid FROM faculty_participates_in WHERE actid IN (SELECT actid FROM activity));
SELECT activity.activity_name FROM activity INNER JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid WHERE faculty_participates_in.facid = (SELECT facid FROM faculty WHERE lname = 'Бидээд' AND fname = 'Хүдэлгэнтэй');
SELECT activity.activity_name FROM activity WHERE activity.actid IN (SELECT actid FROM faculty_participates_in) INTERSECT SELECT activity.activity_name FROM activity WHERE activity.actid IN (SELECT actid FROM participates_in);
SELECT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid JOIN faculty ON faculty.facid = faculty_participates_in.facid WHERE faculty.lname = '蒙古语姓名' AND faculty.fname = '蒙古语名字';
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.age > 18 AND student.sex = 'F';
SELECT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid WHERE faculty_participates_in.facid = (SELECT facid FROM faculty WHERE lname = 'Yamalbar' AND fname = 'Ajillaga');
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.sex = 'F';
SELECT DISTINCT student.stuid FROM student INNER JOIN participates_in ON student.stuid = participates_in.stuid WHERE student.major = 'CS' AND participates_in.actid IN (SELECT actid FROM activity WHERE activity_name LIKE '%volleyball%')
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.major = 'CS' AND student.age > 18;
SELECT lname, fname FROM student WHERE major = 'ᠮᠠ' INTERSECT SELECT lname, fname FROM student WHERE city_code = 'ᠸᠧᠨ ᠵᠢᠶᠧ';
SELECT lname, fname FROM student WHERE major = 'Монгол хэлний шинжлэх ухаан';
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.sex = 'female' AND student.major = 'CS';
SELECT lname, fname FROM student WHERE major = 'ᠮᠠ' AND city_code = 'ᠪᠤᠶ᠋ᠬᠤᠳᠠᠭᠤᠳᠠᠬᠤ';
SELECT DISTINCT student.stuid FROM student INNER JOIN participates_in ON student.stuid = participates_in.stuid WHERE participates_in.actid IN (SELECT actid FROM activity WHERE activity_name = 'Yoga') AND student.age > 20;
SELECT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid JOIN faculty ON faculty.facid = faculty_participates_in.facid WHERE faculty.lname = 'Нагаду Захаа' AND faculty.fname = 'Нигэлжилт';
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid WHERE participates_in.stuid IN ( SELECT stuid FROM student WHERE major = 'CS' ) AND activity.activity_name IN ( SELECT activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid JOIN faculty ON faculty.facid = faculty_participates_in.facid WHERE faculty.rank = 'Prof' );
SELECT DISTINCT activity.actid FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid WHERE faculty_participates_in.facid IN ( SELECT facid FROM faculty WHERE rank = 'professor' )
SELECT DISTINCT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid JOIN faculty ON faculty.facid = faculty_participates_in.facid WHERE faculty.lname = 'Mahon' AND faculty.fname = 'Bartley'
SELECT DISTINCT faculty.fname, faculty.lname FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid WHERE faculty.sex = 'F' AND faculty.rank = 'AsstProf'
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid = '特定学生ID') INTERSECT SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT advisor FROM student WHERE stuid = '特定学生ID'));
SELECT DISTINCT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid JOIN faculty ON faculty_participates_in.facid = faculty.facid WHERE faculty.lname = 'Болор' AND faculty.fname = 'Хамулаа';
SELECT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid WHERE participates_in.stuid IN ( SELECT student.stuid FROM student WHERE student.major = 'CS' ) AND activity.activity_name LIKE '%sport%';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE lname = '蒙古语姓名' AND fname = '蒙古语名字'))
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE age > 18 AND major = 'CS')) AND actid NOT IN (SELECT actid FROM faculty_participates_in);
SELECT lname, fname FROM student WHERE age > 20 AND major = 'Nomadology' LIMIT 20;
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid = 'student_id_here') INTERSECT SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid = (SELECT advisor FROM student WHERE stuid = 'student_id_here'));
SELECT DISTINCT student.fname, student.lname FROM student JOIN participates_in ON student.stuid = participates_in.stuid JOIN activity ON participates_in.actid = activity.actid WHERE activity.activity_name = 'Chess Club';
SELECT DISTINCT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid JOIN faculty ON faculty.facid = faculty_participates_in.facid WHERE faculty.lname = '蒙古语教授姓名' AND faculty.fname = '蒙古语教授名';
SELECT DISTINCT student.lname, student.fname FROM student JOIN participates_in ON student.stuid = participates_in.stuid JOIN activity ON participates_in.actid = activity.actid WHERE activity.activity_name = 'ХӨМӨГ';
SELECT DISTINCT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.lname = 'ᠰᠤᠮᠤᠨ ᠣᠩᠭᠣᠴᠠ' AND student.fname = 'ᠠᠷᠠᠰᠤᠨ ᠵᠠᠪᠢ';
SELECT DISTINCT faculty.lname FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN activity ON faculty_participates_in.actid = activity.actid WHERE activity.activity_name = 'SUMUN ONGOGCHA' AND faculty.sex = 'male';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE lname = 'ᠰᠤᠮᠤᠨ ᠣᠩᠭᠣᠴᠠ') INTERSECT SELECT actid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'ᠠᠷᠠᠰᠤᠨ ᠵᠠᠪᠢ'))
SELECT facid FROM faculty WHERE lname = 'ᠰᠤᠮᠤᠨ ᠣᠩᠭᠣᠴᠠ' INTERSECT SELECT facid FROM faculty WHERE lname = 'ᠠᠷᠠᠰᠤᠨ ᠵᠠᠪᠢ';
SELECT DISTINCT faculty.fname, faculty.lname FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN activity ON faculty_participates_in.actid = activity.actid WHERE activity.activity_name = 'ᠰᠤᠮᠤᠨ ᠣᠩᠭᠣᠴᠠ' INTERSECT SELECT DISTINCT faculty.fname, faculty.lname FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN activity ON faculty_participates_in.actid = activity.actid WHERE activity.activity_name = 'ᠠᠷᠠᠰᠤᠨ ᠵᠠᠪᠢ';
SELECT lname FROM faculty WHERE building = 'Сумун Оңгоча' INTERSECT SELECT lname FROM faculty WHERE building = 'Арасун Жаби';
SELECT stuid FROM student WHERE major = 'ᠰᠤᠮᠤᠨ ᠣᠩᠭᠣᠴᠠ' INTERSECT SELECT stuid FROM student WHERE city_code = 'ᠠᠷᠠᠰᠤᠨ ᠵᠠᠪᠢ';
SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE major = 'CS')) INTERSECT SELECT activity_name FROM activity WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE rank = 'Prof'));
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total > 400) ORDER BY height DESC LIMIT 1;
SELECT people.name FROM body_builder JOIN people ON body_builder.people_id = people.people_id WHERE body_builder.snatch > 150 AND body_builder.clean_jerk > 200;
SELECT people.name FROM body_builder JOIN people ON body_builder.people_id = people.people_id WHERE body_builder.snatch > 150;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE snatch > 150) ORDER BY birth_date DESC LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE snatch > 150 AND clean_jerk > 200)
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE snatch > 150 AND clean_jerk > 200) ORDER BY birth_date ASC LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total > 400)
SELECT name FROM people WHERE height > 300 AND weight > 150;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total > 400) ORDER BY height DESC LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total > 500) ORDER BY birth_date DESC LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE snatch > 315 AND clean_jerk > 315) LIMIT 1;
SELECT name FROM people WHERE height > 200 AND weight > 100;
SELECT name FROM people WHERE people_id IN (SELECT body_builder_id FROM body_builder WHERE total > 500) ORDER BY birth_date DESC LIMIT 1;
SELECT people.name FROM people INNER JOIN body_builder ON people.people_id = body_builder.people_id WHERE body_builder.snatch > 150 AND body_builder.clean_jerk > 200;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder);
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE snatch > 150 AND clean_jerk > 200) ORDER BY birth_date DESC LIMIT 1;
SELECT name FROM people INNER JOIN body_builder ON people.people_id = body_builder.people_id WHERE snatch > 150 AND clean_jerk > 200;
SELECT T2.name FROM `body_builder` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > T2.weight LIMIT 1;
SELECT people.name FROM body_builder JOIN people ON body_builder.people_id = people.people_id WHERE body_builder.snatch > body_builder.clean_jerk;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder);
SELECT people.name FROM body_builder JOIN people ON body_builder.people_id = people.people_id WHERE body_builder.clean_jerk > body_builder.snatch;
SELECT name FROM people WHERE height > 140 AND height < 200;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total > 500) ORDER BY height DESC LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE snatch > 150) ORDER BY birth_date DESC LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE support_rate > 50)
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.support_rate > 0.5 LIMIT 1;
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.support_rate > T1.oppose_rate LIMIT 1;
SELECT candidate_id FROM candidate WHERE support_rate > unsure_rate AND support_rate > oppose_rate LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE consider_rate > 50) LIMIT 3;
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.consider_rate > 30 AND T1.oppose_rate < 20 AND T1.unsure_rate >= 10;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE support_rate > 50) ORDER BY date_of_birth DESC LIMIT 1;
SELECT T1.name FROM people AS T1 INNER JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.support_rate > T2.consider_rate;
SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.consider_rate > T2.oppose_rate AND T2.consider_rate > T2.unsure_rate LIMIT 1;
SELECT T1.name FROM `people` AS T1 INNER JOIN `candidate` AS T2 ON T1.people_id = T2.people_id WHERE T2.consider_rate > T2.oppose_rate AND T2.unsure_rate < T2.consider_rate LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE support_rate > 50)
SELECT T1.name FROM `people` AS T1 INNER JOIN `candidate` AS T2 ON T1.people_id = T2.people_id WHERE T2.support_rate > 0.5 LIMIT 1;
SELECT T1.name FROM people AS T1 INNER JOIN candidate AS T2 ON T1.people_id = T2.candidate_id WHERE T2.support_rate > 0.5;
SELECT people.name FROM people INNER JOIN candidate ON people.people_id = candidate.people_id WHERE candidate.support_rate > 0.5;
SELECT T1.name FROM people AS T1 INNER JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.support_rate > T2.oppose_rate
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE support_rate > 50)
SELECT COUNT(*) FROM people WHERE height > 190 AND height < 200 AND sex = 'male';
SELECT COUNT(*) FROM people WHERE height BETWEEN 190 AND 200;
SELECT T2.name FROM candidate AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.support_rate > 0.5
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE support_rate > 50) ORDER BY date_of_birth DESC LIMIT 1;
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.support_rate > 0.5 ORDER BY T1.support_rate DESC LIMIT 1;
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.support_rate > 0.5 LIMIT 1;
SELECT T2.name FROM candidate AS T1 INNER JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.support_rate > 0.5
SELECT name FROM people WHERE sex = 'male' ORDER BY height DESC LIMIT 1;
SELECT T2.candidate_id FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T1.name = 'alinka'
SELECT name FROM people WHERE sex = 'female' AND height > (SELECT AVG(height) FROM people) AND date_of_birth < '1990-01-01';
SELECT T2.name FROM `candidate` AS T1 INNER JOIN `people` AS T2 ON T1.people_id = T2.people_id WHERE T1.support_rate > T1.oppose_rate LIMIT 1;
SELECT T2.name FROM candidate AS T1 INNER JOIN people AS T2 ON T1.candidate_id = T2.people_id WHERE T1.support_rate > 50;
SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.support_rate > 0.5;
SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.support_rate > 0.5;
SELECT name FROM people WHERE height > 85;
SELECT name FROM people WHERE weight > 85 AND sex = 'female';
SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.consider_rate > T2.oppose_rate LIMIT 1;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE consider_rate > 50) ORDER BY date_of_birth DESC LIMIT 1;
SELECT T1.name FROM people AS T1 JOIN candidate AS T2 ON T1.people_id = T2.candidate_id WHERE T2.support_rate > 0.5
SELECT name FROM people WHERE sexis = 'female';
SELECT people_id FROM candidate WHERE support_rate > 0.5 ORDER BY consider_rate DESC LIMIT 1;
SELECT people_id FROM people WHERE sex = 'male' AND height > 180;
SELECT T1.name FROM people AS T1 INNER JOIN candidate AS T2 ON T1.people_id = T2.people_id WHERE T2.support_rate > 0.5
SELECT name FROM people WHERE sex = 'female';
SELECT host_city FROM hosting_city GROUP BY host_city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city.hanzi FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = '足球比赛' LIMIT 1;
SELECT city.hanzi FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = '1994年冬季奥林匹克运动会' LIMIT 1;
SELECT city.city FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.date LIKE '1994%' AND match.result = '冠军' LIMIT 1;
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.date LIKE '2010%' GROUP BY city.hanzi ORDER BY COUNT(match.match_id) DESC LIMIT 1;
SELECT city.hanyu_pinyin FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id JOIN match ON hosting_city.match_id = match.match_id WHERE match.date LIKE '2010-%' GROUP BY city.hanyu_pinyin HAVING COUNT(*) > 1;
SELECT city.hanzi FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'Uvs Nuur Basin' LIMIT 1;
SELECT host_city FROM hosting_city WHERE year = 2023;
SELECT match.match_id FROM match INNER JOIN hosting_city ON match.match_id = hosting_city.match_id INNER JOIN city ON hosting_city.host_city = city.city_id WHERE city.hanzi = '南昌' AND match.competition = '亚洲运动会' AND match.result = '冠军' LIMIT 1;
SELECT city.hanzi FROM city WHERE city.hanyu_pinyin = 'Nanjing';
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'ᠱᠠᠩᠬᠠᠢ' LIMIT 1;
SELECT city.hanyu_pinyin FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'ᠱᠠᠩᠬᠠᠢ' LIMIT 1;
SELECT city.hanyu_pinyin FROM city WHERE city.hanzi = 'ᠲᠠᠶᠢᠨᠵᠧᠦ (᠎ᠵᠧᠵᠢᠶᠠᠩ)'
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = '᠎ᠲᠠᠶᠢᠨᠵᠧᠦ (᠎ᠵᠧᠵᠢᠶᠠᠩ)' LIMIT 1;
SELECT city.hanzi FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'Asian Games' LIMIT 1;
SELECT city.hanzi FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'Asian Games' LIMIT 1;
SELECT city.hanzi FROM city WHERE city.gdp = (SELECT MAX(gdp) FROM city) LIMIT 1;
SELECT city.hanzi FROM city WHERE city.gdp = (SELECT MAX(gdp) FROM city) LIMIT 1;
SELECT city.city FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = '足球比赛' GROUP BY city.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city.city FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'Asian Games';
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.date BETWEEN '2003-01-01' AND '2003-12-31' GROUP BY city.hanzi HAVING COUNT(*) >= 10 LIMIT 3;
SELECT hosting_city.host_city FROM hosting_city JOIN match ON hosting_city.match_id = match.match_id JOIN city ON hosting_city.host_city = city.city_id WHERE match.competition = 'World Cup' LIMIT 1;
SELECT city.hanzi FROM city INNER JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.jul > 7 AND temperature.mar < -20 ORDER BY city.regional_population DESC LIMIT 1;
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.date BETWEEN '2003-01-01' AND '2003-12-31' INTERSECT SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.date BETWEEN '2007-01-01' AND '2007-12-31' LIMIT 1;
SELECT city.city FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = ' Soccer World Cup ' AND match.date LIKE '2012-%' GROUP BY city.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city.hanzi FROM city INNER JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.dec > 3 AND temperature.jan > 3 AND temperature.mar > 3 AND temperature.nov > 3 AND temperature.feb > 3 AND temperature.apr > 3 AND temperature.jun > 3 LIMIT 12;
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = '6th National Games of the People's Republic of China' LIMIT 1;
SELECT city.city FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY city.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'Asian Games' AND city.regional_population > 100000;
SELECT city.hanzi FROM city WHERE city.regional_population > 10000000;
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = '足球比赛' AND match.result = '胜利' GROUP BY city.hanzi HAVING COUNT(*) >= 80 AND SUM(CASE WHEN match.score > 50 THEN 1 ELSE 0 END) >= 50 ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city.hanzi FROM city WHERE city.regional_population BETWEEN 80000 AND 50000 AND city.gdp > 50000
SELECT host_city FROM hosting_city;
SELECT DISTINCT match.match_id FROM match INNER JOIN hosting_city ON match.match_id = hosting_city.match_id INNER JOIN city ON hosting_city.host_city = city.city_id WHERE city.hanzi = '呼和浩特';
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.result = 'winner';
SELECT city.hanzi FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.result = 'winner';
SELECT gdp FROM city ORDER BY gdp DESC LIMIT 1;
SELECT city.hanzi FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'GDP最高城市' LIMIT 1;
SELECT city.hanzi FROM city ORDER BY city.gdp DESC LIMIT 1;
SELECT city.hanyu_pinyin FROM city INNER JOIN hosting_city ON city.city_id = hosting_city.host_city INNER JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = '足球比赛' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman'
SELECT COUNT(*) FROM student WHERE stu_class = 'Freshman';
SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'Professor'
SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'Professor' INTERSECT SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'Associate Professor';
SELECT emp_lname FROM employee WHERE emp_jobcode = 'PROF'
SELECT COUNT(*) FROM class WHERE class_time = 'B';
SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'PROF' INTERSECT SELECT T3.emp_fname, T3.emp_lname FROM class AS T1 JOIN professor AS T2 ON T1.prof_num = T2.emp_num JOIN employee AS T3 ON T2.emp_num = T3.emp_num WHERE T1.class_section = 'URAN ZIRG';
SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'Professor'
SELECT emp_fname, emp_lname FROM employee WHERE emp_jobcode = 'Professor';
SELECT COUNT(*) FROM student WHERE stu_hrs > 90 AND stu_class = 'Senior';
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' ORDER BY stu_gpa DESC LIMIT 1;
SELECT emp_lname FROM employee WHERE emp_jobcode = 'PROF' INTERSECT SELECT T1.emp_lname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_high_degree = 'Ph.D.';
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Sophomore' AND stu_hrs > 40;
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student)
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Mahon'
SELECT stu_lname, stu_init FROM student WHERE stu_class = 'Mahon' ORDER BY stu_gpa DESC LIMIT 1;
SELECT dept_name FROM department WHERE dept_code IN (SELECT dept_code FROM professor WHERE prof_high_degree = 'Ph.D') INTERSECT SELECT dept_name FROM department WHERE dept_code IN (SELECT dept_code FROM class WHERE class_time = 'MWF 8:00');
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'P' EXCEPT SELECT emp_lname, emp_fname FROM employee WHERE emp_num IN (SELECT emp_num FROM professor WHERE dept_code = 'CS');
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'P';
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > 3.5;
SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description = 'ᠤᠳᠬ᠎ᠠ ᠵᠣᠬᠢᠶᠠᠯ';
SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description = 'ᠤᠳᠬ᠎ᠠ ᠵᠣᠬᠢᠶᠠᠯ';
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_lname, emp_fname;
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student);
SELECT stu_lname, stu_fname FROM student WHERE stu_class = '5'
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_lname, emp_fname LIMIT 5;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman'
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > 3.5 AND stu_class = 'Senior';
SELECT COUNT(*) FROM enroll WHERE enroll_grade = 'A'
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' ORDER BY stu_lname ASC, stu_fname ASC;
SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll_grade = 'A'
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student);
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' LIMIT 1;
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'PROF';
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > 3.0 ORDER BY stu_gpa DESC;
SELECT emp_lname, emp_fname FROM employee WHERE emp_num IN (SELECT emp_num FROM professor);
SELECT COUNT(*) FROM student WHERE stu_hrs > 90;
SELECT COUNT(*) FROM student WHERE stu_hrs > 90;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' EXCEPT SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll_grade = 'F'
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student);
SELECT stu_lname, stu_fname FROM student WHERE stu_transfer = 'Y';
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student)
SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code = 'CS' GROUP BY student.stu_num HAVING AVG(enroll.enroll_grade) > 3.5;
SELECT stu_lname, stu_fname, stu_init, stu_dob FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student);
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'P';
SELECT stu_lname, stu_fname FROM student WHERE stu_dob = (SELECT MIN(stu_dob) FROM student) LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student);
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' LIMIT 1;
SELECT COUNT(*) FROM enroll WHERE enroll_grade = 'A';
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' LIMIT 1;
SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll_grade = 'A'
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman'
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Mahonory'
SELECT DISTINCT dept_name FROM department WHERE dept_code IN (SELECT dept_code FROM course WHERE crs_description LIKE '%数据库%')
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Junior' LIMIT 1;
SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code = 'CS' AND class.class_time BETWEEN '10:00:00' AND '12:00:00';
SELECT class_room FROM class WHERE class_time = 'MWF 10:00-10:50' AND crs_code = (SELECT crs_code FROM course WHERE crs_description = 'Intro to Computer Science');
SELECT stu_lname, stu_fname FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE enroll_grade = 'A') ORDER BY stu_lname, stu_fname;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman'
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman';
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Junior';
SELECT stu_lname, stu_fname FROM student WHERE stu_lname = '裕勒尔' AND stu_fname = '乌兰';
SELECT stu_lname FROM student WHERE stu_init = 'B' AND stu_dob LIKE '1993%'
SELECT emp_lname FROM employee WHERE emp_jobcode = 'C';
SELECT stu_lname, stu_init FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student) AND dept_code = (SELECT dept_code FROM department WHERE dept_name = 'C');
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman'
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman' LIMIT 1;
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'Professor' ORDER BY emp_lname, emp_fname;
SELECT COUNT(*) FROM student WHERE stu_class = 'Freshman';
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student);
SELECT COUNT(*) FROM class WHERE class.prof_num IN (SELECT emp_num FROM employee WHERE emp_jobcode = 'PTL')
SELECT stu_lname FROM student WHERE stu_class = 'Senior' EXCEPT SELECT stu_lname FROM student WHERE stu_hrs < 90;
SELECT stu_lname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student) LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman'
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' ORDER BY stu_gpa DESC LIMIT 1;
SELECT DISTINCT course.dept_code FROM course INNER JOIN class ON course.crs_code = class.crs_code WHERE class.class_room = 'KLR209';
SELECT COUNT(*) FROM class WHERE crs_code = 'KLR209' AND class_section = '01';
SELECT emp_lname FROM employee WHERE emp_jobcode = 'PROF' INTERSECT SELECT T3.emp_lname FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T2.emp_num = T3.emp_num WHERE T1.stu_class = 'SR';
SELECT COUNT(*) FROM class WHERE class_time = 'MWF 9:00-9:50am' AND class_room = 'TH 213';
SELECT COUNT(*) FROM professor WHERE dept_code IN (SELECT dept_code FROM student);
SELECT emp_lname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_lname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num;
SELECT COUNT(*) FROM student WHERE stu_gpa > 3.5;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Freshman' LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > 3.0;
SELECT stu_fname, stu_lname FROM student WHERE stu_gpa > 3.0 ORDER BY stu_gpa DESC LIMIT 1;
SELECT stu_lname, stu_init FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student) ORDER BY stu_gpa DESC LIMIT 5;
SELECT stu_lname, stu_init FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student) ORDER BY stu_gpa DESC LIMIT 5;
SELECT COUNT(*) FROM enroll WHERE enroll_grade = 'A';
SELECT COUNT(*) FROM class WHERE class_time = 'MWF';
SELECT COUNT(*) FROM class WHERE class_time LIKE 'M____'
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'Professor'
SELECT COUNT(*) FROM class WHERE class_time = 'MWF 8:00-8:50am'
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_lname, emp_fname;
SELECT emp_lname FROM employee WHERE emp_jobcode = 'PROF' INTERSECT SELECT emp_lname FROM employee WHERE emp_jobcode = 'ADMP';
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student) ORDER BY stu_lname, stu_fname;
SELECT emp_lname FROM employee WHERE emp_jobcode = 'PROF'
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'PROF';
SELECT emp_lname FROM employee WHERE emp_jobcode = 'Professor';
SELECT emp_lname FROM employee WHERE emp_jobcode = 'Professor' ORDER BY emp_lname ASC LIMIT 1;
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = '102';
SELECT emp_lname FROM employee WHERE emp_jobcode = '102' AND emp_fname = 'ᠳᠤᠭᠠᠷ';
SELECT stu_lname FROM student WHERE stu_class = 'Sophomore' LIMIT 1;
SELECT stu_lname FROM student WHERE stu_num IN (SELECT stu_num FROM enroll WHERE class_code IN (SELECT class_code FROM class WHERE class_time = 'Y'))
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'LIT'
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student)
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Junior' ORDER BY stu_gpa DESC LIMIT 1;
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' AND dept_code IN (SELECT dept_code FROM department WHERE dept_name = 'Computer Science') ORDER BY stu_lname, stu_fname;
SELECT dept_name FROM department WHERE dept_name IN (SELECT dept_name FROM professor INTERSECT SELECT dept_name FROM student) LIMIT 1;
SELECT emp_lname FROM employee WHERE emp_jobcode = 'Prof' INTERSECT SELECT emp_lname FROM employee WHERE emp_jobcode = 'AsstProf';
SELECT stu_lname, stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN professor ON class.prof_num = professor.emp_num WHERE professor.prof_office = 'GH-304' AND enroll.enroll_grade != 'W';
SELECT COUNT(*) FROM class WHERE class_code = 'QM261';
SELECT stu_lname, stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description = '数据库系统概论';
SELECT stu_lname, stu_init FROM student WHERE stu_class = 'Junior' INTERSECT SELECT stu_lname, stu_init FROM student WHERE stu_class = 'Senior';
SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student);
SELECT stu_lname, stu_fname, stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN course ON enroll.class_code = course.crs_code WHERE course.crs_code = 'ACT211' ORDER BY stu_lname, stu_fname, stu_init;
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa BETWEEN 3.0 AND 4.0 LIMIT 5;
SELECT COUNT(*) FROM student WHERE stu_gpa > 3.0;
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs >= 90 AND stu_hrs < 150;
SELECT stu_lname, stu_fname FROM student WHERE stu_dob BETWEEN '1975-01-01' AND '1980-12-31' ORDER BY stu_lname, stu_fname;
SELECT stu_lname, stu_init FROM student WHERE stu_gpa = (SELECT MAX(stu_gpa) FROM student);
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > 0 AND stu_hrs < 90 ORDER BY stu_lname, stu_fname;
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student) ORDER BY stu_lname, stu_fname;
SELECT stu_lname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student)
SELECT stu_lname, stu_dob FROM student WHERE stu_class = '3' AND stu_hrs > 12;
SELECT stu_lname, stu_gpa FROM student WHERE stu_hrs >= 90 AND stu_gpa > 3.0;
SELECT COUNT(*) FROM student WHERE stu_class = 'Freshman';
SELECT emp_lname FROM employee WHERE emp_jobcode = 'Professor';
SELECT dept_name FROM department WHERE dept_code IN (SELECT dept_code FROM professor WHERE emp_num IN (SELECT emp_num FROM employee WHERE emp_lname = 'Smith'));
SELECT COUNT(*) FROM enroll WHERE enroll_grade = 'A';
SELECT DISTINCT stu_lname, stu_fname FROM student JOIN class ON student.stu_class = class.class_section JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description = '数据库系统概论';
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > 3.0 LIMIT 1;
SELECT DISTINCT dept_name FROM department WHERE dept_code IN (SELECT dept_code FROM professor WHERE emp_num IN (SELECT emp_num FROM class WHERE crs_code = 'CS347'));
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'PROF' INTERSECT SELECT T3.emp_lname, T3.emp_fname FROM class AS T1 JOIN employee AS T3 ON T1.prof_num = T3.emp_num WHERE T1.class_time = 'MWF 8:00-9:15am';
SELECT DISTINCT dept_code FROM department WHERE dept_code IN (SELECT dept_code FROM course WHERE crs_credit > 3) INTERSECT SELECT DISTINCT dept_code FROM department WHERE dept_code IN (SELECT dept_code FROM class WHERE class_time = 'MWF');
SELECT COUNT(*) FROM class WHERE class_time = 'TBA';
SELECT stu_lname, stu_init FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student) AND dept_code = 'CS';
SELECT stu_lname, stu_fname FROM student WHERE stu_dob = (SELECT MIN(stu_dob) FROM student);
SELECT stu_lname, stu_init FROM student WHERE stu_gpa > (SELECT AVG(stu_gpa) FROM student) AND dept_code IN (SELECT dept_code FROM department WHERE dept_name = 'A') AND stu_num NOT IN (SELECT stu_num FROM enroll WHERE class_code = 'C');
SELECT stu_lname FROM student WHERE stu_init = 'A' AND stu_hrs > (SELECT AVG(stu_hrs) FROM student WHERE stu_init = 'C')
SELECT COUNT(*) FROM enroll WHERE enroll_grade = 'A'
SELECT stu_lname, stu_fname FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student)
SELECT emp_lname, emp_fname FROM employee WHERE emp_jobcode = 'PROF';
SELECT COUNT(*) FROM enroll WHERE enroll_grade = 'A' OR enroll_grade = 'B';
SELECT stu_fname FROM student WHERE stu_num = 10018;
SELECT stu_lname, stu_init FROM student WHERE stu_class = 'A' AND stu_hrs > 100 AND stu_num IN (SELECT stu_num FROM enroll WHERE enroll_grade = 'B')
SELECT emp_lname, emp_fname FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE dept_name = '计算机科学' AND emp_jobcode = '教授';
SELECT emp_lname FROM employee WHERE emp_jobcode = 'Professor' INTERSECT SELECT emp_lname FROM employee WHERE emp_jobcode = 'Department Head';
SELECT DISTINCT emp_lname, emp_fname FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE department.school_code = 'CSC';
SELECT COUNT(*) FROM class WHERE class_time = 'MWF 8:00-8:50am';
SELECT stu_lname, stu_init FROM student WHERE stu_hrs > (SELECT AVG(stu_hrs) FROM student) ORDER BY stu_lname ASC, stu_init ASC;
SELECT stu_lname, stu_fname FROM student WHERE stu_dob = (SELECT MIN(stu_dob) FROM student);
SELECT stu_lname, stu_fname FROM student WHERE stu_class = 'Senior' AND stu_hrs > (SELECT AVG(stu_hrs) FROM student WHERE stu_class = 'Senior')
SELECT stu_lname, stu_fname FROM student WHERE stu_gpa > 3.5 ORDER BY stu_gpa DESC LIMIT 1;
SELECT stu_fname FROM student WHERE stu_class = 'Freshman' INTERSECT SELECT stu_fname FROM student WHERE stu_class = 'Sophomore';
SELECT stu_fname FROM student WHERE stu_class = 'Junior' INTERSECT SELECT emp_fname FROM employee WHERE emp_jobcode = 'Professor';
SELECT document_type_description FROM ref_document_types;
SELECT shipping_agent_name FROM ref_shipping_agents WHERE shipping_agent_code IN (SELECT shipping_agent_code FROM documents WHERE document_type_code = 'AJIL');
SELECT draft_copies.document_id FROM documents JOIN draft_copies ON documents.document_id = draft_copies.document_id JOIN document_drafts ON draft_copies.draft_number = document_drafts.draft_number WHERE document_status_code = ' Draft ';
SELECT ref_document_types.document_type_code FROM ref_document_types JOIN documents ON documents.document_type_code = ref_document_types.document_type_code JOIN document_drafts ON documents.document_id = document_drafts.document_id JOIN draft_copies ON document_drafts.draft_number = draft_copies.draft_number AND document_drafts.document_id = draft_copies.document_id WHERE draft_copies.draft_number = 1 AND documents.document_status_code = ' Draft';
SELECT employee_name FROM employees WHERE role_code = 'circulation_manager';
SELECT documents.document_id FROM documents JOIN documents_mailed ON documents.document_id = documents_mailed.document_id WHERE documents.document_status_code = 'Draft' AND documents.document_type_code = 'Contract'
SELECT role_description FROM roles;
SELECT employee_name FROM employees WHERE role_code IN (SELECT role_code FROM roles WHERE role_description = 'ED');
SELECT employee_name FROM employees WHERE role_code = 'BD';
SELECT role_description FROM roles WHERE role_description LIKE 'ᠺᠧ ᠺᠧ'
SELECT employee_name FROM employees INNER JOIN roles ON employees.role_code = roles.role_code WHERE role_description = 'Manager';
SELECT role_code FROM roles;
SELECT role_description FROM roles;
SELECT shipping_agent_name FROM ref_shipping_agents WHERE shipping_agent_code IN (SELECT shipping_agent_code FROM documents WHERE document_status_code = 'Draft')
SELECT document_id FROM documents;
SELECT document_id FROM documents WHERE document_status_code = 'Draft' AND shipping_agent_code = 'UPS'
SELECT document_type_code FROM documents LIMIT 1;
SELECT documents.document_type_code FROM documents JOIN documents_mailed ON documents.document_id = documents_mailed.document_id JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_shipping_agents.shipping_agent_name = 'ᠳ᠋ᠤᠭᠠᠷ᠎ᠤ᠋ᠨ ᠨᠢ2 ᠪᠣᠯᠬᠤ ᠹᠠᠢᠯ᠎ᠤ᠋ᠨ ᠲᠡᠭᠡᠭᠡᠪᠦᠷᠢ᠎ᠶ᠋ᠢᠨ ᠣᠷᠣᠯᠠᠭᠴᠢ᠎ᠶ᠋ᠢᠨ ᠨᠡᠷᠡᠢᠳᠦᠯ ᠨᠢ ᠶᠠᠭᠤ ᠪᠣᠢ';
SELECT documents.document_id FROM documents JOIN documents_mailed ON documents.document_id = documents_mailed.document_id WHERE documents.shipping_agent_code = 'ᠳᠤᠮᠳᠠᠳᠤ ᠤᠯᠤᠰ᠎ ᠤᠨ ᠰᠢᠤᠳᠠᠨ' AND documents_mailed.mailing_date = (SELECT MAX(mailing_date) FROM documents_mailed WHERE documents_mailed.document_id = documents.document_id);
SELECT role_description FROM roles JOIN employees ON employees.role_code = roles.role_code JOIN circulation_history ON circulation_history.employee_id = employees.employee_id WHERE circulation_history.draft_number = 42;
SELECT document_id FROM documents WHERE document_status_code = 'Draft' LIMIT 3;
SELECT document_status_code FROM documents LIMIT 4;
SELECT documents.document_id FROM documents JOIN documents_mailed ON documents.document_id = documents_mailed.document_id WHERE documents.document_status_code = 'SHIPPED' LIMIT 1;
SELECT documents.document_id FROM documents JOIN documents_mailed ON documents.document_id = documents_mailed.document_id WHERE documents_mailed.mailing_date = '2023-04-05';
SELECT documents.document_id FROM documents JOIN document_status ON documents.document_status_code = document_status.document_status_code WHERE document_status.document_status_code = ' Draft';
SELECT document_type_code FROM documents LIMIT 7;
SELECT documents.document_type_code FROM documents JOIN document_drafts ON documents.document_id = document_drafts.document_id JOIN draft_copies ON document_drafts.document_id = draft_copies.document_id AND document_drafts.draft_number = draft_copies.draft_number JOIN circulation_history ON draft_copies.document_id = circulation_history.document_id AND draft_copies.copy_number = circulation_history.copy_number WHERE circulation_history.employee_id = 2;
SELECT employee_name FROM employees WHERE role_code IN (SELECT role_code FROM roles WHERE role_description LIKE '%manager%') LIMIT 1;
SELECT documents.document_id FROM documents JOIN document_drafts ON documents.document_id = document_drafts.document_id WHERE document_drafts.draft_number = 1;
SELECT employee_name FROM employees WHERE employee_id IN (SELECT employee_id FROM circulation_history GROUP BY employee_id HAVING COUNT(*) = 1)
SELECT document_id FROM circulation_history WHERE draft_number = (SELECT MAX(draft_number) FROM document_drafts WHERE document_id = circulation_history.document_id);
SELECT document_status_code, document_id FROM documents WHERE document_id IN ( SELECT document_id FROM circulation_history WHERE employee_id IN ( SELECT employee_id FROM employees WHERE role_code = 'librarian' ) )
SELECT document_type_code FROM documents WHERE document_status_code = 'Available' AND document_id IN ( SELECT document_id FROM circulation_history WHERE draft_number = ( SELECT MAX(draft_number) FROM document_drafts GROUP BY document_id ) )
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM bookings WHERE status_code = 'Confirmed')
SELECT DISTINCT product_id FROM bookings_services WHERE product_id IN ( SELECT product_id FROM invoice_items WHERE invoice_id IN ( SELECT invoice_id FROM invoices WHERE payment_method_code = 'credit_card' ) )
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN ( SELECT workshop_group_id FROM bookings WHERE status_code = 'confirmed' )
SELECT customer_id FROM bookings INTERSECT SELECT customer_id FROM customer_orders;
SELECT customer_id FROM bookings INTERSECT SELECT customer_id FROM customer_orders;
SELECT store_id FROM bookings INTERSECT SELECT store_id FROM customer_orders;
SELECT customer_name FROM customers
SELECT customer_name FROM clients JOIN bookings ON bookings.customer_id = clients.client_id JOIN drama_workshop_groups ON bookings.workshop_group_id = drama_workshop_groups.workshop_group_id WHERE drama_workshop_groups.store_name = 'Бүрэдхэл темдэглэл';
SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM customer_orders WHERE actual_delivery_date IS NOT NULL AND actual_delivery_date < planned_delivery_date)
SELECT store_name FROM stores WHERE store_id IN (SELECT store_id FROM customer_orders WHERE order_date = '2023-04-01') INTERSECT SELECT store_name FROM stores WHERE store_id IN (SELECT store_id FROM bookings WHERE order_date = '2023-04-01');
SELECT drama_workshop_groups.workshop_group_id FROM drama_workshop_groups JOIN services ON drama_workshop_groups.workshop_group_id = services.workshop_group_id WHERE services.service_type_code = 'Drama'
SELECT store_name FROM stores INNER JOIN customer_orders ON stores.store_id = customer_orders.store_id WHERE customer_orders.order_date = '2023-04-01'
SELECT DISTINCT invoices.payment_method_code FROM invoices JOIN invoice_items ON invoices.invoice_id = invoice_items.invoice_id JOIN order_items ON invoice_items.order_item_id = order_items.order_item_id JOIN bookings ON invoices.order_id = bookings.booking_id WHERE bookings.status_code = 'Completed' AND bookings.actual_delivery_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT DISTINCT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM invoices WHERE payment_method_code = 'Credit Card') INTERSECT SELECT DISTINCT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM bookings WHERE status_code = 'Confirmed');
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM bookings WHERE booking_id IN (SELECT booking_id FROM customer_orders WHERE customer_id = 'Букий')) LIMIT 1;
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups JOIN bookings ON drama_workshop_groups.workshop_group_id = bookings.workshop_group_id JOIN invoices ON bookings.booking_id = invoices.order_id WHERE invoices.payment_method_code = 'Cash'
SELECT store_name FROM stores WHERE marketing_region_code = 'ᠳᠤᠮᠳᠠᠲᠤ ᠤᠯᠤᠰ';
SELECT store_name FROM stores INNER JOIN marketing_regions ON stores.marketing_region_code = marketing_regions.marketing_region_code WHERE marketing_region_name = 'ᠳᠤᠮᠳᠠᠲᠤ ᠤᠯᠤᠰ';
SELECT product_description FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN invoice_items ON order_items.order_item_id = invoice_items.order_item_id WHERE invoice_items.order_quantity > 10;
SELECT drama_workshop_groups.marketing_region_code FROM drama_workshop_groups INNER JOIN services ON drama_workshop_groups.workshop_group_id = services.workshop_group_id INNER JOIN bookings_services ON services.service_id = bookings_services.product_id GROUP BY drama_workshop_groups.marketing_region_code ORDER BY COUNT(bookings_services.order_id) DESC LIMIT 1;
SELECT product_description FROM products INNER JOIN order_items ON products.product_id = order_items.product_id WHERE order_quantity > 10;
SELECT DISTINCT drama_workshop_groups.marketing_region_code FROM drama_workshop_groups JOIN services ON drama_workshop_groups.workshop_group_id = services.workshop_group_id JOIN bookings_services ON services.service_id = bookings_services.product_id;
SELECT store_phone FROM stores INNER JOIN addresses ON stores.address_id = addresses.address_id WHERE addresses.city_town = 'New York';
SELECT I'm sorry, but your request seems to be incomplete or contains non-instructional content. Please provide a clear question or query you would like me to translate into an SQLite SQL statement, ensuring it pertains to the given tables and their properties, and adheres to the guidelines you've previously mentioned.
SELECT customer_name FROM customers WHERE customer_name = 'ᠯᠢ ᠬᠣᠩ';
SELECT customer_name FROM clients INNER JOIN bookings ON clients.client_id = bookings.customer_id WHERE status_code = '-active';
SELECT DISTINCT customer_orders.order_id FROM customer_orders JOIN invoices ON customer_orders.order_id = invoices.order_id WHERE invoices.payment_method_code = 'Credit Card';
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM bookings WHERE booking_id IN (SELECT booking_id FROM invoices WHERE order_id IN (SELECT order_id FROM customer_orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31')))
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM bookings WHERE status_code = 'confirmed') LIMIT 1;
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups JOIN bookings ON drama_workshop_groups.workshop_group_id = bookings.workshop_group_id JOIN invoices ON bookings.booking_id = invoices.order_id JOIN customer_orders ON invoices.order_id = customer_orders.order_id WHERE customer_orders.actual_delivery_date IS NOT NULL ORDER BY drama_workshop_groups.store_name ASC;
SELECT store_name FROM stores WHERE store_id IN (SELECT store_id FROM customer_orders WHERE actual_delivery_date IS NULL)
SELECT store_name FROM stores JOIN addresses ON stores.address_id = addresses.address_id WHERE state_county = '内蒙古自治区';
SELECT store_name FROM stores INNER JOIN customer_orders ON stores.store_id = customer_orders.store_id WHERE customer_orders.order_date = '2023-04-01'
SELECT store_name FROM drama_workshop_groups WHERE address_id IN (SELECT address_id FROM addresses WHERE city_town = '巴彦淖尔市')
SELECT store_name FROM stores JOIN customer_orders ON stores.store_id = customer_orders.store_id JOIN order_items ON customer_orders.order_id = order_items.order_id GROUP BY store_name ORDER BY SUM(order_items.order_quantity) DESC LIMIT 1;
SELECT drama_workshop_groups.workshop_group_id FROM drama_workshop_groups JOIN bookings ON drama_workshop_groups.workshop_group_id = bookings.workshop_group_id JOIN customer_orders ON bookings.customer_id = customer_orders.customer_id AND bookings.order_date = customer_orders.order_date WHERE bookings.status_code = 'completed';
SELECT product_name FROM products WHERE product_price > 100 LIMIT 1;
SELECT product_name FROM products LIMIT 100;
SELECT service_id FROM services WHERE service_type_code IN (SELECT service_type_code FROM ref_service_types WHERE parent_service_type_code = 'Y')
SELECT product_name FROM services INNER JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code WHERE ref_service_types.service_type_description = '芩始ehen ᠲᠤᠷᠠᠯ ᠪᠦᠷᠢ᠎ᠶ᠋ᠢᠨ ᠳᠦᠷᠰᠦᠯᠡᠯ ᠂ ᠺᠣᠳ᠋ ᠪᠠ ᠦᠢᠯᠡᠴᠢᠯᠡᠭᠡᠨ ᠤ ᠲᠣᠭ᠎ᠠ᠎ᠶ᠋ᠢ ᠵᠢᠭᠰᠠᠭᠠᠬᠤ ᠃';
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups JOIN bookings ON drama_workshop_groups.workshop_group_id = bookings.workshop_group_id WHERE bookings.actual_delivery_date IS NOT NULL ORDER BY drama_workshop_groups.store_name;
SELECT DISTINCT service_id FROM services INNER JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code WHERE ref_service_types.parent_service_type_code = 'GH-321';
SELECT customer_name FROM customers WHERE address_id IN (SELECT address_id FROM addresses WHERE city_town = 'Bayanhüür');
SELECT store_name FROM stores WHERE store_id IN ( SELECT store_id FROM bookings WHERE status_code = 'Completed' )
SELECT drama_workshop_groups.address_id FROM drama_workshop_groups INNER JOIN bookings ON drama_workshop_groups.workshop_group_id = bookings.workshop_group_id WHERE bookings.status_code = 'completed' GROUP BY drama_workshop_groups.address_id ORDER BY COUNT(bookings.booking_id) DESC LIMIT 1;
SELECT drama_workshop_groups.workshop_group_id FROM drama_workshop_groups JOIN services ON drama_workshop_groups.workshop_group_id = services.workshop_group_id WHERE services.service_type_code = 'ᠺᠢᠨᠣ';
SELECT store_email_address FROM stores WHERE store_id IN (SELECT store_id FROM drama_workshop_groups) INTERSECT SELECT store_email_address FROM stores WHERE store_id IN (SELECT store_id FROM services);
SELECT product_description FROM products INTERSECT SELECT product_description FROM services;
SELECT product_price FROM products WHERE product_price <= 100;
SELECT drama_workshop_groups.address_id FROM drama_workshop_groups JOIN services ON drama_workshop_groups.workshop_group_id = services.workshop_group_id JOIN bookings_services ON services.service_id = bookings_services.product_id JOIN invoice_items ON bookings_services.product_id = invoice_items.product_id AND bookings_services.order_id = invoice_items.order_id JOIN invoices ON invoice_items.invoice_id = invoices.invoice_id WHERE invoices.payment_method_code = 'Credit Card' GROUP BY drama_workshop_groups.address_id HAVING SUM(invoice_items.order_quantity) > 10 ORDER BY SUM(invoice_items.order_quantity) DESC;
SELECT store_name FROM stores WHERE store_id IN (SELECT store_id FROM customer_orders WHERE order_id IN (SELECT order_id FROM invoice_items WHERE product_id IN (SELECT product_id FROM bookings_services)))
SELECT store_name FROM stores WHERE marketing_region_code = '蒙古区' AND store_phone IS NOT NULL;
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_quantity > 2000) LIMIT 1;
SELECT store_name FROM stores WHERE store_phone LIKE '2000%' LIMIT 1;
SELECT store_id FROM bookings GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT store_id FROM bookings WHERE status_code = 'COMPLETE' AND actual_delivery_date IS NOT NULL;
SELECT COUNT(*) FROM customer_orders WHERE actual_delivery_date IS NOT NULL AND actual_delivery_date <= '2023-04-01' LIMIT 1;
SELECT store_id FROM bookings GROUP BY store_id HAVING COUNT(*) > 1000 AND COUNT(*) < 3000;
SELECT customer_name FROM clients JOIN bookings ON bookings.customer_id = clients.client_id JOIN drama_workshop_groups ON drama_workshop_groups.workshop_group_id = bookings.workshop_group_id WHERE drama_workshop_groups.store_name = 'Бои бүхэй шивжүүрийн зардлын төв';
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id WHERE addresses.city_town = 'ᠱᠢ ᠵᠦ chúčügüge-yiyin adalqahu duguilang-u n kereglegsen adali busu jogos-un hodoodun togha khemjye-yee-yiyi eirezü yje city_town'
SELECT store_email_address FROM stores WHERE store_id IN (SELECT store_id FROM customer_orders WHERE actual_delivery_date IS NOT NULL)
SELECT store_name FROM drama_workshop_groups WHERE address_id IN ( SELECT address_id FROM addresses WHERE city_town = 'Зүүн Сингат хотын байгаль шивээний аж ахуйн нэгж' )
SELECT customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM bookings WHERE status_code = ' Cancelled')
SELECT customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN stores ON customer_orders.store_id = stores.store_id JOIN addresses ON stores.address_id = addresses.address_id WHERE addresses.state_county = 'ᠬᠠᠷᠠᠮᠦ᠋ᠷᠡᠨ ᠮᠣᠵᠢ'
SELECT store_name FROM drama_workshop_groups WHERE address_id IN ( SELECT address_id FROM addresses WHERE state_county = 'AL' )
SELECT drama_workshop_groups.store_name FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id WHERE addresses.state_county = '内蒙古自治区' AND addresses.line_1 = '呼和浩特市';
SELECT store_name FROM drama_workshop_groups INNER JOIN stores ON drama_workshop_groups.store_id = stores.store_id;
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM bookings WHERE status_code = 'Completed')
SELECT customer_name FROM customers INNER JOIN addresses ON customers.address_id = addresses.address_id WHERE state_county = 'Bayanhongor Aimag';
SELECT customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.order_date = '2023-04-01';
SELECT customer_name FROM customers INNER JOIN bookings ON customers.address_id = bookings.customer_id WHERE bookings.actual_delivery_date IS NOT NULL ORDER BY bookings.actual_delivery_date DESC LIMIT 1;
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN ( SELECT workshop_group_id FROM bookings WHERE booking_id IN ( SELECT order_id FROM bookings_services WHERE product_id IN ( SELECT product_id FROM invoice_items WHERE invoice_id IN ( SELECT invoice_id FROM invoice_items AS ii INNER JOIN order_items AS oi ON ii.order_item_id = oi.order_item_id GROUP BY ii.invoice_id HAVING SUM(oi.order_quantity) > 30 ) ) ) );
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN ( SELECT workshop_group_id FROM bookings WHERE status_code = 'Active' )
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN ( SELECT workshop_group_id FROM bookings WHERE booking_id IN ( SELECT order_id FROM bookings_services WHERE product_id IN ( SELECT service_id FROM services WHERE service_type_code = '½È¼ö' ) ) );
SELECT customer_name FROM customers WHERE customer_id IN ( SELECT customer_orders.customer_id FROM customer_orders INTERSECT SELECT bookings.customer_id FROM bookings ) ORDER BY customer_name;
SELECT customer_name FROM customers INTERSECT SELECT customer_name FROM performers;
SELECT DISTINCT customer_orders.order_id FROM customer_orders JOIN bookings ON customer_orders.order_id = bookings.booking_id JOIN performers_in_bookings ON bookings.booking_id = performers_in_bookings.order_id;
SELECT store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM bookings WHERE status_code = 'confirmed')
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM invoices WHERE payment_method_code = 'Credit Card'));
SELECT DISTINCT bookings.customer_id FROM bookings JOIN invoices ON bookings.booking_id = invoices.order_id JOIN invoice_items ON invoices.invoice_id = invoice_items.invoice_id WHERE invoices.payment_method_code = 'Cash'
SELECT product_name FROM products WHERE product_name LIKE '格尔乐%' OR product_name LIKE '%金奥%'
SELECT product_name FROM products WHERE product_name LIKE '格尔吉%' AND product_price > (SELECT AVG(product_price) FROM products) LIMIT 1;
SELECT customers.customer_first_name, customers.customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id WHERE financial_transactions.transaction_type = 'debit';
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN invoices ON orders.order_id = invoices.order_id JOIN financial_transactions ON invoices.invoice_number = financial_transactions.invoice_number WHERE transaction_type = 'Payment' AND transaction_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT customer_first_name, customer_last_name FROM customers WHERE gender = 'Female';
SELECT customer_first_name, customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id WHERE transaction_type = 'debit';
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_quantity > 10;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'Expense')) LIMIT 1;
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_quantity > 10 AND invoice_line_items.product_price > 50;
SELECT customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed = '2023-04-05');
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_price > ( SELECT AVG(product_price) FROM invoice_line_items )
SELECT customer_first_name, customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id WHERE transaction_type = ' Expense ';
SELECT customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN invoices ON orders.order_id = invoices.order_id WHERE invoices.invoice_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed BETWEEN '2023-01-01' AND '2023-03-31') LIMIT 900;
SELECT customer_first_name FROM customers;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM accounts WHERE account_id IN ( SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit' AND transaction_date BETWEEN '2023-01-01' AND '2023-03-31' ) );
SELECT customer_first_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM accounts WHERE account_id IN ( SELECT account_id FROM financial_transactions WHERE transaction_type = 'Deposit' ) )
SELECT customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed = (SELECT MAX(date_order_placed) FROM orders));
SELECT customer_first_name, customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id WHERE transaction_type = 'debit' ORDER BY transaction_date DESC LIMIT 5;
SELECT customer_last_name, customer_first_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id JOIN financial_transactions ON invoice_line_items.invoice_number = financial_transactions.invoice_number WHERE transaction_type = 'Payment' GROUP BY customers.customer_id HAVING SUM(transaction_amount) > 1000;
SELECT customer_last_name, customer_first_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN invoices ON orders.order_id = invoices.order_id JOIN financial_transactions ON invoices.invoice_date = financial_transactions.transaction_date WHERE transaction_type = 'Payment' AND transaction_amount > 100;
SELECT customer_first_name, customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id WHERE transaction_type = 'debit';
SELECT customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit')) LIMIT 1;
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN product_categories ON order_items.product_id = product_categories.product_type_description WHERE product_categories.vat_rating = 20;
SELECT customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit')) LIMIT 1;
SELECT customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'Expense'))
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_quantity > 2 GROUP BY customers.customer_id;
SELECT product_type_description FROM product_categories;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit'))
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_price > 100 GROUP BY customers.customer_id HAVING COUNT(DISTINCT invoice_line_items.product_id) >= 2;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders WHERE order_id IN ( SELECT order_id FROM invoices WHERE invoice_date BETWEEN '2023-01-01' AND '2023-03-31' ) )
SELECT customer_first_name, customer_last_name FROM customers;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit')) ORDER BY customer_last_name, customer_first_name;
SELECT T2.customer_first_name, T2.customer_last_name FROM financial_transactions AS T1 INNER JOIN accounts AS T3 ON T1.account_id = T3.account_id INNER JOIN customers AS T2 ON T3.customer_id = T2.customer_id WHERE T1.transaction_type = 'debit' GROUP BY T2.customer_id HAVING SUM(T1.transaction_amount) > 5000 LIMIT 1;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit')) ORDER BY customer_last_name, customer_first_name;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders WHERE date_order_placed BETWEEN '2023-01-01' AND '2023-03-31' )
SELECT customer_first_name, customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id WHERE transaction_type = ' Expense ';
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'Expense' AND transaction_amount > 337)) LIMIT 1;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed = '2023-04-01')
SELECT T2.product_title, T2.product_quantity FROM orders AS T1 JOIN order_items AS T3 ON T1.order_id = T3.order_id JOIN invoice_line_items AS T2 ON T3.order_item_id = T2.order_item_id WHERE T1.date_order_placed = '2023-04-01'
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit'))
SELECT product_title FROM invoice_line_items WHERE invoice_number IN ( SELECT invoice_number FROM financial_transactions WHERE transaction_type = 'Expense' ) LIMIT 1;
SELECT T2.product_title FROM `invoice_line_items` AS T1 INNER JOIN `order_items` AS T2 ON T1.order_item_id = T2.order_item_id INNER JOIN `orders` AS T3 ON T2.order_id = T3.order_id INNER JOIN `customers` AS T4 ON T3.customer_id = T4.customer_id WHERE T4.customer_first_name = 'Аралжилалаху' AND T4.customer_last_name = 'Төрөлж Żül khu'
SELECT customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed = (SELECT MAX(date_order_placed) FROM orders)) LIMIT 1;
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id JOIN financial_transactions ON invoice_line_items.product_id = financial_transactions.transaction_id WHERE transaction_type = 'Credit' AND transaction_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM orders WHERE order_id IN ( SELECT order_id FROM order_items WHERE order_item_id IN ( SELECT order_item_id FROM invoice_line_items WHERE derived_product_cost > 100 ) ) );
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts WHERE account_id IN (SELECT account_id FROM financial_transactions WHERE transaction_type = 'debit')) LIMIT 1;
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed = (SELECT MAX(date_order_placed) FROM orders));
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE date_order_placed BETWEEN '2023-01-01' AND '2023-03-31';
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_quantity > 4;
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM invoices WHERE invoice_date BETWEEN '2023-01-01' AND '2023-03-31')) LIMIT 1;
SELECT product_name FROM products JOIN product_categories ON products.production_type_code = product_categories.production_type_code WHERE product_categories.vat_rating = 'standard';
SELECT product_name FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id WHERE customers.customer_first_name = 'Бүхэлдэхүн' AND customers.customer_last_name = 'Үнгэдхээ';
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM orders WHERE date_order_placed = '2023-04-05'))
SELECT product_title FROM product_categories JOIN order_items ON product_categories.product_type_description = order_items.product_id JOIN invoices ON order_items.order_id = invoices.order_id JOIN invoice_line_items ON invoices.invoice_number = invoice_line_items.invoice_number WHERE product_categories.vat_rating = 'standard';
SELECT customer_id FROM orders WHERE date_order_placed = '2023-04-01'
SELECT product_title FROM invoice_line_items WHERE product_quantity = (SELECT MAX(product_quantity) FROM invoice_line_items) LIMIT 1;
SELECT product_title FROM invoice_line_items WHERE derived_vat_payable > 0;
SELECT product_title FROM invoice_line_items WHERE product_quantity > 10;
SELECT product_name FROM products WHERE production_type_code = 'B';
SELECT product_title FROM invoice_line_items WHERE product_quantity > 10 AND derived_product_cost > 50;
SELECT product_title, product_quantity, product_price FROM invoice_line_items;
SELECT product_title FROM invoice_line_items WHERE product_quantity > (SELECT AVG(product_quantity) FROM invoice_line_items)
SELECT product_title FROM invoice_line_items WHERE invoice_number IN (SELECT invoice_number FROM financial_transactions WHERE transaction_type = 'payment') LIMIT 1;
SELECT customer_id FROM orders WHERE order_id IN (SELECT order_id FROM invoice_line_items WHERE product_quantity > 1)
SELECT customer_id FROM orders WHERE date_order_placed = '2023-04-01'
SELECT customer_first_name, customer_last_name FROM customers WHERE gender = 'Female';
SELECT customer_last_name, customer_first_name FROM customers WHERE country = 'China';
SELECT product_name FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id WHERE orders.date_order_placed = '2023-04-01';
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM orders WHERE date_order_placed = '2023-04-05'));
SELECT product_name FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN invoices ON order_items.order_id = invoices.order_id WHERE invoices.invoice_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT product_color FROM products WHERE product_id IN ( SELECT product_id FROM invoice_line_items WHERE invoice_number IN ( SELECT invoice_number FROM invoices WHERE order_id IN ( SELECT order_id FROM orders WHERE date_order_placed = '2023-04-01' ) ) );
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM orders WHERE date_order_placed = '2023-04-01')) INTERSECT SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM invoice_line_items WHERE invoice_number IN (SELECT invoice_number FROM invoices WHERE invoice_date = '2023-04-01'));
SELECT customer_first_name, customer_last_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed = '2023-04-01') LIMIT 1;
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_quantity > ( SELECT AVG(product_quantity) FROM invoice_line_items )
SELECT customer_first_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE date_order_placed = '2023-04-05')
SELECT product_name FROM products WHERE product_size = 'large' AND unit_price > 100;
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id WHERE order_items.product_quantity > 10;
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id WHERE invoice_line_items.product_quantity > order_items.product_quantity;
SELECT product_name FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id WHERE orders.date_order_placed = '2023-04-01';
SELECT customer_first_name, customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN invoices ON orders.order_id = invoices.order_id JOIN financial_transactions ON invoices.invoice_number = financial_transactions.invoice_number WHERE transaction_type = 'Payment' AND transaction_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT customers.customer_first_name, customers.customer_last_name FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN order_items ON orders.order_id = order_items.order_id JOIN products ON order_items.product_id = products.product_id WHERE products.product_size = 'large' AND products.production_type_code = 'handmade';
SELECT product_name FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN invoices ON order_items.order_id = invoices.order_id WHERE invoices.invoice_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT product_name FROM products WHERE product_size = 'large' AND production_type_code = 'handmade';
SELECT customer_name FROM customers WHERE customer_phone IS NOT NULL LIMIT 1;
SELECT product_name FROM products WHERE product_type_code = 'Book';
SELECT product_name FROM products INNER JOIN order_items ON products.product_id = order_items.product_id WHERE order_id IN ( SELECT order_id FROM customer_orders WHERE customer_id IN ( SELECT customer_id FROM contacts WHERE first_name = 'Мөжий' ) )
SELECT DISTINCT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id WHERE order_items.product_id = 105;
SELECT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id WHERE order_items.product_id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM customer_address_history WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_name = 'ᠠᠳᠠᠭ᠎ᠲᠠᠭᠠᠨ ᠬᠣᠶᠠᠷ ᠦᠢᠯᠡᠳᠬᠦᠨ᠎ᠦ᠌ ᠲᠥᠷᠥᠯ ᠵᠦᠢᠯ᠎ ᠤᠨ ᠺᠣᠳ᠋᠎ ᠢ ᠢᠯᠡᠷᠡᠭᠦᠯᠬᠦ ᠃')));
SELECT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id WHERE order_items.order_quantity > 10 AND customer_orders.order_status_code = 'Active';
SELECT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id WHERE order_items.product_id = (SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1)
SELECT product_name FROM products INNER JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.order_id IN ( SELECT order_id FROM customer_orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31' ) AND product_type_code = 'Electronics';
SELECT product_name FROM products INNER JOIN order_items ON products.product_id = order_items.product_id WHERE order_quantity > 10;
SELECT product_name FROM products INNER JOIN order_items ON products.product_id = order_items.product_id GROUP BY product_name ORDER BY SUM(order_items.order_quantity) DESC LIMIT 1;
SELECT customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id WHERE order_quantity > 10;
SELECT contacts.first_name, contacts.last_name FROM contacts JOIN customers ON contacts.contact_id = customers.customer_id JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.order_status_code = 'Active' AND customer_orders.order_date BETWEEN '2023-01-01' AND '2023-03-31' ORDER BY contacts.last_name ASC, contacts.first_name ASC;
SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM order_items WHERE order_id IN (SELECT order_id FROM customer_orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_name = 'ᠵᠠᠬᠢᠶᠠᠯᠠᠨ ᠠᠪᠤᠭᠰᠠᠨ ᠲᠣᠭ᠎ᠠ ᠬᠡᠮᠵᠢᠶ᠎ᠡ᠎ᠪᠡᠷ ᠬᠠᠮᠤᠭ ᠤᠨ ᠠᠷᠪᠢᠨ ᠬᠤᠳᠠᠯᠳᠤᠨ ᠠᠪᠤᠭᠴᠢᠳ᠎ ᠤᠨ ᠣᠪᠣᠭ')))
SELECT product_name FROM products WHERE product_price BETWEEN 500 AND 1000;
SELECT head.name FROM head JOIN management ON head.head_id = management.head_id JOIN department ON management.department_id = department.department_id WHERE department.budget_in_billions > 56;
SELECT head.born_state FROM head INNER JOIN management ON head.head_id = management.head_id WHERE management.temporary_acting = 0;
SELECT department.name FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 0;
SELECT name FROM department WHERE ranking = 1 LIMIT 1;
SELECT name FROM head WHERE age BETWEEN 10 AND 15;
SELECT department.department_id FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 0;
SELECT name FROM department WHERE ranking = (SELECT MAX(ranking) FROM department);
SELECT department.name FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 0 LIMIT 3;
SELECT department.name FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 0;
SELECT name FROM head WHERE head_id IN (SELECT head_id FROM management WHERE department_id IN (SELECT department_id FROM department WHERE budget_in_billions > 1))
SELECT name FROM department ORDER BY budget_in_billions DESC LIMIT 1;
SELECT department.name FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 0;
SELECT name FROM head WHERE born_state = 'Texas'
SELECT head.name FROM head JOIN management ON head.head_id = management.head_id JOIN department ON management.department_id = department.department_id WHERE department.name = 'ᠡᠳ᠋ ᠦᠨ ᠵᠠᠰᠠᠭ ᠤᠨ ᠬᠡᠯᠲᠡᠰ' INTERSECT SELECT head.name FROM head JOIN management ON head.head_id = management.head_id JOIN department ON management.department_id = department.department_id WHERE department.name = 'ᠤᠯᠤᠰ᠎ ᠦ᠋ᠨ ᠭᠠᠵᠠᠷ ᠰᠢᠷᠤᠢᠨ ᠦ ᠠᠮᠤᠷ ᠲᠦᠪᠰᠢᠨ ᠤ ᠬᠡᠯᠲᠡᠰ';
SELECT head.name FROM head JOIN management ON head.head_id = management.head_id JOIN department ON management.department_id = department.department_id WHERE department.budget_in_billions > 10;
SELECT department.name FROM department JOIN management ON department.department_id = management.department_id WHERE management.temporary_acting = 'No' AND department.budget_in_billions > 10
SELECT staff.nickname FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN vehicles ON lessons.vehicle_id = vehicles.vehicle_id WHERE vehicles.vehicle_details = 'ᠪᠦᠬᠦ ᠲᠡᠷᠭᠡᠨ  ᠦ ᠨᠣᠮᠧᠷ᠎ ᠢ ᠵᠢᠭᠰᠠᠭᠠᠨ᠎ᠠ ᠃' GROUP BY staff.nickname;
SELECT COUNT(*) FROM lessons WHERE lesson_status_code = 'Completed';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT staff.first_name, staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id WHERE lessons.lesson_date = '2023-04-01' AND lessons.lesson_time = '10:00:00'
SELECT staff.first_name, staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id WHERE lessons.lesson_status_code = 'Completed' ORDER BY COUNT(lessons.lesson_id) DESC LIMIT 1;
SELECT staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Бүхэлтан Ундер';
SELECT staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN vehicles ON lessons.vehicle_id = vehicles.vehicle_id WHERE vehicles.vehicle_details = 'Bayar buhe irgenii ajiltan' LIMIT 1;
SELECT first_name FROM customers WHERE last_name = 'Вэнь';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT first_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Finished') INTERSECT SELECT first_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Upcoming');
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT first_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Completed') INTERSECT SELECT first_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Cancelled');
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT staff.nickname FROM staff WHERE staff.last_name = 'Ludie';
SELECT last_name FROM staff WHERE nickname = 'Ludie';
SELECT staff.nickname FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.customer_status_code = 'VIP' ORDER BY lessons.lesson_date DESC, lessons.lesson_time DESC LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT T1.first_name, T1.last_name FROM staff AS T1 JOIN lessons AS T2 ON T1.staff_id = T2.staff_id WHERE T2.lesson_date = (SELECT MAX(T3.lesson_date) FROM lessons AS T3) LIMIT 1;
SELECT staff.first_name, staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.amount_outstanding > 0 ORDER BY staff.last_name, staff.first_name;
SELECT first_name, last_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Completed' INTERSECT SELECT staff_id FROM lessons WHERE lesson_status_code = 'Cancelled')
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'VIP' LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT staff.first_name, staff.last_name FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE lessons.lesson_status_code = 'completed' ORDER BY lessons.lesson_date DESC LIMIT 5;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT first_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Completed' AND lesson_date BETWEEN '2023-01-01' AND '2023-03-31')
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT last_name FROM staff WHERE first_name = 'ᠬᠠᠢᠨᠠᠨ';
SELECT T1.first_name FROM staff AS T1 JOIN lessons AS T2 ON T1.staff_id = T2.staff_id WHERE T2.lesson_status_code = 'Completed' ORDER BY T2.lesson_date DESC LIMIT 1;
SELECT T3.first_name FROM staff AS T1 INNER JOIN lessons AS T2 ON T1.staff_id = T2.staff_id INNER JOIN customers AS T3 ON T2.customer_id = T3.customer_id WHERE T2.lesson_status_code = 'Completed' GROUP BY T3.first_name ORDER BY COUNT(T2.lesson_id) DESC LIMIT 1;
SELECT first_name, last_name FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE city = 'ХотаДу' AND state_province_county = 'БаянОбоот';
SELECT first_name, last_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Completed') INTERSECT SELECT first_name, last_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_status_code = 'Cancelled');
SELECT COUNT(*) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id JOIN customers ON lessons.customer_id = customers.customer_id WHERE staff.first_name = '2᠎ ᠡᠴᠠ' AND customers.last_name = '4 ᠠᠵᠢᠯᠲᠠᠨ';
SELECT first_name, last_name FROM customers WHERE customer_status_code = '4' ORDER BY date_became_customer DESC LIMIT 2;
SELECT staff.first_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id WHERE lessons.lesson_date = '2023-04-05';
SELECT last_name FROM customers WHERE customer_status_code = 'Active';
SELECT DISTINCT customers.first_name, customers.last_name FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id JOIN vehicles ON lessons.vehicle_id = vehicles.vehicle_id WHERE vehicles.vehicle_details = 'Čweng';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT first_name FROM customers WHERE date_became_customer BETWEEN '2000-01-01' AND '2000-12-31' LIMIT 200;
SELECT first_name, last_name FROM customers WHERE date_of_birth >= '2000-01-01' AND customer_status_code = 'Active';
SELECT first_name, last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM lessons WHERE lesson_status_code = 'Finished' ) AND customer_id IN ( SELECT customer_id FROM customer_payments WHERE payment_method_code = 'Cash' )
SELECT first_name, last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM lessons WHERE lesson_status_code = 'Finished' ) AND customer_id IN ( SELECT customer_id FROM customer_payments WHERE amount_payment > 500 );
SELECT first_name, last_name FROM customers WHERE date_of_birth < '1990-01-01';
SELECT first_name, last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM lessons WHERE lesson_status_code = 'Completed' ) ORDER BY date_of_birth ASC LIMIT 1;
SELECT first_name FROM customers WHERE customer_status_code = 'Active' AND date_of_birth BETWEEN '1980-01-01' AND '1990-12-31' LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_status_code = '¼';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT DISTINCT customers.first_name, customers.last_name FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name = 'Бүхэл' AND staff.last_name = 'Хөтөлбөр';
SELECT first_name, last_name FROM customers WHERE amount_outstanding > 0;
SELECT first_name, last_name FROM customers WHERE amount_outstanding > 0;
SELECT first_name, last_name FROM customers WHERE amount_outstanding > 0;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT T2.first_name, T2.last_name FROM lessons AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.lesson_status_code = 'Completed' AND T1.lesson_date BETWEEN '2023-01-01' AND '2023-03-31' ORDER BY T2.last_name DESC, T2.first_name ASC LIMIT 1;
SELECT T2.first_name, T2.last_name FROM lessons AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.lesson_status_code = 'Completed' LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM lessons WHERE lesson_status_code = 'Completed' ) ORDER BY last_name ASC, first_name ASC;
SELECT customer_id FROM customers WHERE amount_outstanding BETWEEN 1000 AND 3000;
SELECT customer_id FROM customers WHERE amount_outstanding BETWEEN 1000 AND 3000;
SELECT DISTINCT customers.last_name FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id WHERE lessons.lesson_status_code = 'Completed';
SELECT first_name FROM customers WHERE customer_status_code = 'Active';
SELECT first_name, last_name FROM staff WHERE first_name = 'ᠦᠨᠡᠨᠴᠢ' AND last_name = 'ᠵᠦᠩ';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT first_name FROM customers WHERE customer_status_code = 'Active' LIMIT 1;
SELECT T2.first_name, T2.last_name FROM lessons AS T1 INNER JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.lesson_status_code = 'Completed' LIMIT 1;
SELECT T2.first_name, T2.last_name FROM lessons AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.lesson_status_code = 'COMPLETE' LIMIT 1;
SELECT T2.first_name, T2.last_name FROM lessons AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.lesson_status_code = 'COMPLETE' LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active' ORDER BY date_of_birth DESC LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT staff.nickname FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE lessons.lesson_status_code = 'Completed' GROUP BY staff.nickname HAVING COUNT(*) > 5;
SELECT staff.nickname FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE lessons.lesson_status_code = 'Completed' GROUP BY staff.nickname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT staff.first_name, staff.middle_name, staff.nickname FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id WHERE lessons.lesson_status_code = 'Completed' ORDER BY staff.first_name, staff.middle_name, staff.nickname;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active' AND amount_outstanding > 0;
SELECT DISTINCT customers.first_name, customers.last_name FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id WHERE lessons.lesson_status_code = 'Completed';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'VIP';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'active';
SELECT staff.nickname FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE lessons.lesson_status_code = 'Completed' ORDER BY COUNT(lessons.lesson_id) DESC LIMIT 1;
SELECT staff.first_name, staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.customer_status_code = 'Active' AND lessons.lesson_status_code = 'Completed' ORDER BY staff.last_name ASC, staff.first_name ASC;
SELECT staff.first_name, staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN vehicles ON lessons.vehicle_id = vehicles.vehicle_id WHERE vehicles.vehicle_details = 'WVWBN7ANXBE582406';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active' ORDER BY date_became_customer DESC LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active' ORDER BY date_became_customer DESC LIMIT 1;
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT staff.nickname FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE lessons.lesson_date = '今天' LIMIT 1;
SELECT first_name FROM staff WHERE staff_id IN (SELECT staff_id FROM lessons WHERE lesson_date = 'Wednesday');
SELECT staff.nickname FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE lessons.lesson_status_code = 'Completed' GROUP BY staff.nickname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT staff.first_name, staff.last_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id WHERE lessons.lesson_status_code = 'completed' ORDER BY lessons.lesson_date DESC, lessons.lesson_time DESC LIMIT 1;
SELECT first_name, last_name FROM staff WHERE staff_id IN ( SELECT staff_id FROM lessons WHERE lesson_status_code = 'completed' )
SELECT staff.first_name FROM staff JOIN lessons ON staff.staff_id = lessons.staff_id JOIN vehicles ON lessons.vehicle_id = vehicles.vehicle_id WHERE vehicles.vehicle_details = '蒙古语教学用车' ORDER BY staff.date_joined_staff ASC LIMIT 1;
SELECT first_name, middle_name FROM staff WHERE date_joined_staff = ( SELECT MAX(date_joined_staff) FROM staff );
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT first_name, last_name FROM customers WHERE customer_status_code = 'Active';
SELECT T2.first_name, T2.last_name FROM lessons AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T1.lesson_status_code = 'COMPLETED'
SELECT employee.name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id WHERE shop.district = 'district_name' AND hiring.is_full_time = 1 ORDER BY employee.age DESC LIMIT 1;
SELECT employee.name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id WHERE shop.district = 'district_name' AND hiring.is_full_time = 1 ORDER BY employee.name;
SELECT employee_id FROM hiring WHERE is_full_time = 1 AND start_from >= '2023-01-01' ORDER BY start_from DESC LIMIT 1;
SELECT hiring.employee_id FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id WHERE shop.district = 'district_name' AND hiring.is_full_time = 1;
SELECT shop.name FROM shop WHERE shop.district = 'district_name' LIMIT 1;
SELECT employee.name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id WHERE shop.district = 'district_name' AND hiring.is_full_time = 1;
SELECT shop.name FROM shop WHERE shop.district = 'district_name' LIMIT 30;
SELECT employee.name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id WHERE shop.district = 'district_name' AND hiring.is_full_time = 1 ORDER BY employee.name ASC LIMIT 30;
SELECT shop.district FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 1 GROUP BY shop.district HAVING COUNT(hiring.employee_id) > 5;
SELECT district FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring WHERE is_full_time = 1)
SELECT DISTINCT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus > 500 AND hiring.is_full_time = 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.age > 40 AND hiring.is_full_time = 1 GROUP BY shop.name HAVING COUNT(DISTINCT employee.name) >= 5;
SELECT shop.name FROM shop JOIN hiring ON hiring.shop_id = shop.shop_id JOIN employee ON employee.employee_id = hiring.employee_id WHERE employee.age > 40 AND hiring.is_full_time = 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.age > 35 AND hiring.is_full_time = 1;
SELECT DISTINCT shop.manager_name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.city = 'Bayanhongor';
SELECT name FROM employee WHERE employee_id IN (SELECT employee_id FROM hiring WHERE shop_id IN (SELECT shop_id FROM shop WHERE district = 'district_name')) AND age > 30;
SELECT shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.name = 'ᠦᠢᠯᠡᠳᠬᠦᠨ ᠤ ᠬᠡᠮᠵᠢᠶ᠎ᠡ';
SELECT district FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring WHERE is_full_time = 1)
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id JOIN hiring ON employee.employee_id = hiring.employee_id AND hiring.is_full_time = 1 JOIN shop ON hiring.shop_id = shop.shop_id AND shop.district = 'district_name' WHERE evaluation.year_awarded = 'year_value'
SELECT shop.name FROM shop WHERE shop.district = 'district_name' LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.age > 40 AND hiring.is_full_time = 1;
SELECT shop.name FROM shop WHERE shop.district = 'district_name' LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.city = 'district' AND hiring.is_full_time = 1;
SELECT shop.name FROM shop WHERE shop.district = 'district_name' AND shop.number_products > (SELECT AVG(number_products) FROM shop);
SELECT shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.bonus > 5000 GROUP BY shop.district ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON hiring.shop_id = shop.shop_id JOIN employee ON employee.employee_id = hiring.employee_id WHERE employee.name = 'Алтан ажилтан';
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.city = 'YaMaRcHu' AND hiring.is_full_time = 1;
SELECT shop.name FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 1;
SELECT DISTINCT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.city = 'Ulaanbaatar';
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE employee.city = 'Ulaanbaatar' AND hiring.is_full_time = 1 GROUP BY shop.name HAVING COUNT(DISTINCT hiring.employee_id) >= 3;
SELECT shop.name FROM shop WHERE shop.district = 'Bayanhüügiin khoroo';
SELECT employee.name FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id WHERE shop.district = 'Bayanhüree' AND hiring.is_full_time = 1;
SELECT shop.name FROM hiring INNER JOIN shop ON hiring.shop_id = shop.shop_id WHERE hiring.start_from = '2023-01-01' LIMIT 1;
SELECT district FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring WHERE employee_id IN (SELECT employee_id FROM evaluation WHERE year_awarded = 2017))
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 1 AND shop.district != 'district3000' AND shop.district != 'district10000' LIMIT 1;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 1 AND shop.district = 'district_name' GROUP BY shop.name HAVING COUNT(hiring.employee_id) >= 3000 AND AVG(hiring.start_from) <= 1000;
SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 'TRUE' AND shop.district = 'district_name' ORDER BY shop.number_products DESC LIMIT 1;
SELECT shop.district FROM shop INNER JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.is_full_time = 1 GROUP BY shop.district HAVING COUNT(hiring.employee_id) > 5;
SELECT sourceairport FROM flights INTERSECT SELECT destairport FROM flights;
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights) GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) INTERSECT SELECT country FROM airports WHERE airportcode IN (SELECT destairport FROM flights);
SELECT flights.flightno FROM flights INNER JOIN airports AS source ON flights.sourceairport = source.airportcode INNER JOIN airports AS destination ON flights.destairport = destination.airportcode WHERE source.country = 'China' AND destination.country = 'Japan';
SELECT ap.airportname FROM airports ap JOIN flights f ON ap.airportcode = f.sourceairport WHERE f.flightno = 'AMR123';
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights) GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE flightno = 'flightnumber';
SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) INTERSECT SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT destairport FROM flights);
SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) INTERSECT SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT destairport FROM flights);
SELECT destairport FROM flights WHERE sourceairport = 'BJS';
SELECT destairport FROM flights WHERE sourceairport = 'ULN';
SELECT destairport FROM flights WHERE sourceairport = 'ULN';
SELECT destairport FROM flights WHERE sourceairport = 'BJS';
SELECT abbreviation FROM airlines WHERE uid = 'UAL';
SELECT DISTINCT T2.country FROM `flights` AS T1 INNER JOIN `airports` AS T2 ON T1.sourceairport = T2.airportcode WHERE T1.flightno LIKE 'UAL%'
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) INTERSECT SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT destairport FROM flights);
SELECT countryabbrev FROM airports WHERE city = 'Дорнодахин';
SELECT destination.airportname FROM ( SELECT DISTINCT flights.destairport AS destinationAirport FROM flights WHERE flights.sourceairport IN ( SELECT airportcode FROM airports WHERE countryabbrev = 'CN' ) ) AS destination JOIN airports AS destination ON destination.destinationAirport = destination.airportcode WHERE destination.countryabbrev != 'CN';
SELECT sourceairport FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'AKO');
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights) AND country = 'China' LIMIT 1;
SELECT city FROM airports WHERE city = '呼和浩特';
SELECT sourceairport FROM flights WHERE destairport = '.synthetic' INTERSECT SELECT destairport FROM flights WHERE sourceairport = 'synthetic';
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport FROM flights WHERE destairport = '北京';
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights) GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT destairport FROM flights WHERE sourceairport = 'HET';
SELECT destairport FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE country = 'ᠬᠠᠷᠪᠢᠨ');
SELECT ap.airportname FROM airports ap WHERE ap.countryabbrev = 'KH' LIMIT 1;
SELECT ap.airportname FROM airports ap WHERE ap.country = 'ᠬᠠᠷᠪᠢᠨ'
SELECT city FROM airports WHERE city = '呼和浩特' EXCEPT SELECT city FROM airports WHERE city = '上海';
SELECT DISTINCT airlines.abbreviation FROM airlines INNER JOIN flights ON airlines.uid = flights.airline WHERE flights.sourceairport IN (SELECT airportcode FROM airports WHERE city = '呼和浩特') AND flights.destairport IN (SELECT airportcode FROM airports WHERE city = '上海');
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights) GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights) GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT flights.airline FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = '中国' AND airports.airportname = '北京首都国际机场'
SELECT flights.airline, flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = '呼和浩特' AND flights.destairport = '香港';
SELECT destairport FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = ' ulaanbaatar');
SELECT sourceairport FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = ' ulaanbaatar');
SELECT sourceairport FROM flights WHERE destairport = 'HARBIN' LIMIT 1;
SELECT country FROM airports JOIN flights ON airports.airportcode = flights.sourceairport WHERE airportname = 'ᠬᠠᠷᠪᠢᠨ';
SELECT destairport FROM flights WHERE sourceairport = 'ULN';
SELECT destairport FROM flights WHERE sourceairport = 'ULN';
SELECT destairport FROM flights WHERE sourceairport = 'ULN';
SELECT destairport FROM flights WHERE sourceairport = 'HND';
SELECT ap.airportname FROM airports ap INNER JOIN flights f ON ap.airportcode = f.sourceairport GROUP BY ap.airportname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM airports WHERE city = 'London';
SELECT country FROM airports WHERE city = 'Ulaanbaatar';
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport FROM flights WHERE destairport = 'ULN';
SELECT sourceairport FROM flights WHERE destairport = 'ULN';
SELECT countryabbrev FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights UNION SELECT destairport FROM flights) GROUP BY countryabbrev ORDER BY COUNT(*) DESC LIMIT 1;
SELECT countryabbrev FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights WHERE airline = 'MI') INTERSECT SELECT countryabbrev FROM airports WHERE airportcode IN (SELECT destairport FROM flights WHERE airline = 'MI');
SELECT airline FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = ' ulaanbaatar ') AND destairport IN (SELECT airportcode FROM airports WHERE city = ' ulaanbaatar ')
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country FROM airports WHERE airportname = '乌兰巴托'
SELECT country FROM airports WHERE airportname = '乌兰巴托';
SELECT airline FROM flights WHERE sourceairport = 'ULN' AND destairport = 'PEK';
SELECT airports.city FROM airports WHERE airports.country = 'China' AND airports.airportname = '北京首都国际机场' OR airports.airportname = '白云机场';
SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.airline = airlines.airline WHERE airports.city = 'Bayan Öndör' AND airlines.airline = 'Chinggis Khaan Airlines';
SELECT flights.airline, flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Bayan' AND airports.country = 'China' AND flights.destairport IN ( SELECT airportcode FROM airports WHERE city = 'Changsha' AND country = 'China' );
SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) INTERSECT SELECT DISTINCT country FROM airports WHERE airportcode IN (SELECT destairport FROM flights);
SELECT sourceairport FROM flights GROUP BY sourceairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT destairport FROM flights WHERE sourceairport = 'PEK';
SELECT COUNT(*) FROM flights WHERE flightno LIKE '200%'
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) INTERSECT SELECT country FROM airports WHERE airportcode IN (SELECT destairport FROM flights);
SELECT country FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights) INTERSECT SELECT country FROM airports WHERE airportcode IN (SELECT destairport FROM flights);
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT destairport FROM flights WHERE sourceairport = ' Chunky ' INTERSECT SELECT sourceairport FROM flights WHERE destairport = ' Chunky ';
SELECT DISTINCT country FROM airports WHERE airportname = 'Harbin';
SELECT ap.airportname FROM airports ap INNER JOIN flights f ON ap.airportcode = f.sourceairport WHERE f.airline = 'ᠤᠯᠤᠰ ᠬᠣᠲᠠᠭᠤᠯᠠᠭᠤᠳᠠᠬᠤ ᠬᠤᠶ᠎ᠠᠷᠢᠮᠤᠨ ᠬᠣᠶᠢᠮᠠᠭ' AND ap.country = 'China'
SELECT city FROM airports WHERE airportcode IN (SELECT sourceairport FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE city = 'ᠬᠠᠷᠪᠢᠨ')) EXCEPT SELECT city FROM airports WHERE airportcode IN (SELECT destairport FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE city = 'ᠬᠠᠷᠪᠢᠨ'));
SELECT DISTINCT flights.sourceairport FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.country = 'ᠬᠠᠷᠪᠢᠨ';
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE airportname = 'ᠬᠠᠷᠪᠢᠨ') AND destairport IN (SELECT airportcode FROM airports WHERE airportname = 'ᠴᠠᠩᠴᠦᠨ');
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT origin FROM flights GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1;
SELECT home_team FROM game WHERE date LIKE '2007%' AND stadium_id IN (SELECT id FROM stadium WHERE name = '成吉思汗体育场');
SELECT DISTINCT player FROM injury_accident WHERE game_id IN (SELECT id FROM game WHERE season = '2023');
SELECT DISTINCT stadium.name FROM stadium INNER JOIN game ON stadium.id = game.stadium_id WHERE game.home_team = 'Bayern Munich' OR game.away_team = 'Bayern Munich'
SELECT player FROM injury_accident WHERE game_id IN (SELECT id FROM game WHERE stadium_id = (SELECT id FROM stadium WHERE name = '成吉思汗体育场'));
SELECT COUNT(*) FROM game WHERE season = 2022;
SELECT home_team FROM game WHERE id IN (SELECT game_id FROM injury_accident WHERE injury = 'EBÜDÜG NÎ SIRKHADUSAN');
SELECT home_team FROM game WHERE competition = 'Zheng He'
SELECT DISTINCT player FROM injury_accident WHERE injury = 'ACL' AND number_of_matches >= 5;
SELECT player FROM injury_accident WHERE injury = '蒙古语_受伤类型' LIMIT 1;
SELECT DISTINCT player FROM injury_accident WHERE injury = 'Concussion' AND number_of_matches >= 3;
SELECT home_team FROM game WHERE competition = 'Хулгайн кесэг нь сирхадугasan' INTERSECT SELECT home_team FROM game WHERE competition = 'Эбүдүг сирхадугasan';
SELECT player FROM injury_accident WHERE number_of_matches = (SELECT MAX(number_of_matches) FROM injury_accident);
SELECT DISTINCT player FROM injury_accident;
SELECT player FROM injury_accident WHERE date BETWEEN '2010-01-01' AND '2010-12-31'
SELECT stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id WHERE injury_accident.injury = 'ᠶ᠋ᠢᠨ ᠴᠥᠮ ᠰᠢᠷᠬᠠᠳᠤᠭᠰᠠᠨ ᠪᠡᠶ᠎ᠡ᠎ᠶ᠋ᠢᠨ ᠲᠠᠮᠢᠷ᠎ᠤ᠋ᠨ ᠲᠠᠯᠠᠪᠠᠢ᠎ᠶ᠋ᠢᠨ' AND game.season = 'ᠶᠢᠨ ᠴᠥᠮ' ORDER BY stadium.capacity_percentage DESC LIMIT 1;
SELECT DISTINCT injury_accident.player FROM injury_accident JOIN game ON injury_accident.game_id = game.id JOIN stadium ON game.stadium_id = stadium.id WHERE stadium.capacity_percentage > 90;
SELECT DISTINCT stadium.id FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id WHERE injury_accident.injury = 'ᠪᠠᠩᠭᠢ';
SELECT DISTINCT stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id WHERE injury_accident.injury = 'broken leg';
SELECT DISTINCT stadium.name FROM stadium INNER JOIN game ON stadium.id = game.stadium_id WHERE game.season = (SELECT MAX(season) FROM game) AND game.date = (SELECT MAX(date) FROM game WHERE season = (SELECT MAX(season) FROM game));
SELECT title FROM movie WHERE title_aka = 'ᠪᠠ ᠸᠠᠩ ᠪᠢᠶᠸ ᠵᠢᠢ';
SELECT title FROM movie WHERE title LIKE '%ᠪᠠ ᠸᠠᠩ ᠪᠢᠶᠸ ᠵᠢᠢ%'
SELECT I'm sorry, but your question seems to be incomplete or not properly formatted. Could you please provide a clear question or query that you would like me to translate into an SQLite SQL query?
SELECT I'm sorry, but your question seems to be incomplete or not properly formatted for me to provide a SQL query. Please provide a clear question in English related to the given tables, specifying what information you'd like to retrieve.
SELECT nationality FROM director WHERE name = '王海';
SELECT name FROM director WHERE nationality = '蒙古族' AND name = '王海';
SELECT keyword.keyword FROM tv_series JOIN keyword ON tv_series.title = keyword.keyword WHERE tv_series.release_year = 2015;
SELECT DISTINCT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN written_by ON cast.msid = written_by.msid JOIN writer ON written_by.wid = writer.wid WHERE writer.nationality = 'American' AND actor.nationality = 'American';
SELECT DISTINCT writer.name FROM writer JOIN written_by ON writer.wid = written_by.wid WHERE writer.nationality = 'American' AND writer.birth_city = 'Los Angeles'
SELECT name FROM producer WHERE name = '阿尔伯特·芬尼';
SELECT I'm sorry, but your request seems to be incomplete or contains non-English characters that do not form a clear question. Please provide a complete question in English along with the context so that I can help you write the appropriate SQLite SQL query.
SELECT `name` FROM `actor` WHERE `name` = 'ᠠᠹᠭᠠᠨᠢᠰᠲ᠋ᠠᠨ';
SELECT title FROM tv_series WHERE title LIKE '%ᠠᠹᠭᠠᠨᠢᠰᠲ᠋ᠠᠨ%'
SELECT name FROM writer WHERE nationality = 'Mongolia';
SELECT name FROM director WHERE name = 'Čėŋ Žuñ';
SELECT name FROM director WHERE title = '_CHUNKHUNG_';
SELECT name FROM director WHERE name = '_CHUNKHUN_UEN _Mendulegesen_gazari_ni_khamiga_boi';
SELECT title FROM movie WHERE title LIKE '%Čing Wej%'
SELECT director.name FROM director JOIN directed_by ON director.did = directed_by.did WHERE directed_by.msid = 'Čėŋ ūls-un qariyalaal ni yagū boi'
SELECT title FROM movie WHERE title LIKE '%ᠰᠤᠮᠤ᠎ᠶ᠋ᠢ ᠬᠠᠷᠪᠤᠵᠤ ᠭᠠᠷᠭᠠᠯᠭᠠᠬᠤ%'
SELECT name FROM director WHERE birth_year = 2006 AND nationality = '蒙古族' LIMIT 1;
SELECT name FROM director WHERE name = 'ᠯᠦ᠍ ᠰᠢᠶᠣᠤ ᠹᠧᠩ';
SELECT title_aka FROM movie WHERE mid IN (SELECT mid FROM directed_by WHERE did IN (SELECT did FROM director WHERE name = 'ᠬᠡᠨ ᠺᠢᠨᠣ'));
SELECT `name` FROM `director` WHERE `name` = 'ᠯᠦ᠍ ᠰᠢᠶᠣᠤ ᠹᠧᠩ';
SELECT name FROM actor WHERE nationality = 'American' AND gender = 'Male' AND birth_year BETWEEN 1960 AND 1970;
SELECT director.name FROM director WHERE director.birth_city = '北京';
SELECT title_aka FROM movie WHERE mid IN (SELECT msid FROM directed_by WHERE id IN (SELECT did FROM director WHERE nationality = 'China') AND msid IN (SELECT msid FROM cast WHERE id IN (SELECT aid FROM actor WHERE nationality = 'China')))
SELECT title_aka FROM movie WHERE mid IN (SELECT msid FROM directed_by JOIN director ON directed_by.did = director.did WHERE name = 'ᠪᠠ ᠸᠠᠩ ᠪᠢᠶᠧ ᠵᠢᠢ')
SELECT name FROM director WHERE nationality = '蒙古族' AND gender = '男'
SELECT title_aka FROM movie WHERE title_aka = 'ᠵᠠᠪᠰᠠᠷ ᠦᠭᠡᠢ';
SELECT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title = 'ᠪᠠᠶᠠᠷ ᠪᠠᠶᠠᠰᠤᠯ' AND movie.budget > 1000000 AND director.birth_year BETWEEN 1970 AND 1980;
SELECT title_aka FROM movie WHERE title_aka = 'ᠪᠣᠢ ᠪᠦᠬᠦᠢ 《ᠮᠥᠸᠸ ᠶᠠᠨ》';
SELECT name FROM director WHERE name = 'ᠪᠣᠢ ᠪᠦᠬᠦᠢ' AND title_aka = 'ᠰᠢᠦᠢ ᠠᠨ ᠬᠤᠸᠠ';
SELECT nationality FROM actor WHERE aid IN (SELECT aid FROM cast WHERE msid = (SELECT mid FROM movie WHERE title_aka = 'ᠯᠢ ᠢ ᠹᠧᠩ'))
SELECT title FROM movie WHERE title LIKE '%ᠯᠢ ᠢ ᠹᠧᠩ%'
SELECT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title_aka = '孛儿只斤·窝阔台 《聆听风声》 哈斯娜仁高娃 编剧'
SELECT title FROM movie WHERE release_year = 2007 AND title LIKE '%ᠬᠠᠷᠠᠭ᠎ᠠ ᠦᠭᠡᠢ ᠠᠭᠤᠯᠠ%' LIMIT 1;
SELECT name FROM writer WHERE nationality = 'Mongolian' AND birth_city = 'Ulaanbaatar' AND name LIKE '%Бат-Эрдэнэ%'
SELECT name FROM actor WHERE aid IN (SELECT aid FROM cast WHERE msid IN (SELECT id FROM movie WHERE title LIKE '%ᠰᠢᠨᠵᠢᠯᠡᠬᠦ ᠤᠬᠠᠭᠠᠨ᠎ ᠤ ᠬᠡᠢ ᠬᠦᠰᠡᠯ%'));
SELECT name FROM writer WHERE nationality = 'Mongolian' AND birth_city = 'Ulaanbaatar'
SELECT name FROM writer WHERE nationality = '蒙古族' AND birth_city = '内蒙古自治区' AND name LIKE '巴音%'
SELECT name FROM writer WHERE nationality = 'Mongolian' AND birth_city = 'Ulaanbaatar' AND num_of_episodes >= 1;
SELECT title FROM movie WHERE title = 'ᠰᠢᠶᠠ ᠮᠸᠨ'
SELECT name FROM writer WHERE birth_year = 1984;
SELECT title_aka FROM movie WHERE title_aka = 'ᠪᠣᠢ ᠪᠦᠬᠦᠢ 《ᠴᠥᠮ᠎ᠡ᠎ᠶ᠋ᠢᠨ ᠵᠡᠪᠰᠡᠭ》';
SELECT title FROM movie WHERE title LIKE '%Čöme Yeke Jebseg%' OR title_aka LIKE '%Čöme Yeke Jebseg%'
SELECT title_aka FROM movie WHERE title_aka = 'ᠹᠠᠨ ᠰᠢᠶᠣᠤ ᠭᠠᠩ';
SELECT role FROM cast WHERE aid IN (SELECT aid FROM directed_by WHERE did IN (SELECT did FROM movie WHERE release_year > 2000)) LIMIT 1;
SELECT title_aka FROM movie WHERE title_aka = 'ᠹᠠᠨ ᠰᠢᠶᠣᠤ ᠭᠠᠩ' INTERSECT SELECT title_aka FROM movie WHERE title_aka = 'ᠭᠧ ᠶᠧᠦ';
SELECT name FROM writer WHERE name LIKE '内%';
SELECT name FROM writer WHERE nationality = '蒙古族' INTERSECT SELECT name FROM producer WHERE nationality = '蒙古族';
SELECT title_aka FROM tv_series WHERE sid IN (SELECT msid FROM written_by WHERE id IN (SELECT id FROM keyword WHERE keyword = ' Erdemjitü'));
SELECT name FROM writer WHERE nationality = '蒙古族' AND gender = '女' AND name IN (SELECT writer FROM written_by WHERE msid IN (SELECT msid FROM tags WHERE id = (SELECT id FROM keyword WHERE keyword = '古装'));
SELECT name FROM writer WHERE wid = (SELECT wid FROM writer WHERE name = 'ᠭᠤᠷᠪᠠᠨ ᠤᠯᠤᠰ᠎ ᠤᠨ ᠦᠯᠢᠭᠡᠷ');
SELECT writer.name FROM writer WHERE writer.wid IN (SELECT wid FROM tags WHERE msid = (SELECT id FROM movie WHERE title = 'ᠭᠤᠷᠪᠠᠨ ᠤᠯᠤᠰ᠎ ᠤᠨ ᠦᠯᠢᠭᠡᠷ'))
SELECT title FROM movie WHERE title LIKE '%ᠴᠧᠩ ᠬᠦᠩ%'
SELECT title_aka FROM movie WHERE title_aka = 'ᠴᠧᠩ ᠵᠦᠩ';
SELECT DISTINCT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title_aka = 'ᠶᠠᠩ ᠮᠢ';
SELECT DISTINCT producer.name FROM producer INNER JOIN made_by ON producer.pid = made_by.pid INNER JOIN movie ON made_by.msid = movie.mid WHERE movie.title_aka = 'ᠶᠠᠩ ᠮᠢ';
SELECT title FROM tv_series WHERE sid IN (SELECT sid FROM directed_by WHERE did IN (SELECT did FROM director WHERE birth_year = 2013)) AND sid IN (SELECT sid FROM written_by WHERE wid IN (SELECT wid FROM writer WHERE birth_year = 2013));
SELECT writer.name FROM writer JOIN written_by ON writer.wid = written_by.wid GROUP BY writer.name HAVING COUNT(written_by.msid) > 10;
SELECT nationality FROM writer WHERE birth_city = '意大利' AND num_of_episodes > 5;
SELECT title FROM tv_series WHERE release_year = 1980 AND title LIKE '% ulaanbaatar %' LIMIT 1;
SELECT name FROM actor WHERE name = '孛儿只斤·海山';
SELECT name FROM writer WHERE gender = 'Female' ORDER BY birth_year ASC LIMIT 1;
SELECT role FROM cast JOIN movie ON cast.msid = movie.mid JOIN actor ON cast.aid = actor.aid WHERE movie.title_aka = 'ᠲᠡᠢᠨ ᠤ ᠴᠢᠨᠣ᠎ᠠ';
SELECT title FROM movie WHERE title LIKE '%Luxury Car%' AND country_code = 'HK';
SELECT name FROM actor WHERE name = 'ᠪᠣᠢ ᠪᠦᠬᠦᠢ';
SELECT name FROM director WHERE nationality = 'Mongolian' LIMIT 1;
SELECT director.name FROM director WHERE director.birth_city = '北京'
SELECT title_aka FROM movie WHERE title_aka = 'ᠹᠸᠡᠩ ᠰᠢᠶᠣᠤ ᠭᠠᠩ';
SELECT title FROM movie WHERE title LIKE '%Хони имага%'
SELECT title FROM movie WHERE title LIKE '%ᠲᠤᠢᠯ᠎ ᠤᠨ ᠦᠭᠡᠢ%' OR title_aka LIKE '%ᠲᠤᠢᠯ᠎ ᠤᠨ ᠦᠭᠡᠢ%';
SELECT name FROM director WHERE name = 'ᠪᠣᠢ ᠪᠦᠬᠦᠢ';
SELECT title FROM movie WHERE title LIKE '%ᠯᠢᠦ ᠱᠢ ᠱᠢ%' AND year = 2010;
SELECT name FROM actor WHERE aid IN (SELECT aid FROM cast WHERE msid IN (SELECT msid FROM movie WHERE title LIKE '%ᠰᠠᠩᠬᠠᠮ ᠳᠠᠪᠠᠭ᠎ᠠ%'))
SELECT name FROM actor WHERE aid IN (SELECT aid FROM cast WHERE msid IN (SELECT msid FROM movie WHERE title = 'ᠰᠠᠩᠬᠠᠮ ᠳᠠᠪᠠᠭ᠎ᠠ'))
SELECT title_aka FROM movie WHERE title_aka = 'ᠭᠦ ᠴᠠᠩ ᠸᠧᠢ';
SELECT mid FROM movie WHERE title LIKE '%2013%'
SELECT title FROM movie WHERE release_year = 2013;
SELECT name FROM director WHERE name = 'ᠵᠢᠯ ᠪᠦᠷᠢ' AND nationality = 'Mongolian';
SELECT title FROM movie WHERE title LIKE '%ᠬᠤ᠌ ᠵᠢᠶᠦ᠋ᠨ%'
SELECT title FROM movie WHERE title LIKE '%ᠬᠤ᠌ ᠵᠢᠶᠦ᠋ᠨ%' OR title_aka LIKE '%ᠬᠤ᠌ ᠵᠢᠶᠦ᠋ᠨ%';
SELECT title FROM movie WHERE title LIKE '%ᠬᠤ᠌ ᠵᠢᠶᠦ᠋ᠨ%'
SELECT title FROM movie WHERE title LIKE '%ᠬᠤ᠌ ᠵᠢᠶᠦ᠋ᠨ%'
SELECT name FROM actor WHERE nationality = 'Chinese' AND gender = 'Female' LIMIT 1;
SELECT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title = 'ᠱᠤ᠌ ᠴᠢ' AND movie.budget > 2002;
SELECT name FROM director WHERE name = 'ᠦ ᠶᠠᠨ ᠽᠦ᠍';
SELECT title FROM movie WHERE title LIKE '%《ᠢᠷᠠᠺ᠎ ᠤᠨ ᠲᠡᠢᠨ》%'
SELECT name FROM actor WHERE birth_year = 1990 AND nationality = '蒙古族';
SELECT title FROM movie WHERE release_year = 2010 AND title LIKE '%Ли Ань%'
SELECT name FROM director WHERE birth_year = 2010 AND nationality = '蒙古族';
SELECT COUNT(*) FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE director.birth_year BETWEEN 1972 AND 1982;
SELECT T2.name FROM written_by AS T1 JOIN writer AS T2 ON T1.wid = T2.wid WHERE T2.birth_city = '呼和浩特' AND T2.nationality = '中国' AND T2.gender = '男'
SELECT name FROM actor WHERE name LIKE 'ᠶᠠᠫᠣᠨ%' OR name LIKE '%ᠤ ᠲᠣᠭᠯᠠᠭᠴᠢ%' OR name LIKE '%ᠥᠨ ᠵᠢᠶᠠᠩ ᠸᠸᠨ%'
SELECT title FROM tv_series WHERE title LIKE '%ᠳᠤᠮᠳᠠᠲᠤ ᠤᠯᠤᠰ%' AND title LIKE '%ᠣᠷᠭᠢᠯ ᠮᠥᠴᠡ%';
SELECT w.name FROM writer w JOIN written_by wb ON w.wid = wb.id JOIN movie m ON wb.msid = m.msid WHERE m.title = 'Jurassic Park'
SELECT name FROM writer WHERE nationality = '蒙古族' AND birth_city = '呼和浩特' AND title_aka = 'Jurimchin borlon';
SELECT title FROM movie JOIN written_by ON movie.mid = written_by.msid JOIN writer ON written_by.wid = writer.wid WHERE writer.birth_city = '北京' AND writer.birth_year BETWEEN 1950 AND 1980;
SELECT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.mid = movie.mid WHERE movie.title_aka = 'ᠵᠸᠨ ᠽᠢ ᠳ᠋ᠠᠨ';
SELECT I'm sorry, but your request seems to be incomplete or contains non-English instructions that are unclear. Please provide a complete English question or a clear description of the SQL query you need assistance with, including which table(s) to use and what specific information is being sought. Once I have that information, I can help you construct the appropriate SQLite SQL query.
SELECT name FROM director WHERE name LIKE '%亚马尔金诺%';
SELECT I'm sorry, but your request seems to be incomplete or contains non-English instructions. Please provide a complete English question or a clear description of the SQL query you need assistance with, so I can help you write the appropriate SQLite SQL query.
SELECT name FROM actor WHERE name = 'ᠠᠯᠢ ᠺᠢᠨᠣ' AND mid IN (SELECT mid FROM movie WHERE title = 'ᠳᠤᠮᠳᠠᠳᠤ ᠤᠯᠤᠰ');
SELECT director.name FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title LIKE '%ᠯᠢ ᠠᠨ%'
SELECT wid FROM writer WHERE gender = 'Female' AND nationality = 'American' ORDER BY birth_year ASC LIMIT 1;
SELECT I'm sorry, but your question seems to be incomplete. Please provide the full question you'd like me to convert into an SQLite SQL query.
SELECT DISTINCT producer.pid FROM producer JOIN made_by ON producer.pid = made_by.pid JOIN movie ON made_by.msid = movie.msid WHERE movie.release_year > 2000;
SELECT name FROM actor WHERE name = 'ᠬᠤᠸᠠᠩ ᠪᠥᠸ
SELECT policy_type_code FROM policies;
SELECT customer_id FROM customers WHERE customer_id IN ( SELECT DISTINCT policies.customer_id FROM claim_headers JOIN policies ON claim_headers.policy_id = policies.policy_id WHERE claim_headers.date_of_claim BETWEEN '2023-01-01' AND '2023-03-31' ) AND customer_id IN ( SELECT DISTINCT policies.customer_id FROM claim_headers JOIN policies ON claim_headers.policy_id = policies.policy_id WHERE claim_headers.date_of_settlement BETWEEN '2023-04-01' AND '2023-06-30' );
SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_status_code = 'Settled');
SELECT claim_headers.claim_header_id, claim_headers.date_of_claim FROM claim_headers JOIN policies ON claim_headers.policy_id = policies.policy_id JOIN customers ON policies.customer_id = customers.customer_id WHERE customers.customer_details = 'ᠯᠢ ᠱᠤᠸᠠᠢ';
SELECT policy_id FROM policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details LIKE '%Али%' COLLATE NOCASE)
SELECT customer_id FROM policies JOIN claim_headers ON policies.policy_id = claim_headers.policy_id WHERE claim_headers.claim_status_code = 'Open';
SELECT customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id JOIN claim_headers ON policies.policy_id = claim_headers.policy_id WHERE claim_status_code = 'Settled';
SELECT policy_id FROM policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details LIKE '%Али%' OR customer_details LIKE '%Төрөл%') LIMIT 2;
SELECT policy_id FROM claim_headers WHERE claim_status_code = 'Settled' AND date_of_settlement BETWEEN '2023-01-01' AND '2023-03-31';
SELECT claim_type_code FROM claim_headers WHERE claim_status_code = 'GH003';
SELECT claim_id FROM claims_processing WHERE claim_outcome_code = 'Denied' AND claim_stage_id = (SELECT MAX(claim_stage_id) FROM claims_processing_stages WHERE claim_status_name = 'Final Review')
SELECT customer_details FROM customers WHERE customer_id IN (SELECT customer_id FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_header_id IN (SELECT claim_id FROM claims_processing WHERE claim_outcome_code = 'Rejected')))
SELECT claim_type_code FROM claim_headers WHERE claim_status_code = 'Settled' LIMIT 1;
SELECT claim_status_name FROM claims_processing_stages WHERE claim_status_code = (SELECT claim_status_code FROM claim_headers WHERE date_of_settlement IS NOT NULL LIMIT 1)
SELECT claim_status_name FROM claims_processing_stages WHERE claim_stage_id IN (SELECT claim_stage_id FROM claims_processing GROUP BY claim_stage_id HAVING COUNT(*) > 1) ORDER BY claim_status_name LIMIT 1;
SELECT claim_type_code FROM claim_headers WHERE claim_status_code = 'Settled'
SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_status_code = 'Open')
SELECT claim_type_code FROM claim_headers WHERE claim_status_code = 'Open' LIMIT 1;
SELECT claim_type_code FROM claim_headers;
SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_status_code = 'Open')
SELECT claim_headers.policy_id FROM claim_headers JOIN claims_processing ON claim_headers.claim_header_id = claims_processing.claim_id WHERE claim_processing.claim_stage_id IN (SELECT claim_stage_id FROM claims_processing_stages WHERE claim_status_description = 'Claim Settlement') LIMIT 1;
SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_type_code = 'ALB') LIMIT 1;
SELECT policy_type_code FROM policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE staff_details = 'Diana')
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id JOIN claim_headers ON policies.policy_id = claim_headers.policy_id WHERE claim_headers.claim_status_code = 'Settled' AND claim_headers.date_of_settlement BETWEEN '2023-01-01' AND '2023-12-31';
SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_status_code = 'Settled');
SELECT claim_type_code FROM claim_headers WHERE claim_status_code = 'Open';
SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_status_code = 'closed') INTERSECT SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_status_code = 'open');
SELECT claim_type_code, COUNT(*) AS total_claims FROM claim_headers GROUP BY claim_type_code ORDER BY total_claims DESC;
SELECT staff_details FROM staff INNER JOIN claims_processing ON staff.staff_id = claims_processing.staff_id WHERE claim_outcome_code = ' Successful' AND claim_stage_id = (SELECT MAX(claim_stage_id) FROM claims_processing_stages)
SELECT policy_type_code FROM policies WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_details = 'ᠵᠣᠴᠢᠨ ᠪᠠ ᠠᠵᠢᠯᠲᠠᠨ ᠠᠵᠢᠯᠴᠢᠨ ᠤ ᠨᠡᠷ᠎ᠡ ᠨᠢ ᠶᠠᠭᠤ ᠪᠣᠢ');
SELECT claim_headers.claim_header_id, claim_headers.amount_claimed, claim_headers.amount_paid FROM claim_headers JOIN policies ON claim_headers.policy_id = policies.policy_id WHERE policies.customer_id = 12345 AND claim_headers.claim_status_code = 'Settled';
SELECT policy_id FROM policies WHERE policy_id IN ( SELECT policy_id FROM claim_headers WHERE claim_header_id IN ( SELECT claim_id FROM claims_processing WHERE claim_outcome_code = 'Successful' ) )
SELECT customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id JOIN claim_headers ON policies.policy_id = claim_headers.policy_id JOIN claims_processing ON claim_headers.claim_header_id = claims_processing.claim_id WHERE claim_outcome_code = 'Successful';
SELECT staff_details FROM staff WHERE staff_id IN ( SELECT created_by_staff_id FROM claims_documents GROUP BY created_by_staff_id HAVING COUNT(DISTINCT document_type_code) = ( SELECT COUNT(*) FROM claims_documents WHERE document_type_code IN ('CLAIM_FORM', 'POLICE_REPORT', 'MEDICAL_CERTIFICATE') ) );
SELECT staff_details FROM staff WHERE staff_id IN (SELECT created_by_staff_id FROM claims_documents WHERE document_type_code = 'ᠨᠡᠭᠡᠭᠡᠯᠲᠡ');
SELECT claim_type_code FROM claim_headers;
SELECT claim_type_code FROM claim_headers WHERE claim_status_code = 'Settled'
SELECT staff_details FROM staff WHERE staff_id IN (SELECT staff_id FROM claims_processing GROUP BY staff_id HAVING COUNT(*) > 1) LIMIT 1;
SELECT claim_type_code FROM claim_headers;
SELECT policy_type_code FROM policies WHERE policy_id IN (SELECT policy_id FROM claim_headers WHERE claim_id IN (SELECT claim_id FROM claims_processing WHERE claim_outcome_code = 'Settled')) GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT participant_details FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON events.event_id = participants_in_events.event_id JOIN services ON services.service_id = events.service_id WHERE events.event_details = '《ᠤᠷᠤᠭ ᠬᠤᠷᠢᠮ》' AND participants.participant_type_code = 'нэр';
SELECT DISTINCT participant_details FROM participants WHERE participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id IN (SELECT service_id FROM services WHERE service_type_code = ' zalguun ')))
SELECT participant_type_code FROM participants WHERE participant_details = 'ᠪᠦᠷᠢ ᠬᠡᠳᠦᠢ ᠬᠥᠳᠡᠯᠭᠡᠭᠡᠨ᠎ᠳ᠋ᠦ᠍' LIMIT 1;
SELECT participant_type_code FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id WHERE service_type_code = 'БҮХЭЛ ЧГЧИЙН';
SELECT participant_details FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id WHERE service_type_code = 'ᠵᠣᠬᠢᠶᠠᠨ ᠪᠠᠢᠭᠤᠯᠤᠭᠴᠢ' AND event_details = 'ᠶ᠋ᠢᠨ ᠲᠥᠷᠥᠯ ᠵᠦᠢᠯ᠎ᠳ᠋ᠦ᠍ ᠬᠠᠷᠢᠶᠠᠯᠠᠭᠳᠠᠬᠤ ᠪᠣᠢ';
SELECT DISTINCT participant_type_code FROM participants WHERE participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id = (SELECT service_id FROM services LIMIT 1)))
SELECT participant_type_code FROM participants WHERE participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id IN (SELECT service_id FROM services WHERE service_type_code = '指定服务类型代码')))
SELECT participant_type_code FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id WHERE service_type_code = 'ᠳᠣᠺᠲ᠋ᠣᠷ';
SELECT participant_details FROM participants WHERE participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id IN (SELECT service_id FROM services WHERE service_type_code = 'ХӨТӨЛБӨР')))
SELECT participant_type_code FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id WHERE services.service_type_code = 'Хамугаагч-service_type_code';
SELECT participant_type_code FROM participants WHERE participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id IN (SELECT service_id FROM services WHERE service_type_code = 'ХӨТӨЛБӨР')))
SELECT participant_details FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id WHERE service_type_code = '《ᠯᠢ ᠴᠢᠶᠠᠩ》';
SELECT participant_type_code FROM participants WHERE participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id = (SELECT service_id FROM services LIMIT 1))) LIMIT 1;
SELECT participant_type_code FROM participants WHERE participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id IN (SELECT service_id FROM services WHERE service_type_code = 'ᠶᠢᠨ ᠳᠤᠮᠳᠠᠭᠤᠯᠠᠭ')));
SELECT participant_details FROM participants WHERE participant_type_code = '钇莫尔' AND participant_id IN (SELECT participant_id FROM participants_in_events WHERE event_id IN (SELECT event_id FROM events WHERE service_id IN (SELECT service_id FROM services WHERE service_type_code = '服务类型代码')))
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.class = 'Class A' AND technician.age > 30;
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.class = 'Class A' AND machine.team = technician.team;
SELECT technician_id FROM technician WHERE team = (SELECT team FROM machine WHERE quality_rank = (SELECT MAX(quality_rank) FROM machine))
SELECT technician.technician_id FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.class = 'Class A' AND technician.team = 'Team 1';
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.making_year > 2000 AND machine.class = 'A' AND machine.quality_rank = 1 ORDER BY technician.age DESC LIMIT 1;
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date LIKE '2023%'
SELECT DISTINCT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date LIKE '2023%'
SELECT technician_id FROM technician WHERE team = 'ᠱᠠᠩᠬᠠᠢ᠎ ᠭᠠᠷᠠᠮ' ORDER BY starting_year DESC LIMIT 1;
SELECT technician_id FROM technician WHERE team = '36 ᠨᠠᠰᠤᠲᠠᠢ ᠪᠤᠶᠤ' INTERSECT SELECT technician_id FROM technician WHERE team = '37 ᠨᠠᠰᠤᠲᠠᠢ ᠮᠡᠷᠭᠡᠵᠢᠯᠲᠡᠨ᠎ ᠤ ᠨᠡᠷ᠎ᠡ᠎ᠶ᠋ᠢ ᠢᠯᠡᠷᠡᠭᠦᠯᠬᠦ';
SELECT technician_id FROM repair_assignment WHERE repair_id IN (SELECT repair_id FROM repair WHERE launch_date BETWEEN '2036-01-01' AND '2037-12-31')
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date LIKE '2023%'
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date LIKE '2023%'
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date LIKE '2023%'
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date LIKE '2023%'
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.making_year > 2000 AND machine.class = 'Premium'
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date = (SELECT MAX(repair.launch_date) FROM repair);
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN repair ON repair Assignment.repair_id = repair.repair_id WHERE repair.launch_date LIKE '2023%'
SELECT team FROM technician WHERE technician_id IN (SELECT technician_id FROM repair_assignment WHERE repair_id IN (SELECT repair_id FROM repair WHERE launch_date LIKE '2023%' OR launch_date LIKE '2024%'))
SELECT DISTINCT technician.name FROM repair Assignment INNER JOIN technician ON repair_assignment.technician_id = technician.technician_id WHERE repair_assignment.machine_id IN (SELECT machine_id FROM machine WHERE team = 'A' AND class = 'X') AND repair.launch_date LIKE '2023%'
SELECT machine.class FROM machine JOIN repair_assignment ON repair_assignment.machine_id = machine.machine_id JOIN repair ON repair.repair_id = repair_assignment.repair_id WHERE repair.notes LIKE '%蒙古语%' OR repair.name LIKE '%蒙古语%';
SELECT technician.technician_id, technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.class = 'Class A' AND machine.value_points > (SELECT AVG(value_points) FROM machine WHERE class = 'Class A') ORDER BY technician.starting_year ASC, technician.age DESC;
SELECT machine_series FROM machine WHERE machine_id IN (SELECT machine_id FROM repair_assignment WHERE repair_id IN (SELECT repair_id FROM repair WHERE launch_date LIKE '2023%' AND notes LIKE '%urgent%')) GROUP BY machine_series ORDER BY COUNT(*) DESC LIMIT 1;
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.making_year > 1970 AND machine.class = 'Сельбин Жасах Уул Цахилгаан' AND machine.quality_rank <= 5;
SELECT T3.name FROM repair_assignment AS T1 INNER JOIN machine AS T2 ON T1.machine_id = T2.machine_id INNER JOIN technician AS T3 ON T1.technician_id = T3.technician_id WHERE T2.class = 'Class A' AND T2.making_year <= 1970 AND T3.age > 40 LIMIT 1;
SELECT machine.class FROM repair_assignment JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.value_points > (SELECT AVG(value_points) FROM machine) AND machine.quality_rank = (SELECT MAX(quality_rank) FROM machine);
SELECT team FROM technician INNER JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id INNER JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.class = '蒙古语系列' GROUP BY team ORDER BY COUNT(*) DESC LIMIT 1;
SELECT machine.class FROM machine JOIN repair_assignment ON repair_assignment.machine_id = machine.machine_id JOIN technician ON technician.technician_id = repair_assignment.technician_id WHERE technician.team = 'Team A' AND technician.starting_year > 2010 GROUP BY machine.class ORDER BY COUNT(*) DESC LIMIT 1;
SELECT machine.class FROM machine JOIN repair_assignment ON machine.machine_id = repair_assignment.machine_id JOIN repair ON repair_assignment.repair_id = repair.repair_id WHERE repair.notes LIKE '%蒙古语%'
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.class = 'Class A' AND technician.team = 'Team B';
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id JOIN repair ON repair_assignment.repair_id = repair.repair_id WHERE machine.team = 'ᠲᠢᠶᠠᠨᠵᠢᠨ ᠤ ᠎ᠲᠠᠢ ᠳᠠ' AND repair.launch_date BETWEEN '2023-01-01' AND '2023-12-31';
SELECT T1.brand, T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id JOIN mountain AS T3 ON T2.mountain_id = T3.id WHERE T3.height >= 15000;
SELECT T3.name FROM `camera_lens` AS T1 INNER JOIN `photos` AS T2 ON T1.id = T2.camera_lens_id INNER JOIN `mountain` AS T3 ON T2.mountain_id = T3.id WHERE T1.brand = 'Canon' AND T3.height > 5000
SELECT mountain.name FROM photos INNER JOIN mountain ON photos.mountain_id = mountain.id WHERE mountain.height > 4000 AND mountain.prominence > 1500;
SELECT mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.brand = 'Canon' AND camera_lens.focal_length_mm > 100;
SELECT mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id WHERE photos.color = 'green' LIMIT 1;
SELECT camera_lens.brand FROM camera_lens INNER JOIN photos ON camera_lens.id = photos.camera_lens_id WHERE photos.name = 'Čaŋ Bai Šan Niriɣu';
SELECT mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.brand = 'Nikon' AND camera_lens.focal_length_mm > 200;
SELECT camera_lens.brand FROM photos INNER JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE photos.name = '_nominatee_name_' LIMIT 1;
SELECT camera_lens.brand FROM photos INNER JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE photos.name = 'ᠶᠠᠭᠤ ᠪᠣᠢ';
SELECT mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id WHERE photos.color = 'blue' AND photos.name LIKE '%НӨМӨН%' INTERSECT SELECT mountain.name FROM mountain JOIN photos ON mountain.id = photos.mountain_id WHERE photos.color = 'green' AND photos.name LIKE '%УЛИНБАС%';
SELECT camera_lens.name FROM camera_lens INNER JOIN photos ON camera_lens.id = photos.camera_lens_id WHERE photos.mountain_id = (SELECT mountain.id FROM mountain WHERE mountain.name = '蒙古国的某座山峰');
SELECT T2.name FROM `photos` AS T1 INNER JOIN `camera_lens` AS T2 ON T1.camera_lens_id = T2.id WHERE T2.brand = 'Nikon' LIMIT 1;
SELECT camera_lens.brand FROM camera_lens JOIN photos ON camera_lens.id = photos.camera_lens_id JOIN mountain ON photos.mountain_id = mountain.id WHERE mountain.name = 'ᠬᠤᠸᠠ ᠱᠠᠨ';
SELECT mountain.name FROM photos JOIN mountain ON photos.mountain_id = mountain.id WHERE mountain.range = 'ᠬᠥᠬᠡᠨᠠᠭᠤᠷ ᠲᠥᠪᠡᠳ᠎ ᠤᠨ ᠥᠨᠳᠥᠷᠯᠢᠭ' INTERSECT SELECT mountain.name FROM photos JOIN mountain ON photos.mountain_id = mountain.id WHERE mountain.range = 'ᠲᠠᠶᠢᠱᠠᠨ';
SELECT name FROM camera_lens WHERE focal_length_mm > 50 AND max_aperture < 2.8;
SELECT T2.brand FROM `photos` AS T1 INNER JOIN `camera_lens` AS T2 ON T1.camera_lens_id = T2.id WHERE T1.color = 'Digital' GROUP BY T2.brand ORDER BY COUNT(*) DESC LIMIT 1;
SELECT mountain.name FROM photos INNER JOIN mountain ON photos.mountain_id = mountain.id GROUP BY mountain.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'ᠬᠡᠳᠦᠢ ᠬᠥᠭᠵᠢᠮ᠎ ᠤᠨ ᠠᠩᠭᠢ ᠪᠠᠢᠬᠤ ᠪᠣᠢ';
SELECT I'm sorry, but your request seems to be incomplete or contains non-textual elements. Please provide a complete and clear SQL query question without any special characters or non-English text, and I will be happy to help you write the SQLite SQL query.
SELECT DISTINCT bandmate FROM vocals WHERE type = ' Backup Vocalist' INTERSECT SELECT DISTINCT bandmate FROM performance WHERE stageposition = 'Drummer';
SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate WHERE performance.stageposition = 'ведущий вокалист';
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate WHERE performance.stageposition = 'Drums';
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.type = 'album' AND albums.title = '2012 ᠣᠨ᠎ᠳ᠋ᠤ᠌ ᠡᠭᠦᠳᠦᠭᠰᠡᠨ ᠲᠤᠰᠬᠠᠢ ᠡᠮᠬᠢᠳᠬᠡᠯ᠎ ᠤᠨ ᠬᠦᠰᠦᠨᠦᠭᠲᠦ᠎ᠳ᠋ᠦ᠍ ᠪᠤᠴᠠᠬᠤ ᠃';
SELECT title FROM songs WHERE songid IN (SELECT songid FROM vocals WHERE type = 'Дуу хоолой') AND songid IN (SELECT songid FROM tracklists WHERE position = 1)
SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate WHERE performance.songid IN (SELECT songid FROM vocals WHERE type = ' Judyyn Ziyü') AND performance.songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE title = 'Jüün Ziyün'));
SELECT title FROM songs LIMIT 1;
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN vocals ON band.id = vocals.bandmate WHERE vocals.type = 'lead';
SELECT DISTINCT band.lastname FROM band JOIN vocals ON band.id = vocals.bandmate JOIN songs ON vocals.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠯᠢᠦ' AND vocals.type = '/fw'
SELECT title FROM albums WHERE year = (SELECT MAX(year) FROM albums) LIMIT 1;
SELECT songid FROM vocals WHERE bandmate IN (SELECT id FROM band WHERE lastname = 'ᠬᠡᠳᠦᠢ') INTERSECT SELECT songid FROM instruments WHERE bandmateid IN (SELECT id FROM band WHERE lastname = 'ᠬᠡᠳᠦᠢ');
SELECT title FROM songs WHERE title = 'ᠤᠯᠠᠭᠠᠨ ᠰᠠᠷᠭᠠᠢ';
SELECT band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE vocals.songid IN ( SELECT songid FROM tracklists WHERE albumid IN ( SELECT aid FROM albums WHERE year = 2008 AND label = 'Huayi Brothers' ) )
SELECT band.lastname FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE vocals.type = 'Lead' INTERSECT SELECT band.lastname FROM performance INNER JOIN band ON performance.bandmate = band.id WHERE performance.stageposition = 'Center' LIMIT 1;
SELECT band.firstname FROM band JOIN vocals ON band.id = vocals.bandmate WHERE vocals.type = '主唱' AND vocals.songid IN (SELECT songid FROM songs WHERE title = '《 ulaγan edür 》')
SELECT band.lastname FROM band INNER JOIN vocals ON band.id = vocals.bandmate WHERE vocals.songid = (SELECT songid FROM songs WHERE title = 'ᠤᠯᠠᠭᠠᠨ ᠨᠠᠷᠠ');
SELECT band.firstname, band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠤᠯᠠᠭᠠᠨ ᠨᠠᠷᠠ' AND vocals.type = 'ᠶᠢᠨ ᠪᠠᠢᠷᠢᠨ᠎ᠳ᠋ᠤ᠌' AND albums.type = 'ᠲᠣᠭᠯᠠᠬᠤ ᠪᠣᠢ';
SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN tracklists ON performance.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠤᠯᠠᠭᠠᠨ ᠨᠠᠷᠠ' AND tracklists.position = 1 INTERSECT SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN tracklists ON performance.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠠᠷᠤ ᠲᠠᠪᠴᠠᠩ' AND tracklists.position = 1;
SELECT DISTINCT bandmate FROM vocals WHERE type = '主唱' INTERSECT SELECT DISTINCT bandmate FROM performance WHERE stageposition = '鼓手';
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.year = 2008 AND tracklists.position = 1;
SELECT band.firstname, band.lastname FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE vocals.type = 'lead' LIMIT 1;
SELECT title FROM songs WHERE songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE type = 'album')) AND songid IN (SELECT songid FROM performance WHERE stageposition = 'lead vocals')
SELECT DISTINCT band.firstname FROM band JOIN vocals ON band.id = vocals.bandmate JOIN songs ON vocals.songid = songs.songid WHERE vocals.type = 'Дуу хоолой'
SELECT DISTINCT band.firstname FROM band JOIN vocals ON band.id = vocals.bandmate JOIN songs ON vocals.songid = songs.songid WHERE vocals.type = 'lead';
SELECT band.firstname FROM band JOIN performance ON band.id = performance.bandmate JOIN tracklists ON performance.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠠᠷᠤ ᠲᠠᠪᠴᠠᠩ' AND albums.year = 2023;
SELECT band.firstname FROM band JOIN performance ON band.id = performance.bandmate JOIN vocals ON performance.songid = vocals.songid WHERE vocals.type = 'ᠠᠷᠤ ᠲᠠᠪᠴᠠᠩ' AND performance.bandmate != vocals.bandmate;
SELECT band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE vocals.songid IN (SELECT songid FROM songs WHERE title = 'TERE');
SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠲᠡᠷᠡ' AND tracklists.position = 1;
SELECT DISTINCT band.firstname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.title WHERE songs.title = 'Boi Bürkhüi khergeljüi bui baigaa khuu khuu baihüi boi ?'
SELECT DISTINCT band.firstname, band.lastname FROM band INNER JOIN vocals ON band.id = vocals.bandmate WHERE vocals.type = 'lead'
SELECT songs.title FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN band ON vocals.bandmate = band.id WHERE band.lastname = '
SELECT firstname, lastname FROM band WHERE id IN (SELECT bandmate FROM vocals WHERE type = '主唱') AND id IN (SELECT bandmate FROM performance WHERE stageposition = '鼓手');
SELECT DISTINCT band.lastname FROM band WHERE band.id IN (SELECT vocals.bandmate FROM vocals WHERE vocals.type = 'lead') INTERSECT SELECT DISTINCT band.lastname FROM band WHERE band.id IN (SELECT performance.bandmate FROM performance WHERE performance.stageposition = 'front');
SELECT I'm sorry, but your question seems to be incomplete or not fully provided in English. Please provide a complete and clear question in English so that I can help you write the appropriate SQLite SQL query.
SELECT band.firstname, band.lastname FROM band JOIN instruments ON band.id = instruments.bandmateid JOIN songs ON instruments.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.year = 2008 AND albums.type = 'Studio'
SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'ᠬᠡᠩᠭᠡᠷᠭᠡ' AND performance.stageposition = 'ᠶᠤᠨ ᠬᠥᠭᠵᠢᠮ᠎ ᠤᠨ ᠪᠠᠭᠠᠵᠢ';
SELECT title FROM songs WHERE title = 'Le Pop'
SELECT band.firstname, band.lastname FROM band JOIN instruments ON band.id = instruments.bandmateid JOIN songs ON songs.songid = instruments.songid WHERE songs.title = 'ᠤᠳᠠᠭᠤᠳᠤᠶᠠᠨ ᠪᠣᠷᠣᠭᠠᠨ' LIMIT 1;
SELECT band.lastname, band.firstname FROM vocals INNER JOIN band ON vocals.bandmate = band.id INNER JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'ᠤᠳᠦᠷᠡᠭᠡᠯᠲᠦ ᠪᠣᠷᠣᠭᠠᠨ' AND vocals.type = '主唱';
SELECT band.firstname FROM band JOIN vocals ON band.id = vocals.bandmate WHERE vocals.type = 'Mahon Holboo'
SELECT title FROM albums WHERE year = (SELECT MAX(year) FROM albums);
SELECT band.firstname FROM band JOIN vocals ON band.id = vocals.bandmate JOIN tracklists ON vocals.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠯᠢᠦ' AND tracklists.position = 1;
SELECT I'm sorry, but your request seems to be incomplete or contains non-Latin characters that do not convey a clear SQL question. Please provide a complete and specific SQL query request in English so I can assist you properly.
SELECT band.lastname, band.firstname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE vocals.type = 'Lead'
SELECT band.firstname FROM band JOIN instruments ON band.id = instruments.bandmateid JOIN songs ON instruments.songid = songs.songid WHERE songs.title = 'ᠠᠯᠢ ᠳᠠᠭᠤᠤ ᠬᠥᠭᠵᠢᠮ᠎ ᠤᠨ ᠬᠡᠰᠡᠭ';
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'alinka';
SELECT DISTINCT bandmate FROM vocals WHERE songid IN ( SELECT songid FROM tracklists WHERE albumid IN ( SELECT aid FROM albums WHERE year = (SELECT MAX(year) FROM albums) ) );
SELECT bandmate FROM vocals WHERE songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE label = '蒙古音乐唱片公司'));
SELECT title FROM songs WHERE title = 'ᠯᠢᠦ';
SELECT songid FROM vocals WHERE type = 'leadsinger' INTERSECT SELECT songid FROM vocals WHERE type = 'backingvocals';
SELECT band.firstname, band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE vocals.type = '主唱' AND vocals.songid IN ( SELECT songid FROM tracklists WHERE albumid IN ( SELECT aid FROM albums WHERE title = '蒙古博尔罕》' ) );
SELECT bandmate FROM vocals WHERE title = 'ᠮᠥᠰᠥ ᠪᠣᠷᠣᠭᠠᠨ';
SELECT band.firstname, band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE vocals.songid IN ( SELECT songid FROM tracklists WHERE albumid IN ( SELECT aid FROM albums WHERE title = 'ᠫᠧᠷᠰ ᠮᠤᠤᠷ' ) );
SELECT band.lastname FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN band ON vocals.bandmate = band.id WHERE songs.title = 'ᠫᠧᠷᠰ ᠮᠤᠤᠷ' LIMIT 1;
SELECT band.firstname, band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'ᠳᠠᠭᠠᠭᠤᠯᠤᠨ ᠳᠠᠭᠤᠯᠠᠬᠤ';
SELECT bandmate FROM vocals WHERE songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE title = 'ᠳᠠᠭᠠᠭᠤᠯᠤᠨ ᠳᠠᠭᠤᠯᠠᠬᠤ'))
SELECT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Jurin Ziyun' AND performance.stageposition = 'Drummer';
SELECT band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid JOIN performance ON songs.songid = performance.songid AND vocals.bandmate = performance.bandmate WHERE songs.title = 'ABarin Amsterdam' AND performance.stageposition = '主唱';
SELECT title FROM songs WHERE title = 'ᠳᠠᠭᠤᠨ᠎ ᠤ ᠲᠥᠷᠥᠯ ᠨᠢ 《ᠳᠠᠭᠠᠭᠤᠯᠤᠨ ᠳᠠᠭᠤᠯᠠᠬᠤ》 ᠦᠭᠡᠢ ᠳᠠᠭᠤᠨ᠎ᠤ᠋ ᠠᠶ᠎ᠠ ᠣᠯᠵᠤ ᠃';
SELECT title FROM songs WHERE songid IN ( SELECT songid FROM performance WHERE bandmate IN ( SELECT id FROM band WHERE lastname = 'Дагаадаа' ) )
SELECT DISTINCT bandmate FROM vocals WHERE songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE label = 'Boi Buhui Dagun U Khelberi Yiyi Erjiz Gargaa Ha'))
SELECT band.lastname FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE vocals.songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE year = 2005)) GROUP BY band.lastname HAVING COUNT(DISTINCT vocals.songid) >= 3;
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.type = 'album' AND STRFTIME('%Y', albums.title) = '2010'
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN vocals ON band.id = vocals.bandmate JOIN songs ON vocals.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.type = 'album' AND vocals.type = 'lead' AND albums.title LIKE '%2010%'
SELECT band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE vocals.type = 'GH' AND songs.title = 'ᠮᠥᠰᠥ ᠪᠣᠷᠣᠭᠠᠨ' AND vocals.songid = songs.songid;
SELECT band.lastname FROM band JOIN vocals ON band.id = vocals.bandmate WHERE vocals.songid = (SELECT songid FROM songs WHERE title = 'ᠮᠥᠰᠥ ᠪᠣᠷᠣᠭᠠᠨ')
SELECT I'm sorry, but your question seems to be incomplete or not fully clear. Could you please provide more details or clarify what information you are seeking from the provided database schema?
SELECT DISTINCT band.firstname FROM band JOIN vocals ON band.id = vocals.bandmate JOIN tracklists ON vocals.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠠᠮᠤᠭ ᠣᠯᠠᠨ ᠳᠠᠭᠤᠤ ᠳᠠᠭᠤᠯᠠᠭᠰᠠᠨ ᠤᠷᠠᠯᠢᠭᠴᠢᠨ ᠤ ᠣᠪᠣᠭ' AND vocals.type = 'ᠶᠠᠭᠤ';
SELECT band.firstname, band.lastname FROM band JOIN instruments ON band.id = instruments.bandmateid JOIN songs ON instruments.songid = songs.songid WHERE songs.title = 'ᠯᠢᠦ' AND instruments.instrument = 'ᠭᠡᠳᠡᠭ ᠳᠠᠭᠤᠴᠢᠨ';
SELECT b.firstname FROM band AS b JOIN instruments AS i ON b.id = i.bandmateid JOIN songs AS s ON i.songid = s.songid JOIN albums AS a ON s.songid = a.aid WHERE a.title = 'ᠯᠢᠦ' AND a.year = 2023;
SELECT band.firstname, band.lastname FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE vocals.type = '主唱' AND songs.title = 'ᠤᠯᠠᠭᠠᠨ ᠨᠠᠷᠠ' AND vocals.songid = songs.songid;
SELECT band.firstname, band.lastname FROM vocals INNER JOIN band ON vocals.bandmateid = band.id WHERE vocals.type = '主唱' AND songs.title = '《 ulaan nara 》' AND vocals.songid = songs.songid;
SELECT bandmate FROM vocals WHERE songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE title = ' ulaan nara'))
SELECT b.lastname FROM band AS b JOIN vocals AS v ON b.id = v.bandmate WHERE v.songid IN (SELECT s.songid FROM songs AS s WHERE s.title = 'ᠤᠯᠠᠭᠠᠨ ᠨᠠᠷᠠ')
SELECT title FROM songs WHERE title = 'ᠮᠥᠰᠥ ᠪᠣᠷᠣᠭᠠᠨ';
SELECT band.lastname FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE vocals.songid IN (SELECT songid FROM songs WHERE title = 'ᠮᠥᠰᠥᠨ ᠪᠣᠷᠣᠭᠠᠨ')
SELECT title FROM songs WHERE title = 'ᠬᠠᠮᠲᠤ ᠡᠳ᠋ᠯᠡᠬᠦ';
SELECT bandmate FROM vocals WHERE songid IN ( SELECT songid FROM songs WHERE title = 'ᠬᠠᠮᠲᠦ ᠡᠳ᠋ᠯᠡᠬᠦ' )
SELECT band.firstname, band.lastname FROM vocals JOIN songs ON vocals.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid JOIN band ON vocals.bandmate = band.id WHERE albums.title = 'ᠠᠷᠤ ᠲᠠᠪᠴᠠᠩ' AND band.lastname = 'ᠶ᠋ᠢᠨ ᠳᠠᠭᠤᠨ᠎ ᠤ';
SELECT band.lastname FROM vocals INNER JOIN band ON vocals.bandmate = band.id WHERE vocals.songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE title = 'ᠲᠠᠢᠰᠠᠨ ᠤ ᠬᠡᠯᠪᠡᠷᠢ')) GROUP BY band.lastname HAVING COUNT(DISTINCT vocals.songid) = (SELECT COUNT(*) FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE title = 'ᠲᠠᠢᠰᠠᠨ ᠤ ᠬᠡᠯᠪᠡᠷᠢ'));
SELECT title FROM songs WHERE songid IN (SELECT songid FROM tracklists WHERE position = 1)
SELECT band.firstname, band.lastname FROM band INNER JOIN performance ON band.id = performance.bandmate WHERE performance.stageposition = '主唱' INTERSECT SELECT band.firstname, band.lastname FROM band INNER JOIN vocals ON band.id = vocals.bandmate;
SELECT band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'ᠯᠢᠦ' AND band.lastname = 'ᠭᠡᠳᠡᠭ ᠳᠠᠭᠤᠴᠢᠨ';
SELECT b.firstname, b.lastname FROM band AS b JOIN vocals AS v ON b.id = v.bandmate JOIN songs AS s ON v.songid = s.songid JOIN tracklists AS tl ON s.songid = tl.songid JOIN albums AS a ON tl.albumid = a.aid WHERE a.title = 'ᠠᠵᠠ ᠵᠢᠷᠭᠠᠯ᠎ ᠢ ᠬᠡᠯᠡᠯᠴᠡᠵᠦ ᠪᠠᠢᠨ᠎ᠠ' AND s.title = 'ᠯᠢᠦ';
SELECT I'm sorry, but your request seems to be incomplete or contains non-English instructions that I cannot understand. Please provide a clear and complete English question or query that you would like me to translate into an SQLite SQL statement.
SELECT title FROM songs WHERE songid IN (SELECT songid FROM vocals WHERE type = 'lead') INTERSECT SELECT title FROM songs WHERE songid IN (SELECT songid FROM instruments WHERE instrument = 'guitar');
SELECT title FROM songs WHERE title = 'ᠭᠤᠸᠠᠨ ᠵᠦᠩ';
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'ᠭᠤᠸᠠᠨ ᠵᠦᠩ';
SELECT band.firstname FROM band JOIN vocals ON band.id = vocals.bandmate JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'ᠵᠣᠯ ᠵᠢᠷᠭᠠᠯ᠎ ᠢ ᠶᠠᠷᠢᠵᠤ ᠥᠭᠬᠦ' INTERSECT SELECT band.firstname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'ᠠᠷᠤ ᠲᠠᠪᠴᠠᠩ';
SELECT band.firstname, band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'ᠠᠵᠠ ᠵᠢᠷᠭᠠᠯ᠎  ᠢ ᠶᠠᠷᠢᠵᠤ ᠪᠠᠢᠨ᠎ᠠ' INTERSECT SELECT band.firstname, band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'ᠠᠷᠤ ᠲᠠᠪᠴᠠᠩ';
SELECT I'm sorry, but your request seems to be incomplete or contains non-Latin characters that do not convey a clear SQL question. Please provide a complete and specific SQL query request in English so I can assist you properly.
SELECT band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE songs.songid = vocals.songid AND songs.title = 'ᠠᠷᠤ ᠲᠠᠪᠴᠠᠩ';
SELECT band.firstname, band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ᠎ᠶ᠋ᠢᠨ ᠰᠢᠶᠣᠤ ᠪᠠᠩ' AND vocals.type = 'lead' LIMIT 1;
SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'ᠠᠷᠪᠠᠨ ᠨᠢᠭᠡᠳᠦᠭᠡᠷ ᠰᠠᠷ᠎ᠠ᠎ᠶ᠋ᠢᠨ ᠰᠢᠶᠣᠤ ᠪᠠᠩ' AND performance.stageposition = 'ᠶᠠᠭᠤ';
SELECT band.lastname FROM band JOIN performance ON band.id = performance.bandmate WHERE performance.stageposition = '主唱' AND performance.songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE title = '《德尔惠斯德尔格乌尔斯乌赫姆那》'));
SELECT title FROM songs WHERE title = 'ᠳᠡᠯᠡᠬᠡᠢ᠎ᠶ᠋ᠢᠨ ᠳᠠᠭᠤᠤ ᠬᠥᠭᠵᠢᠮ᠎ ᠤᠨ ᠺᠣᠮᠫᠠᠨᠢ'
SELECT DISTINCT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'studio' AND albums.type = 'album';
SELECT band.lastname FROM vocals JOIN band ON vocals.bandmate = band.id WHERE vocals.songid IN (SELECT songid FROM tracklists WHERE albumid IN (SELECT aid FROM albums WHERE title = 'studio'))
SELECT first_name, last_name FROM customers JOIN bookings ON customers.customer_id = bookings.customer_id JOIN payments ON bookings.booking_id = payments.booking_id WHERE amount_paid > 500;
SELECT T2.first_name, T2.last_name FROM products_for_hire AS T1 INNER JOIN bookings AS T3 ON T1.product_id = T3.product_id INNER JOIN customers AS T2 ON T3.customer_id = T2.customer_id WHERE T1.product_name = 'ᠶᠤᠳᠦᠯᠵᠢᠨ ᠡᠷᠦᠬᠡ ᠪᠦᠷᠢ ᠬᠡᠳᠦᠢ ᠤᠳᠠᠭ᠎ᠠ ᠤᠷᠢᠳᠴᠢᠯᠠᠨ ᠵᠠᠬᠢᠶᠠᠯᠠᠭᠰᠠᠨ ᠪᠣᠢ'
SELECT product_name FROM products_for_hire INNER JOIN products_booked ON products_booked.product_id = products_for_hire.product_id WHERE returned_yn = 0 AND returned_late_yn = 0;
SELECT product_name FROM products_for_hire WHERE product_id IN (SELECT product_id FROM products_booked WHERE booking_id IN (SELECT booking_id FROM bookings WHERE booking_status_code = 'Completed')) AND product_id NOT IN (SELECT product_id FROM products_booked WHERE returned_late_yn = 'Yes');
SELECT product_name FROM products_for_hire JOIN view_product_availability ON products_for_hire.product_id = view_product_availability.product_id WHERE available_yn = 'Y' AND status_date = (SELECT MAX(status_date) FROM view_product_availability WHERE available_yn = 'Y');
SELECT product_name FROM products_for_hire WHERE product_id IN (SELECT product_id FROM products_booked WHERE booking_id IN (SELECT booking_id FROM bookings WHERE booking_status_code = 'Completed' AND customer_id = 102) AND returned_yn = 'Yes') LIMIT 1;
SELECT T2.last_name FROM `bookings` AS T1 INNER JOIN `customers` AS T2 ON T1.customer_id = T2.customer_id WHERE T1.booking_status_code = 'Completed' AND T1.amount_payable > 200
SELECT customer_id FROM customers WHERE good_or_bad_customer = 'good' LIMIT 1;
SELECT product_name FROM products_for_hire WHERE product_id IN (SELECT product_id FROM products_booked WHERE booking_id IN (SELECT booking_id FROM bookings WHERE booking_status_code = 'completed')) AND product_id NOT IN (SELECT product_id FROM products_booked WHERE returned_damaged_yn = 'yes')
SELECT customer_id FROM customers WHERE gender_mf = 'female' AND good_or_bad_customer = 'good' LIMIT 1;
SELECT customer_id FROM customers WHERE good_or_bad_customer = 'good' LIMIT 1;
SELECT T2.first_name, T2.last_name FROM products_booked AS T1 INNER JOIN bookings AS T2 ON T1.booking_id = T2.booking_id INNER JOIN customers AS T3 ON T2.customer_id = T3.customer_id WHERE T1.returned_late_yn = 'Yes'
SELECT T2.first_name, T2.last_name FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount_paid_in_full_yn = 'Y' LIMIT 1
SELECT product_name FROM products_for_hire WHERE product_type_code = 'ᠨᠣᠮ';
SELECT product_name FROM products_for_hire WHERE product_id IN (SELECT product_id FROM products_booked WHERE booking_id IN (SELECT booking_id FROM bookings WHERE amount_payable > 200));
SELECT customer_id FROM customers WHERE coupon_id IN (SELECT coupon_id FROM discount_coupons WHERE date_issued = '2023-01-01');
SELECT product_name FROM products_for_hire WHERE daily_hire_cost > 300 AND product_name NOT IN (SELECT product_name FROM products_for_hire JOIN products_booked ON products_for_hire.product_id = products_booked.product_id JOIN bookings ON products_booked.booking_id = bookings.booking_id WHERE bookings.booking_status_code = 'Returned_Damaged');
SELECT first_name, last_name FROM customers JOIN bookings ON customers.customer_id = bookings.customer_id JOIN payments ON bookings.booking_id = payments.booking_id WHERE payments.amount_paid = (SELECT MAX(amount_paid) FROM payments) LIMIT 20;
SELECT DISTINCT student.lname, student.fname FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid WHERE visits_restaurant.spent > 50;
SELECT stuid FROM student WHERE advisor = 'Činggis Qan';
SELECT resname FROM restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid IN (SELECT stuid FROM student WHERE city_code = '½Ö¼ª½ü½ù'));
SELECT stuid FROM visits_restaurant WHERE resid IN (SELECT resid FROM type_of_restaurant WHERE restypeid = (SELECT restypeid FROM restaurant_type WHERE restypename = ' Bükeh Qoγolxon Tinginghu mün Törli jiγsaγan'));
SELECT COUNT(*) FROM student WHERE major = 'Computer Science'
SELECT restaurant.resid FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid WHERE restaurant.rating = (SELECT MAX(rating) FROM restaurant) LIMIT 1;
SELECT restypename FROM restaurant_type WHERE restypeid IN (SELECT restypeid FROM type_of_restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid IN (SELECT stuid FROM student WHERE major = 'LIN')))
SELECT COUNT(DISTINCT student.stuid) FROM student WHERE student.major = 'Linguistics' AND student.age > 20;
SELECT COUNT(*) FROM student WHERE major = 'CS' AND age > 20;
SELECT restypename FROM restaurant_type WHERE restypeid IN (SELECT restypeid FROM type_of_restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid = (SELECT stuid FROM student WHERE fname = 'ᠰᠦᠷᠦᠭᠴᠢ' AND lname = 'ᠯᠢ')));
SELECT major FROM student WHERE sex = 'female' AND age > 20;
SELECT COUNT(DISTINCT student.stuid) FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid WHERE visits_restaurant.resid IN (SELECT resid FROM type_of_restaurant WHERE restypeid = (SELECT restypeid FROM restaurant_type WHERE restypename = ' Mongolian '));
SELECT COUNT(*) FROM student WHERE sex = 'F' AND age > 20;
SELECT COUNT(*) FROM student WHERE age BETWEEN 20 AND 30;
SELECT student.fname FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE student.age = 18 AND student.major = 'CS' AND restaurant.address = '600 School';
SELECT COUNT(*) FROM student WHERE major = 'CS' AND sex = 'F' AND stuid IN (SELECT stuid FROM visits_restaurant GROUP BY stuid HAVING SUM(spent) >= 600);
SELECT resname FROM restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid IN (SELECT stuid FROM student WHERE major = 'Computer Science'));
SELECT restypename FROM restaurant_type WHERE restypeid IN (SELECT restypeid FROM type_of_restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid IN (SELECT stuid FROM student WHERE lname = 'ᠤᠷᠤᠭᠴᠢ' AND fname = 'ᠯᠢ')));
SELECT restypename FROM restaurant_type WHERE restypeid IN (SELECT restypeid FROM type_of_restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid = (SELECT stuid FROM student WHERE fname = 'ᠯᠢ' AND city_code = 'ᠯᠢᠨ')));
SELECT resname FROM restaurant WHERE resid IN (SELECT resid FROM type_of_restaurant WHERE restypeid = (SELECT restypeid FROM restaurant_type WHERE restypename = 'ᠯᠢᠨ'))
SELECT restypedescription FROM restaurant_type WHERE restypeid IN (SELECT restypeid FROM type_of_restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid = (SELECT stuid FROM student WHERE lname = '蒙古语姓名' AND fname = '蒙古语名字')))
SELECT restypename FROM restaurant_type WHERE restypeid IN (SELECT restypeid FROM type_of_restaurant WHERE resid IN (SELECT resid FROM visits_restaurant WHERE stuid IN (SELECT stuid FROM student WHERE major = 'CS')))
SELECT customer.first_name, customer.last_name FROM customer JOIN payment ON customer.customer_id = payment.customer_id WHERE payment.amount > 10;
SELECT first_name FROM actor INTERSECT SELECT first_name FROM staff;
SELECT last_name FROM customer WHERE customer_id IN (SELECT customer_id FROM payment WHERE staff_id IN (SELECT staff_id FROM staff WHERE active = 1))
SELECT last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.language_id = 1 OR film.original_language_id = 1;
SELECT last_name FROM actor WHERE actor_id IN (SELECT actor_id FROM film_actor WHERE film_id IN (SELECT film_id FROM film WHERE language_id = (SELECT language_id FROM language WHERE name = 'Mongolian')));
SELECT last_name FROM actor INNER JOIN film_actor ON actor.actor_id = film_actor.actor_id INNER JOIN film ON film_actor.film_id = film.film_id WHERE film.rental_duration = 7;
SELECT first_name, last_name FROM customer;
SELECT first_name, last_name FROM customer WHERE active = 1;
SELECT last_name FROM customer WHERE customer_id = 15;
SELECT first_name, last_name FROM customer WHERE store_id = 1;
SELECT city FROM city WHERE country_id = (SELECT country_id FROM city WHERE city = 'Хотой');
SELECT first_name, last_name FROM staff WHERE store_id IN (SELECT store_id FROM customer WHERE first_name = 'Хамуга') INTERSECT SELECT first_name, last_name FROM staff WHERE store_id IN (SELECT store_id FROM customer WHERE last_name = 'Олдын');
SELECT first_name, last_name FROM staff WHERE store_id IN (SELECT store_id FROM store WHERE manager_staff_id IS NOT NULL) ORDER BY last_name, first_name;
SELECT first_name, last_name FROM customer WHERE active = 1;
SELECT store_id FROM rental JOIN inventory ON rental.inventory_id = inventory.inventory_id WHERE rental_rate = 0.99 GROUP BY store_id HAVING COUNT(*) >= 3;
SELECT film_id FROM film WHERE rental_rate = 0.99 AND replacement_cost > 15 AND rating = 'PG-13';
SELECT store.store_id FROM store JOIN staff ON store.manager_staff_id = staff.staff_id JOIN address ON store.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE city.city = 'ᠠᠦ᠋ᠰᠲ᠋ᠷᠠᠯᠢᠢ᠎ᠠ' LIMIT 1;
SELECT customer.first_name, customer.last_name FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN staff ON rental.staff_id = staff.staff_id WHERE staff.first_name = 'ᠶᠤᠩ ᠬᠣᠲᠠ' AND staff.last_name = 'ᠶᠤᠩ ᠬᠣᠲᠠ';
SELECT city.city FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = '蒙古国' LIMIT 3;
SELECT country.name FROM country WHERE country.country_id IN (SELECT city.country_id FROM city WHERE city.city = ' ulaanbaatar ') LIMIT 1;
SELECT first_name FROM actor WHERE first_name LIKE 'Činggā' LIMIT 10;
SELECT title FROM film WHERE length > 10 AND title LIKE '%Činggä%' LIMIT 1;
SELECT first_name, last_name FROM staff WHERE active = 1;
SELECT customer.email FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN payment ON rental.rental_id = payment.rental_id WHERE payment.amount > 5;
SELECT title FROM film WHERE film_id IN (SELECT film_id FROM inventory WHERE store_id = 1) ORDER BY length DESC LIMIT 1;
SELECT name FROM category;
SELECT first_name, last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.rental_duration = 3 AND film.replacement_cost < 10;
SELECT actor.first_name, actor.last_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id JOIN film ON film_actor.film_id = film.film_id WHERE film.description LIKE '%Тоглolicitudын хамугийн олан хинойны нэрэ%' OR film.title LIKE '%Тоглolicitudын хамугийн олан хинойны нэрэ%' ORDER BY film.release_year DESC;
SELECT store_id FROM inventory WHERE film_id IN (SELECT film_id FROM film WHERE title = '格尔乐图的电影') GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customer.first_name, customer.last_name FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN staff ON rental.staff_id = staff.staff_id WHERE staff.first_name = 'John' AND staff.last_name = 'Parker';
SELECT first_name, last_name FROM customer WHERE active = 1 AND create_date >= '2023-01-01' AND create_date <= '2023-03-31';
SELECT first_name, last_name FROM actor WHERE last_name LIKE 'B%' LIMIT 30;
SELECT title FROM film WHERE description LIKE '%албан ёсны тавар%' LIMIT 1;
SELECT store.store_id FROM store JOIN staff ON store.manager_staff_id = staff.staff_id WHERE staff.first_name = 'Хүмэртэй' AND staff.last_name = 'Байгамаа';
SELECT city FROM city ORDER BY city LIMIT 1;
SELECT I'm sorry, but your request seems to be incomplete or contains non-English instructions that are unclear. Could you please provide a clear and complete English question or a specific query you'd like me to compose based on the given tables?
SELECT customer.last_name FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN payment ON rental.rental_id = payment.rental_id WHERE payment.amount > 5;
SELECT first_name, last_name FROM customer WHERE store_id = 1;
SELECT category.name FROM category JOIN film_category ON category.category_id = film_category.category_id JOIN film ON film_category.film_id = film.film_id WHERE film.description LIKE '%Гажи бургуд төб чихэчих байху ёгэй%'
SELECT film.title FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id WHERE category.name = '蒙古电影';
SELECT title FROM film WHERE rating = 'R' LIMIT 1;
SELECT title FROM film WHERE film_id IN (SELECT film_id FROM film_category WHERE category_id = (SELECT category_id FROM category WHERE name = 'Action'));
SELECT title FROM film WHERE film_id IN (SELECT film_id FROM inventory WHERE store_id = 1) ORDER BY title ASC LIMIT 1;
SELECT staff.first_name, staff.last_name FROM staff WHERE staff.store_id IN (SELECT T1.store_id FROM inventory AS T1 INNER JOIN rental AS T2 ON T1.inventory_id = T2.inventory_id GROUP BY T1.store_id HAVING COUNT(T2.rental_id) > 30) ORDER BY staff.last_name, staff.first_name;
SELECT first_name, last_name FROM customer WHERE store_id = (SELECT store_id FROM staff WHERE first_name = 'John' AND last_name = 'Doe')
SELECT film_id FROM film WHERE release_year = 2006;
SELECT name FROM language WHERE language_id IN (SELECT original_language_id FROM film);
SELECT title FROM film WHERE film_id IN (SELECT film_id FROM inventory WHERE store_id = 1) ORDER BY title ASC LIMIT 5;
SELECT description FROM film_text WHERE film_id IN (SELECT film_id FROM film WHERE rating = 'R') LIMIT 1;
SELECT description FROM film WHERE rating = 'R';
SELECT store.store_id FROM store JOIN staff ON store.manager_staff_id = staff.staff_id WHERE staff.first_name = 'Дэлгүүр 1' AND staff.last_name = 'Хамига Байхуу';
SELECT staff.first_name, staff.last_name FROM staff JOIN store ON staff.store_id = store.store_id WHERE store.manager_staff_id = staff.staff_id;
SELECT store.store_id FROM store WHERE store.manager_staff_id IN (SELECT staff.staff_id FROM staff WHERE staff.first_name = 'Али' AND staff.last_name = 'Алижилтан');
SELECT customer.first_name, customer.last_name FROM customer WHERE customer.active = 1 AND customer.store_id IN (SELECT store.store_id FROM store WHERE store.manager_staff_id = (SELECT staff.staff_id FROM staff WHERE staff.first_name = 'Mike')) LIMIT 5;
SELECT title FROM film WHERE title = 'ᠳᠠᠯᠳᠠ ᠲᠡᠢᠨ';
SELECT title FROM film WHERE title = 'ᠳᠠᠯᠳᠠ ᠲᠡᠢᠨ';
SELECT first_name, last_name FROM customer WHERE active = 1;
SELECT customer.first_name, customer.last_name FROM customer JOIN payment ON customer.customer_id = payment.customer_id WHERE payment.amount > 10;
SELECT store.store_id FROM store JOIN staff ON store.manager_staff_id = staff.staff_id WHERE staff.first_name = 'Найдан' AND staff.last_name = 'Баттулга';
SELECT title FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN rental ON inventory.inventory_id = rental.inventory_id JOIN payment ON rental.rental_id = payment.rental_id WHERE payment.amount > 5;
SELECT title FROM film WHERE title = 'ᠬᠠᠶᠠᠭᠰᠠᠨ ᠬᠡᠰᠡᠭ';
SELECT description FROM film WHERE special_features LIKE '%Deleted Scenes%'
SELECT title FROM film WHERE language_id = (SELECT language_id FROM film WHERE title = 'ᠳᠡᠯᠭᠡᠭᠦᠷ᠎ ᠦ᠋ᠨ 1 ᠦ᠌ ᠬᠥᠮᠥᠷᠭᠡ᠎ᠳ᠋ᠦ᠍ ᠬᠡᠳᠦᠢ ᠵᠦᠢᠯ᠎ᠦ᠋ᠨ ᠡᠳ᠋ ᠪᠣᠳᠠᠰ ᠪᠣᠢ');
SELECT city.city FROM customer JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id GROUP BY city.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT store.store_id FROM store JOIN staff ON store.manager_staff_id = staff.staff_id WHERE staff.first_name = 'Нигэдугэр' AND staff.last_name = 'Өдөгнүүд';
SELECT customer.first_name, customer.last_name FROM customer JOIN payment ON customer.customer_id = payment.customer_id WHERE payment.amount > 10;
SELECT first_name, last_name FROM staff WHERE store_id IN (SELECT store_id FROM rental WHERE rental_date BETWEEN '2005-05-26' AND '2005-08-30') ORDER BY last_name, first_name;
SELECT last_name FROM customer WHERE first_name = 'Linda';
SELECT title FROM film WHERE description LIKE '%Хижагарлал%' AND release_year BETWEEN 1990 AND 2000 LIMIT 100;
SELECT title FROM film WHERE release_year BETWEEN 200 AND 2005 AND rating = 'PG' LIMIT 100;
SELECT first_name, last_name FROM customer WHERE active = 1;
SELECT staff.first_name, staff.last_name FROM staff JOIN rental ON staff.staff_id = rental.staff_id WHERE rental.return_date IS NULL;
SELECT first_name, last_name FROM customer WHERE email = 'April' INTERSECT SELECT first_name, last_name FROM customer WHERE email = 'Burns';
SELECT customer.first_name, customer.last_name FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN staff ON rental.staff_id = staff.staff_id WHERE staff.first_name = 'April' AND staff.last_name = 'Nerland';
SELECT store.store_id FROM store JOIN staff ON store.manager_staff_id = staff.staff_id JOIN customer ON store.store_id = customer.store_id WHERE staff.first_name = 'Алиса' AND staff.last_name = 'Дельгэрурь';
SELECT customer.first_name, customer.last_name FROM customer JOIN staff ON customer.store_id = staff.store_id JOIN store ON staff.staff_id = store.manager_staff_id WHERE store.address_id = ( SELECT address_id FROM store GROUP BY address_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT store.store_id FROM store WHERE store.manager_staff_id IN (SELECT staff.staff_id FROM staff WHERE staff.first_name = 'Хамуг' AND staff.last_name = 'Үхэ');
SELECT staff.first_name, staff.last_name FROM staff JOIN payment ON staff.staff_id = payment.staff_id JOIN customer ON payment.customer_id = customer.customer_id WHERE customer.email = 'хамуг_өхөө_тулубүрь_мингөө_бүчагаху_хэрэгтэй@example.com';
SELECT customer.first_name FROM customer JOIN staff ON customer.store_id = staff.store_id JOIN address ON customer.address_id = address.address_id AND staff.address_id = address.address_id JOIN country ON address.country_id = country.country_id WHERE country.country = '蒙古国'
SELECT customer.first_name, customer.last_name FROM customer JOIN payment ON customer.customer_id = payment.customer_id JOIN staff ON payment.staff_id = staff.staff_id JOIN address ON staff.address_id = address.address_id WHERE address.city_id = ( SELECT city_id FROM address WHERE district = ' Yelping ' ) AND payment.amount > 5;
SELECT customer.first_name, customer.last_name FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN staff ON rental.staff_id = staff.staff_id WHERE staff.first_name = 'ᠡᠴᠡ' AND staff.last_name = 'ᠶᠣᠢᠰᠢ' AND rental.rental_date = '2005-08-23 02:06:01';
SELECT customer.first_name, customer.last_name FROM customer JOIN rental ON customer.customer_id = rental.customer_id JOIN staff ON rental.staff_id = staff.staff_id WHERE staff.first_name = 'uhan' AND rental.rental_date = '2005-08-23 02:06:01'
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'TRUE';
SELECT driver.driver_id FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id JOIN school ON school_bus.school_id = school.school_id WHERE school.type = 'Primary School' AND driver.age > 40;
SELECT name FROM driver WHERE driver_id IN (SELECT driver_id FROM school_bus WHERE if_full_time = 'yes')
SELECT driver.driver_id FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'Yes';
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'Yes';
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id JOIN school ON school_bus.school_id = school.school_id WHERE school.type = '蒙古语学校';
SELECT name FROM driver WHERE party = 'School Bus' AND age > 50;
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'Yes' AND driver.age > 40;
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'Yes' AND school_bus.years_working >= 40 LIMIT 1;
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'Yes';
SELECT school.location FROM school JOIN school_bus ON school.school_id = school_bus.school_id WHERE school_bus.if_full_time = 'Yes';
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'Yes';
SELECT school_id FROM school_bus WHERE if_full_time = 1;
SELECT school.location FROM school JOIN school_bus ON school.school_id = school_bus.school_id WHERE school_bus.if_full_time = 'Yes';
SELECT school.location FROM school INNER JOIN school_bus ON school.school_id = school_bus.school_id INNER JOIN driver ON school_bus.driver_id = driver.driver_id WHERE driver.party = 'Republican' AND driver.age > 50;
SELECT name FROM driver WHERE years_working >= 40;
SELECT driver_id FROM driver WHERE age = 40 AND party = 'ᠸᠦᠵᠢᠬᠦ' LIMIT 1;
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.if_full_time = 'Yes'
SELECT school_details.nickname FROM school_details INNER JOIN school ON school_details.school_id = school.school_id WHERE school.location = '呼和诺尔镇';
SELECT school_id FROM school WHERE denomination = '佛教'
SELECT school.location FROM school INNER JOIN player ON school.school_id = player.school_id WHERE player.age > 18;
SELECT school_details.nickname FROM school_details WHERE school_details.school_id IN (SELECT school.school_id FROM school WHERE school.day_or_boarding = 'day') LIMIT 1;
SELECT school_details.nickname FROM school_details JOIN school ON school_details.school_id = school.school_id JOIN player ON school.school_id = player.school_id WHERE school.day_or_boarding = 'day' AND player.age > 18;
SELECT school_details.nickname FROM school_details JOIN school ON school_details.school_id = school.school_id JOIN player ON school.school_id = player.school_id WHERE school.year_entered_competition = 2006 AND player.age = 17;
SELECT school_details.nickname FROM school_details WHERE school_details.school_id IN (SELECT school.school_id FROM school WHERE school.enrollment > 500) LIMIT 1;
SELECT DISTINCT school_details.nickname FROM school_details JOIN school ON school_details.school_id = school.school_id WHERE school.enrollment > 500 AND school.founded < 1900;
SELECT school_details.nickname FROM school_details WHERE school_details.school_id IN (SELECT school.school_id FROM school WHERE school.enrollment > 500) LIMIT 1;
SELECT school FROM school JOIN player ON school.school_id = player.school_id JOIN school_performance ON school.school_id = school_performance.school_id JOIN school_details ON school.school_id = school_details.school_id WHERE school_details.league = 'WPIAL' AND school_details.class = 'AAAA' AND school_details.division = 'Northern';
SELECT school FROM school JOIN school_details ON school.school_id = school_details.school_id WHERE colors = 'blue' AND denomination = 'Catholic' AND division = 'III'
SELECT I'm sorry, but your request seems to be incomplete or contains non-Latin characters that do not convey a clear question. Please provide a complete question in English along with the context so I can assist you with the appropriate SQLite SQL query.
SELECT school_details.nickname FROM school_details JOIN school ON school_details.school_id = school.school_id JOIN player ON school.school_id = player.school_id WHERE player.player = 'ᠪᠥᠮᠪᠥᠭᠡᠴᠢᠨ ᠬᠡᠳᠦᠢ ᠠᠳᠠᠯᠢ';
SELECT school FROM school JOIN player ON school.school_id = player.school_id WHERE player.age > 18 ORDER BY school.enrollment DESC LIMIT 1;
SELECT DISTINCT player.player FROM player INNER JOIN school ON player.school_id = school.school_id WHERE school.location = 'MN';
SELECT school_id FROM school WHERE boys_or_girls = 'Boys' AND day_or_boarding = 'Day'
SELECT school FROM school JOIN school_details ON school.school_id = school_details.school_id WHERE school_details.league = 'Independent' AND school.enrollment BETWEEN 1000 AND 2000;
SELECT COUNT(*) FROM player WHERE age > 18;
SELECT I'm sorry, but your request seems to be cut off or contains non-English text that I am unable to understand fully. Could you please provide the complete question or query you need assistance with in English?
SELECT DISTINCT school.location FROM school INNER JOIN player ON school.school_id = player.school_id WHERE player.position = ' Forward' AND school.enrollment > 500;
SELECT school_id FROM school WHERE denomination = 'Buddhist';
SELECT school_id FROM school WHERE enrollment = (SELECT MAX(enrollment) FROM school);
SELECT school_id FROM school WHERE denomination = '佛教'
SELECT school_details.colors FROM school JOIN school_details ON school.school_id = school_details.school_id WHERE school.denomination = '佛教' LIMIT 1;
SELECT I'm sorry, but your request seems to be incomplete or contains non-English characters that I cannot understand. Could you please provide a clear, complete SQL query question in English? I'll be happy to help you write the appropriate SQLite SQL query once I have more information.
SELECT school.location FROM school JOIN player ON school.school_id = player.school_id WHERE player.position = 'forward' AND school.day_or_boarding = 'day'
SELECT school_id FROM school WHERE denomination = 'Dalits' AND location = 'Ulaanbaatar'
SELECT DISTINCT school_details.nickname FROM school_details JOIN school ON school_details.school_id = school.school_id JOIN player ON school.school_id = player.school_id WHERE school.demonination = 'Catholic' AND player.age BETWEEN 15 AND 18;
SELECT school_id FROM school WHERE denomination = 'Dalai Buse Sasin Bulug Kharaljagsan SURGAGULIIN TOGTOH YIIN DES DARAH ELERGELEGEREI HA'
SELECT school.denomination, school.location FROM school JOIN player ON school.school_id = player.school_id WHERE player.age > 18 AND player.position = 'Forward';
SELECT school_details.nickname FROM school_details JOIN school ON school_details.school_id = school.school_id WHERE school.enrollment > 1000 AND school.denomination = 'Public'
SELECT school_colors FROM school LIMIT 1;
SELECT school_id FROM school WHERE denomination = '佛教'
SELECT school.location FROM school JOIN player ON school.school_id = player.school_id WHERE player.position = ' Forward'
SELECT school_id FROM school WHERE year_entered_competition BETWEEN 1890 AND 1900;
SELECT COUNT(*) FROM school WHERE year_entered_competition BETWEEN 1890 AND 1900;
SELECT school FROM school JOIN school_performance ON school.school_id = school_performance.school_id WHERE school_performance.class_aa = 'A' AND school_performance.school_year = '2006-2007';
SELECT school.location FROM school JOIN school_details ON school.school_id = school_details.school_id WHERE school_details.class = 'A' AND school.enrollment > 1500 ORDER BY school.founded DESC LIMIT 1;
SELECT school_id FROM school WHERE denomination = '佛教'
SELECT school_details.nickname FROM school_details INNER JOIN school ON school_details.school_id = school.school_id WHERE school.location = 'NY';
SELECT I'm sorry, but your request seems to be incomplete or contains non-English characters that do not convey a clear question. Please provide a complete question in English along with the specific columns you'd like to retrieve from the given tables, and I will craft the appropriate SQLite SQL query for you.
SELECT team_long_name FROM team WHERE team_api_id IN (SELECT team_api_id FROM team_attributes WHERE buildupplayspeed = (SELECT MAX(buildupplayspeed) FROM team_attributes)) LIMIT 1;
SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE overall_rating = (SELECT MAX(overall_rating) FROM player_attributes));
SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating = 90 AND player_attributes.potential = 90;
SELECT DISTINCT country.name FROM country JOIN league ON league.country_id = country.id JOIN player ON player.league_id = league.id JOIN player_attributes ON player_attributes.player_api_id = player.player_api_id WHERE player_attributes.buildupplayspeed > 50 AND player.height > 180;
SELECT DISTINCT player.player_api_id FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.ball_control = 90 AND player_attributes.overall_rating > 85;
SELECT DISTINCT player_api_id FROM player WHERE height >= 90 AND weight >= 80;
SELECT DISTINCT player_api_id FROM player_attributes WHERE potential BETWEEN 85 AND 90 LIMIT 1;
SELECT DISTINCT player.player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.overall_rating > (SELECT AVG(overall_rating) FROM player_attributes) AND player_attributes.potential > (SELECT AVG(potential) FROM player_attributes);
SELECT player_name FROM player WHERE player_api_id IN (SELECT player_api_id FROM player_attributes WHERE potential > 80) LIMIT 1;
SELECT player_name FROM player INNER JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.vision >= 85 AND player_attributes.potential >= 180 LIMIT 1;
SELECT player_name FROM player WHERE weight BETWEEN 180 AND 190;
SELECT DISTINCT country.name FROM country JOIN league ON league.country_id = country.id JOIN player ON player.league_id = league.id WHERE player.height > 190 AND player.weight > 85;
SELECT DISTINCT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id JOIN team ON player_attributes.player_fifa_api_id = team.team_fifa_api_id JOIN league ON team.league_id = league.id JOIN country ON league.country_id = country.id WHERE country.name = 'China' AND player_attributes.overall_rating >= 85;
SELECT district.headquartered_city FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Bookstore' AND store.ranking = 5;
SELECT store_name FROM store WHERE store_id IN (SELECT store_id FROM store_product WHERE product_id IN (SELECT product_id FROM product WHERE dpi > 300 AND pages_per_minute_color > 15)) LIMIT 1;
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store_product WHERE product_id IN (SELECT product_id FROM product WHERE dpi > 600)));
SELECT district_name FROM district WHERE city_population > (SELECT AVG(city_population) FROM district) AND city_area < (SELECT AVG(city_area) FROM district);
SELECT store_name FROM store WHERE ranking = 20 AND area_size > 200 INTERSECT SELECT T2.store_name FROM district AS T1 JOIN store_district AS T2 ON T1.district_id = T2.district_id WHERE T1.city_population = 20000;
SELECT store_name FROM store WHERE ranking <= 20 AND area_size >= 200 LIMIT 1;
SELECT store_name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE district.city_area > 10 AND store.number_of_product_category <= 10 ORDER BY store.ranking LIMIT 10;
SELECT store_name FROM store WHERE store_id IN (SELECT store_id FROM store_product WHERE product_id IN (SELECT product_id FROM product WHERE dpi > 10 AND pages_per_minute_color < 10)) LIMIT 10;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Retail' AND store.ranking <= 5 GROUP BY district_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT district.headquartered_city FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Bookstore' AND store.ranking <= 5 GROUP BY district.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Supermarket' ORDER BY district.city_population DESC LIMIT 1;
SELECT district.headquartered_city FROM district INNER JOIN store_district ON district.district_id = store_district.district_id INNER JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Bookstore' LIMIT 1;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Supermarket' AND store.ranking <= 3 GROUP BY district_name HAVING COUNT(DISTINCT store.store_id) >= 3;
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE ranking = 1))
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE ranking = 1))
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE ranking = 1))
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE ranking = 1))
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE ranking = 1)) LIMIT 1;
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE type = 'Bookstore')) ORDER BY city_area DESC LIMIT 1;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store.store_id = store_district.store_id WHERE store.ranking = 1 GROUP BY district_name;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store.store_id = store_district.store_id WHERE store.type = '《ᠺᠠᠰᠸᠤ》' AND store.ranking = 1;
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE type = '办公用品'));
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store.store_id = store_district.store_id WHERE store.type = 'bookstore';
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE type = 'Bookstore'));
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store.store_id = store_district.store_id WHERE store.ranking = 1;
SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;
SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1;
SELECT store_name FROM store WHERE ranking = 1 LIMIT 1;
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE type = 'Bookstore'));
SELECT district_name FROM district WHERE city_population > 500000 AND city_area < 500;
SELECT district_name FROM district WHERE city_population > 50000 AND city_area < 500;
SELECT district_name FROM district WHERE city_population > 500000 AND city_area < 500;
SELECT district_name FROM district WHERE city_population > 50000 AND city_area < 500;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id JOIN store_product ON store.store_id = store_product.store_id WHERE store_product.product_id IN ( SELECT product_id FROM product WHERE dpi > 300 AND pages_per_minute_color >= 20 ) AND store.type = 'Supermarket' GROUP BY district_name HAVING COUNT(DISTINCT store_product.product_id) >= 5;
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store_product WHERE product_id IN (SELECT product_id FROM product WHERE dpi > 300 AND pages_per_minute_color > 20)));
SELECT district_name FROM district JOIN store_district ON store_district.district_id = district.district_id JOIN store ON store.store_id = store_district.store_id JOIN store_product ON store_product.store_id = store.store_id WHERE store_product.product_id IN ( SELECT product_id FROM product WHERE dpi > 300 AND pages_per_minute_color > 20 ) GROUP BY district_name HAVING COUNT(DISTINCT store_product.product_id) >= 2;
SELECT district_name FROM district WHERE district_name LIKE '%МУГ%'
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store_product WHERE product_id IN (SELECT product_id FROM product WHERE dpi > 300 AND pages_per_minute_color > 20)));
SELECT district_name FROM district WHERE city_population > (SELECT AVG(city_population) FROM district) LIMIT 1;
SELECT district_name FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id WHERE store.type = 'Supermarket' AND store.ranking <= 5;
SELECT district_name FROM district WHERE district_id IN (SELECT district_id FROM store_district WHERE store_id IN (SELECT store_id FROM store WHERE type = 'Bookstore'))
SELECT district_name FROM district WHERE headquartered_city = 'ᠲᠣᠮᠦ ᠳᠡᠶᠢᠭᠡᠭᠦᠷ' AND city_population > ( SELECT city_population FROM district WHERE district_name = 'ᠳᠦᠭᠦᠮ ᠦᠵᠡᠭᠦᠯᠬᠦ ᠳᠡᠯᠭᠡᠭᠦᠷ' );
SELECT district_name FROM district WHERE city_population > (SELECT AVG(city_population) FROM district) AND city_area < (SELECT AVG(city_area) FROM district);
SELECT region_name FROM region WHERE region_code IN (SELECT region_id FROM affected_region WHERE storm_id IN (SELECT storm_id FROM storm WHERE max_speed > 100));
SELECT region_name FROM region WHERE region_code IN (SELECT region_id FROM affected_region WHERE storm_id IN (SELECT storm_id FROM storm WHERE damage_millions_usd > 1000))
SELECT region.region_name FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id WHERE affected_region.storm_id IN (SELECT storm_id FROM storm WHERE damage_millions_usd > 5000);
SELECT region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region_name ORDER BY COUNT(storm_id) DESC LIMIT 1;
SELECT region.region_code FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region.region_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT region.region_code FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region.region_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT region.region_name FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id WHERE affected_region.storm_id IN (SELECT storm_id FROM storm WHERE damage_millions_usd > 5000)
SELECT region.region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.max_speed > (SELECT AVG(max_speed) FROM storm) GROUP BY region.region_name HAVING COUNT(storm.name) >= 2 ORDER BY COUNT(storm.name) DESC, region.region_name;
SELECT storm.name FROM storm INNER JOIN affected_region ON storm.storm_id = affected_region.storm_id INNER JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = '内蒙古自治区' LIMIT 1;
SELECT T1.name FROM `storm` AS T1 INNER JOIN `affected_region` AS T2 ON T1.storm_id = T2.storm_id INNER JOIN `region` AS T3 ON T2.region_id = T3.region_id WHERE T3.region_name = 'North America' ORDER BY T1.dates_active DESC LIMIT 1;
SELECT region.region_name FROM affected_region JOIN region ON affected_region.region_id = region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.number_deaths > 0 AND storm.dates_active LIKE '%-02-%';
SELECT region.region_name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE storm.number_deaths = 1;
SELECT storm.name FROM storm INNER JOIN affected_region ON storm.storm_id = affected_region.storm_id INNER JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = 'China' AND storm.damage_millions_usd > 1000;
SELECT storm.name FROM storm INNER JOIN affected_region ON storm.storm_id = affected_region.storm_id INNER JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = 'United States' AND storm.damage_millions_usd > 1000;
SELECT region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.damage_millions_usd = (SELECT MAX(damage_millions_usd) FROM storm);
SELECT T1.name FROM storm AS T1 INNER JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id INNER JOIN region AS T3 ON T2.region_id = T3.region_id WHERE T3.region_name = 'Asia'
SELECT region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.damage_millions_usd > (SELECT AVG(damage_millions_usd) FROM storm) ORDER BY storm.damage_millions_usd DESC LIMIT 1;
SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.name ORDER BY SUM(T2.number_city_affected) DESC LIMIT 1;
SELECT region_name FROM region WHERE region_id IN (SELECT region_id FROM affected_region WHERE storm_id IN (SELECT storm_id FROM storm WHERE damage_millions_usd > 5000))
SELECT region.region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.damage_millions_usd > (SELECT AVG(damage_millions_usd) FROM storm) GROUP BY region.region_name HAVING COUNT(storm.name) >= 2;
SELECT name FROM storm WHERE damage_millions_usd > (SELECT AVG(damage_millions_usd) FROM storm)
SELECT region.region_code FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.damage_millions_usd > 5000;
SELECT region_name FROM region WHERE region_id IN (SELECT region_id FROM affected_region WHERE number_city_affected > 10) ORDER BY region_name;
SELECT region.region_name FROM affected_region JOIN region ON affected_region.region_id = region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.name = 'Dorian';
SELECT region_name FROM region WHERE region_id IN (SELECT region_id FROM affected_region WHERE storm_id = (SELECT storm_id FROM storm WHERE name = '_TD05'));
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = '内蒙古自治区'
SELECT region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.damage_millions_usd > (SELECT AVG(damage_millions_usd) FROM storm);
SELECT T1.name FROM `storm` AS T1 INNER JOIN `affected_region` AS T2 ON T1.storm_id = T2.storm_id INNER JOIN `region` AS T3 ON T2.region_id = T3.region_id WHERE T3.region_name = 'Northeast'
SELECT storm.name FROM storm INNER JOIN affected_region ON storm.name = affected_region.storm_id INNER JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = '钇博 ​​ godt' LIMIT 1;
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = 'North America' GROUP BY storm.name HAVING COUNT(DISTINCT region.region_code) >= 10 ORDER BY storm.name;
SELECT region_name FROM region WHERE region_id IN (SELECT region_id FROM affected_region WHERE storm_id IN (SELECT storm_id FROM storm WHERE number_deaths >= 10));
SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T2.storm_id = T3.storm_id WHERE T3.number_deaths > 100;
SELECT region_name FROM region WHERE region_id IN (SELECT region_id FROM affected_region WHERE storm_id IN (SELECT storm_id FROM storm WHERE max_speed > 200));
SELECT name FROM storm WHERE damage_millions_usd > 10 LIMIT 1;
SELECT storm.name FROM storm WHERE storm.storm_id IN (SELECT storm_id FROM affected_region WHERE number_city_affected >= 10) LIMIT 1;
SELECT region.region_name FROM storm JOIN affected_region ON storm.name = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE storm.name = 'Danmark'
SELECT T1.name FROM `storm` AS T1 INNER JOIN `affected_region` AS T2 ON T1.storm_id = T2.storm_id INNER JOIN `region` AS T3 ON T2.region_id = T3.region_id WHERE T3.region_name = 'ᠳ᠋ᠠᠨᠮᠠᠷᠺ' LIMIT 1;
SELECT region.region_name FROM affected_region JOIN storm ON affected_region.storm_id = storm.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE storm.number_deaths > 0 GROUP BY region.region_name HAVING COUNT(DISTINCT storm.storm_id) >= 2;
SELECT region.region_code FROM region INNER JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region.region_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT region.region_name FROM affected_region JOIN region ON affected_region.region_id = region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.damage_millions_usd > (SELECT AVG(damage_millions_usd) FROM storm);
SELECT region.region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.damage_millions_usd > (SELECT AVG(damage_millions_usd) FROM storm) GROUP BY region.region_name HAVING COUNT(storm.name) >= 2;
SELECT storm.name FROM storm JOIN affected_region ON storm.name = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = '内蒙古自治区' ORDER BY storm.damage_millions_usd DESC LIMIT 1;
SELECT region_name FROM region WHERE region_id IN (SELECT region_id FROM affected_region WHERE storm_id = (SELECT storm_id FROM storm WHERE name = 'ᠠᠹᠭᠠᠨᠨᠢᠰᠲᠠᠨ'))
SELECT DISTINCT list.firstname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom WHERE teachers.firstname = 'Сүрүгчийн Ёрөнхэй';
SELECT DISTINCT list.firstname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom WHERE teachers.firstname = 'Байху';
SELECT DISTINCT list.firstname FROM list INNER JOIN teachers ON list.firstname = teachers.firstname WHERE teachers.lastname = 'ᠨᠣᠮᠧᠷᠲᠦ';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = '111' GROUP BY teachers.firstname ORDER BY COUNT(*) DESC LIMIT 1;
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = '108' AND list.lastname = 'ᠬᠢᠴᠢᠶᠡᠯ᠎ ᠤᠨ ᠭᠡᠷ᠎ᠲᠦ᠍ ᠰᠤᠷᠤᠯᠴᠠᠵᠤ ᠪᠠᠢᠭ᠎ᠠ ᠰᠤᠷᠤᠭᠴᠢ᠎ᠶ᠋ᠢᠨ ᠨᠡᠷ᠎ᠡ᠎ᠶ᠋ᠢ ᠡᠷᠢᠵᠦ ᠭᠠᠷᠭ᠎ᠠ ᠃'
SELECT DISTINCT classroom FROM list WHERE grade = 108;
SELECT DISTINCT teachers.firstname, teachers.lastname FROM list JOIN teachers ON list.lastname = teachers.lastname WHERE list.classroom = '107' AND list.grade = '3'
SELECT DISTINCT classroom FROM list WHERE grade = '107';
SELECT lastname FROM list INTERSECT SELECT lastname FROM teachers;
SELECT teachers.firstname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom WHERE list.grade = 'highest' LIMIT 1;
SELECT DISTINCT lastname FROM `list` WHERE classroom = '103' AND grade = 10;
SELECT DISTINCT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = '103';
SELECT DISTINCT list.firstname, list.lastname FROM list INNER JOIN teachers ON list.firstname = teachers.firstname AND list.lastname = teachers.lastname WHERE teachers.classroom = '105';
SELECT firstname FROM list WHERE classroom = '105' INTERSECT SELECT firstname FROM teachers WHERE classroom = '105';
SELECT DISTINCT classroom FROM list INTERSECT SELECT DISTINCT classroom FROM teachers;
SELECT DISTINCT classroom FROM list INTERSECT SELECT classroom FROM teachers;
SELECT DISTINCT classroom FROM list INTERSECT SELECT DISTINCT classroom FROM teachers;
SELECT lastname FROM list INTERSECT SELECT lastname FROM teachers;
SELECT lastname FROM list INTERSECT SELECT lastname FROM teachers;
SELECT DISTINCT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.lastname = '巴图尔';
SELECT teachers.lastname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'B'
SELECT teachers.lastname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade = '蒙古语'
SELECT teachers.lastname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade > 90;
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.firstname = list.firstname WHERE list.classroom = '110' AND list.grade = 11;
SELECT teachers.lastname FROM teachers INNER JOIN list ON teachers.lastname = list.lastname WHERE list.classroom = '109' AND list.grade = '5';
SELECT firstname FROM teachers WHERE classroom = 109;
SELECT DISTINCT teachers.firstname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'B';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'B';
SELECT DISTINCT lastname FROM list WHERE classroom IN (SELECT classroom FROM teachers)
SELECT DISTINCT teachers.lastname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'B';
SELECT DISTINCT teachers.lastname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'Juragan';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.lastname = 'ᠵᠠᠩ' AND list.grade = 'ᠯᠢᠶᠠᠩ';
SELECT lastname FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE grade = 'Sün');
SELECT DISTINCT classroom FROM list WHERE grade = 'ᠺᠧ' INTERSECT SELECT DISTINCT classroom FROM teachers;
SELECT DISTINCT teachers.firstname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.lastname = 'ᠯᠧᠢ';
SELECT lastname FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE grade = 'LI' AND lastname = 'LIE')
SELECT teachers.lastname FROM teachers JOIN list ON teachers.lastname = list.lastname AND teachers.classroom = list.classroom WHERE list.grade = 'B';
SELECT teachers.lastname FROM teachers JOIN list ON teachers.lastname = list.lastname AND teachers.classroom = list.classroom WHERE list.grade = 'B+'
SELECT DISTINCT teachers.lastname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'ᠤᠨᠳᠦᠷᠢᠭᠡᠨ' AND list.lastname = 'ᠯᠢᠨ';
SELECT DISTINCT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = ' LIN ' AND list.firstname = ' SIYOU KUWA ';
SELECT lastname FROM list INTERSECT SELECT lastname FROM teachers;
SELECT DISTINCT teachers.lastname FROM teachers INNER JOIN list ON teachers.lastname = list.lastname AND teachers.classroom = list.classroom WHERE list.grade = '蒙古语'
SELECT DISTINCT teachers.firstname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade = '一年级' AND teachers.firstname != '班主任';
SELECT DISTINCT teachers.lastname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'ᠱᠧᠨ' AND list.lastname = 'ᠯᠢ ᠶᠠ';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'ᠰᠢᠶᠣᠤ ᠱᠤᠸᠠᠢ' AND teachers.firstname = 'ᠸᠠᠩ';
SELECT lastname FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'ᠰᠢᠶᠣᠣ' AND grade = 'ᠪᠠᠭᠰᠢ');
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'Jurong' AND list.firstname = 'Siyou Ciying';
SELECT DISTINCT teachers.lastname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.firstname = 'ᠵᠧᠩ' AND list.grade = 'ᠰᠢᠶᠣᠤ ᠴᠢᠶᠠᠩ';
SELECT lastname FROM list INTERSECT SELECT lastname FROM teachers;
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.lastname = 'ᠵᠠᠩ' AND list.grade = 'ᠯᠢᠶᠠᠩ';
SELECT DISTINCT list.firstname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom WHERE teachers.firstname = ' Süne ';
SELECT firstname FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'ᠰᠢᠶᠣᠤ ᠵᠦᠩ');
SELECT DISTINCT lastname, firstname FROM list INTERSECT SELECT DISTINCT lastname, firstname FROM teachers;
SELECT DISTINCT lastname, firstname FROM list INTERSECT SELECT DISTINCT lastname, firstname FROM teachers;
SELECT lastname, firstname FROM list INTERSECT SELECT lastname, firstname FROM teachers;
SELECT DISTINCT list.grade FROM list INNER JOIN teachers ON list.lastname = teachers.lastname AND list.firstname = teachers.firstname;
SELECT DISTINCT list.firstname, list.lastname FROM list INTERSECT SELECT DISTINCT teachers.firstname, teachers.lastname FROM teachers;
SELECT DISTINCT list.firstname, list.lastname FROM list INNER JOIN teachers ON list.firstname = teachers.firstname AND list.lastname = teachers.lastname;
SELECT lastname,firstname FROM list WHERE grade = 'teacher' INTERSECT SELECT lastname,firstname FROM teachers;
SELECT lastname, classroom FROM list INNER JOIN teachers ON list.firstname = teachers.firstname;
SELECT DISTINCT list.firstname, list.lastname FROM list INTERSECT SELECT DISTINCT teachers.firstname, teachers.lastname FROM teachers;
SELECT DISTINCT classroom FROM list INTERSECT SELECT classroom FROM teachers;
SELECT DISTINCT list.firstname, list.lastname FROM list INTERSECT SELECT DISTINCT teachers.firstname, teachers.lastname FROM teachers;
SELECT DISTINCT teachers.lastname, teachers.firstname FROM teachers INNER JOIN list ON teachers.lastname = list.lastname AND teachers.firstname = list.firstname WHERE list.grade = 'A';
SELECT DISTINCT teachers.lastname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.grade > 85;
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.grade = 'B' LIMIT 1;
SELECT DISTINCT list.firstname, list.lastname FROM list INTERSECT SELECT DISTINCT teachers.firstname, teachers.lastname FROM teachers;
SELECT lastname,firstname FROM list INTERSECT SELECT lastname,firstname FROM teachers;
SELECT people.first_name, people.last_name FROM people JOIN students ON students.student_id = people.person_id JOIN student_course_registrations ON student_course_registrations.student_id = students.student_id JOIN courses ON courses.course_id = student_course_registrations.course_id WHERE courses.course_name = '阿尔拜辛区历史导览';
SELECT COUNT(*) FROM students;
SELECT first_name, last_name FROM people JOIN students ON people.person_id = students.student_id JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'ᠶᠠᠭᠤᠳᠤᠯᠤᠰ ᠳᠠᠩᠰᠠᠯᠠᠭᠤᠯᠬᠤ᠎ᠳ᠋ᠤ᠌'
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id AND student_course_registrations.student_id = student_course_attendance.student_id WHERE student_course_attendance.date_of_attendance = (SELECT MAX(date_of_attendance) FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id);
SELECT first_name, last_name FROM people JOIN candidates ON people.person_id = candidates.candidate_id JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE asessment_outcome_code = ' Passed ';
SELECT first_name, last_name FROM people JOIN candidates ON people.person_id = candidates.candidate_id JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE asessment_outcome_code = ' Passed ';
SELECT DISTINCT people.first_name, people.last_name FROM people INNER JOIN students ON people.person_id = students.student_id INNER JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id INNER JOIN student_course_attendance ON student_course_registrations.student_id = student_course_attendance.student_id AND student_course_registrations.course_id = student_course_attendance.course_id WHERE student_course_attendance.date_of_attendance = '2023-04-05' LIMIT 1;
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.student_id = student_course_attendance.student_id AND student_course_registrations.course_id = student_course_attendance.course_id WHERE student_course_attendance.date_of_attendance = (SELECT MAX(date_of_attendance) FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id);
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'JavaScript Fundamentals';
SELECT students.student_details FROM students INNER JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id INNER JOIN student_course_attendance ON student_course_attendance.student_id = students.student_id AND student_course_attendance.course_id = student_course_registrations.course_id WHERE student_course_attendance.date_of_attendance = '2023-04-05' LIMIT 1;
SELECT DISTINCT people.first_name, people.middle_name, people.last_name FROM people INNER JOIN students ON people.person_id = students.student_id INNER JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id INNER JOIN student_course_attendance ON student_course_registrations.student_id = student_course_attendance.student_id AND student_course_registrations.course_id = student_course_attendance.course_id WHERE student_course_attendance.date_of_attendance = '2023-04-05' LIMIT 1;
SELECT COUNT(*) FROM student_course_attendance;
SELECT DISTINCT people.first_name, people.last_name FROM people JOIN students ON people.person_id = students.student_id JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.student_id = student_course_attendance.student_id AND student_course_registrations.course_id = student_course_attendance.course_id WHERE student_course_attendance.date_of_attendance = '2023-04-05' LIMIT 1;
SELECT T2.first_name, T2.last_name FROM student_course_attendance AS T1 INNER JOIN student_course_registrations AS T3 ON T1.student_id = T3.student_id INNER JOIN students AS T4 ON T3.student_id = T4.student_id INNER JOIN people AS T2 ON T4.student_id = T2.person_id WHERE T1.date_of_attendance = '2023-04-05' GROUP BY T2.first_name, T2.last_name;
SELECT student_details FROM students WHERE student_id IN (SELECT student_id FROM student_course_attendance WHERE date_of_attendance = '2023-04-05');
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_attendance.student_id = students.student_id WHERE student_course_attendance.date_of_attendance = (SELECT MAX(date_of_attendance) FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id) GROUP BY students.student_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations WHERE student_id IN (SELECT student_id FROM students WHERE student_details = 'ᠨᠣᠮᠧᠷᠲᠦ'));
SELECT first_name, last_name FROM people WHERE login_name = 'stanley.monahan@example.org';
SELECT email_address FROM people WHERE first_name = 'Stanley' AND last_name = 'Monahan';
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations WHERE student_id IN (SELECT student_id FROM students WHERE student_details = 'Örcüm Khichyel Örökhü Zishigdegechiin Nomür'));
SELECT candidates.candidate_details FROM candidates JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE candidate_assessments.asessment_outcome_code = 'PASS';
SELECT COUNT(*) FROM student_course_attendance;
SELECT DISTINCT people.first_name, people.last_name FROM people JOIN students ON students.student_id = people.person_id JOIN student_course_registrations ON student_course_registrations.student_id = students.student_id JOIN student_course_attendance ON student_course_attendance.student_id = students.student_id AND student_course_attendance.course_id = student_course_registrations.course_id WHERE student_course_attendance.date_of_attendance = (SELECT MAX(date_of_attendance) FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id);
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_attendance.student_id = students.student_id WHERE student_course_attendance.date_of_attendance = (SELECT MAX(date_of_attendance) FROM student_course_attendance);
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations WHERE student_id IN (SELECT student_id FROM students WHERE student_details = 'Жарим Хичээлсэн'));
SELECT first_name, last_name FROM students JOIN people ON students.student_id = people.person_id JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'Хичээлийн нэр' AND student_course_registrations.registration_date = 'Дансаалгын огноо';
SELECT last_name, first_name FROM people WHERE login_name IN (SELECT login_name FROM student_course_registrations WHERE course_id IN (SELECT course_id FROM courses WHERE course_name = 'Хичээлийн нэр')) LIMIT 1;
SELECT first_name, last_name FROM people INNER JOIN candidates ON people.person_id = candidates.candidate_id INNER JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE asessment_outcome_code = 'passed' ORDER BY assessment_date DESC LIMIT 1;
SELECT first_name, last_name FROM people JOIN candidates ON people.person_id = candidates.candidate_id JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE assessment_outcome_code = 'Pass';
SELECT first_name, last_name FROM people JOIN candidates ON people.person_id = candidates.candidate_id JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE assessment_outcome_code = 'ILGDASAN';
SELECT first_name, last_name FROM people WHERE person_id IN (SELECT candidate_id FROM candidates WHERE candidate_id IN (SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = 'ᠶᠢᠨ ᠲᠠᠩᠭᠠᠯᠠᠭᠳᠠᠭᠰᠠᠨ'))
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations WHERE registration_date = '2023-03-01')
SELECT COUNT(*) FROM student_course_attendance;
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations WHERE registration_date = '2023-01-30') AND course_description LIKE '%Математик%';
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations WHERE registration_date BETWEEN '2023-01-01' AND '2023-03-31')
SELECT first_name, last_name FROM people JOIN people_addresses ON people.person_id = people_addresses.person_id JOIN addresses ON people_addresses.address_id = addresses.address_id WHERE state_province_county = 'ulanqab' AND country = 'China';
SELECT DISTINCT people.first_name, people.last_name FROM people JOIN candidates ON people.person_id = candidates.candidate_id JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE candidate_assessments.asessment_outcome_code = 'PASS';
SELECT DISTINCT people.first_name, people.middle_name, people.last_name FROM people JOIN students ON people.person_id = students.student_id JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id AND student_course_registrations.student_id = student_course_attendance.student_id WHERE student_course_attendance.date_of_attendance = '2023-04-05';
SELECT first_name, last_name FROM people JOIN students ON people.person_id = students.student_id JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id AND student_course_registrations.student_id = student_course_attendance.student_id WHERE student_course_attendance.date_of_attendance = ( SELECT MAX(date_of_attendance) FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id )
SELECT courses.course_description FROM courses JOIN student_course_registrations ON courses.course_id = student_course_registrations.course_id JOIN students ON student_course_registrations.student_id = students.student_id WHERE students.student_details = 'Čaɣan Tolagiin Daragaľal-yin Khičiyel-un Nèrèidül-í Jigsagan ūn';
SELECT student_details FROM students INNER JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id INNER JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_description = ' Mongolian Language and Literature ';
SELECT last_name FROM people WHERE person_id IN (SELECT person_id FROM candidates) INTERSECT SELECT last_name FROM people WHERE person_id IN (SELECT student_id FROM students);
SELECT last_name, middle_name FROM people JOIN candidates ON people.person_id = candidates.candidate_id JOIN candidate_assessments ON candidates.candidate_id = candidate_assessments.candidate_id WHERE assessment_date = (SELECT MAX(assessment_date) FROM candidate_assessments WHERE candidate_assessments.candidate_id = candidates.candidate_id) AND asessment_outcome_code = 'Pass';
SELECT DISTINCT T2.first_name, T2.last_name FROM student_course_attendance AS T1 INNER JOIN student_course_registrations AS T3 ON T1.student_id = T3.student_id INNER JOIN courses AS T4 ON T1.course_id = T4.course_id INNER JOIN students AS T5 ON T3.student_id = T5.student_id INNER JOIN people AS T2 ON T5.student_id = T2.person_id WHERE T4.course_name = '数据库概论' AND T1.date_of_attendance = '2023-04-07'
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id AND student_course_registrations.student_id = student_course_attendance.student_id WHERE student_course_attendance.date_of_attendance = (SELECT MAX(date_of_attendance) FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id);
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_attendance.student_id = students.student_id AND student_course_attendance.course_id = student_course_registrations.course_id WHERE student_course_attendance.date_of_attendance = student_course_registrations.registration_date;
SELECT first_name, last_name FROM students JOIN people ON students.student_id = people.person_id WHERE students.student_details = 'Дугарлал 121';
SELECT DISTINCT people.first_name, people.last_name FROM people JOIN students ON people.person_id = students.student_id JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id WHERE student_course_registrations.registration_date BETWEEN '2023-01-01' AND '2023-03-31';
SELECT DISTINCT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id AND student_course_registrations.student_id = student_course_attendance.student_id WHERE student_course_attendance.date_of_attendance = (SELECT MAX(date_of_attendance) FROM student_course_attendance WHERE student_course_attendance.student_id = students.student_id);
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_attendance.student_id = students.student_id AND student_course_attendance.course_id = student_course_registrations.course_id WHERE student_course_attendance.date_of_attendance = '2023-04-05'
SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_course_registrations WHERE student_id IN (SELECT student_id FROM students WHERE student_details = 'ТӨГӨӨ БҮРХЭЛЭН ХУГАНА' COLLATE NOCASE));
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_description = 'Тоғол бүрэлхүүний өхөөн';
SELECT first_name, last_name FROM people JOIN students ON students.student_id = people.person_id JOIN student_course_registrations ON student_course_registrations.student_id = students.student_id JOIN courses ON courses.course_id = student_course_registrations.course_id WHERE courses.course_name = 'ᠲᠣᠭ᠎ᠠ ᠪᠦᠷᠢᠳᠬᠡᠯ᠎ ᠤᠨ ᠤᠬᠠᠭᠠᠨ';
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE date = '2023-04-01'))
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id = (SELECT workshop_id FROM workshop WHERE name = 'Torghud Mongolian Script Workshop')) AND scores > 85;
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.result = 'Accepted';
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id WHERE workshop.date = '2023-04-01' AND workshop.venue = 'New York' AND acceptance.result = 'Accepted';
SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE result = 'Accepted') ORDER BY college ASC;
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.result = 'Accepted';
SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE venue = 'ᠵᠧᠵᠢᠶᠠᠩ' OR venue = 'ᠨᠠᠨᠵᠢᠩ'))
SELECT workshop.name FROM acceptance JOIN workshop ON acceptance.workshop_id = workshop.workshop_id WHERE acceptance.result = 'accepted' AND workshop.date >= '2023-01-01' LIMIT 1;
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE date = '2023-04-01'))
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE date = '2023-04-01'))
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE date = '2023-04-01'))
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.result = 'Accepted';
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.result = 'Accepted';
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.result = 'Accepted';
SELECT college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id WHERE workshop.date = '2023-04-01' AND workshop.venue = 'Online' AND acceptance.result = 'Accepted';
SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE result = 'Accepted')
SELECT college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id WHERE workshop.date BETWEEN '2023-04-01' AND '2023-04-30' AND submission.scores >= 90 ORDER BY submission.scores DESC;
SELECT college FROM submission WHERE scores >= 90 INTERSECT SELECT college FROM submission WHERE scores <= 80;
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id WHERE workshop.date = '2023-04-01' AND workshop.venue = 'New York';
SELECT DISTINCT college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id;
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE date = '2023-04-01'));
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE date = '2023-04-01'))
SELECT DISTINCT college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE workshop_id IN ( SELECT workshop_id FROM workshop WHERE date = '2023-04-01' AND venue = 'New York' )
SELECT submission.college FROM submission INNER JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.result = 'accepted';
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id WHERE workshop.date = '2023-04-01' AND workshop.venue = 'New York';
SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE result = 'Accepted')
SELECT author FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE workshop_id IN (SELECT workshop_id FROM workshop WHERE name = '数据库系统')) AND scores > 85;
SELECT workshop.name FROM workshop INNER JOIN acceptance ON workshop.workshop_id = acceptance.workshop_id WHERE acceptance.result = 'accepted';
SELECT DISTINCT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id WHERE workshop.date = '2023-04-01' AND workshop.venue = 'New York';
SELECT college FROM submission WHERE submission_id IN (SELECT submission_id FROM acceptance WHERE result = 'Accepted')
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%great food%' AND business.rating > 4;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.name HAVING AVG(review.stars) > 3.5 AND COUNT(review.review_id) >= 50 ORDER BY AVG(review.stars) DESC;
SELECT business.city, COUNT(review.rid) AS review_count FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.city ORDER BY review_count DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '% baik buheii khamburge %'
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Далайн дэгэрэм ун Онгоцаны уйбэрэйний ёлчилэх хола' AND business.review_count > 0 ORDER BY business.review_count DESC LIMIT 1;
SELECT business.name FROM business INNER JOIN category ON business.bid = category.business_id WHERE category.category_name = 'Chinese' LIMIT 1;
SELECT I'm sorry, but your request seems to be incomplete or contains non-English characters that do not convey a clear SQL query task. Please provide a complete and specific SQL query question in English, and I will write the corresponding SQLite SQL query for you.
SELECT user.name FROM user JOIN review ON user.user_id = review.user_id WHERE review.rating = 5 ORDER BY review.year DESC, review.month DESC LIMIT 1;
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.id = '邱处机《蒙古秘史》卷十四' LIMIT 1;
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Nanojingün Yeke Nerte Temdeg' AND business.name != 'Khoğoltingkhim';
SELECT business.name FROM business JOIN neighbourhood ON business.bid = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'Wang Yan';
SELECT business_id FROM business WHERE city = 'San Francisco' AND latitude > 37.75;
SELECT business.name FROM business WHERE business.rating >= 5 AND business.city = 'San Francisco' LIMIT 5;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE business.city = 'ᠢᠲ᠋ᠠᠯᠢ' AND business.state = 'ᠬᠣᠭᠣᠯᠠᠨ ᠭᠡᠷ' ORDER BY review.rating DESC LIMIT 1;
SELECT business.name FROM business JOIN checkin ON business.bid = checkin.business_id WHERE business.city = 'ᠶᠦᠨᠨᠠᠨ' AND checkin.day = 'ᠰᠢᠩ ᠪᠠ ᠺᠧ' AND business.full_address LIKE '%ᠬᠣᠭᠣᠯᠠᠨ ᠲᠢᠩᠬᠢᠮ%' LIMIT 1;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.text LIKE '% Итальянский %' OR review.text LIKE '% Хуурцаагаа %' GROUP BY business.name HAVING COUNT(DISTINCT review.rid) >= 2;
SELECT business.name FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = ' Chengdu ' AND business.city = ' Italian '
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE business.city = 'Chicago' AND review.rating > 2.5 AND review.year = 2019 ORDER BY review.rating DESC LIMIT 1;
SELECT T2.name FROM checkin AS T1 INNER JOIN business AS T2 ON T1.business_id = T2.business_id WHERE T1.day = 'Monday' LIMIT 1
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 AND review.year = 2015;
SELECT business_id FROM business WHERE city = 'Bayanhongor' AND review_count > 100;
SELECT business.name FROM business JOIN category ON business.bid = category.business_id WHERE category.id = 'ᠳ᠋ᠦᠩ ᠭᠤᠸᠠᠨ' AND business.city = 'ᠫᠢᠸᠣ᠎ᠶ᠋ᠢᠨ ᠦᠢᠯᠡᠳᠪᠦᠷᠢ';
SELECT business.name FROM business INNER JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%ᠳ᠋ᠦᠩ ᠭᠤᠸᠠᠨ%' AND review.text LIKE '%ᠫᠢᠸᠣ᠎ᠶ᠋ᠢᠨ ᠦᠢᠯᠡᠳᠪᠦᠷᠢ%' LIMIT 1;
SELECT business.city FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 GROUP BY business.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT business.name FROM business JOIN category ON business.bid = category.business_id WHERE category.category_name = '蒙古菜' AND business.city = '乌兰巴托';
SELECT I'm sorry, but your query seems to be cut off. Please provide the complete question or the specific information you'd like to retrieve from the tables, and I will write the appropriate SQLite SQL query for you.
SELECT business.name FROM business WHERE business.city = '-mfci' AND business.rating > 3.5
SELECT business.name FROM business INNER JOIN category ON business.bid = category.business_id WHERE category.id = 'Chicago' AND business.city = 'Houston' LIMIT 1;
SELECT T2.name FROM business AS T1 INNER JOIN neighbourhood AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'San Francisco' LIMIT 1
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%᠈ᠣᠣ ᠢ᠋ ᠢ᠋ ᠰᠢᠭᠦᠮᠵᠢ᠎ᠲᠡᠢ 3 ᠣᠳᠣ 《ᠠᠷᠢᠬᠢᠨ ᠪᠠᠭᠠᠷ》 ᠢ᠋ ᠡᠷᠢᠵᠦ ᠣᠯᠬᠤ ᠬᠡᠷᠡᠭᠲᠡᠢ ᠃%' GROUP BY business.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.year = 2015 AND review.rating > 3 ORDER BY review.rating DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE business.city = 'Yunnan' AND review.year = 2022 GROUP BY business.name ORDER BY COUNT(review.rid) DESC LIMIT 2;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating = 5 ORDER BY COUNT(review.rid) DESC LIMIT 1;
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.id = 'Śīyāmēn' AND business.name = '达尔罕茂明安联合旗';
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'ᠰᠢᠶᠠᠮᠧᠨ' AND business.city = 'ᠳᠠᠯᠠᠢ᠎ᠶ᠋ᠢᠨ ᠢᠳᠡᠭᠡᠨ';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%ᠤᠪᠢ ᠨᠢ 4 ᠬᠤᠪᠢ᠎ᠠ᠋ᠴᠠ ᠥᠨᠳᠥᠷ 《ᠵᠣ᠌ ᠢ》 ᠶ᠋ᠢᠨ ᠪᠣᠢ ᠪᠦᠬᠦᠢ ᠰᠢᠭᠦᠮᠵᠢ᠎ᠶ᠋ᠢ ᠡᠷᠢᠵᠦ ᠭᠠᠷᠭᠠᠨ%'
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 ORDER BY review.review_count DESC LIMIT 5;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.text LIKE '%Čėngdū%' AND review.text LIKE '%Qoɣulan gēr%' GROUP BY business.name HAVING AVG(review.stars) >= 4.5;
SELECT name FROM business WHERE city = 'Dalaiyin Iruu' AND state = 'Khoolan Ger' LIMIT 1;
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Reservations'
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 AND review.month = '2014-01'
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 AND review.year = 2023 AND review.month = 4 ORDER BY review.review_count DESC LIMIT 1;
SELECT neighbourhood.neighbourhood_name FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE business.name = 'ᠶᠦᠨᠠᠨ' AND business.state = 'ᠳᠠᠯᠠᠢ᠎ᠶ᠋ᠢᠨ ᠳᠡᠭᠡᠷᠡᠮ᠎ ᠤᠨ ᠣᠩᠭᠣᠴᠠᠨ᠎ ᠤ ᠥᠪᠡᠷᠲᠡᠭᠡᠨ ᠦᠢᠯᠡᠴᠢᠯᠡᠬᠦ ᠬᠣᠭᠣᠯᠠ';
SELECT neighbourhood.neighbourhood_name FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id WHERE business.city = 'Eigenbrakel'
SELECT business.name FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'ᠶᠦᠨᠠᠨ' AND business.city = 'ᠰᠢᠩᠪᠠᠺ';
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 ORDER BY review.year DESC, review.month DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 AND review.year = 2010;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.year = 2010 AND review.month = 1 ORDER BY review.rating DESC LIMIT 1;
SELECT business.name FROM business INNER JOIN review ON business.bid = review.business_id WHERE review.year = 2012 AND review.rating = 5 GROUP BY business.name ORDER BY COUNT(review.rid) DESC LIMIT 1;
SELECT business_id FROM business WHERE review_count > 2.5 AND is_open = 1 LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%Čingdu%' AND review.text LIKE '%Ami jigtavgulhu toglagam%'
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%Čingduė%' OR review.text LIKE '%Ami Jigtuɣulxu Toglagam%'
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.text LIKE '%Čėŋḏüė ᠬędüi ᠠᠮᠢ ᠵᠢᠭᠤᠲᠠᠭᠤᠯᠬᠤ ᠲᠣᠭᠯᠠᠭᠠᠮ%' OR review.text LIKE '%Čėŋḏüė ᠬędüi ᠠᠮᠢ ᠵᠢᠭᠤᠲᠠᠭᠤᠯᠬᠤ ᠲᠣᠭᠯᠠᠭᠠᠮ%' GROUP BY business.name;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%Čēŋdü% ᠳ᠋ᠠᠬᠢ%' AND review.text LIKE '%Duutagān jailakh ŋ(tolagam)%'
SELECT user_id FROM user WHERE uid = 'Čėŋdü'
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating > 3.5 AND business.name LIKE '%ХӨГӨЛ АН%'
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 AND review.text LIKE '%Mongo%'
SELECT DISTINCT user.user_id FROM user JOIN review ON user.user_id = review.user_id WHERE review.rating > 3 INTERSECT SELECT DISTINCT user.user_id FROM user JOIN tip ON user.user_id = tip.user_id WHERE tip.likes > 10;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 AND business.city = 'San Francisco' ORDER BY review.review_count DESC LIMIT 5;
SELECT business_id FROM business WHERE city = 'Их Тэнгэр' AND neighbourhood_name = 'Хохолдин тосгон';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.year = 2015 AND review.month = 10 ORDER BY review.rating DESC LIMIT 1;
SELECT business.name FROM business INNER JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 LIMIT 1;
SELECT business.name FROM business INNER JOIN review ON business.bid = review.business_id WHERE review.rating = 5 GROUP BY business.name ORDER BY COUNT(review.rid) DESC LIMIT 1;
SELECT business.name FROM business INNER JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'ᠬᠠᠩᠵᠧᠦ᠎' AND business.city = ' Ölän Nét'
SELECT business.name FROM business WHERE business.city = 'ᠬᠠᠩᠵᠧᠦ' AND business.rating >= 4.5 INTERSECT SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%ᠬᠣᠭᠣᠯᠠᠨ ᠭᠡᠷ%' LIMIT 1;
SELECT user.name FROM user JOIN tip ON user.user_id = tip.user_id WHERE tip.year = 2015 LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating = 5 ORDER BY review.review_count DESC LIMIT 1;
SELECT business.name FROM business INNER JOIN review ON business.bid = review.business_id WHERE review.rating > 3 GROUP BY business.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%ᠸᠠᠩ ᠶᠠᠨ%' AND business.name LIKE '%ᠰᠢᠩ ᠪᠠ ᠺᠧ%' LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.year = 2010 AND review.text LIKE '%ᠮᠢ ᠰᠢᠦᠸᠠᠢ%'
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.year = 2010 AND review.text LIKE '%MI SYUWAI%' LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.text LIKE '%ᠮᠢ ᠰᠢᠦᠸᠠᠢ%' AND review.text LIKE '%ᠳᠥᠷᠪᠡᠨ ᠰᠠᠷ᠎ᠠ%'
SELECT business.name FROM business INNER JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'ᠶᠦᠨᠨᠠᠨ' AND business.city = 'ᠬᠣᠭᠣᠯᠠᠨ ᠭᠡᠷ';
SELECT name FROM business WHERE rating >= 3.5 AND city = 'Chicago' LIMIT 1;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id GROUP BY business.name HAVING AVG(review.stars) > 3.5 LIMIT 3;
SELECT business.name FROM business WHERE business.city = 'Chicago' AND business.state = 'IL' LIMIT 1;
SELECT user.name FROM user JOIN review ON user.uid = review.user_id WHERE review.year = 2015 AND review.text LIKE '%ᠴᠢᠤᠸᠠᠨ ᠵᠢᠦᠢ ᠳᠧ%' LIMIT 1;
SELECT business.name FROM business JOIN category ON business.bid = category.business_id WHERE category.category_name = ' Chengdu ' AND business.city = ' Toub Tuergi ' AND business.state = ' Khölön Gür ';
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 ORDER BY review.year DESC, review.month DESC LIMIT 1;
SELECT neighbourhood_name FROM neighbourhood WHERE neighbourhood_name LIKE 'ᠵᠢᠭᠠᠬᠠᠨ%'
SELECT business_id FROM tip WHERE text LIKE '%ᠪᠠᠶᠠᠷᠲᠤ ᠴᠠᠢ%' INTERSECT SELECT business_id FROM review WHERE text LIKE '%ᠪᠠᠶᠠᠷᠲᠤ ᠴᠠᠢ%';
SELECT business.city FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 GROUP BY business.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT business_id FROM business ORDER BY review_count DESC LIMIT 1;
SELECT business.name FROM business INNER JOIN review ON business.bid = review.business_id WHERE review.year = 2014 AND review.month = '3月' AND review.rating >= 3 LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.year = 2010 AND review.rating = 5 LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.year = 2010 ORDER BY review.rating DESC LIMIT 1;
SELECT business.name FROM business INNER JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'ᠰᠢᠶᠠᠮᠧᠨ' AND business.name = 'ᠬᠠᠷᠠᠯᠲᠠ';
SELECT business.name FROM business INNER JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'Central' AND business.city = 'San Francisco' LIMIT 1;
SELECT COUNT(*) FROM review WHERE year = 2014;
SELECT business.full_address FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'ХӨТӨЛБӨР' AND business.city = 'ӨҮМҮН' AND business.rating > 3.5;
SELECT business.state, business.city FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.neighbourhood_name = 'ᠬᠢᠮᠳᠠ ᠦᠢᠯᠡᠳᠬᠡᠯ';
SELECT business_id FROM tip WHERE text LIKE '%Ми Сиуай%'
SELECT I'm sorry, but your request seems to be incomplete or contains non-English instructions that I cannot understand. Please provide a clear and complete English question or query that you would like me to translate into an SQLite SQL query.
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'ΣERGYN MANDULTA';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 ORDER BY review.review_count DESC LIMIT 5;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 ORDER BY review.review_count DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 AND business.city = 'San Francisco' ORDER BY review.year DESC LIMIT 3;
SELECT business.name FROM business JOIN category ON business.bid = category.business_id WHERE category.category_name = 'Chinese'
SELECT business.name FROM business INNER JOIN review ON business.business_id = review.business_id WHERE review.year = 2013 AND review.month = 5 LIMIT 5;
SELECT name FROM user WHERE uid IN (SELECT user_id FROM tip INTERSECT SELECT user_id FROM review) LIMIT 1;
SELECT business.state, AVG(business.review_count) AS average_reviews FROM business GROUP BY business.state ORDER BY average_reviews DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 AND review.year = 2023 AND review.month = 4 GROUP BY business.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE business.city = ' Chengdu' AND review.rating >= 3.5 AND business.rating < 4.0 LIMIT 1;
SELECT business.name FROM business WHERE business.rating >= 3.5 AND business.city = 'монгол улс' LIMIT 1;
SELECT DISTINCT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 AND business.city = 'San Francisco' LIMIT 5;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE business.city = 'Chicago' AND business.state = 'IL' AND review.rating > 3.5;
SELECT business.name FROM business INNER JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 AND review.year = 2023 LIMIT 3;
SELECT business.name FROM business INNER JOIN review ON business.bid = review.business_id WHERE review.rating = 5 GROUP BY business.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating = 5 AND review.year = 2023 AND review.month = 4 LIMIT 3;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating = 5 AND business.state = 'NY' ORDER BY review.review_count DESC LIMIT 1;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.rating > 3 ORDER BY review.review_count DESC LIMIT 5;
