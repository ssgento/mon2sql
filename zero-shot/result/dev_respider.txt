SELECT COUNT(*) FROM architect WHERE nationality = 'female';
SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name ASC;
SELECT MAX(bridge.length), architect.name FROM bridge JOIN architect ON bridge.architect_id = architect.id;
SELECT AVG(length_meters * 3.28084) FROM bridge;
SELECT name, built_year FROM mill WHERE architect_id = (SELECT id FROM architect WHERE nationality = 'Grondzeiler');
SELECT DISTINCT architect.name, architect.nationality FROM architect INNER JOIN mill ON mill.architect_id = architect.id;
SELECT DISTINCT mill.name FROM mill LEFT JOIN bridge ON mill.id = bridge.architect_id WHERE bridge.location != 'Donceel' OR bridge.location IS NULL;
SELECT DISTINCT mill.type FROM mill JOIN architect ON mill.architect_id = architect.id WHERE architect.nationality IN ('American', 'Canadian');
SELECT architect.id, architect.name FROM architect JOIN bridge ON architect.id = bridge.architect_id GROUP BY architect.id HAVING COUNT(bridge.id) >= 3;
SELECT architect.id, architect.name, architect.nationality FROM architect JOIN mill ON mill.architect_id = architect.id GROUP BY architect.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.id, a.name, a.gender FROM architect a WHERE a.id IN ( SELECT b.architect_id FROM bridge b GROUP BY b.architect_id HAVING COUNT(*) >= 2 ) OR a.id IN ( SELECT m.architect_id FROM mill m GROUP BY m.architect_id HAVING COUNT(*) >= 1 );
SELECT location FROM bridge WHERE name IN ('Kolob Arch', 'Rainbow Bridge');
SELECT mill.name FROM mill WHERE mill.name LIKE '%Moulin%';
SELECT DISTINCT mill.name FROM mill JOIN architect ON mill.architect_id = architect.id JOIN bridge ON architect.id = bridge.architect_id WHERE bridge.length_feet > 80;
SELECT location, COUNT(*) as count FROM mill GROUP BY location ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE location < '1850' );
SELECT bridge.name FROM bridge JOIN architect ON bridge.architect_id = architect.id WHERE architect.nationality = 'American' ORDER BY bridge.length_meters * 3.28084;
SELECT DISTINCT cinema.location FROM cinema WHERE cinema.cinema_id NOT IN ( SELECT schedule.cinema_id FROM schedule WHERE schedule.price > 800 );
SELECT DISTINCT cinema.location FROM cinema WHERE cinema.cinema_id IN ( SELECT schedule.cinema_id FROM schedule WHERE strftime('%Y', show_times_per_day) = '2010' ) AND cinema.cinema_id IN ( SELECT schedule.cinema_id FROM schedule WHERE strftime('%Y', show_times_per_day) = '2011' );
SELECT COUNT(*) FROM cinema;
SELECT COUNT(*) FROM cinema;
SELECT cinema.name, cinema.capacity, cinema.location FROM cinema;
SELECT location, cinema_id FROM cinema WHERE capacity > (SELECT AVG(capacity) FROM cinema);
SELECT name FROM cinema;
SELECT DISTINCT name FROM cinema;
SELECT cinema.name, cinema.opening_year FROM cinema ORDER BY cinema.opening_year DESC;
SELECT location, capacity FROM cinema ORDER BY capacity DESC LIMIT 1;
SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE name LIKE '%2011%' OR name LIKE '%2012%' OR name LIKE '%2013%' OR name LIKE '%2014%' OR name LIKE '%2015%' OR name LIKE '%2016%' OR name LIKE '%2017%' OR name LIKE '%2018%' OR name LIKE '%2019%' OR name LIKE '%2020%' OR name LIKE '%2021%' OR name LIKE '%2022%';
SELECT cinema.name, COUNT(*) as number_of_cinemas FROM cinema GROUP BY cinema.name;
SELECT location FROM cinema WHERE name LIKE '201%' GROUP BY location ORDER BY COUNT(*) DESC LIMIT 1;
SELECT cinema.location FROM cinema WHERE cinema.cinema_id IN ( SELECT cinema_id FROM schedule GROUP BY cinema_id HAVING COUNT(*) > 300 ) GROUP BY cinema.location HAVING COUNT(*) >= 2;
SELECT location FROM cinema GROUP BY location HAVING COUNT(cinema_id) >= 2 AND SUM(capacity) > 300;
SELECT title, director FROM film;
SELECT film.title, film.director FROM film;
SELECT DISTINCT director FROM film;
SELECT DISTINCT director FROM film;
SELECT director, COUNT(*) FROM film GROUP BY director;
SELECT cinema_id, date, COUNT(*) as total_show_times FROM schedule GROUP BY cinema_id, date;
SELECT film.title, MAX(schedule.price) FROM film JOIN schedule ON schedule.film_id = film.film_id GROUP BY film.title;
SELECT film.film_id, MAX(schedule.show_times_per_day) as highest_price FROM film JOIN schedule ON schedule.film_id = film.film_id GROUP BY film.film_id;
SELECT cinema.name, film.title, schedule.date, schedule.price FROM schedule JOIN film ON schedule.film_id = film.film_id JOIN cinema ON schedule.cinema_id = cinema.cinema_id
SELECT film.title, film.directed_by FROM film LEFT JOIN schedule ON film.film_id = schedule.film_id WHERE schedule.film_id IS NULL;
SELECT director FROM film INNER JOIN schedule ON film.film_id = schedule.film_id GROUP BY director ORDER BY COUNT(*) DESC LIMIT 1;
SELECT cinema.location FROM cinema WHERE cinema.cinema_id IN ( SELECT cinema_id FROM schedule GROUP BY cinema_id HAVING COUNT(cinema_id) > 1 AND AVG(show_times_per_day) > 300 )
SELECT location FROM cinema WHERE cinema_id IN ( SELECT cinema_id FROM schedule GROUP BY cinema_id HAVING COUNT(*) > 300 ) GROUP BY location HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM film WHERE title LIKE '%Dummy%';
SELECT COUNT(*) FROM film WHERE title LIKE '%Dummy%';
SELECT COUNT(*) FROM course;
SELECT COUNT(*) FROM course;
SELECT COUNT(*) FROM course WHERE hours > 2;
SELECT COUNT(*) FROM course WHERE hours > 2;
SELECT course.cid FROM course WHERE credits = 1;
SELECT course.cid FROM course WHERE credits = 1;
SELECT cname FROM course WHERE days = 'MTW';
SELECT course.cid FROM course WHERE days = 'MTW';
SELECT COUNT(*) FROM department WHERE dname = 'AS';
SELECT COUNT(*) FROM department WHERE dname LIKE 'AS%';
SELECT phone FROM department WHERE room = '268';
SELECT phone FROM department WHERE room = 268;
SELECT COUNT(DISTINCT student.stuid) FROM student JOIN enrolled_in ON student.stuid = enrolled_in.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE gradeconversion.gradepoint >= 3.0;
SELECT COUNT(DISTINCT stuid) FROM enrolled_in WHERE grade = 'B';
SELECT MAX(gradeconversion.grade), MIN(gradeconversion.grade) FROM gradeconversion;
SELECT MIN(grade), MAX(grade) FROM gradeconversion;
SELECT student.stuid, student.age, student.sex, student.major FROM student WHERE student.stuid LIKE '%a%';
SELECT first_name FROM student WHERE first_name LIKE '%a%';
SELECT fname, lname FROM faculty WHERE sex = 'M' AND building = 'NEB';
SELECT fname FROM faculty WHERE sex = 'M' AND building = 'NEB';
SELECT faculty.room FROM faculty JOIN member_of ON faculty.facid = member_of.facid WHERE faculty.sex = 'professor' AND faculty.building = 'NEB';
SELECT DISTINCT faculty.room FROM faculty JOIN member_of ON faculty.facid = member_of.facid WHERE faculty.sex = 'Professor' AND faculty.building = 'NEB';
SELECT dname FROM department WHERE dno IN (SELECT dno FROM minor_in WHERE dno IN (SELECT dno FROM faculty WHERE building = 'Mergenthaler'));
SELECT dname FROM department WHERE building = 'Mergenthaler';
SELECT course.* FROM course ORDER BY course.credits ASC;
SELECT course.cid, course.cname, course.days, course.hours, course.credits FROM course ORDER BY course.credits ASC;
SELECT course.name FROM course ORDER BY credits;
SELECT course.name FROM course ORDER BY course.credits;
SELECT student.age, student.stuid FROM student ORDER BY student.age DESC;
SELECT first_name FROM student ORDER BY age DESC;
SELECT last_name FROM student WHERE sex = 'F' ORDER BY age DESC;
SELECT last_name FROM student WHERE sex = 'female' ORDER BY age DESC;
SELECT last_name FROM faculty WHERE building = 'Barton' ORDER BY last_name ASC;
SELECT lname FROM faculty WHERE building = 'Barton' ORDER BY lname;
SELECT faculty.facid FROM faculty JOIN member_of ON faculty.facid = member_of.facid WHERE faculty.rank = 'Professor' ORDER BY faculty.facid ASC;
SELECT first_name FROM faculty WHERE rank = 'Professor' ORDER BY first_name;
SELECT dname FROM (SELECT department.dname, COUNT(*) as student_count FROM minor_in JOIN department ON minor_in.dno = department.dno GROUP BY department.dname ORDER BY student_count DESC LIMIT 1)
SELECT dname FROM department WHERE dno IN ( SELECT dno FROM minor_in GROUP BY dno ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT dname FROM department WHERE dno NOT IN (SELECT dno FROM minor_in);
SELECT dname FROM department WHERE dno NOT IN (SELECT dno FROM minor_in);
SELECT department.division FROM department JOIN ( SELECT department.dno, COUNT(*) as member_count FROM department JOIN member_of ON member_of.dno = department.dno GROUP BY department.dno ORDER BY member_count ASC LIMIT 1 ) as subquery ON subquery.dno = department.dno;
SELECT d.division FROM department d JOIN member_of m ON d.dno = m.dno GROUP BY d.division ORDER BY COUNT(*) ASC LIMIT 1;
SELECT COUNT(*) as faculty_count, dno FROM member_of GROUP BY dno ORDER BY faculty_count ASC LIMIT 1;
SELECT appt_type, COUNT(*) as count FROM member_of GROUP BY appt_type ORDER BY count ASC LIMIT 1;
SELECT f.fname, f.lname FROM faculty f JOIN ( SELECT c.instructor, COUNT(*) as course_count FROM course c GROUP BY c.instructor ORDER BY course_count DESC LIMIT 3 ) as top_instructors ON f.facid = top_instructors.instructor;
SELECT f.fname FROM faculty f JOIN course c ON f.facid = c.instructor GROUP BY f.fname ORDER BY COUNT(*) DESC LIMIT 3;
SELECT faculty.building FROM faculty JOIN course ON faculty.facid = course.instructor GROUP BY faculty.building ORDER BY COUNT(*) DESC LIMIT 1;
SELECT building FROM faculty INNER JOIN course ON faculty.facid = course.instructor GROUP BY faculty.facid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.cname FROM course c JOIN enrolled_in e ON c.cid = e.cid GROUP BY c.cname HAVING COUNT(e.stuid) >= 5;
SELECT cname FROM course WHERE cid IN (SELECT cid FROM enrolled_in GROUP BY cid HAVING COUNT(*) >= 5);
SELECT faculty.fname, faculty.lname FROM faculty INNER JOIN course ON faculty.facid = course.instructor WHERE course.cid = 'course name';
SELECT faculty.fname FROM course JOIN faculty ON course.instructor = faculty.facid WHERE course.cid = 'COMPUTER LITERACY';
SELECT department.dname, department.room FROM department JOIN course ON department.dno = course.dno WHERE course.cid = 'INTRODUCTION TO COMPUTER SCIENCE';
SELECT department.dname, department.room FROM department JOIN course ON department.dno = course.dno WHERE course.cid = 'INTRODUCTION TO COMPUTER SCIENCE';
SELECT student.fname, student.stuid, enrolled_in.grade FROM student INNER JOIN enrolled_in ON student.stuid = enrolled_in.stuid INNER JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade;
SELECT student.fname, gradeconversion.gradepoints FROM enrolled_in JOIN student ON enrolled_in.stuid = student.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade;
SELECT DISTINCT student.stuid FROM student JOIN enrolled_in ON student.stuid = enrolled_in.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE gradeconversion.grade_point >= 3.8;
SELECT DISTINCT stuid FROM enrolled_in WHERE grade >= 'B'
SELECT f.fname FROM faculty f JOIN member_of m ON f.facid = m.facid WHERE m.dno = 520;
SELECT faculty.fname, faculty.lname FROM faculty JOIN member_of ON member_of.facid = faculty.facid WHERE member_of.dno = 520;
SELECT student.fname, faculty.lname FROM student JOIN minor_in ON student.stuid = minor_in.stuid JOIN faculty ON student.stuid = faculty.stuid WHERE minor_in.dno = 140;
SELECT student.fname, student.lname FROM student JOIN minor_in ON student.stuid = minor_in.stuid WHERE minor_in.dno = 140;
SELECT faculty.lname FROM faculty JOIN member_of ON faculty.facid = member_of.facid JOIN department ON member_of.dno = department.dno WHERE department.dname = 'Computer Science';
SELECT faculty.lname FROM faculty JOIN member_of ON faculty.facid = member_of.facid JOIN department ON member_of.dno = department.dno WHERE department.dname = 'Computer Science';
SELECT AVG(gc.numericgrade) FROM student s JOIN enrolled_in ei ON s.stuid = ei.stuid JOIN gradeconversion gc ON ei.grade = gc.lettergrade WHERE s.lastname = 'Smith';
SELECT AVG(gc.gradepoint) FROM student s JOIN enrolled_in ei ON s.stuid = ei.stuid JOIN gradeconversion gc ON ei.grade = gc.lettergrade WHERE s.name LIKE '%Smith'
SELECT MAX(gradeconversion.grade_point), MIN(gradeconversion.grade_point) FROM student JOIN enrolled_in ON student.stuid = enrolled_in.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE student.city = 'NYC';
SELECT MAX(gradeconversion.gradepoints), MIN(gradeconversion.gradepoints) FROM student JOIN enrolled_in ON student.stuid = enrolled_in.stuid JOIN gradeconversion ON enrolled_in.grade = gradeconversion.lettergrade WHERE student.city = 'NYC';
SELECT course.cid FROM course WHERE (course.credits = 3 OR (course.credits = 1 AND course.hours = 4));
SELECT course.cid FROM course WHERE (course.credits = 3) OR (course.credits = 1 AND course.hours = 4);
SELECT division FROM department WHERE division IN ('AS', 'EN') AND building = 'NEB';
SELECT division, building FROM department WHERE division = 'AS' OR (division = 'EN' AND building = 'NEB');
SELECT student.fname FROM student LEFT JOIN enrolled_in ON student.stuid = enrolled_in.stuid WHERE enrolled_in.stuid IS NULL;
SELECT student.fname FROM student LEFT JOIN enrolled_in ON student.stuid = enrolled_in.stuid WHERE enrolled_in.stuid IS NULL;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT singer.name, singer.country, singer.age FROM singer ORDER BY singer.age DESC;
SELECT singer.singer_id, singer.country, singer.age FROM singer ORDER BY singer.age DESC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE name = 'France';
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE name LIKE '%France%';
SELECT singer.name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)
SELECT singer.name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, COUNT(*) FROM singer GROUP BY country;
SELECT country, COUNT(*) FROM singer GROUP BY country;
SELECT singer.name, concert.concert_name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE singer.age > (SELECT AVG(age) FROM singer)
SELECT song_name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id WHERE age > (SELECT AVG(age) FROM singer)
SELECT name, capacity FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;
SELECT MAX(average), AVG(average) FROM stadium;
SELECT AVG(average), MAX(highest) FROM stadium;
SELECT stadium_name, capacity FROM stadium ORDER BY average DESC LIMIT 1;
SELECT stadium_name, capacity FROM stadium WHERE average = (SELECT MAX(average) FROM stadium);
SELECT COUNT(*) FROM concert WHERE concert_name LIKE '%2014%' OR concert_name LIKE '%2015%';
SELECT COUNT(*) FROM concert WHERE concert_name LIKE '%2014%' OR concert_name LIKE '%2015%';
SELECT stadium.name, COUNT(concert.concert_id) FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
SELECT stadium.stadium_id, COUNT(concert.concert_id) AS number_of_concerts FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.stadium_id;
SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year > 2013 GROUP BY stadium.stadium_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT strftime('%Y', concert_name) as year, COUNT(*) as num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;
SELECT strftime('%Y', concert_name) as year, COUNT(*) as num_concerts FROM concert GROUP BY year ORDER BY num_concerts DESC LIMIT 1;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL;
SELECT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.concert_id IS NULL;
SELECT DISTINCT singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE (singer.age > 40 AND singer.is_male = TRUE) OR (singer.age < 30 AND singer.is_male = FALSE)
SELECT DISTINCT stadium.name FROM stadium LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year != 2014 OR concert.year IS NULL;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = 2014);
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert LEFT JOIN singer_in_concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY concert.concert_name, concert.theme;
SELECT singer.name, COUNT(concert.concert_id) as num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id GROUP BY singer.name;
SELECT singer.name, COUNT(singer_in_concert.concert_id) as num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.concert_name LIKE '%2014%';
SELECT singer.name FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id WHERE concert.concert_name LIKE '%2014%'
SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.concert_name LIKE '%Hey%'
SELECT singer.name, singer.country FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id JOIN concert ON singer_in_concert.concert_id = concert.concert_id JOIN stadium ON concert.stadium_id = stadium.stadium_id WHERE concert.concert_name LIKE '%Hey%'
SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015) GROUP BY stadium.name, stadium.location HAVING COUNT(DISTINCT concert.year) = 2;
SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015) GROUP BY stadium.name, stadium.location HAVING COUNT(DISTINCT concert.year) = 2;
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1);
SELECT COUNT(*) FROM premises;
SELECT DISTINCT premise_type FROM premises;
SELECT premise_details, premise_type FROM premises ORDER BY premise_type;
SELECT premise_type, COUNT(*) FROM premises GROUP BY premise_type;
SELECT Your question seems to be incomplete. However, based on the information provided, it seems you want to count the number of distinct mailshots for each product category. However, there is no information about the product categories in your tables. Assuming you have a column in the products table that represents the product category, you could use the following SQL query: ```sql SELECT products.product_category, COUNT(DISTINCT mailshot_campaigns.mailshot_id) FROM products JOIN order_items ON order_items.product_id = products.product_id JOIN mailshot_customers ON mailshot_customers.customer_id = order_items.order_id JOIN mailshot_campaigns ON mailshot_campaigns.mailshot_id = mailshot_customers.mailshot_id GROUP BY products.product_category; ``` This query will return each distinct product category along with the number of distinct mailshot_ids associated with that category. Please replace `products.product_category` with the actual column name that represents the product category in your products table.
SELECT customers.customer_name, customers.customer_phone FROM customers LEFT JOIN mailshot_customers ON customers.customer_id = mailshot_customers.customer_id WHERE mailshot_customers.customer_id IS NULL;
SELECT customers.customer_phone, customers.customer_id FROM mailshot_customers JOIN customers ON mailshot_customers.customer_id = customers.customer_id WHERE mailshot_customers.outcome_code = 'No Response';
SELECT mailshot_id, COUNT(*) as number_of_mailshots FROM mailshot_customers GROUP BY mailshot_id;
SELECT DISTINCT customers.customer_name FROM customers JOIN mailshot_customers ON customers.customer_id = mailshot_customers.customer_id JOIN mailshot_campaigns ON mailshot_customers.mailshot_id = mailshot_campaigns.mailshot_id JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.order_status_code = 'Order' GROUP BY customers.customer_name HAVING COUNT(DISTINCT mailshot_campaigns.mailshot_name) >= 2;
SELECT customers.customer_name FROM customers JOIN mailshot_customers ON customers.customer_id = mailshot_customers.customer_id GROUP BY customers.customer_name ORDER BY COUNT(mailshot_customers.mailshot_id) DESC LIMIT 1;
SELECT DISTINCT c.customer_name, c.customer_phone, c.customer_email FROM customers c JOIN mailshot_customers mc ON c.customer_id = mc.customer_id JOIN mailshot_campaigns m ON mc.mailshot_id = m.mailshot_id WHERE m.mailshot_name = 'Order' AND c.customer_id IN ( SELECT mc.customer_id FROM mailshot_customers mc JOIN mailshot_campaigns m ON mc.mailshot_id = m.mailshot_id WHERE m.mailshot_name = 'No Response' )
SELECT customer_addresses.premise_id, premises.premise_type FROM customer_addresses JOIN premises ON customer_addresses.premise_id = premises.premise_id;
SELECT DISTINCT premise_id FROM customer_addresses;
SELECT customer_orders.customer_id, customer_orders.order_shipping_charges FROM customer_orders WHERE customer_orders.order_status_code IN ('Cancelled', 'Paid');
SELECT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.shipping_method_code = 'FedEx' AND customer_orders.order_status_code = 'Paid';
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM accounts;
SELECT accounts.account_id, customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM accounts JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id JOIN customers_cards ON financial_transactions.card_id = customers_cards.card_id JOIN customers ON customers_cards.customer_id = customers.customer_id
SELECT accounts.account_id, customers.customer_id, accounts.account_name FROM accounts JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id JOIN customers_cards ON financial_transactions.card_id = customers_cards.card_id JOIN customers ON customers_cards.card_id = customers.customer_id;
SELECT accounts.other_account_details FROM accounts JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id WHERE financial_transactions.transaction_id = 338;
SELECT accounts.other_account_details FROM accounts JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id WHERE financial_transactions.transaction_id = 338;
SELECT customers.customer_last_name, customers.customer_phone FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.account_id = 162;
SELECT customers.customer_last_name, customers.customer_phone FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.account_id = 162;
SELECT COUNT(*) FROM customers JOIN customers_cards ON customers.customer_id = customers_cards.customer_id JOIN financial_transactions ON customers_cards.card_number = financial_transactions.card_id JOIN accounts ON financial_transactions.account_id = accounts.account_id WHERE customers.customer_last_name = 'Turcotte' AND customers.customer_first_name = 'Art';
SELECT COUNT(*) FROM accounts WHERE account_id IN ( SELECT account_id FROM financial_transactions WHERE card_id IN ( SELECT card_number FROM customers_cards WHERE customer_id IN ( SELECT customer_id FROM customers WHERE customer_last_name = 'Turcotte' AND customer_first_name = 'Art' ) ) );
SELECT customer_id, COUNT(account_id) FROM accounts GROUP BY customer_id;
SELECT customer_id, COUNT(account_id) FROM accounts GROUP BY customer_id;
SELECT customer_id, COUNT(*) as num_accounts FROM accounts GROUP BY customer_id ORDER BY num_accounts DESC LIMIT 1;
SELECT customer_id, COUNT(*) as num_accounts FROM accounts GROUP BY customer_id ORDER BY num_accounts DESC LIMIT 1;
SELECT customers.customer_id, customers.customer_last_name FROM customers JOIN customers_cards ON customers.customer_id = customers_cards.customer_id JOIN financial_transactions ON customers_cards.card_number = financial_transactions.card_id JOIN accounts ON financial_transactions.account_id = accounts.account_id GROUP BY customers.customer_id, customers.customer_last_name ORDER BY COUNT(accounts.account_id) ASC LIMIT 1;
SELECT customers.customer_id, customers.customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id, customers.customer_last_name ORDER BY COUNT(accounts.account_id) ASC LIMIT 1;
SELECT COUNT(*) FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.customer_id IS NULL;
SELECT COUNT(*) FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.customer_id IS NULL;
SELECT customers.customer_last_name, customers.customer_id FROM customers LEFT JOIN customers_cards ON customers.customer_id = customers_cards.customer_id LEFT JOIN financial_transactions ON customers_cards.card_id = financial_transactions.card_id LEFT JOIN accounts ON financial_transactions.account_id = accounts.account_id WHERE accounts.account_id IS NULL;
SELECT customer_last_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM accounts);
SELECT DISTINCT c.customer_last_name, c.customer_id FROM customers c JOIN customers_cards cc ON c.customer_id = cc.customer_id JOIN financial_transactions ft ON cc.card_number = ft.card_id JOIN accounts a ON ft.account_id = a.account_id WHERE a.account_id IS NOT NULL;
SELECT customers.customer_last_name FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id;
SELECT COUNT(DISTINCT customers.customer_first_name) FROM customers INNER JOIN accounts ON customers.customer_first_name = accounts.account_name WHERE accounts.account_id IS NOT NULL;
SELECT COUNT(DISTINCT customers.customer_email) FROM customers INNER JOIN financial_transactions ON customers.customer_email = financial_transactions.customer_email INNER JOIN accounts ON financial_transactions.account_id = accounts.account_id;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT customer_id, customer_last_name, customer_phone FROM customers;
SELECT customer_id, customer_last_name, customer_phone FROM customers;
SELECT customer_phone, customer_email FROM customers WHERE customer_last_name = 'Feest' AND customer_first_name = 'Aniyah';
SELECT customer_phone, customer_email FROM customers WHERE customer_last_name = 'Feest' AND customer_first_name = 'Aniyah';
SELECT COUNT(*) FROM customers_cards;
SELECT COUNT(*) FROM customers_cards;
SELECT customers_cards.card_id, accounts.customer_id, customers_cards.card_type_code, customers_cards.card_number FROM customers_cards JOIN financial_transactions ON financial_transactions.card_id = customers_cards.card_id JOIN accounts ON financial_transactions.account_id = accounts.account_id WHERE financial_transactions.card_id IS NOT NULL AND financial_transactions.account_id IS NOT NULL;
SELECT customers_cards.customer_id, customers_cards.card_type_code, customers_cards.card_id FROM customers_cards;
SELECT customers_cards.date_valid_to, customers_cards.date_valid_from FROM customers_cards WHERE customers_cards.card_number = '4560596484842';
SELECT date_valid_from, date_valid_to FROM customers_cards WHERE card_number = '4560596484842';
SELECT customers.customer_last_name, customers.customer_phone FROM customers JOIN customers_cards ON customers.customer_id = customers_cards.customer_id WHERE customers_cards.card_number = '4560596484842';
SELECT customer_last_name, customer_phone FROM customers WHERE customer_id IN ( SELECT customer_id FROM customers_cards WHERE card_id = '4560596484842' )
SELECT COUNT(*) FROM customers_cards WHERE customer_id IN (SELECT customer_id FROM customers WHERE customer_last_name = 'Turcotte' AND customer_first_name = 'Art');
SELECT COUNT(*) FROM customers_cards WHERE card_id IN ( SELECT card_id FROM financial_transactions WHERE account_id IN ( SELECT account_id FROM accounts WHERE customer_id IN ( SELECT customer_id FROM customers WHERE customer_last_name = 'Turcotte' AND customer_first_name = 'Art' ) ) );
SELECT COUNT(*) FROM customers_cards WHERE transaction_type = 'debit';
SELECT COUNT(*) FROM customers_cards JOIN financial_transactions ON financial_transactions.card_id = customers_cards.card_id WHERE financial_transactions.transaction_type = 'Debit';
SELECT COUNT(*) FROM customers JOIN customers_cards ON customers.customer_phone = customers_cards.card_id WHERE customers.customer_first_name = 'Blanche' AND customers.customer_last_name = 'Huels';
SELECT COUNT(*) FROM customers JOIN customers_cards ON customers.customer_id = customers_cards.card_id WHERE customers.customer_last_name = 'Huels' AND customers.customer_last_name = 'Blanche';
SELECT customer_id, COUNT(card_id) AS number_of_cards FROM customers_cards GROUP BY customer_id;
SELECT customer_id, COUNT(card_id) FROM customers_cards GROUP BY customer_id;
SELECT customer_id, COUNT(*) as card_count FROM customers_cards GROUP BY customer_id ORDER BY card_count DESC LIMIT 1;
SELECT customer_id, COUNT(card_id) as card_count FROM customers_cards GROUP BY customer_id ORDER BY card_count DESC LIMIT 1;
SELECT customers.customer_id, customers.customer_last_name, customers.customer_first_name FROM customers JOIN customers_cards ON customers.customer_id = customers_cards.customer_id GROUP BY customers.customer_id HAVING COUNT(customers_cards.card_id) >= 2;
SELECT c.customer_id, c.customer_last_name FROM customers c JOIN customers_cards cc ON c.customer_id = cc.customer_id GROUP BY c.customer_id, c.customer_last_name HAVING COUNT(cc.card_id) >= 2;
SELECT c.customer_id, c.customer_last_name, c.customer_first_name FROM customers c JOIN accounts a ON c.customer_id = a.customer_id GROUP BY c.customer_id, c.customer_last_name, c.customer_first_name ORDER BY COUNT(a.account_id) ASC LIMIT 1;
SELECT customer_id, customer_last_name FROM customers WHERE customer_id IN ( SELECT customer_id FROM accounts GROUP BY customer_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM accounts GROUP BY customer_id ORDER BY COUNT(*) LIMIT 1 ) )
SELECT card_type, COUNT(*) as number_of_cards FROM customers_cards GROUP BY card_type;
SELECT card_type, COUNT(*) as count FROM customers_cards GROUP BY card_type;
SELECT card_type, COUNT(*) as count FROM customers_cards GROUP BY card_type ORDER BY count DESC LIMIT 1;
SELECT card_type FROM customers_cards GROUP BY card_type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT card_type_code FROM customers_cards GROUP BY card_type_code HAVING COUNT(card_id) >= 5;
SELECT card_number FROM customers_cards GROUP BY card_number HAVING COUNT(card_number) >= 5;
SELECT card_type, COUNT(DISTINCT customer_id) as num_customers FROM customers_cards GROUP BY card_type;
SELECT card_number, COUNT(DISTINCT customer_id) as customer_count FROM customers_cards GROUP BY card_number;
SELECT customer_id, customer_last_name FROM customers WHERE customer_id NOT IN (SELECT card_id FROM customers_cards);
SELECT customers.customer_id, customers.customer_last_name FROM customers LEFT JOIN customers_cards ON customers.customer_id = customers_cards.card_id WHERE customers_cards.card_id IS NULL;
SELECT DISTINCT card_type_code FROM customers_cards;
SELECT Your question seems to be incomplete. The table "customers_cards" does not contain a column named "card_type". If "card_type" is a column in another table, please provide the table structure. Otherwise, please provide more context or clarify your question.
SELECT COUNT(DISTINCT card_number) FROM customers_cards;
SELECT COUNT(DISTINCT card_number) FROM customers_cards;
SELECT DISTINCT transaction_id FROM financial_transactions;
SELECT DISTINCT transaction_id FROM financial_transactions;
SELECT COUNT(DISTINCT transaction_id) FROM financial_transactions;
SELECT COUNT(DISTINCT transaction_id) FROM financial_transactions;
SELECT AVG(transaction_amount), SUM(transaction_amount) FROM financial_transactions;
SELECT AVG(transaction_amount), SUM(transaction_amount) FROM financial_transactions;
SELECT card_type, COUNT(transaction_id) as num_transactions FROM financial_transactions JOIN customers_cards ON financial_transactions.card_id = customers_cards.card_id GROUP BY card_type;
SELECT card_type_code, COUNT(transaction_id) FROM financial_transactions JOIN customers_cards ON financial_transactions.card_id = customers_cards.card_id GROUP BY card_type_code;
SELECT transaction_type, COUNT(*) FROM financial_transactions GROUP BY transaction_type;
SELECT transaction_type, COUNT(*) as transaction_count FROM financial_transactions GROUP BY transaction_type;
SELECT transaction_type FROM ( SELECT transaction_type, SUM(transaction_amount) as total_amount FROM financial_transactions GROUP BY transaction_type ORDER BY total_amount DESC LIMIT 1 )
SELECT transaction_id, SUM(transaction_amount) as total_amount FROM financial_transactions GROUP BY transaction_id ORDER BY total_amount DESC LIMIT 1;
SELECT accounts.account_id, COUNT(financial_transactions.transaction_id) AS number_of_transactions FROM accounts LEFT JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.account_id;
SELECT account_id, COUNT(*) as transaction_count FROM financial_transactions GROUP BY account_id;
SELECT documents.document_name, COUNT(*) as access_count FROM documents LEFT JOIN document_sections ON document_sections.document_code = documents.document_code LEFT JOIN document_sections_images ON document_sections_images.section_id = document_sections.section_id LEFT JOIN document_functional_areas ON document_functional_areas.document_code = documents.document_code GROUP BY documents.document_name ORDER BY documents.document_name ASC;
SELECT documents.document_name, COUNT(*) as access_count FROM documents JOIN document_sections ON document_sections.document_code = documents.document_code JOIN document_sections_images ON document_sections_images.section_id = document_sections.section_id JOIN document_functional_areas ON document_functional_areas.document_code = documents.document_code GROUP BY documents.document_name ORDER BY documents.document_name ASC;
SELECT document_name, COUNT(*) as access_count FROM documents GROUP BY document_name ORDER BY access_count DESC LIMIT 1;
SELECT document_name, COUNT(*) as access_count FROM documents GROUP BY document_name ORDER BY access_count DESC LIMIT 1;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING COUNT(*) > 4;
SELECT document_code FROM documents GROUP BY document_code HAVING COUNT(*) >= 2;
SELECT SUM(access_count) FROM documents WHERE document_structure_code = ( SELECT document_structure_code FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT SUM(access_count) FROM documents WHERE document_structure_code IN ( SELECT document_structure_code FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT AVG(access_count) FROM documents;
SELECT AVG(access_count) FROM documents;
SELECT documents.document_name, documents.access_count FROM documents ORDER BY documents.access_count ASC LIMIT 1;
SELECT document_structures.document_structure_description FROM documents JOIN document_sections ON documents.document_code = document_sections.document_code JOIN document_structures ON documents.document_structure_code = document_structures.document_structure_code WHERE documents.access_count = (SELECT MIN(access_count) FROM documents) LIMIT 1;
SELECT document_structure_code FROM documents WHERE document_name = 'David CV';
SELECT document_structure_code FROM documents WHERE document_name = 'David CV';
SELECT document_name FROM documents WHERE document_structure_code IN ( SELECT document_structure_code FROM document_structures ORDER BY document_structure_code DESC LIMIT 3 ) AND document_code IN ( SELECT document_code FROM documents ORDER BY access_count DESC LIMIT 3 );
SELECT document_name FROM documents WHERE document_structure_code IN ( SELECT document_structure_code FROM document_structures GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 3 ) AND document_name IN ( SELECT document_name FROM documents GROUP BY document_name ORDER BY COUNT(*) DESC LIMIT 3 );
SELECT document_name FROM documents WHERE access_count > 10000;
SELECT document_code FROM documents WHERE document_code NOT IN (SELECT document_code FROM documents WHERE access_count > 10000)
SELECT section_code FROM documents JOIN document_sections ON documents.document_code = document_sections.document_code WHERE documents.document_code = 'David CV';
SELECT section_title FROM document_sections WHERE document_code IN (SELECT document_code FROM documents WHERE document_name = 'David CV')
SELECT documents.document_code FROM documents LEFT JOIN document_sections ON documents.document_code = document_sections.document_code WHERE document_sections.section_id IS NULL;
SELECT document_code FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)
SELECT user_login, password FROM users WHERE role_code = ( SELECT role_code FROM users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT user_login, password FROM users WHERE role_code IN ( SELECT role_code FROM users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT AVG(document_sections_images.access_count) FROM documents JOIN document_functional_areas ON document_functional_areas.document_code = documents.document_code JOIN functional_areas ON document_functional_areas.functional_area_code = functional_areas.functional_area_code JOIN document_sections_images ON documents.document_code = document_sections_images.document_code WHERE functional_areas.functional_area_description = 'Acknowledgement';
SELECT AVG(access_count) FROM documents JOIN document_functional_areas ON documents.document_code = document_functional_areas.document_code JOIN functional_areas ON document_functional_areas.functional_area_code = functional_areas.parent_functional_area_code WHERE functional_areas.functional_area_description = 'Acknowledgement'
SELECT DISTINCT documents.document_code FROM documents LEFT JOIN document_sections ON documents.document_code = document_sections.document_code LEFT JOIN document_sections_images ON document_sections.section_id = document_sections_images.section_id WHERE document_sections_images.image_id IS NULL;
SELECT document_code FROM documents WHERE document_code NOT IN ( SELECT DISTINCT document_code FROM document_sections JOIN document_sections_images ON document_sections.section_id = document_sections_images.section_id );
SELECT documents.document_code FROM documents JOIN document_sections ON documents.document_code = document_sections.document_code GROUP BY documents.document_code ORDER BY COUNT(document_sections.section_id) DESC LIMIT 1;
SELECT document_name FROM documents JOIN ( SELECT document_code, COUNT(*) as section_count FROM document_sections GROUP BY document_code ORDER BY section_count DESC LIMIT 1 ) as most_sections ON documents.document_code = most_sections.document_code;
SELECT document_code FROM documents WHERE document_code LIKE '%CV%';
SELECT document_code FROM documents WHERE document_code LIKE '%CV%';
SELECT COUNT(*) FROM users WHERE role_code = 'logged_in';
SELECT COUNT(*) FROM users WHERE role_code = 'logged_in';
SELECT roles.role_code, COUNT(*) as count FROM users JOIN roles ON users.role_code = roles.role_code GROUP BY roles.role_code ORDER BY count DESC LIMIT 1;
SELECT roles.role_code, COUNT(*) as count FROM users JOIN roles ON users.role_code = roles.role_code GROUP BY roles.role_code ORDER BY count DESC LIMIT 1;
SELECT AVG(access_count) FROM documents WHERE document_structure_code = (SELECT document_structure_code FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) ASC LIMIT 1);
SELECT AVG(access_count) FROM documents WHERE document_structure_code = ( SELECT document_structure_code FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) LIMIT 1 )
SELECT images.image_url, images.image_alt_text FROM images ORDER BY images.image_alt_text;
SELECT images.image_url, images.image_alt_text FROM images ORDER BY images.image_alt_text ASC;
SELECT roles.role_description, COUNT(users.user_id) as user_count FROM roles LEFT JOIN users ON users.role_code = roles.role_code GROUP BY roles.role_description;
SELECT roles.role_description, COUNT(users.user_id) as user_count FROM users JOIN roles ON users.role_code = roles.role_code GROUP BY roles.role_description;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING COUNT(*) > 2;
SELECT document_structure_code FROM documents GROUP BY document_structure_code HAVING COUNT(document_code) > 2;
SELECT COUNT(*) FROM courses;
SELECT COUNT(*) FROM courses;
SELECT courses.course_description FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id WHERE course_authors_and_tutors.personal_name = 'database'
SELECT courses.course_description FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id WHERE courses.course_description = 'database'
SELECT address_line_1 FROM course_authors_and_tutors WHERE author_tutor_atb LIKE '%Cathrine%'
SELECT address_line_1 FROM course_authors_and_tutors WHERE author_tutor_atb LIKE '%Cathrine%'
SELECT login_name FROM course_authors_and_tutors;
SELECT author_id, login_name FROM course_authors_and_tutors;
SELECT author_tutor_atb AS login_name, family_name FROM course_authors_and_tutors;
SELECT author_tutor_atb AS login_name, family_name FROM course_authors_and_tutors;
SELECT student_course_enrolment.date_of_completion, students.date_of_registration FROM student_course_enrolment INNER JOIN students ON student_course_enrolment.student_id = students.student_id;
SELECT date_of_completion, date_of_registration FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id;
SELECT COUNT(DISTINCT student_course_enrolment.student_id) FROM student_course_enrolment INNER JOIN students ON student_course_enrolment.student_id = students.student_id;
SELECT COUNT(DISTINCT student_course_enrolment.student_id) FROM student_course_enrolment JOIN students ON student_course_enrolment.student_id = students.student_id;
SELECT COUNT(DISTINCT course_id) FROM student_course_enrolment;
SELECT COUNT(DISTINCT sc.course_id) FROM student_course_enrolment sc WHERE sc.student_id IN (SELECT student_id FROM students)
SELECT date_of_enrolment FROM student_tests_taken JOIN student_course_enrolment ON student_tests_taken.registration_id = student_course_enrolment.registration_id WHERE test_result = 'Pass';
SELECT date_of_enrolment FROM student_tests_taken JOIN student_course_enrolment ON student_tests_taken.registration_id = student_course_enrolment.registration_id WHERE test_result = 'Pass';
SELECT COUNT(*) FROM student_tests_taken WHERE result = 'Fail';
SELECT COUNT(*) FROM student_tests_taken WHERE result = 'Fail';
SELECT family_name, student_id FROM students WHERE family_name = 'Ward';
SELECT course_authors_and_tutors.login_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id JOIN course_authors_and_tutors ON student_course_enrolment.course_id = course_authors_and_tutors.author_id WHERE students.family_name = 'Ward';
SELECT MAX(date_of_registration) FROM students WHERE family_name IN ('Jaskolski', 'Langosh');
SELECT MAX(date_of_registration) FROM students WHERE family_name IN ('Jaskolski', 'Langosh');
SELECT COUNT(*) FROM students WHERE middle_name LIKE '%son%' OR family_name LIKE '%son%';
SELECT COUNT(*) FROM students WHERE middle_name LIKE '%son%' OR family_name LIKE '%son%';
SELECT subject_name FROM subjects;
SELECT subject_id FROM subjects;
SELECT author_tutor_atb, author_id, password, login_name FROM course_authors_and_tutors ORDER BY login_name ASC;
SELECT author_tutor_atb, login_name, password FROM course_authors_and_tutors ORDER BY author_tutor_atb ASC;
SELECT students.family_name, students.middle_name FROM students ORDER BY students.family_name ASC;
SELECT students.family_name, students.student_id FROM students ORDER BY students.family_name ASC;
SELECT test_result, COUNT(*) as count FROM student_tests_taken GROUP BY test_result ORDER BY count DESC;
SELECT test_result, COUNT(DISTINCT registration_id) as number_of_students FROM student_tests_taken GROUP BY test_result;
SELECT course_authors_and_tutors.login_name FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id WHERE courses.course_name = 'advanced database';
SELECT course_authors_and_tutors.login_name FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id JOIN subjects ON courses.subject_id = subjects.subject_id WHERE subjects.subject_name = 'advanced database' AND courses.course_name = 'advanced database';
SELECT course_authors_and_tutors.address_line_1 FROM course_authors_and_tutors JOIN courses ON course_authors_and_tutors.author_id = courses.author_id WHERE courses.course_name IN ('operating system', 'data structure')
SELECT course_authors_and_tutors.author_tutor_atb FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id JOIN subjects ON courses.subject_id = subjects.subject_id WHERE subjects.subject_name IN ('operating system', 'data structure');
SELECT course_authors_and_tutors.personal_name, course_authors_and_tutors.family_name, course_authors_and_tutors.author_tutor_atb FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id GROUP BY courses.author_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT course_authors_and_tutors.personal_name, course_authors_and_tutors.family_name, course_authors_and_tutors.author_tutor_atb FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_tutor_atb GROUP BY course_authors_and_tutors.author_tutor_atb ORDER BY COUNT(courses.course_id) DESC LIMIT 1;
SELECT course_authors_and_tutors.author_id, course_authors_and_tutors.author_tutor_atb FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id GROUP BY course_authors_and_tutors.author_id HAVING COUNT(courses.course_id) >= 2;
SELECT author_id, author_tutor_atb FROM course_authors_and_tutors WHERE author_id IN ( SELECT author_id FROM courses GROUP BY author_id HAVING COUNT(*) >= 2 )
SELECT courses.course_description FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id WHERE course_authors_and_tutors.author_tutor_atb = 'Julio'
SELECT courses.course_name FROM courses JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id WHERE course_authors_and_tutors.author_tutor_atb = 'Julio';
SELECT courses.course_name, courses.course_description FROM courses JOIN subjects ON courses.subject_id = subjects.subject_id WHERE subjects.subject_name = 'Computer Science';
SELECT courses.course_name, courses.course_description FROM courses JOIN subjects ON courses.subject_id = subjects.subject_id WHERE subjects.subject_name = 'Computer Science';
SELECT subjects.subject_id, subjects.subject_name, COUNT(courses.course_id) as num_courses FROM subjects LEFT JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name;
SELECT subjects.subject_id, subjects.subject_name, COUNT(courses.course_id) as num_courses FROM subjects LEFT JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name;
SELECT subjects.subject_id, subjects.subject_name, COUNT(courses.course_id) as course_count FROM subjects JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name ORDER BY course_count ASC;
SELECT subjects.subject_name, subjects.subject_id, COUNT(courses.course_id) as course_count FROM subjects JOIN courses ON subjects.subject_id = courses.subject_id GROUP BY subjects.subject_id, subjects.subject_name ORDER BY course_count ASC;
SELECT student_course_enrolment.date_of_enrollment FROM student_course_enrolment JOIN courses ON student_course_enrolment.course_id = courses.course_id WHERE courses.course_description = 'Spanish';
SELECT student_course_enrolment.date_of_completion FROM student_course_enrolment JOIN courses ON student_course_enrolment.course_id = courses.course_id WHERE courses.course_name = 'Spanish';
SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM student_course_enrolment GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT courses.course_name FROM student_course_enrolment JOIN courses ON student_course_enrolment.course_id = courses.course_id GROUP BY courses.course_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM student_course_enrolment GROUP BY course_id HAVING COUNT(student_id) = 1 )
SELECT courses.course_name FROM student_course_enrolment JOIN courses ON student_course_enrolment.course_id = courses.course_id GROUP BY courses.course_id HAVING COUNT(student_course_enrolment.student_id) = 1;
SELECT courses.course_description, course_authors_and_tutors.personal_name FROM courses JOIN student_course_enrolment ON courses.course_id = student_course_enrolment.course_id JOIN course_authors_and_tutors ON courses.author_id = course_authors_and_tutors.author_id GROUP BY courses.course_id HAVING COUNT(student_course_enrolment.student_id) > 2;
SELECT courses.course_name, courses.course_description FROM courses JOIN student_course_enrolment ON courses.course_id = student_course_enrolment.course_id GROUP BY courses.course_id HAVING COUNT(student_course_enrolment.student_id) > 2;
SELECT courses.course_name, COUNT(student_course_enrolment.student_id) AS number_of_students FROM courses JOIN student_course_enrolment ON student_course_enrolment.course_id = courses.course_id GROUP BY courses.course_name;
SELECT courses.course_name, COUNT(student_course_enrolment.student_id) AS number_of_enrolled_students FROM courses JOIN student_course_enrolment ON student_course_enrolment.course_id = courses.course_id GROUP BY courses.course_name;
SELECT student_course_enrolment.date_of_completion FROM student_tests_taken JOIN student_course_enrolment ON student_tests_taken.registration_id = student_course_enrolment.registration_id WHERE student_tests_taken.result = 'Pass';
SELECT student_course_enrolment.date_of_completion FROM student_tests_taken JOIN student_course_enrolment ON student_tests_taken.registration_id = student_course_enrolment.registration_id WHERE student_tests_taken.result = 'Pass';
SELECT date_test_taken FROM student_tests_taken WHERE result = 'Fail';
SELECT date_test_taken FROM student_tests_taken WHERE result = 'Fail';
SELECT student_course_enrolment.date_of_enrolment, student_course_enrolment.date_of_completion FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id WHERE students.personal_name = 'Karson';
SELECT student_course_enrolment.date_of_enrolment, student_course_enrolment.date_of_completion FROM student_course_enrolment JOIN students ON student_course_enrolment.registration_id = students.student_id WHERE students.personal_name = 'Karson';
SELECT students.date_of_registration, student_course_enrolment.date_of_completion FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id WHERE students.family_name = 'Zieme' AND students.personal_name = 'Bernie';
SELECT student_course_enrolment.date_of_completion FROM student_course_enrolment JOIN students ON student_course_enrolment.student_id = students.student_id WHERE students.family_name = 'Zieme' AND students.personal_name = 'Bernie';
SELECT students.student_id, students.login_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id GROUP BY students.student_id, students.login_name ORDER BY COUNT(student_course_enrolment.course_id) DESC LIMIT 1;
SELECT students.student_id, course_authors_and_tutors.login_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id JOIN course_authors_and_tutors ON students.student_id = course_authors_and_tutors.login_name GROUP BY students.student_id ORDER BY COUNT(student_course_enrolment.course_id) DESC LIMIT 1;
SELECT students.student_id, students.personal_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id GROUP BY students.student_id, students.personal_name HAVING COUNT(student_course_enrolment.registration_id) >= 2;
SELECT students.student_id, students.personal_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id GROUP BY students.student_id, students.personal_name HAVING COUNT(student_course_enrolment.course_id) >= 2;
SELECT students.student_id, students.middle_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id GROUP BY students.student_id, students.middle_name HAVING COUNT(student_course_enrolment.registration_id) <= 2;
SELECT students.student_id, students.middle_name FROM students JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id GROUP BY students.student_id, students.middle_name HAVING COUNT(student_course_enrolment.course_id) <= 2;
SELECT DISTINCT students.personal_name FROM students LEFT JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id WHERE student_course_enrolment.student_id IS NULL;
SELECT students.personal_name FROM students LEFT JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id WHERE student_course_enrolment.student_id IS NULL;
SELECT COUNT(*) FROM students LEFT JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id WHERE student_course_enrolment.registration_id IS NULL;
SELECT COUNT(*) FROM students LEFT JOIN student_course_enrolment ON students.student_id = student_course_enrolment.student_id WHERE student_course_enrolment.student_id IS NULL;
SELECT DISTINCT personal_name FROM ( SELECT personal_name FROM course_authors_and_tutors INTERSECT SELECT personal_name FROM students )
SELECT personal_name FROM course_authors_and_tutors WHERE personal_name IN (SELECT personal_name FROM students);
SELECT middle_name FROM students INTERSECT SELECT middle_name FROM course_authors_and_tutors;
SELECT DISTINCT middle_name FROM students UNION SELECT DISTINCT login_name FROM course_authors_and_tutors;
SELECT COUNT(*) FROM farm;
SELECT COUNT(*) FROM farm;
SELECT SUM(working_horses) FROM farm ORDER BY SUM(working_horses) ASC;
SELECT farm_id, SUM(working_horses) as total_horses FROM farm GROUP BY farm_id ORDER BY total_horses ASC;
SELECT DISTINCT hosts FROM farm_competition WHERE competition_id NOT IN ( SELECT competition_id FROM competition_record WHERE rank = 'Aliens' )
SELECT DISTINCT hosts FROM farm_competition WHERE competition_id NOT IN ( SELECT competition_id FROM competition_record WHERE rank = 'Aliens' )
SELECT DISTINCT competition_id, host_city_id, hosts FROM farm_competition ORDER BY year ASC;
SELECT competition_theme FROM farm_competition ORDER BY year ASC;
SELECT AVG(total_horses) FROM farm WHERE total_horses > 5000;
SELECT AVG(working_horses) FROM farm WHERE total_cattle > 5000;
SELECT MAX(total_horses), MIN(total_horses) FROM farm;
SELECT MAX(total_horses), MIN(total_horses) FROM farm;
SELECT COUNT(DISTINCT status) FROM city;
SELECT COUNT(DISTINCT status) FROM table_name;
SELECT city.status FROM city ORDER BY city.population DESC;
SELECT city.official_name FROM city ORDER BY city.population DESC;
SELECT status, official_name FROM city ORDER BY population DESC LIMIT 1;
SELECT city.status, city.population FROM city ORDER BY city.population DESC LIMIT 1;
SELECT year, official_name FROM city JOIN farm_competition ON city.city_id = farm_competition.host_city_id
SELECT city.status, city.population, city.area_km_2, farm_competition.theme, farm_competition.hosts FROM city JOIN farm_competition ON city.city_id = farm_competition.host_city_id;
SELECT city.official_name FROM city JOIN farm_competition ON city.city_id = farm_competition.host_city_id GROUP BY city.official_name HAVING COUNT(DISTINCT farm_competition.competition_id) > 1;
SELECT DISTINCT city.official_name FROM city JOIN farm_competition ON city.city_id = farm_competition.host_city_id GROUP BY city.official_name HAVING COUNT(farm_competition.competition_id) > 1;
SELECT city.status FROM city JOIN farm_competition ON city.city_id = farm_competition.host_city_id GROUP BY city.status ORDER BY COUNT(*) DESC LIMIT 1;
SELECT city.status FROM city JOIN ( SELECT host_city_id, COUNT(*) as competition_count FROM farm_competition GROUP BY host_city_id ORDER BY competition_count DESC LIMIT 1 ) AS most_hosted_city ON city.city_id = most_hosted_city.host_city_id;
SELECT theme FROM farm_competition WHERE host_city_id IN (SELECT city_id FROM city WHERE population > 1000);
SELECT theme FROM farm_competition WHERE host_city_id IN (SELECT city_id FROM city WHERE population > 1000);
SELECT CASE WHEN population > 1000000 THEN 'Large' WHEN population > 100000 THEN 'Medium' ELSE 'Small' END AS city_status, AVG(population) AS average_population FROM city GROUP BY city_status;
SELECT city.official_name, city.population, CASE WHEN city.population > 1000000 THEN 'Large' WHEN city.population BETWEEN 500000 AND 1000000 THEN 'Medium' ELSE 'Small' END AS city_status, AVG(city.population) OVER () AS average_population FROM city JOIN farm_competition ON farm_competition.host_city_id = city.city_id JOIN competition_record ON competition_record.competition_id = farm_competition.competition_id JOIN farm ON farm.farm_id = competition_record.farm_id;
SELECT status, COUNT(*) as number_of_cities FROM city GROUP BY status ORDER BY number_of_cities DESC;
SELECT city.official_name, COUNT(*) as frequency FROM city JOIN farm_competition ON city.city_id = farm_competition.host_city_id GROUP BY city.official_name ORDER BY frequency ASC;
SELECT status, COUNT(*) as count FROM city GROUP BY status ORDER BY count DESC LIMIT 1;
SELECT status, COUNT(*) as count FROM city GROUP BY status ORDER BY count DESC LIMIT 1;
SELECT city.status FROM city LEFT JOIN farm_competition ON city.city_id = farm_competition.host_city_id WHERE farm_competition.competition_id IS NULL;
SELECT DISTINCT city.official_name FROM city LEFT JOIN farm_competition ON city.city_id = farm_competition.host_city_id WHERE farm_competition.competition_id IS NULL;
SELECT city.official_name, city.population, COUNT(farm_competition.competition_id) as num_competitions FROM city JOIN farm_competition ON city.city_id = farm_competition.host_city_id WHERE city.population > 1500 AND city.population < 500 GROUP BY city.city_id;
SELECT status FROM city WHERE population > 1500 INTERSECT SELECT status FROM city WHERE population < 500;
SELECT city.official_name FROM city WHERE city.population > 1500 OR city.population < 500;
SELECT city_id FROM city WHERE population > 1500 OR population < 500;
SELECT city.census_ranking FROM city WHERE city.official_name != 'Village';
SELECT census_ranking FROM city WHERE official_name NOT LIKE '%Village%';
SELECT COUNT(*) FROM flight WHERE velocity > 200;
SELECT flight.id, flight.date, flight.pilot FROM flight ORDER BY flight.altitude;
SELECT id, country, city, name FROM airport ORDER BY name ASC;
SELECT MAX(equity_shareholding) FROM operate_company;
SELECT flight.velocity FROM flight JOIN operate_company ON flight.company_id = operate_company.id WHERE operate_company.principal_activities = 'Thompson';
SELECT DISTINCT operate_company.name, operate_company.type FROM operate_company INNER JOIN flight ON operate_company.id = flight.company_id;
SELECT name FROM airport WHERE city != 'Iceland';
SELECT DISTINCT type FROM operate_company WHERE id IN ( SELECT company_id FROM flight WHERE velocity < 200 );
SELECT operate_company.id, operate_company.name FROM operate_company JOIN flight ON operate_company.id = flight.company_id GROUP BY operate_company.id, operate_company.name HAVING COUNT(flight.id) > 1;
SELECT airport.id, airport.name, airport.iata FROM flight JOIN airport ON flight.airport_id = airport.id GROUP BY airport.id, airport.name, airport.iata ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT flight.pilot FROM flight JOIN airport ON flight.airport_id = airport.id WHERE airport.city = 'Billund Airport' OR airport.incorporated_in = 'United States';
SELECT principal_activities, COUNT(*) as count FROM operate_company GROUP BY principal_activities ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE company_id IN ( SELECT id FROM operate_company WHERE principal_activities LIKE '%Thompson%' ) );
SELECT DISTINCT flight.pilot FROM flight JOIN operate_company ON flight.company_id = operate_company.id WHERE operate_company.principal_activities = 'Cargo' AND flight.pilot IN ( SELECT flight.pilot FROM flight JOIN operate_company ON flight.company_id = operate_company.id WHERE operate_company.principal_activities = 'Catering services' )
SELECT city FROM airport WHERE city LIKE '%international%';
SELECT airport.name, COUNT(DISTINCT operate_company.id) as num_companies FROM airport JOIN flight ON airport.id = flight.airport_id JOIN operate_company ON flight.company_id = operate_company.id GROUP BY airport.name;
SELECT incorporated_in, COUNT(*) FROM operate_company GROUP BY incorporated_in;
SELECT incorporated_in FROM operate_company WHERE id IN (SELECT company_id FROM flight WHERE airport_id IN (SELECT id FROM airport)) GROUP BY incorporated_in HAVING COUNT(*) > 2;
SELECT operate_company.principal_activities, COUNT(*) as num_flights FROM flight JOIN operate_company ON flight.company_id = operate_company.id GROUP BY operate_company.principal_activities ORDER BY num_flights DESC LIMIT 1;
SELECT COUNT(*) FROM furniture;
SELECT furniture.name, furniture.furniture_id FROM furniture WHERE market_rate = (SELECT MAX(market_rate) FROM furniture);
SELECT SUM(fm.price_in_dollar) FROM furniture_manufacte fm JOIN ( SELECT furniture_id FROM furniture ORDER BY num_of_component DESC LIMIT 2 ) f ON fm.furniture_id = f.furniture_id;
SELECT furniture.num_of_component, furniture.furniture_id FROM furniture WHERE furniture.num_of_component > 10;
SELECT f.name, COUNT(*) as component_amount FROM furniture f JOIN furniture_manufacte fm ON f.furniture_id = fm.furniture_id GROUP BY f.name ORDER BY component_amount ASC LIMIT 1;
SELECT furniture.furniture_id FROM furniture JOIN furniture_manufacte ON furniture.furniture_id = furniture_manufacte.furniture_id WHERE furniture_manufacte.price_in_dollar < ( SELECT MAX(price_in_dollar) FROM furniture_manufacte )
SELECT name, num_of_shops FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1;
SELECT AVG(num_of_shops) FROM manufacturer WHERE num_of_shops > 20;
SELECT manufacturer.manufacturer_id, manufacturer.name FROM manufacturer ORDER BY manufacturer.open_year;
SELECT name, year_of_opening FROM manufacturer WHERE num_of_shops < 10 OR num_of_factories > 10;
SELECT AVG(num_of_factories), MAX(num_of_shops) FROM manufacturer WHERE name < '1990';
SELECT manufacturer.manufacturer_id, manufacturer.num_of_shops FROM manufacturer JOIN furniture_manufacte ON manufacturer.manufacturer_id = furniture_manufacte.manufacturer_id JOIN furniture ON furniture_manufacte.furniture_id = furniture.furniture_id WHERE furniture.price_in_dollar = (SELECT MAX(price_in_dollar) FROM furniture) LIMIT 1;
SELECT manufacturer.name, COUNT(furniture.name) AS num_of_furniture_types FROM manufacturer JOIN furniture_manufacte ON furniture_manufacte.manufacturer_id = manufacturer.manufacturer_id JOIN furniture ON furniture.furniture_id = furniture_manufacte.furniture_id GROUP BY manufacturer.name;
SELECT furniture.name, furniture_manufacte.price_in_dollar FROM furniture INNER JOIN furniture_manufacte ON furniture.furniture_id = furniture_manufacte.furniture_id WHERE EXISTS ( SELECT 1 FROM manufacturer WHERE manufacturer.manufacturer_id = furniture_manufacte.manufacturer_id );
SELECT furniture.name, furniture.market_rate FROM furniture LEFT JOIN furniture_manufacte ON furniture.name = furniture_manufacte.furniture_id WHERE furniture_manufacte.furniture_id IS NULL;
SELECT manufacturer.name FROM manufacturer JOIN furniture_manufacte ON manufacturer.manufacturer_id = furniture_manufacte.manufacturer_id JOIN furniture ON furniture_manufacte.furniture_id = furniture.furniture_id WHERE furniture.name IN ( SELECT furniture.name FROM furniture WHERE furniture.name IN ( SELECT furniture.name FROM furniture WHERE furniture.market_rate < 6 ) AND furniture.name IN ( SELECT furniture.name FROM furniture WHERE furniture.market_rate > 10 ) ) GROUP BY manufacturer.name LIMIT 1;
SELECT COUNT(*) FROM visitor WHERE level_of_membership < 30;
SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket > 4 ORDER BY visit.num_of_ticket DESC;
SELECT AVG(visitor.age) FROM visitor JOIN visit ON visit.visitor_id = visitor.id WHERE visit.num_of_ticket <= 4;
SELECT visitor.name, visitor.membership_level FROM visitor WHERE visitor.membership_level > 4 ORDER BY visitor.age DESC;
SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1;
SELECT AVG(staff_count) FROM museum WHERE open_year < 2009;
SELECT museum.open_year, museum.num_of_staff FROM museum WHERE museum_id = 'Plaza Museum';
SELECT name FROM museum WHERE museum_id IN ( SELECT museum_id FROM visit WHERE visitor_id IN ( SELECT id FROM visitor WHERE level_of_membership = 'staff' ) GROUP BY museum_id HAVING COUNT(*) > ( SELECT MIN(staff_count) FROM ( SELECT COUNT(*) as staff_count FROM visit WHERE visitor_id IN ( SELECT id FROM visitor WHERE level_of_membership = 'staff' ) GROUP BY museum_id ) ) ) AND open_year > 2010;
SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(visit.museum_id) > 1;
SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.level_of_membership ORDER BY SUM(visit.total_spent) DESC LIMIT 1;
SELECT museum.museum_id, museum.name FROM visit JOIN museum ON visit.museum_id = museum.museum_id GROUP BY museum.museum_id, museum.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT museum.name FROM museum LEFT JOIN visit ON museum.museum_id = visit.museum_id WHERE visit.museum_id IS NULL;
SELECT visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id WHERE visit.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit);
SELECT AVG(total_spent), MAX(total_spent) FROM visit;
SELECT SUM(total_spent) FROM visit WHERE visitor_id IN (SELECT id FROM visitor WHERE level_of_membership = 1);
SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year < 2009 INTERSECT SELECT visitor.name FROM visitor JOIN visit ON visitor.id = visit.visitor_id JOIN museum ON visit.museum_id = museum.museum_id WHERE museum.open_year > 2011;
SELECT COUNT(*) FROM visitor WHERE id NOT IN ( SELECT visitor_id FROM visit WHERE museum_id IN ( SELECT museum_id FROM museum WHERE open_year > 2010 ) );
SELECT COUNT(*) FROM museum WHERE name LIKE '%2013%' OR name LIKE '%2008%';
SELECT COUNT(*) FROM highschooler;
SELECT COUNT(*) FROM highschooler;
SELECT name, grade FROM highschooler;
SELECT id, grade FROM highschooler;
SELECT DISTINCT grade FROM highschooler;
SELECT id, name, grade FROM highschooler;
SELECT grade FROM highschooler WHERE id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT grade FROM highschooler WHERE name = 'Kyle';
SELECT name FROM highschooler WHERE grade = 10;
SELECT name FROM highschooler WHERE grade = 10;
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT id FROM highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10;
SELECT COUNT(*) FROM highschooler WHERE grade = 9 OR grade = 10;
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;
SELECT grade, COUNT(*) FROM highschooler GROUP BY grade;
SELECT grade, COUNT(*) as count FROM highschooler GROUP BY grade ORDER BY count DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT highschooler.id, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT highschooler.name, COUNT(friend.friend_id) AS num_friends FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.id;
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM friend GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT h.name FROM highschooler h WHERE ( SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id ) >= 3;
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id GROUP BY h.id HAVING COUNT(f.friend_id) >= 3;
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.friend_id WHERE f.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT h.name FROM highschooler h JOIN friend f ON h.id = f.friend_id WHERE f.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM friend WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT id FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend);
SELECT id FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
SELECT name FROM highschooler WHERE id NOT IN (SELECT DISTINCT student_id FROM friend)
SELECT DISTINCT h.name FROM highschooler h LEFT JOIN friend f ON h.id = f.student_id WHERE f.friend_id IS NULL;
SELECT DISTINCT likes.student_id FROM likes JOIN friend ON likes.student_id = friend.student_id;
SELECT DISTINCT likes.student_id FROM likes JOIN friend ON likes.student_id = friend.student_id WHERE likes.liked_id = friend.friend_id;
SELECT DISTINCT h.name FROM highschooler h JOIN friend f ON h.id = f.student_id JOIN likes l ON h.id = l.liked_id;
SELECT DISTINCT highschooler.name FROM highschooler JOIN friend ON highschooler.id = friend.student_id JOIN likes ON highschooler.id = likes.student_id WHERE highschooler.id IN ( SELECT friend.friend_id FROM friend INTERSECT SELECT likes.liked_id FROM likes )
SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;
SELECT student_id, COUNT(*) as num_likes FROM likes GROUP BY student_id;
SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT highschooler.name, COUNT(likes.liked_id) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
SELECT name FROM highschooler WHERE id = ( SELECT liked_id FROM likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT name FROM highschooler WHERE id = ( SELECT liked_id FROM likes GROUP BY liked_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT h.name FROM highschooler h JOIN likes l ON h.id = l.liked_id GROUP BY h.name HAVING COUNT(l.liked_id) >= 2;
SELECT name FROM highschooler WHERE id IN ( SELECT student_id FROM likes GROUP BY student_id HAVING COUNT(*) >= 2 )
SELECT h.name FROM highschooler h WHERE h.grade > 5 AND ( SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id ) >= 2;
SELECT h.name FROM highschooler h WHERE h.grade > 5 AND ( SELECT COUNT(*) FROM friend f WHERE f.student_id = h.id ) >= 2;
SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend);
SELECT AVG(grade) FROM highschooler WHERE id IN (SELECT DISTINCT student_id FROM friend);
SELECT MIN(highschooler.grade) FROM highschooler LEFT JOIN friend ON highschooler.id = friend.student_id WHERE friend.friend_id IS NULL;
SELECT MIN(grade) FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
SELECT COUNT(*) FROM party;
SELECT COUNT(*) FROM party;
SELECT party.theme, COUNT(party_host.host_id) as number_of_hosts FROM party JOIN party_host ON party.party_id = party_host.party_id GROUP BY party.theme ORDER BY number_of_hosts ASC;
SELECT party.location, COUNT(party_host.host_id) as number_of_hosts FROM party JOIN party_host ON party.party_id = party_host.party_id GROUP BY party.location ORDER BY number_of_hosts ASC;
SELECT DISTINCT location, party_id FROM party;
SELECT party.theme, party.location FROM party;
SELECT party.first_year, party.last_year FROM party WHERE party.theme IN ('Spring', 'Technology');
SELECT party.first_year, party.last_year FROM party WHERE party.theme = 'Spring' OR party.theme = 'Technology';
SELECT AVG(host_count) FROM (SELECT COUNT(*) as host_count FROM party_host GROUP BY party_id);
SELECT AVG(host_count) FROM (SELECT COUNT(*) as host_count FROM party_host GROUP BY party_id);
SELECT party.location FROM party JOIN party_host ON party.party_id = party_host.party_id GROUP BY party.location ORDER BY COUNT(*) DESC LIMIT 1;
SELECT party.location FROM party JOIN party_host ON party.party_id = party_host.party_id GROUP BY party.location ORDER BY COUNT(party_host.host_id) DESC LIMIT 1;
SELECT host.nationality, COUNT(*) as number_of_hosts FROM host GROUP BY host.nationality;
SELECT host.nationality, COUNT(*) FROM host GROUP BY host.nationality;
SELECT host.nationality, COUNT(*) as count FROM host JOIN party_host ON host.host_id = party_host.host_id GROUP BY host.nationality ORDER BY count DESC LIMIT 1;
SELECT host.nationality, COUNT(*) as host_count FROM host JOIN party_host ON host.host_id = party_host.host_id GROUP BY host.nationality ORDER BY host_count DESC LIMIT 1;
SELECT DISTINCT party.location FROM host JOIN party_host ON host.host_id = party_host.host_id JOIN party ON party_host.party_id = party.party_id WHERE host.age > 45 INTERSECT SELECT DISTINCT party.location FROM host JOIN party_host ON host.host_id = party_host.host_id JOIN party ON party_host.party_id = party.party_id WHERE host.age < 35;
SELECT DISTINCT party.location FROM host JOIN party_host ON host.host_id = party_host.host_id JOIN party ON party_host.party_id = party.party_id WHERE host.age > 45 INTERSECT SELECT DISTINCT party.location FROM host JOIN party_host ON host.host_id = party_host.host_id JOIN party ON party_host.party_id = party.party_id WHERE host.age < 35;
SELECT party.party_theme, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id;
SELECT party.party_theme, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id;
SELECT party.location, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id ORDER BY host.age ASC;
SELECT party.location, host.name FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id ORDER BY host.age ASC;
SELECT party.location FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id WHERE host.age > 50;
SELECT party.location FROM party JOIN party_host ON party.party_id = party_host.party_id JOIN host ON party_host.host_id = host.host_id WHERE host.age > 50;
SELECT host.name FROM host JOIN party_host ON host.host_id = party_host.host_id JOIN party ON party_host.party_id = party.party_id WHERE party.number_of_hosts > 20;
SELECT host.name FROM host JOIN party_host ON host.host_id = party_host.host_id JOIN party ON party_host.party_id = party.party_id WHERE party.number_of_hosts > 20;
SELECT name, nationality FROM host WHERE age = (SELECT MAX(age) FROM host);
SELECT name, nationality FROM host WHERE age = (SELECT MAX(age) FROM host);
SELECT host.name FROM host LEFT JOIN party_host ON host.host_id = party_host.host_id WHERE party_host.party_id IS NULL;
SELECT host.name FROM host LEFT JOIN party_host ON host.host_id = party_host.host_id WHERE party_host.party_id IS NULL;
SELECT COUNT(*) FROM phone;
SELECT phone_id FROM phone ORDER BY price ASC;
SELECT phone.memory_in_g, phone.name FROM phone INNER JOIN phone_market ON phone.phone_id = phone_market.phone_id INNER JOIN market ON phone_market.market_id = market.market_id;
SELECT DISTINCT carrier FROM phone WHERE name LIKE '%32%' OR name LIKE '%64%';
SELECT phone.name FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id JOIN market ON phone_market.market_id = market.market_id WHERE market.carrier IN ('Sprint', 'TMobile');
SELECT market.ranking FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id JOIN market ON phone_market.market_id = market.market_id WHERE phone.price = (SELECT MAX(price) FROM phone);
SELECT phone.name, COUNT(*) as num_of_phones FROM phone GROUP BY phone.name;
SELECT phone.name, COUNT(*) as frequency FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id GROUP BY phone.name ORDER BY frequency DESC LIMIT 1;
SELECT DISTINCT market_id FROM phone_market WHERE phone_id IN (SELECT phone_id FROM phone WHERE memory_in_g < 32) INTERSECT SELECT DISTINCT market_id FROM phone_market WHERE phone_id IN (SELECT phone_id FROM phone WHERE memory_in_g > 64);
SELECT phone.name, market.district FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id JOIN market ON phone_market.market_id = market.market_id;
SELECT phone.name, market.district FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id JOIN market ON phone_market.market_id = market.market_id ORDER BY market.ranking ASC;
SELECT phone.name FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id JOIN market ON phone_market.market_id = market.market_id WHERE market.num_of_shops > 50;
SELECT phone.phone_id, SUM(phone_market.num_of_stock) FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id GROUP BY phone.phone_id;
SELECT phone.phone_id, SUM(phone_market.num_of_stock) AS total_stocks FROM phone JOIN phone_market ON phone.phone_id = phone_market.phone_id GROUP BY phone.phone_id HAVING total_stocks > 2000 ORDER BY total_stocks DESC;
SELECT phone.name FROM phone LEFT JOIN phone_market ON phone.phone_id = phone_market.phone_id WHERE phone_market.market_id IS NULL;
SELECT catalog_entry_id FROM catalog_contents;
SELECT catalog_name FROM catalogs;
SELECT attribute_name, COUNT(*) as count FROM attribute_definitions GROUP BY attribute_name HAVING COUNT(*) > 3;
SELECT attribute_name, COUNT(*) as count FROM attribute_definitions GROUP BY attribute_name HAVING COUNT(*) > 3;
SELECT attribute_data_type FROM attribute_definitions WHERE attribute_id = 'Green';
SELECT attribute_data_type FROM attribute_definitions WHERE attribute_id = 'Green';
SELECT catalog_level_number, catalog_id FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10;
SELECT catalog_level_number, catalog_id FROM catalog_structure WHERE catalog_level_number BETWEEN 5 AND 10;
SELECT catalog_name FROM catalogs WHERE catalog_name LIKE '%Murray%';
SELECT catalog_name FROM catalogs WHERE catalog_name LIKE '%Murray%';
SELECT catalog_name, COUNT(*) as count FROM catalogs GROUP BY catalog_name ORDER BY count DESC LIMIT 1;
SELECT catalog_name FROM catalogs GROUP BY catalog_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ```sql SELECT catalogs.catalog_name, catalogs.date_of_latest_revision FROM catalogs JOIN catalog_structure ON catalogs.catalog_id = catalog_structure.catalog_id JOIN catalog_contents ON catalog_structure.catalog_level_number = catalog_contents.catalog_level_number WHERE catalog_structure.catalog_level_number > 5 ```
SELECT catalog_name, catalog_publisher FROM catalogs WHERE catalog_id IN ( SELECT catalog_id FROM catalog_structure WHERE catalog_level_number > 5 );
SELECT catalog_entry_id, COUNT(*) as count FROM catalog_contents_additional_attributes GROUP BY catalog_entry_id ORDER BY count DESC LIMIT 1;
SELECT catalog_entry_id FROM catalog_contents_additional_attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1;
SELECT catalog_name FROM catalogs WHERE catalog_id = ( SELECT catalog_id FROM catalog_contents WHERE price_in_dollars = ( SELECT MAX(price_in_dollars) FROM catalog_contents ) );
SELECT catalog_entry_id FROM catalog_contents WHERE price_in_dollars = (SELECT MAX(price_in_dollars) FROM catalog_contents);
SELECT catalog_level_number FROM catalog_contents WHERE price_in_euros = (SELECT MIN(price_in_euros) FROM catalog_contents)
SELECT catalog_level_number FROM catalog_contents WHERE price_in_euros = (SELECT MIN(price_in_euros) FROM catalog_contents)
SELECT AVG(price_in_dollars * 0.85) AS average_price_in_euro, MIN(price_in_dollars * 0.85) AS minimum_price_in_euro FROM catalog_contents;
SELECT AVG(price_in_dollars * 0.85) AS average_price_in_euro, MIN(price_in_dollars * 0.85) AS minimum_price_in_euro FROM catalog_contents;
SELECT catalog_entry_id FROM catalog_contents WHERE height = (SELECT MAX(height) FROM catalog_contents);
SELECT catalog_contents.catalog_entry_id FROM catalog_contents WHERE height = (SELECT MAX(height) FROM catalog_contents)
SELECT product_stock_number FROM catalog_contents ORDER BY price_in_dollars ASC LIMIT 1;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents WHERE capacity = (SELECT MIN(capacity) FROM catalog_contents)
SELECT catalog_contents.catalog_entry_id FROM catalog_contents WHERE catalog_contents.catalog_entry_id LIKE '2%';
SELECT catalog_contents.product_stock_number, catalog_contents.catalog_entry_id FROM catalog_contents WHERE catalog_contents.product_stock_number LIKE '2%'
SELECT catalog_entry_id FROM catalog_contents WHERE catalog_level_number = 8;
SELECT catalog_entry_id FROM catalog_contents WHERE catalog_level_number = 8;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents WHERE catalog_contents.height > 5 OR catalog_contents.width < 3;
SELECT catalog_contents.catalog_entry_id FROM catalog_contents WHERE catalog_contents.length < 3 OR catalog_contents.length > 5;
SELECT attribute_definitions.attribute_id, attribute_definitions.attribute_data_type FROM attribute_definitions JOIN catalog_contents_additional_attributes ON attribute_definitions.attribute_id = catalog_contents_additional_attributes.attribute_id WHERE catalog_contents_additional_attributes.attribute_value = 0;
SELECT attribute_definitions.attribute_name, catalog_contents_additional_attributes.attribute_id FROM attribute_definitions JOIN catalog_contents_additional_attributes ON attribute_definitions.attribute_name = catalog_contents_additional_attributes.attribute_id WHERE catalog_contents_additional_attributes.attribute_id = 0;
SELECT catalog_name, capacity FROM catalogs JOIN catalog_contents ON catalogs.catalog_entry_id = catalog_contents.catalog_entry_id WHERE price_in_euros * 1.13 >700;
SELECT catalog_contents.catalog_entry_id, catalog_contents.capacity FROM catalog_contents WHERE catalog_contents.price_in_dollars > 700;
SELECT date_of_publication FROM catalogs GROUP BY date_of_publication HAVING COUNT(*) > 1;
SELECT date_of_publication FROM catalogs GROUP BY date_of_publication HAVING COUNT(catalog_id) > 1;
SELECT COUNT(*) FROM catalog_contents;
SELECT COUNT(*) FROM catalog_contents;
SELECT product_stock_number FROM catalog_contents WHERE catalog_entry_id > 8;
SELECT catalog_entry_id FROM catalog_contents WHERE next_entry_id > 8;
SELECT COUNT(*) FROM scientists;
SELECT COUNT(*) FROM scientists;
SELECT SUM(hours) FROM projects;
SELECT SUM(hours) FROM projects;
SELECT COUNT(DISTINCT scientists.ssn) FROM assignedto JOIN scientists ON assignedto.scientist = scientists.ssn;
SELECT COUNT(DISTINCT scientists.ssn) FROM assignedto JOIN scientists ON assignedto.scientist = scientists.ssn;
SELECT COUNT(DISTINCT projects.name) FROM projects;
SELECT COUNT(DISTINCT name) FROM projects;
SELECT AVG(hours) FROM projects;
SELECT AVG(hours) FROM projects;
SELECT name FROM projects ORDER BY code DESC LIMIT 1;
SELECT projects.name FROM projects JOIN assignedto ON projects.code = assignedto.project GROUP BY projects.name ORDER BY SUM(assignedto.hours) DESC LIMIT 1;
SELECT code FROM projects WHERE hours > (SELECT AVG(hours) FROM projects);
SELECT code FROM projects WHERE hours > (SELECT AVG(hours) FROM projects);
SELECT scientists.name, projects.hours FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code GROUP BY projects.code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT name, hours FROM projects WHERE code = (SELECT project FROM assignedto GROUP BY project ORDER BY COUNT(*) DESC LIMIT 1);
SELECT projects.name FROM assignedto JOIN scientists ON assignedto.scientist = scientists.ssn JOIN projects ON assignedto.project = projects.code WHERE scientists.name LIKE '%Smith%';
SELECT projects.name FROM projects JOIN assignedto ON projects.code = assignedto.project JOIN scientists ON assignedto.scientist = scientists.ssn WHERE scientists.name LIKE '%Smith%';
SELECT SUM(projects.hours) FROM projects JOIN assignedto ON projects.code = assignedto.project JOIN scientists ON assignedto.scientist = scientists.ssn WHERE scientists.name IN ('Michael Rogers', 'Carol Smith');
SELECT SUM(projects.hours) FROM projects JOIN assignedto ON projects.code = assignedto.project JOIN scientists ON assignedto.scientist = scientists.ssn WHERE scientists.name IN ('Michael Rogers', 'Carol Smith');
SELECT name FROM projects WHERE code IN (SELECT project FROM assignedto WHERE hours BETWEEN 100 AND 300);
SELECT code FROM projects WHERE hours BETWEEN 100 AND 300;
SELECT scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.code IN ( SELECT code FROM projects WHERE code = 'Matter of Time' OR code = 'A Puzzling Parallax' ) GROUP BY scientists.name HAVING COUNT(DISTINCT projects.code) = 2;
SELECT scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.name IN ('Matter of Time', 'A Puzzling Pattern');
SELECT name FROM scientists ORDER BY name ASC;
SELECT name FROM scientists ORDER BY name ASC;
SELECT projects.name, COUNT(assignedto.scientist) as num_scientists FROM projects JOIN assignedto ON projects.code = assignedto.project GROUP BY projects.name;
SELECT projects.name, COUNT(assignedto.scientist) as num_scientists FROM projects JOIN assignedto ON projects.code = assignedto.project GROUP BY projects.name;
SELECT COUNT(*) FROM assignedto WHERE project IN (SELECT code FROM projects WHERE hours > 300);
SELECT projects.code, COUNT(assignedto.scientist) as num_scientists FROM projects JOIN assignedto ON projects.code = assignedto.project WHERE projects.hours > 300 GROUP BY projects.code;
SELECT scientists.name, COUNT(assignedto.project) AS num_projects FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist GROUP BY scientists.name;
SELECT scientists.name, COUNT(assignedto.project) AS num_projects FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist GROUP BY scientists.name;
SELECT scientists.ssn, scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.hours = (SELECT MAX(hours) FROM projects)
SELECT scientists.ssn, scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.hours = (SELECT MAX(hours) FROM projects)
SELECT DISTINCT scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist;
SELECT DISTINCT scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist;
SELECT projects.code FROM projects LEFT JOIN assignedto ON projects.code = assignedto.project WHERE assignedto.project IS NULL;
SELECT projects.code FROM projects LEFT JOIN assignedto ON projects.code = assignedto.project WHERE assignedto.project IS NULL;
SELECT scientists.name FROM scientists LEFT JOIN assignedto ON scientists.ssn = assignedto.scientist WHERE assignedto.project IS NULL;
SELECT scientists.name FROM scientists LEFT JOIN assignedto ON scientists.ssn = assignedto.scientist WHERE assignedto.project IS NULL;
SELECT COUNT(*) FROM scientists WHERE name NOT IN (SELECT scientist FROM assignedto);
SELECT COUNT(*) FROM scientists WHERE name NOT IN (SELECT scientist FROM assignedto);
SELECT scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code WHERE projects.hours < (SELECT MAX(hours) FROM projects)
SELECT DISTINCT scientists.name FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist WHERE assignedto.project NOT IN ( SELECT code FROM projects WHERE hours = ( SELECT MAX(hours) FROM projects ) )
SELECT scientists.name, projects.code, projects.hours FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code ORDER BY projects.code, scientists.name;
SELECT scientists.name, projects.name, assignedto.hours FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code ORDER BY projects.name, scientists.name;
SELECT scientists.name, projects.code FROM scientists JOIN assignedto ON scientists.ssn = assignedto.scientist JOIN projects ON assignedto.project = projects.code ORDER BY projects.hours ASC LIMIT 1;
SELECT projects.code, scientists.name FROM projects JOIN assignedto ON projects.code = assignedto.project JOIN scientists ON assignedto.scientist = scientists.ssn WHERE projects.hours = (SELECT MIN(hours) FROM projects)
SELECT COUNT(*) FROM ship;
SELECT COUNT(*) FROM ship;
SELECT ship.name FROM ship ORDER BY ship.tonnage ASC;
SELECT ship.name FROM ship ORDER BY tonnage ASC;
SELECT ship.type, ship.nationality FROM ship;
SELECT ship.type, ship.name FROM ship;
SELECT ship.name FROM ship WHERE ship.nationality != 'United States';
SELECT ship.name FROM ship LEFT JOIN mission ON ship.ship_id = mission.ship_id WHERE mission.location != 'United States';
SELECT ship.name FROM ship WHERE ship.nationality IN ('United States', 'United Kingdom');
SELECT name FROM ship WHERE ship_id IN (SELECT ship_id FROM mission WHERE location = 'US' OR location = 'UK');
SELECT name FROM ship ORDER BY tonnage DESC LIMIT 1;
SELECT name FROM ship ORDER BY tonnage DESC LIMIT 1;
SELECT nationality, COUNT(*) FROM ship GROUP BY nationality;
SELECT nationality, COUNT(*) FROM ship GROUP BY nationality;
SELECT ship.name, COUNT(*) as count FROM ship JOIN mission ON ship.ship_id = mission.ship_id GROUP BY ship.name ORDER BY count DESC LIMIT 1;
SELECT nationality, COUNT(*) as count FROM ship GROUP BY nationality ORDER BY count DESC LIMIT 1;
SELECT ship.name FROM ship GROUP BY ship.name HAVING COUNT(*) > 2;
SELECT ship.name FROM ship GROUP BY ship.name HAVING COUNT(ship.ship_id) > 2;
SELECT type, AVG(tonnage) AS average_tonnage FROM ship GROUP BY type;
SELECT type, AVG(tonnage) as average_tonnage FROM ship GROUP BY type;
SELECT mission.code, mission.fate, ship.name FROM mission INNER JOIN ship ON mission.ship_id = ship.ship_id;
SELECT mission.code, mission.fate, ship.name FROM mission INNER JOIN ship ON mission.ship_id = ship.ship_id;
SELECT ship.name FROM mission JOIN ship ON mission.ship_id = ship.ship_id WHERE mission.launched_year > 1928;
SELECT ship.name FROM mission INNER JOIN ship ON mission.ship_id = ship.ship_id WHERE mission.launched_year > 1928;
SELECT DISTINCT mission.fate FROM mission JOIN ship ON mission.ship_id = ship.ship_id WHERE ship.nationality = 'United States'
SELECT DISTINCT fate FROM mission WHERE ship_id IN (SELECT ship_id FROM ship WHERE location = 'United States');
SELECT name FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM mission);
SELECT name FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM mission);
SELECT DISTINCT type FROM ship WHERE tonnage > 6000 INTERSECT SELECT DISTINCT type FROM ship WHERE tonnage < 4000;
SELECT DISTINCT type FROM ship WHERE ship_id IN ( SELECT ship_id FROM mission WHERE tonnage > 6000 ) AND ship_id IN ( SELECT ship_id FROM mission WHERE tonnage < 4000 );
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT singer_id FROM singer ORDER BY net_worth_millions ASC;
SELECT singer_id FROM singer ORDER BY net_worth_millions ASC;
SELECT birth_year, citizenship FROM singer;
SELECT birth_year, citizenship FROM singer;
SELECT name FROM singer WHERE NOT citizenship = 'France';
SELECT singer.name FROM singer WHERE singer.birth_year IS NOT NULL;
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT name FROM singer WHERE birth_year IN (1948, 1949);
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id ORDER BY song.sales DESC LIMIT 1;
SELECT singer_id FROM singer ORDER BY net_worth_millions DESC LIMIT 1;
SELECT citizenship, COUNT(*) FROM singer GROUP BY citizenship;
SELECT singer.name, COUNT(*) FROM singer GROUP BY singer.name;
SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;
SELECT citizenship, COUNT(*) as count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;
SELECT citizenship, MAX(net_worth) FROM singer GROUP BY citizenship;
SELECT singer.citizenship, MAX(song.sales * song.highest_position) AS net_worth FROM singer JOIN song ON song.singer_id = singer.singer_id GROUP BY singer.citizenship;
SELECT song.title, singer.name FROM song INNER JOIN singer ON song.singer_id = singer.singer_id;
SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;
SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;
SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name, SUM(song.sales) as total_sales FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name;
SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL;
SELECT singer.name FROM singer LEFT JOIN song ON singer.singer_id = song.singer_id WHERE song.singer_id IS NULL;
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955;
SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 INTERSECT SELECT DISTINCT citizenship FROM singer WHERE birth_year > 1955;
SELECT COUNT(*) FROM club;
SELECT COUNT(*) FROM club;
SELECT DISTINCT region FROM club ORDER BY region ASC;
SELECT DISTINCT region FROM club ORDER BY region ASC;
SELECT AVG(rank) FROM club_rank;
SELECT AVG(rank) FROM club_rank;
SELECT DISTINCT competition.type, competition.country FROM competition;
SELECT DISTINCT competition.country, competition.type FROM competition;
SELECT DISTINCT year FROM competition WHERE competition_type != 'Tournament';
SELECT DISTINCT year FROM competition WHERE type != 'tournament';
SELECT MAX(silver), MIN(silver) FROM club_rank;
SELECT MAX(silver), MIN(silver) FROM club_rank;
SELECT COUNT(*) FROM (SELECT club_id FROM club_rank WHERE (gold + silver + bronze) < 10);
SELECT COUNT(*) FROM club WHERE club_id IN (SELECT club_id FROM club_rank WHERE (gold + silver + bronze) < 10);
SELECT club.name FROM club ORDER BY club.start_year ASC;
SELECT club.club_id, club.start_year FROM club ORDER BY club.start_year ASC;
SELECT club.name FROM club ORDER BY club.name DESC;
SELECT club.name FROM club ORDER BY club.name DESC;
SELECT club.club_id, player.position, player.apps, player.goals FROM club JOIN player ON club.club_id = player.club_id;
SELECT club.club_id, player.name FROM club JOIN player ON club.club_id = player.club_id;
SELECT club.name FROM club JOIN player ON player.club_id = club.club_id WHERE player.position = 'Right Wing';
SELECT DISTINCT club.name FROM player JOIN club ON player.club_id = club.club_id WHERE player.position = 'Right Wing';
SELECT AVG(points) FROM player WHERE club_id IN (SELECT club_id FROM club WHERE name = 'AIB');
SELECT AVG(points) FROM player WHERE club_id IN (SELECT club_id FROM club WHERE name = 'AIB');
SELECT position, AVG(points) FROM player GROUP BY position;
SELECT position, AVG(player.points) FROM player GROUP BY position;
SELECT position, AVG(points) as avg_points FROM player GROUP BY position HAVING AVG(points) > 20;
SELECT position FROM player GROUP BY position HAVING AVG(points) > 20;
SELECT competition.competition_id, COUNT(*) FROM competition GROUP BY competition.competition_id;
SELECT type, COUNT(*) FROM competition GROUP BY type;
SELECT competition_id, COUNT(*) as count FROM competition_result GROUP BY competition_id ORDER BY count DESC LIMIT 1;
SELECT competition_type, COUNT(*) as count FROM competition GROUP BY competition_type ORDER BY count DESC LIMIT 1;
SELECT competition.year, competition.country FROM competition GROUP BY competition.year, competition.country HAVING COUNT(*) <= 5;
SELECT competition_type, COUNT(*) as num_competitions FROM competition GROUP BY competition_type ORDER BY num_competitions DESC LIMIT 5;
SELECT club.name FROM club LEFT JOIN player ON club.club_id = player.club_id WHERE player.club_id IS NULL;
SELECT club.name FROM club LEFT JOIN player ON club.club_id = player.club_id WHERE player.club_id IS NULL;
SELECT competition_result.competition_id FROM competition_result JOIN player AS p1 ON competition_result.club_id_1 = p1.club_id JOIN player AS p2 ON competition_result.club_id_2 = p2.club_id WHERE p1.points > 20 AND p1.points < 10 AND p2.points > 20 AND p2.points < 10;
SELECT player.name, player.points, club.region FROM player JOIN club ON player.club_id = club.club_id WHERE player.points > 20 AND player.points < 10;
SELECT SUM(apps) AS total_points FROM player;
SELECT SUM(apps) AS total_points FROM player;
SELECT COUNT(DISTINCT position) FROM player;
SELECT COUNT(DISTINCT position) FROM player;
SELECT player.name FROM player WHERE player.points > (SELECT AVG(points) FROM player)
SELECT player.name FROM player WHERE player.points > (SELECT AVG(points) FROM player)
SELECT COUNT(*) FROM player WHERE points < 30;
SELECT position, COUNT(*) as num_players FROM player WHERE points < 30 GROUP BY position;
SELECT country FROM competition WHERE competition_id IN (SELECT competition_id FROM competition_result) GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1;
SELECT region, COUNT(*) as competition_count FROM club JOIN competition_result ON club.club_id = competition_result.club_id_1 OR club.club_id = competition_result.club_id_2 GROUP BY region ORDER BY competition_count DESC LIMIT 1;
SELECT DISTINCT country FROM competition WHERE competition_id IN (SELECT competition_id FROM competition WHERE competition_id LIKE '%Friendly%') AND competition_id IN (SELECT competition_id FROM competition WHERE competition_id LIKE '%Tournament%');
SELECT DISTINCT country FROM competition WHERE competition_id IN ( SELECT competition_id FROM competition WHERE competition_id IN ( SELECT competition_id FROM competition WHERE competition_id LIKE '%friendly%' ) AND competition_id LIKE '%tournament%' );
SELECT DISTINCT country FROM competition WHERE competition_id NOT IN ( SELECT competition_id FROM competition WHERE type = 'Friendly' );
SELECT DISTINCT country FROM competition WHERE competition_id NOT IN ( SELECT competition_id FROM competition WHERE competition_id LIKE '%friendly%' )
SELECT COUNT(*) FROM event;
SELECT event.year, event.id FROM event ORDER BY event.year DESC;
SELECT event.id FROM event WHERE year = (SELECT MAX(year) FROM event);
SELECT COUNT(*) FROM stadium;
SELECT city FROM stadium WHERE capacity = (SELECT MAX(capacity) FROM stadium);
SELECT city FROM stadium WHERE capacity < (SELECT AVG(capacity) FROM stadium);
SELECT nationality, COUNT(*) as stadium_count FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON event.stadium_id = stadium.id GROUP BY nationality ORDER BY stadium_count DESC LIMIT 1;
SELECT nationality FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON event.stadium_id = stadium.id GROUP BY nationality HAVING COUNT(DISTINCT stadium.id) <= 3;
SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000;
SELECT COUNT(DISTINCT city) FROM stadium WHERE id IN (SELECT stadium_id FROM event WHERE name < '2006');
SELECT nationality, COUNT(DISTINCT stadium.id) as num_stadiums FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON event.stadium_id = stadium.id GROUP BY nationality;
SELECT DISTINCT country FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event WHERE id IN (SELECT event_id FROM record WHERE swimmer_id IN (SELECT id FROM swimmer WHERE time > 2006)));
SELECT COUNT(*) FROM stadium WHERE city != 'Russia';
SELECT swimmer.name FROM swimmer JOIN record ON swimmer.id = record.swimmer_id WHERE record.event_id = 100 ORDER BY record.result ASC;
SELECT COUNT(DISTINCT country) FROM stadium WHERE id IN (SELECT stadium_id FROM event WHERE id IN (SELECT event_id FROM record WHERE swimmer_id IN (SELECT id FROM swimmer)));
SELECT city FROM stadium WHERE id IN (SELECT stadium_id FROM event WHERE id IN (SELECT event_id FROM record WHERE swimmer_id IN (SELECT id FROM swimmer GROUP BY name HAVING COUNT(*) > 1)));
SELECT record.result FROM record JOIN swimmer ON record.swimmer_id = swimmer.id WHERE swimmer.nationality = 'Australia' AND (record.event_id = 200 OR record.event_id = 300);
SELECT DISTINCT swimmer.name FROM swimmer JOIN record ON swimmer.id = record.swimmer_id WHERE record.result = 'win';
SELECT stadium.name FROM event JOIN stadium ON event.stadium_id = stadium.id GROUP BY stadium.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT stadium.name, stadium.capacity FROM stadium JOIN event ON stadium.id = event.stadium_id WHERE event.name = 'World Junior';
SELECT stadium.name FROM stadium LEFT JOIN event ON stadium.id = event.stadium_id WHERE event.id IS NULL;
SELECT swimmer.name FROM record JOIN swimmer ON record.swimmer_id = swimmer.id GROUP BY swimmer.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT swimmer.name FROM record JOIN swimmer ON record.swimmer_id = swimmer.id GROUP BY swimmer.name HAVING COUNT(*) >= 2;
SELECT swimmer.name, swimmer.nationality FROM swimmer JOIN record ON swimmer.id = record.swimmer_id WHERE record.result = 'win' GROUP BY swimmer.id HAVING COUNT(*) > 1;
SELECT DISTINCT swimmer.name FROM swimmer LEFT JOIN record ON swimmer.id = record.swimmer_id WHERE record.swimmer_id IS NULL;
SELECT DISTINCT swimmer.name FROM swimmer JOIN record ON swimmer.id = record.swimmer_id WHERE record.event_id IN ( SELECT event_id FROM record GROUP BY event_id HAVING COUNT(DISTINCT result) = 2 AND SUM(result = 'win') > 0 AND SUM(result = 'loss') > 0 )
SELECT DISTINCT stadium.name FROM stadium JOIN event ON stadium.id = event.stadium_id JOIN record ON event.id = record.event_id JOIN swimmer ON record.swimmer_id = swimmer.id WHERE swimmer.country = 'Australia';
SELECT stadium.name FROM stadium JOIN event ON stadium.id = event.stadium_id JOIN record ON event.id = record.event_id GROUP BY stadium.name ORDER BY COUNT(DISTINCT record.swimmer_id) DESC LIMIT 1;
SELECT swimmer.* FROM swimmer;
SELECT AVG(capacity) FROM stadium WHERE name LIKE '%2005';
SELECT COUNT(*) FROM investors;
SELECT * FROM investors;
SELECT DISTINCT l.* FROM lots l JOIN transactions_lots tl ON l.lot_id = tl.lot_id;
SELECT MAX(transaction_amount) FROM transactions;
SELECT transactions.transaction_id, transactions.share_count FROM transactions;
SELECT COUNT(*) FROM transactions;
SELECT transactions.transaction_id FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code WHERE transactions.transaction_type_code = 'PUR';
SELECT transactions.transaction_id, transactions.amount_of_transaction FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code WHERE ref_transaction_types.transaction_type_description = 'SALE';
SELECT AVG(transaction_id) FROM transactions WHERE transaction_type_code = 'SALE';
SELECT transaction_type_description FROM ref_transaction_types WHERE transaction_type_code = 'PUR';
SELECT MIN(share_count) FROM transactions WHERE transaction_type_code = 'PUR' AND share_count > 50;
SELECT MAX(transactions.share_count) FROM transactions JOIN transactions_lots ON transactions_lots.transaction_id = transactions.transaction_id JOIN purchases ON purchases.purchase_transaction_id = transactions.transaction_id WHERE purchases.purchase_details < 10000;
SELECT transactions.transaction_id, transactions.transaction_date FROM transactions WHERE transactions.share_count > 100 OR transactions.amount_of_transaction > 1000;
SELECT ref_transaction_types.transaction_type_description, transactions.date_of_transaction FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code WHERE transactions.share_count < 10;
SELECT investors.* FROM investors JOIN transactions ON transactions.investor_id = investors.investor_id WHERE transactions.share_count > 100;
SELECT COUNT(DISTINCT transaction_type_code) FROM transactions;
SELECT lots.lot_details, investors.investor_id FROM lots JOIN investors ON lots.investor_id = investors.investor_id;
SELECT lots.* FROM lots JOIN investors ON lots.investor_id = investors.investor_id WHERE investors.investor_details LIKE '%l%';
SELECT purchases.* FROM purchases JOIN transactions ON purchases.purchase_transaction_id = transactions.transaction_id JOIN transactions_lots ON transactions_lots.transaction_id = transactions.transaction_id WHERE transactions_lots.amount > 10000;
SELECT sales.*, transactions.amount_of_transaction, transactions.transaction_type_code, transactions.transaction_id, transactions.investor_id, transactions_lots.lot_id, ref_transaction_types.transaction_type_description FROM sales JOIN transactions ON sales.sales_transaction_id = transactions.transaction_id JOIN transactions_lots ON transactions_lots.transaction_id = transactions.transaction_id JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code WHERE transactions.amount_of_transaction < 3000;
SELECT lots.* FROM lots JOIN transactions_lots ON lots.lot_id = transactions_lots.lot_id JOIN transactions ON transactions_lots.transaction_id = transactions.transaction_id WHERE transactions.amount_of_transaction < 50;
SELECT lots.lot_details FROM transactions INNER JOIN transactions_lots ON transactions.transaction_id = transactions_lots.transaction_id INNER JOIN lots ON transactions_lots.lot_id = lots.lot_id INNER JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code WHERE transactions.amount_of_transaction > 100 AND ref_transaction_types.transaction_type_code = 'PUR';
SELECT ref_transaction_types.transaction_type_description, AVG(transactions.amount_of_transaction) FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code GROUP BY ref_transaction_types.transaction_type_description;
SELECT transaction_type_description, MAX(share_count), MIN(share_count) FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code GROUP BY transaction_type_description;
SELECT investors.investor_details, AVG(transactions.share_count) AS average_share_count FROM transactions JOIN investors ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_details;
SELECT investors.investor_details, AVG(transactions.share_count) AS average_share_count FROM investors JOIN transactions ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_details ORDER BY average_share_count;
SELECT investors.investor_details, AVG(transactions.amount_of_transaction) FROM transactions JOIN investors ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_details;
SELECT lots.lot_details, AVG(transactions.transaction_id) as average_transactions FROM transactions JOIN transactions_lots ON transactions.transaction_id = transactions_lots.transaction_id JOIN lots ON transactions_lots.lot_id = lots.lot_id GROUP BY lots.lot_details;
SELECT lots.lot_details, AVG(transactions.transaction_amount) as average_transaction_amount FROM transactions_lots JOIN transactions ON transactions_lots.transaction_id = transactions.transaction_id JOIN lots ON transactions_lots.lot_id = lots.lot_id GROUP BY lots.lot_details ORDER BY average_transaction_amount DESC;
SELECT investors.investor_details, COUNT(transactions.transaction_id) as num_transactions FROM transactions JOIN transactions_lots ON transactions.transaction_id = transactions_lots.transaction_id JOIN lots ON transactions_lots.lot_id = lots.lot_id JOIN investors ON lots.investor_id = investors.investor_id WHERE transactions.transaction_type_code = 'SALE' GROUP BY investors.investor_details HAVING num_transactions > 0;
SELECT investors.investor_details, COUNT(transactions.transaction_id) AS number_of_transactions FROM investors JOIN transactions ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_details;
SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT transaction_type_code FROM transactions GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ref_transaction_types.description FROM transactions JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code GROUP BY ref_transaction_types.description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT investors.investor_id, investors.investor_details FROM investors JOIN transactions ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_id ORDER BY COUNT(transactions.transaction_id) DESC LIMIT 1;
SELECT investors.investor_details, COUNT(transactions.transaction_id) as transaction_count FROM investors JOIN transactions ON transactions.investor_id = investors.investor_id GROUP BY investors.investor_details ORDER BY transaction_count DESC LIMIT 3;
SELECT DISTINCT transactions.investor_id FROM transactions GROUP BY transactions.investor_id HAVING COUNT(transactions.transaction_id) >= 2;
SELECT investors.investor_details, investors.investor_id FROM investors JOIN transactions ON investors.investor_id = transactions.investor_id JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code WHERE ref_transaction_types.transaction_type_description = 'SALE' GROUP BY investors.investor_id HAVING COUNT(transactions.transaction_id) >= 2;
SELECT transactions.transaction_id, transactions.amount_of_transaction, transactions.share_count, transactions.transaction_type_code FROM transactions WHERE transactions.share_count >= 100 OR transactions.amount_of_transaction > 100;
SELECT sales.sales_transaction_id, purchases.purchase_transaction_id, transactions.transaction_type_code, transactions.investor_id, transactions.date_of_transaction, transactions.amount_of_transaction, ref_transaction_types.transaction_type_description FROM sales JOIN transactions ON sales.sales_transaction_id = transactions.transaction_id JOIN ref_transaction_types ON transactions.transaction_type_code = ref_transaction_types.transaction_type_code JOIN purchases ON purchases.purchase_transaction_id = transactions.transaction_id;
SELECT lot_details FROM lots WHERE lot_id NOT IN (SELECT lot_id FROM transactions_lots)
SELECT COUNT(*) FROM train_station;
SELECT station.name, station.location, COUNT(train_station.station_id) AS number_of_platforms FROM station LEFT JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name, station.location;
SELECT DISTINCT name FROM station;
SELECT station.name, SUM(train.annual_entry_exit) as total_passengers FROM station JOIN train_station ON station.station_id = train_station.station_id JOIN train ON train_station.train_id = train.train_id WHERE station.location != 'London' GROUP BY station.name;
SELECT station.name, station.main_services FROM station JOIN train_station ON station.station_id = train_station.station_id JOIN train ON train_station.train_id = train.train_id GROUP BY station.name, station.main_services ORDER BY SUM(train.passengers) DESC LIMIT 3;
SELECT AVG(annual_entry_exit) AS average_passengers, MAX(annual_entry_exit) AS max_passengers FROM station WHERE location IN ('London', 'Glasgow')
SELECT station.location, SUM(station.number_of_platforms) AS total_platforms, COUNT(train.passengers) AS total_passengers FROM station JOIN train_station ON station.station_id = train_station.station_id JOIN train ON train_station.train_id = train.train_id GROUP BY station.location;
SELECT DISTINCT s.location FROM station s JOIN train_station ts ON s.station_id = ts.station_id JOIN train t ON ts.train_id = t.train_id WHERE s.number_of_platforms >= 15 AND t.service = 'passenger' GROUP BY s.location HAVING COUNT(t.train_id) > 25;
SELECT DISTINCT location FROM station WHERE station_id NOT IN ( SELECT station_id FROM train_station WHERE train_id IN ( SELECT train_id FROM train WHERE service >= 15 ) );
SELECT station.name FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT train.train_id, train.time, train.service FROM train;
SELECT COUNT(*) FROM train;
SELECT train.train_id, train.service FROM train ORDER BY train.time;
SELECT station.name, COUNT(train_station.train_id) AS number_of_trains FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name;
SELECT train.name, station.name FROM train JOIN train_station ON train.train_id = train_station.train_id JOIN station ON train_station.station_id = station.station_id;
SELECT train.name, train.time FROM train JOIN train_station ON train.train_id = train_station.train_id JOIN station ON train_station.station_id = station.station_id WHERE station.location = 'London' ORDER BY train.time DESC;
SELECT station.name FROM train_station JOIN station ON train_station.station_id = station.station_id GROUP BY station.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT station.name FROM train_station JOIN station ON train_station.station_id = station.station_id GROUP BY station.name HAVING COUNT(DISTINCT train_station.train_id) >= 2;
SELECT station.name FROM station JOIN train_station ON station.station_id = train_station.station_id GROUP BY station.name HAVING COUNT(train_station.train_id) = 1;
SELECT DISTINCT station.name FROM station LEFT JOIN train_station ON station.station_id = train_station.station_id WHERE train_station.train_id IS NULL;
SELECT DISTINCT station.name FROM station JOIN train_station ON station.station_id = train_station.station_id JOIN train ON train_station.train_id = train.train_id WHERE train.service IN ('Ananthapuri Express', 'Guruvayur Express') GROUP BY station.name HAVING COUNT(DISTINCT train.service) = 2;
SELECT DISTINCT train.name FROM train LEFT JOIN train_station ON train.train_id = train_station.train_id LEFT JOIN station ON train_station.station_id = station.station_id WHERE station.name NOT LIKE '%London%' OR station.name IS NULL;
SELECT station.name, station.location FROM station ORDER BY station.annual_interchanges DESC;
SELECT COUNT(DISTINCT area_code) FROM area_code_state;
SELECT contestants.contestant_number, contestants.contestant_name FROM contestants ORDER BY contestants.contestant_name DESC;
SELECT votes.phone_number, votes.state FROM votes;
SELECT MIN(SUBSTR(phone_number, 1, 3)), MAX(SUBSTR(phone_number, 1, 3)) FROM votes;
SELECT MAX(created) FROM votes WHERE state = 'CA';
SELECT contestants.contestant_number FROM contestants WHERE contestants.contestant_number NOT IN (SELECT contestant_number FROM contestants WHERE contestant_number = 'Jessie Alloway');
SELECT DISTINCT votes.state, votes.created FROM votes;
SELECT contestants.contestant_number, contestants.contestant_name FROM contestants JOIN votes ON contestants.contestant_number = votes.contestant_number GROUP BY contestants.contestant_number, contestants.contestant_name HAVING COUNT(votes.vote_id) >= 2;
SELECT contestants.contestant_name, votes.contestant_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number GROUP BY contestants.contestant_name ORDER BY COUNT(votes.vote_id) ASC LIMIT 1;
SELECT COUNT(*) FROM votes WHERE state IN ('NY', 'CA');
SELECT COUNT(*) FROM contestants WHERE contestant_name NOT IN (SELECT contestant_name FROM votes);
SELECT SUBSTR(phone_number, 1, 3) AS area_code, COUNT(*) AS vote_count FROM votes GROUP BY area_code ORDER BY vote_count DESC LIMIT 1;
SELECT votes.created, area_code_state.state, area_code_state.phone_number FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT area_code_state.state FROM votes JOIN contestants ON votes.contestant_number = contestants.contestant_number JOIN area_code_state ON votes.state = area_code_state.state WHERE contestants.contestant_number IN ( SELECT contestant_number FROM contestants WHERE contestant_name IN ('Tabatha Gehling', 'Kelly Clauss') ) GROUP BY area_code_state.state HAVING COUNT(DISTINCT contestants.contestant_name) = 2;
SELECT contestants.contestant_number FROM contestants WHERE contestants.contestant_number LIKE '%Al%';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(winner_age) AS average_winner_age, AVG(loser_age) AS average_loser_age FROM ( SELECT winner_age, (strftime('%Y', 'now') - strftime('%Y', birth_date)) AS loser_age FROM matches INNER JOIN players ON matches.winner_id = players.player_id UNION ALL SELECT winner_age, (strftime('%Y', 'now') - strftime('%Y', birth_date)) AS loser_age FROM matches INNER JOIN players ON matches.loser_id = players.player_id ) AS subquery;
SELECT (SELECT AVG(loser_age) FROM matches) AS average_loser_age, (SELECT AVG(players.birth_date) FROM matches JOIN players ON matches.winner_id = players.player_id) AS average_winner_age;
SELECT AVG(winner_rank_points) FROM matches;
SELECT AVG(winner_rank_points) FROM matches;
SELECT MAX(rankings.ranking_points) FROM matches JOIN rankings ON matches.loser_id = rankings.player_id;
SELECT MIN(rankings.ranking_points) AS best_rank FROM matches JOIN rankings ON matches.loser_id = rankings.player_id;
SELECT COUNT(DISTINCT hand) FROM players;
SELECT COUNT(DISTINCT country) FROM players;
SELECT COUNT(DISTINCT players.first_name || ' ' || players.last_name) FROM matches JOIN players ON matches.loser_id = players.player_id;
SELECT COUNT(DISTINCT players.first_name) FROM matches JOIN players ON matches.loser_id = players.player_id;
SELECT t.tourney_id, COUNT(*) as match_count FROM matches m GROUP BY m.tourney_id HAVING COUNT(*) > 10;
SELECT tourney_id FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10;
SELECT DISTINCT winner_name FROM matches WHERE winner_name IN ( SELECT winner_name FROM matches WHERE year = 2013 ) AND winner_name IN ( SELECT winner_name FROM matches WHERE year = 2016 );
SELECT DISTINCT players.first_name, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id WHERE matches.match_num IN ( SELECT match_num FROM matches WHERE match_num LIKE '2013%' OR match_num LIKE '2016%' GROUP BY match_num HAVING COUNT(DISTINCT winner_id) > 1 ) AND matches.match_num LIKE '2013%' OR matches.match_num LIKE '2016%';
SELECT COUNT(*) FROM matches WHERE strftime('%Y', round) IN ('2013', '2016');
SELECT COUNT(*) FROM matches WHERE strftime('%Y', match_date) IN ('2013', '2016');
SELECT players.country_code, players.first_name FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id WHERE matches.tourney_name = 'WTA Championships' AND rankings.tours = 'Australian Open' GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tourney_name) = 2 AND COUNT(DISTINCT rankings.tours) = 1;
SELECT players.first_name, players.country_code FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tournament = 'WTA Championships' AND rankings.tournament = 'Australian Open' GROUP BY players.player_id HAVING COUNT(DISTINCT matches.tournament) = 2;
SELECT players.first_name, players.country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players) LIMIT 1;
SELECT players.first_name, players.country_code FROM players ORDER BY players.birth_date ASC LIMIT 1;
SELECT players.first_name, players.last_name FROM players ORDER BY players.birth_date;
SELECT last_name || ' ' || birth_date AS full_name FROM players ORDER BY birth_date;
SELECT players.first_name, players.last_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date;
SELECT last_name FROM players WHERE hand = 'left' ORDER BY birth_date;
SELECT players.country_code, players.last_name FROM players JOIN matches ON players.player_id = matches.winner_id OR players.player_id = matches.loser_id GROUP BY players.player_id ORDER BY COUNT(matches.match_num) DESC LIMIT 1;
SELECT players.country_code, players.last_name FROM players JOIN matches ON players.player_id = matches.loser_id OR players.player_id = matches.winner_id GROUP BY players.player_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT strftime('%Y', match_num) as year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT strftime('%Y', ranking_date) as year, COUNT(*) as num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT players.first_name, players.last_name, SUM(matches.winner_rank_points) as total_rank_points FROM matches JOIN players ON matches.winner_id = players.player_id GROUP BY players.player_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT players.first_name, players.last_name, COUNT(matches.winner_id) as total_wins, rankings.ranking_points FROM players JOIN matches ON players.player_id = matches.winner_id JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id ORDER BY total_wins DESC, ranking_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE winner_id IN ( SELECT player_id FROM rankings WHERE ranking_date = 'Australian Open' ORDER BY ranking DESC LIMIT 1 )
SELECT winner_name FROM matches WHERE winner_id IN ( SELECT player_id FROM rankings WHERE tours = 'Australian Open' ) ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, AVG(rankings.ranking) as average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT country, COUNT(*) as player_count FROM players GROUP BY country;
SELECT country, COUNT(*) FROM players GROUP BY country;
SELECT country_code, COUNT(*) as player_count FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;
SELECT country, COUNT(*) as player_count FROM players GROUP BY country ORDER BY player_count DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50;
SELECT ranking_date, COUNT(DISTINCT round) as total_tours FROM rankings JOIN matches ON rankings.player_id = matches.winner_id OR rankings.player_id = matches.loser_id GROUP BY ranking_date;
SELECT ranking_date, COUNT(DISTINCT round) as total_tours FROM rankings JOIN matches ON rankings.player_id = matches.winner_id OR rankings.player_id = matches.loser_id GROUP BY ranking_date;
SELECT strftime('%Y', ranking_date) as year, COUNT(*) as num_matches FROM matches JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY year;
SELECT strftime('%Y', ranking_date) as year, COUNT(*) as num_matches FROM matches JOIN rankings ON matches.loser_id = rankings.player_id GROUP BY year;
SELECT players.first_name, players.last_name, rankings.ranking FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON players.player_id = rankings.player_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT players.first_name, players.last_name, matches.winner_rank FROM players JOIN matches ON players.player_id = matches.winner_id ORDER BY players.birth_date DESC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_id IN ( SELECT player_id FROM players WHERE player_id IN ( SELECT player_id FROM rankings WHERE tours = 'WTA Championships' ) ) AND loser_hand = 'L';
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L';
SELECT players.last_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id ORDER BY rankings.ranking_points DESC LIMIT 1;
SELECT loser_hand, COUNT(DISTINCT players.player_id) as player_count FROM matches JOIN players ON matches.loser_id = players.player_id GROUP BY loser_hand;
SELECT loser_hand, COUNT(DISTINCT loser_id) as player_count FROM matches GROUP BY loser_hand;
