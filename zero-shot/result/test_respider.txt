SELECT assets.asset_id, assets.asset_details FROM assets JOIN asset_parts ON assets.asset_id = asset_parts.asset_id JOIN fault_log ON assets.asset_id = fault_log.asset_id WHERE (SELECT COUNT(*) FROM asset_parts WHERE asset_parts.asset_id = assets.asset_id) = 2 GROUP BY assets.asset_id, assets.asset_details HAVING COUNT(fault_log.fault_log_entry_id) < 2;
SELECT maintenance_contract_company_id, COUNT(assets.asset_id) FROM assets JOIN maintenance_contracts ON assets.maintenance_contract_id = maintenance_contracts.maintenance_contract_id GROUP BY maintenance_contract_company_id;
SELECT third_party_companies.company_id, COUNT(assets.asset_id) FROM assets JOIN third_party_companies ON assets.supplier_company_id = third_party_companies.company_id GROUP BY third_party_companies.company_id;
SELECT third_party_companies.company_id, third_party_companies.company_name FROM third_party_companies WHERE ( SELECT COUNT(*) FROM maintenance_engineers WHERE maintenance_engineers.company_id = third_party_companies.company_id ) >= 2 OR ( SELECT COUNT(*) FROM maintenance_contracts WHERE maintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id ) >= 2;
SELECT staff.staff_name, staff.staff_id FROM staff WHERE staff.staff_id IN ( SELECT fault_log.recorded_by_staff_id FROM fault_log WHERE fault_log.fault_log_entry_id NOT IN ( SELECT engineer_visits.fault_log_entry_id FROM engineer_visits ) )
SELECT maintenance_engineers.engineer_id, maintenance_engineers.first_name, maintenance_engineers.last_name FROM engineer_visits JOIN maintenance_engineers ON engineer_visits.engineer_id = maintenance_engineers.engineer_id GROUP BY maintenance_engineers.engineer_id, maintenance_engineers.first_name, maintenance_engineers.last_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT parts.part_name, parts.part_id FROM parts JOIN part_faults ON parts.part_id = part_faults.part_id GROUP BY parts.part_name, parts.part_id HAVING COUNT(part_faults.part_fault_id) > 2;
SELECT maintenance_engineers.first_name, maintenance_engineers.last_name, maintenance_engineers.other_details, skills.skill_code FROM maintenance_engineers JOIN engineer_skills ON maintenance_engineers.engineer_id = engineer_skills.engineer_id JOIN skills ON engineer_skills.skill_id = skills.skill_id
SELECT part_faults.fault_description, skills.skill_code FROM part_faults JOIN skills_required_to_fix ON part_faults.part_fault_id = skills_required_to_fix.part_fault_id JOIN skills ON skills_required_to_fix.skill_id = skills.skill_id
SELECT parts.part_id, COUNT(asset_parts.asset_id) as num_assets FROM parts JOIN asset_parts ON parts.part_id = asset_parts.part_id GROUP BY parts.part_id;
SELECT part_faults.fault_short_name, engineer_visits.fault_status FROM fault_log JOIN fault_log_parts ON fault_log.fault_log_entry_id = fault_log_parts.fault_log_entry_id JOIN part_faults ON fault_log_parts.part_fault_id = part_faults.part_fault_id JOIN engineer_visits ON fault_log.fault_log_entry_id = engineer_visits.fault_log_entry_id;
SELECT COUNT(engineer_visits.engineer_visit_id) as num_visits, fault_log.fault_log_entry_id FROM engineer_visits JOIN fault_log ON engineer_visits.fault_log_entry_id = fault_log.fault_log_entry_id GROUP BY fault_log.fault_log_entry_id ORDER BY num_visits DESC LIMIT 1;
SELECT DISTINCT last_name FROM maintenance_engineers;
SELECT COUNT(DISTINCT part_fault_id) FROM fault_log_parts;
SELECT maintenance_engineers.last_name, maintenance_engineers.other_details FROM maintenance_engineers LEFT JOIN engineer_visits ON maintenance_engineers.engineer_id = engineer_visits.engineer_id WHERE engineer_visits.engineer_id IS NULL;
SELECT assets.asset_id, assets.asset_details, assets.asset_model FROM assets;
SELECT MIN(asset_acquired_date) FROM assets;
SELECT part_faults.part_fault_id, part_faults.fault_short_name FROM part_faults JOIN skills_required_to_fix ON part_faults.part_fault_id = skills_required_to_fix.part_fault_id GROUP BY part_faults.part_fault_id ORDER BY COUNT(skills_required_to_fix.skill_id) DESC LIMIT 1;
SELECT part_faults.fault_short_name FROM part_faults JOIN parts ON part_faults.part_id = parts.part_id GROUP BY part_faults.fault_short_name ORDER BY COUNT(*) ASC LIMIT 1;
SELECT maintenance_engineers.engineer_id, maintenance_engineers.first_name, maintenance_engineers.last_name FROM engineer_visits JOIN maintenance_engineers ON engineer_visits.engineer_id = maintenance_engineers.engineer_id GROUP BY maintenance_engineers.engineer_id, maintenance_engineers.first_name, maintenance_engineers.last_name ORDER BY COUNT(engineer_visits.engineer_visit_id) ASC LIMIT 1;
SELECT staff.staff_name, maintenance_engineers.first_name, maintenance_engineers.last_name FROM staff JOIN engineer_visits ON staff.staff_id = engineer_visits.contact_staff_id JOIN maintenance_engineers ON engineer_visits.engineer_id = maintenance_engineers.engineer_id WHERE engineer_visits.contact_staff_id IS NOT NULL AND maintenance_engineers.engineer_id IS NOT NULL;
SELECT fault_log.fault_log_entry_id, fault_log.fault_description, COUNT(*) as faulty_parts_count FROM fault_log JOIN fault_log_parts ON fault_log.fault_log_entry_id = fault_log_parts.fault_log_entry_id WHERE fault_log_parts.fault_status = 'faulty' GROUP BY fault_log.fault_log_entry_id, fault_log.fault_description ORDER BY faulty_parts_count DESC LIMIT 1;
SELECT skills.skill_id, skills.skill_description FROM skills JOIN skills_required_to_fix ON skills.skill_id = skills_required_to_fix.skill_id GROUP BY skills.skill_id, skills.skill_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT asset_details FROM assets;
SELECT assets.asset_make, assets.asset_details, assets.asset_disposed_date FROM assets ORDER BY assets.asset_disposed_date ASC;
SELECT parts.part_id, COUNT(parts.chargeable_yn) AS chargeable_amount FROM parts JOIN asset_parts ON parts.part_id = asset_parts.part_id WHERE parts.chargeable_yn = 'Y' GROUP BY parts.part_id ORDER BY chargeable_amount ASC LIMIT 1;
SELECT third_party_companies.company_name FROM maintenance_contracts JOIN third_party_companies ON maintenance_contracts.maintenance_contract_company_id = third_party_companies.company_id ORDER BY maintenance_contracts.contract_start_date ASC LIMIT 1;
SELECT company_name FROM third_party_companies WHERE company_id IN (SELECT maintenance_contract_company_id FROM maintenance_contracts ORDER BY contract_end_date DESC LIMIT 1);
SELECT gender, COUNT(*) as count FROM staff GROUP BY gender ORDER BY count DESC LIMIT 1;
SELECT staff.staff_name, COUNT(engineer_visits.engineer_id) as num_contacted_engineers FROM staff JOIN engineer_visits ON staff.staff_id = engineer_visits.contact_staff_id GROUP BY staff.staff_name;
SELECT assets.asset_model FROM assets LEFT JOIN fault_log ON assets.asset_id = fault_log.asset_id WHERE fault_log.fault_log_entry_id IS NULL;
SELECT COUNT(*) FROM book;
SELECT writer FROM book ORDER BY writer ASC;
SELECT book.issues, book.title FROM book ORDER BY book.issues ASC;
SELECT title FROM book WHERE writer != 'Elaine Lee';
SELECT book.title, book.issues FROM book;
SELECT publication.price, book.title, book.issues FROM publication INNER JOIN book ON publication.book_id = book.book_id ORDER BY publication.price DESC;
SELECT DISTINCT publisher FROM publication WHERE price > 5000000;
SELECT publication.publication_id, book.title FROM publication INNER JOIN book ON publication.book_id = book.book_id ORDER BY publication.price DESC LIMIT 1;
SELECT publication_id, price FROM publication ORDER BY price ASC LIMIT 3;
SELECT book.title, publication.publication_date FROM book INNER JOIN publication ON publication.book_id = book.book_id;
SELECT writer FROM book WHERE book_id IN (SELECT book_id FROM publication WHERE price > 4000000);
SELECT book.title FROM publication INNER JOIN book ON publication.book_id = book.book_id ORDER BY publication.price DESC;
SELECT publication.publication_id FROM publication GROUP BY publication.publication_id HAVING COUNT(publication.book_id) > 1;
SELECT publication.publication_id, COUNT(*) as number_of_publications FROM publication GROUP BY publication.publication_id;
SELECT publication_date FROM publication GROUP BY publication_date ORDER BY COUNT(*) DESC LIMIT 1;
SELECT writer FROM book GROUP BY writer HAVING COUNT(*) > 1;
SELECT book.title FROM book LEFT JOIN publication ON book.book_id = publication.book_id WHERE publication.book_id IS NULL;
SELECT publication.publication_id FROM publication WHERE publication.price > 10000000 INTERSECT SELECT publication.publication_id FROM publication WHERE publication.price < 5000000;
SELECT COUNT(DISTINCT publication_date) FROM publication;
SELECT COUNT(DISTINCT publication_date) FROM publication;
SELECT price FROM publication WHERE publication_id IN ('Person', 'Wiley');
SELECT dname FROM department ORDER BY mgr_start_date;
SELECT D.fname FROM dependent D JOIN employee E ON D.essn = E.ssn WHERE D.relationship = 'Spouse'
SELECT COUNT(*) FROM dependent WHERE relationship = 'Daughter' OR relationship = 'Son';
SELECT d.dname FROM department d JOIN dept_locations dl ON d.dnumber = dl.dnumber WHERE dl.dlocation = 'Houston';
SELECT fname, lname FROM employee WHERE salary > 30000;
SELECT sex, COUNT(*) FROM employee WHERE salary < 50000 GROUP BY sex;
SELECT fname, minit, address FROM employee ORDER BY bdate ASC;
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT teacher.name FROM teacher ORDER BY age ASC;
SELECT teacher.name FROM teacher ORDER BY teacher.age ASC;
SELECT age, hometown FROM teacher;
SELECT age, hometown FROM teacher;
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown != 'Little Lever Urban District';
SELECT name FROM teacher WHERE age IN (32, 33);
SELECT teacher.name FROM teacher WHERE age IN (32, 33);
SELECT hometown FROM teacher ORDER BY age ASC LIMIT 1;
SELECT teacher.name, MIN(teacher.age) FROM teacher;
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(*) FROM teacher GROUP BY hometown;
SELECT hometown, COUNT(*) as count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;
SELECT hometown, COUNT(*) as count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;
SELECT hometown FROM teacher GROUP BY hometown HAVING COUNT(*) >= 2;
SELECT teacher.town FROM teacher GROUP BY teacher.town HAVING COUNT(*) >= 2;
SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name, course.course FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id ORDER BY teacher.name ASC;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'Math';
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id JOIN course ON course_arrange.course_id = course.course_id WHERE course.course_id = 'Math';
SELECT teacher.name, COUNT(course_arrange.course_id) AS number_of_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name, COUNT(course_arrange.course_id) as course_count FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(course_arrange.course_id) >= 2;
SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(course_arrange.course_id) >= 2;
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL;
SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.course_id IS NULL;
SELECT COUNT(*) FROM member;
SELECT member.member_id FROM member ORDER BY member.member_id ASC;
SELECT member.member_id, member.country FROM member;
SELECT member.name FROM member JOIN college ON member.college_id = college.college_id WHERE college.college_location IN ('United States', 'Canada');
SELECT college_location, COUNT(*) FROM member JOIN college ON member.college_id = college.college_id GROUP BY college_location;
SELECT college_location AS most_common_country FROM member JOIN college ON member.college_id = college.college_id GROUP BY college_location ORDER BY COUNT(*) DESC LIMIT 1;
SELECT college_location FROM member JOIN college ON member.college_id = college.college_id GROUP BY college_location HAVING COUNT(member_id) > 2;
SELECT member.name, college.college_location FROM member JOIN college ON member.college_id = college.college_id WHERE member.member_id IN ( SELECT member_id FROM round WHERE rank_in_round = 1 );
SELECT member.name, college.name FROM member JOIN college ON member.college_id = college.college_id;
SELECT member.name, college.name FROM member JOIN college ON member.college_id = college.college_id ORDER BY member.name ASC;
SELECT DISTINCT leader_name FROM college JOIN member ON college.college_id = member.college_id WHERE member.country = 'Canada';
SELECT member.name, round.decoration_theme FROM member JOIN round ON member.member_id = round.member_id;
SELECT member.name FROM member JOIN round ON member.member_id = round.member_id WHERE round.rank_in_round > 3;
SELECT member.name FROM member JOIN round ON member.member_id = round.member_id ORDER BY round.rank_in_round ASC;
SELECT member.name FROM member LEFT JOIN round ON member.member_id = round.member_id WHERE round.member_id IS NULL;
SELECT COUNT(*) FROM election;
SELECT election.election_id, COUNT(*) as votes FROM election GROUP BY election.election_id ORDER BY votes DESC;
SELECT election.date, election.vote_percent FROM election;
SELECT MIN(vote_percent), MAX(vote_percent) FROM election;
SELECT representative.name, representative.party FROM representative;
SELECT name FROM representative WHERE party != 'Republican';
SELECT lifespan FROM representative WHERE party IN (SELECT place FROM election WHERE place IN ('New York', 'Indiana'));
SELECT representative.name, election.date FROM election JOIN representative ON election.representative_id = representative.representative_id;
SELECT name FROM representative WHERE representative_id IN (SELECT representative_id FROM election WHERE votes > 10000);
SELECT name FROM representative JOIN election ON election.representative_id = representative.representative_id ORDER BY votes DESC;
SELECT party FROM representative WHERE representative_id IN (SELECT representative_id FROM election WHERE votes = (SELECT MIN(votes) FROM election));
SELECT representative.name, MIN(election.date) AS start_date, MAX(election.date) AS end_date FROM representative JOIN election ON election.representative_id = representative.representative_id GROUP BY representative.name ORDER BY COUNT(election.election_id) DESC;
SELECT AVG(votes) FROM representative WHERE party = 'Republican';
SELECT party, COUNT(*) as num_representatives FROM representative GROUP BY party;
SELECT party FROM representative GROUP BY party ORDER BY COUNT(*) DESC LIMIT 1;
SELECT party FROM representative GROUP BY party HAVING COUNT(*) >= 3;
SELECT place FROM election GROUP BY place HAVING COUNT(DISTINCT representative_id) >= 2;
SELECT name FROM representative WHERE representative_id NOT IN (SELECT DISTINCT representative_id FROM election);
SELECT DISTINCT r1.party FROM representative r1 JOIN election e1 ON r1.representative_id = e1.representative_id JOIN representative r2 ON r1.party = r2.party JOIN election e2 ON r2.representative_id = e2.representative_id WHERE e1.place LIKE '%New York%' AND e2.place LIKE '%Pennsylvania%';
SELECT COUNT(DISTINCT party) FROM representative;
SELECT COUNT(*) FROM country;
SELECT COUNT(*) FROM country;
SELECT country, capital FROM country;
SELECT country, capital FROM country;
SELECT DISTINCT country_name FROM country WHERE country_name LIKE '%English%';
SELECT DISTINCT country_name FROM country WHERE country_name LIKE '%English%';
SELECT DISTINCT season FROM match_season;
SELECT DISTINCT position FROM match_season;
SELECT player.player_id FROM player JOIN match_season ON player.player_id = match_season.player WHERE match_season.country = 'UCLA'
SELECT player_id FROM player WHERE team IN (SELECT team_id FROM team WHERE name = 'UCLA');
SELECT DISTINCT position FROM match_season WHERE team IN (SELECT team_id FROM team WHERE team_id IN ('UCLA', 'Duke'))
SELECT DISTINCT position FROM match_season WHERE team IN (SELECT team_id FROM team WHERE team_id LIKE '%UCLA%' OR team_id LIKE '%Duke%');
SELECT draft_pick_number, draft_class FROM match_season WHERE position = 'defender';
SELECT draft_pick_number, draft_class FROM match_season WHERE player IN (SELECT player_id FROM player WHERE position = 'Defender');
SELECT COUNT(DISTINCT team.name) FROM match_season JOIN team ON match_season.team = team.team_id;
SELECT COUNT(DISTINCT team) FROM match_season;
SELECT player.player, COUNT(match_season.position) as years_played FROM player JOIN match_season ON player.player_id = match_season.player GROUP BY player.player;
SELECT player, COUNT(DISTINCT year) as years_played FROM match_season GROUP BY player;
SELECT team_name FROM team;
SELECT team_id FROM team;
SELECT match_season.season, match_season.player, country.country_name FROM match_season JOIN team ON match_season.team = team.team_id JOIN country ON match_season.country = country.country_name;
SELECT player.player_id, match_season.season, country.country_name FROM player JOIN match_season ON player.player_id = match_season.player JOIN country ON match_season.country = country.country_id;
SELECT player.player_id FROM player JOIN team ON player.team = team.team_id JOIN match_season ON team.team_id = match_season.team JOIN country ON match_season.country = country.country_id WHERE country.official_native_language = 'Indonesian';
SELECT player.player_id FROM player JOIN team ON player.team = team.team_id JOIN match_season ON team.team_id = match_season.team JOIN country ON match_season.country = country.country_id WHERE country.official_native_language = 'Indonesian'
SELECT DISTINCT player.position FROM player JOIN match_season ON player.team = match_season.team JOIN country ON match_season.country = country.country_id WHERE country.capital = 'Dublin';
SELECT DISTINCT player.years_played, player.total_wl FROM player JOIN match_season ON player.team = match_season.team JOIN country ON match_season.country = country.country_id WHERE country.country_name = 'Dublin'
SELECT DISTINCT country.official_native_language FROM country JOIN match_season ON match_season.country = country.country_id JOIN player ON player.team = match_season.team WHERE match_season.college IN ('Maryland', 'Duke')
SELECT DISTINCT country.official_native_language FROM country JOIN match_season ON country.country_name = match_season.country WHERE match_season.college IN ('Maryland', 'Duke')
SELECT COUNT(DISTINCT c.official_native_language) FROM country c JOIN match_season ms ON c.country_name = ms.country JOIN player p ON ms.player = p.player_id WHERE p.position = 'defender';
SELECT COUNT(DISTINCT c.official_native_language) FROM country c JOIN match_season ms ON c.country_id = ms.country JOIN player p ON ms.player = p.player_id WHERE p.team = 'Defender';
SELECT match_season.season, player.player, team.name FROM player JOIN match_season ON player.player_id = match_season.player JOIN team ON player.team = team.team_id;
SELECT player.player, match_season.season, team.name FROM player JOIN match_season ON player.player_id = match_season.player JOIN team ON player.team = team.team_id;
SELECT player.years_played, player.total_wl FROM player JOIN team ON player.team = team.team_id WHERE team.name = 'Ryley Goldner';
SELECT player.player, player.years_played, player.total_wl FROM player JOIN team ON player.team = team.team_id WHERE team.name = 'Ryley Goldner'
SELECT COUNT(DISTINCT college) FROM match_season WHERE team IN (SELECT team_id FROM team WHERE team_name = 'Columbus Crew');
SELECT COUNT(DISTINCT college) FROM match_season WHERE team = (SELECT team_id FROM team WHERE name = 'Columbus Crew')
SELECT player.player, COUNT(match_season.season) as years_played FROM player JOIN team ON player.team = team.name JOIN match_season ON player.player_id = match_season.player_id WHERE team.name = 'Columbus Crew' GROUP BY player.player;
SELECT player, COUNT(DISTINCT season) as years_played FROM match_season WHERE team IN (SELECT team_id FROM team WHERE name = 'Columbus Crew') GROUP BY player;
SELECT player, COUNT(*) as position FROM match_season GROUP BY player ORDER BY position DESC;
SELECT singles_wl, COUNT(*) FROM player GROUP BY singles_wl;
SELECT country.country_id, COUNT(player.player_id) FROM country JOIN match_season ON country.country_id = match_season.country JOIN player ON match_season.team = player.team GROUP BY country.country_id;
SELECT country.country_name, COUNT(player.player_id) FROM player JOIN team ON player.team = team.team_id JOIN match_season ON team.team_id = match_season.team JOIN country ON match_season.country = country.country_id GROUP BY country.country_name;
SELECT player.* FROM player ORDER BY player.team ASC;
SELECT DISTINCT player FROM match_season ORDER BY player ASC;
SELECT position, COUNT(*) as count FROM match_season GROUP BY position ORDER BY count DESC LIMIT 1;
SELECT position FROM match_season GROUP BY position ORDER BY COUNT(*) DESC LIMIT 1;
SELECT college, COUNT(*) as count FROM match_season GROUP BY college ORDER BY count DESC LIMIT 3;
SELECT country_name, COUNT(*) as player_count FROM match_season JOIN country ON match_season.country = country.country_id GROUP BY country_name ORDER BY player_count DESC LIMIT 3;
SELECT team.name FROM team JOIN player ON team.team_id = player.team GROUP BY team.name HAVING COUNT(player.player_id) >= 2;
SELECT team.name FROM team JOIN player ON team.team_id = player.team GROUP BY team.name HAVING COUNT(player.player_id) >= 2;
SELECT team.team_id, country.country_name FROM team JOIN match_season ON team.team_id = match_season.team JOIN country ON match_season.country = country.country_id GROUP BY team.team_id HAVING COUNT(DISTINCT player) >= 2 ORDER BY country.country_name DESC;
SELECT team.name FROM team JOIN player ON team.team_id = player.team GROUP BY team.name HAVING COUNT(player.player_id) >= 2 ORDER BY team.name DESC;
SELECT team.team_id FROM team LEFT JOIN match_season ON team.team_id = match_season.team WHERE match_season.team IS NULL;
SELECT team.team_id FROM team LEFT JOIN match_season ON team.team_id = match_season.team WHERE match_season.team IS NULL;
SELECT DISTINCT country_name FROM country WHERE country_name IN ( SELECT country_name FROM match_season WHERE player IN ( SELECT player_id FROM player WHERE position = 'forward' ) ) AND country_name IN ( SELECT country_name FROM match_season WHERE player IN ( SELECT player_id FROM player WHERE position = 'defender' ) );
SELECT DISTINCT country_name FROM country WHERE country_id IN ( SELECT country FROM match_season WHERE player IN ( SELECT player_id FROM player WHERE position = 'Forward' ) ) AND country_id IN ( SELECT country FROM match_season WHERE player IN ( SELECT player_id FROM player WHERE position = 'Defender' ) );
SELECT DISTINCT college FROM match_season WHERE player IN ( SELECT player_id FROM player WHERE position = 'midfielder' ) AND player IN ( SELECT player_id FROM player WHERE position = 'defender' );
SELECT DISTINCT college FROM match_season WHERE player IN ( SELECT player FROM player WHERE position = 'Midfielder' ) AND player IN ( SELECT player FROM player WHERE position = 'Defender' );
SELECT COUNT(*) FROM perpetrator;
SELECT year, COUNT(killed) as number_of_killed FROM perpetrator GROUP BY year ORDER BY number_of_killed DESC;
SELECT COUNT(perpetrator.people_id) as number_of_injured_people, people.name FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id GROUP BY perpetrator.people_id ORDER BY number_of_injured_people ASC;
SELECT AVG(people_id) FROM perpetrator;
SELECT home_town FROM people WHERE people_id IN (SELECT people_id FROM perpetrator ORDER BY killed DESC LIMIT 1);
SELECT name FROM people ORDER BY height ASC;
SELECT name FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id;
SELECT name FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id WHERE country != 'China';
SELECT people.name FROM people JOIN perpetrator ON perpetrator.people_id = people.people_id ORDER BY people.weight DESC LIMIT 1;
SELECT SUM(perpetrator.killed) FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id WHERE people.height > 1.84;
SELECT name FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id WHERE country IN ('China', 'Japan');
SELECT people.height FROM people JOIN perpetrator ON perpetrator.people_id = people.people_id GROUP BY people.height ORDER BY COUNT(*) DESC;
SELECT location, COUNT(*) FROM perpetrator GROUP BY location;
SELECT location, COUNT(*) as num_perpetrators FROM perpetrator GROUP BY location ORDER BY num_perpetrators DESC LIMIT 1;
SELECT location FROM perpetrator GROUP BY location HAVING COUNT(*) >= 2;
SELECT name FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id ORDER BY year DESC;
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM perpetrator);
SELECT DISTINCT country FROM perpetrator WHERE injures > 50 INTERSECT SELECT DISTINCT country FROM perpetrator WHERE injures < 20;
SELECT COUNT(DISTINCT home_town) FROM perpetrator INNER JOIN people ON perpetrator.people_id = people.people_id;
SELECT perpetrator.date FROM perpetrator JOIN people ON perpetrator.people_id = people.people_id ORDER BY people.height DESC LIMIT 1;
SELECT strftime('%Y', MAX(date)) FROM perpetrator;
SELECT DISTINCT station.local_authority, station.services FROM station INNER JOIN route ON station.id = route.station_id INNER JOIN train ON route.train_id = train.id WHERE train.origin = station.local_authority OR train.destination = station.local_authority;
SELECT train.name, train.time FROM train ORDER BY train.time ASC;
SELECT train.time, train.id FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id WHERE station.local_authority = 'Chennai' ORDER BY train.time;
SELECT COUNT(*) FROM train WHERE train_number LIKE '%Express%';
SELECT COUNT(DISTINCT train.id), train.time FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id WHERE train.origin = 'Chennai' AND train.destination = 'Guruvayur';
SELECT station.local_authority, COUNT(train.id) FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id GROUP BY station.local_authority;
SELECT train.name FROM train JOIN route ON train.train_number = route.train_id GROUP BY train.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT station.services, station.local_authority, COUNT(train.name) AS number_of_trains FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id GROUP BY station.services, station.local_authority;
SELECT strftime('%w', date) as day_of_week, AVG(high_temperature) as average_high_temperature FROM weekly_weather GROUP BY day_of_week;
SELECT MAX(low_temperature), AVG(precipitation) FROM weekly_weather WHERE station_id IN (SELECT id FROM station WHERE local_authority = 'Amersham');
SELECT train.name, train.time FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id WHERE station.local_authority = 'Chiltern';
SELECT COUNT(DISTINCT train.id) FROM train JOIN route ON train.id = route.train_id JOIN station ON route.station_id = station.id;
SELECT station.id, station.local_authority FROM station JOIN weekly_weather ON weekly_weather.station_id = station.id GROUP BY station.id ORDER BY AVG(weekly_weather.high_temperature) DESC LIMIT 1;
SELECT station.id, station.local_authority FROM station JOIN weekly_weather ON weekly_weather.station_id = station.id WHERE weekly_weather.precipitation > 50 GROUP BY station.id, station.local_authority HAVING MAX(weekly_weather.precipitation) > 50;
SELECT MIN(low_temperature), MAX(wind_speed * 2.237) FROM weekly_weather;
SELECT station.local_authority FROM route JOIN train ON route.train_id = train.id JOIN station ON route.station_id = station.id GROUP BY station.local_authority HAVING COUNT(DISTINCT train.id) > 1;
SELECT COUNT(*) FROM church WHERE organized_by < 1850;
SELECT church.name, church.open_date, people.name AS organizer FROM church JOIN people ON church.church_id = people.people_id;
SELECT name FROM church ORDER BY organized_by DESC;
SELECT organized_by AS opening_year, COUNT(*) AS num_churches FROM church GROUP BY organized_by HAVING num_churches >= 2;
SELECT church.name, people.name FROM church JOIN people ON church.church_id = people.people_id WHERE church.open_date BETWEEN 1830 AND 1840;
SELECT organized_by AS opening_year, COUNT(*) AS number_of_churches FROM church GROUP BY opening_year;
SELECT church.name, church.continuation_of AS opening_year FROM church ORDER BY opening_year DESC LIMIT 3;
SELECT COUNT(*) FROM people WHERE age > 30 AND people_id IN (SELECT female_id FROM wedding);
SELECT DISTINCT country FROM people WHERE age > 30 AND age < 25;
SELECT MIN(age), MAX(age), AVG(age) FROM people;
SELECT people.name, people.country FROM people WHERE people.age < (SELECT AVG(age) FROM people)
SELECT p1.name AS male_name, p2.name AS female_name FROM wedding w JOIN people p1 ON w.male_id = p1.people_id JOIN people p2 ON w.female_id = p2.people_id WHERE w.year > 2014;
SELECT p.name, p.age FROM people p LEFT JOIN wedding w ON p.people_id = w.male_id WHERE p.is_male = 1 AND w.male_id IS NULL;
SELECT name FROM church WHERE church_id NOT IN (SELECT church_id FROM wedding WHERE year = 2015);
SELECT church.name FROM wedding JOIN church ON wedding.church_id = church.church_id GROUP BY church.name HAVING COUNT(*) >= 2;
SELECT p.name FROM people p JOIN wedding w ON p.people_id = w.female_id WHERE p.country = 'Canada' AND p.is_male = 0 AND w.year = 2016;
SELECT COUNT(*) FROM wedding JOIN people ON wedding.male_id = people.people_id OR wedding.female_id = people.people_id JOIN church ON wedding.church_id = church.church_id WHERE strftime('%Y', church.open_date) = '2016'
SELECT DISTINCT church.name FROM wedding JOIN people ON wedding.male_id = people.people_id OR wedding.female_id = people.people_id JOIN church ON wedding.church_id = church.church_id WHERE people.age > 30;
SELECT people.country, COUNT(*) as number_of_people FROM people GROUP BY people.country;
SELECT COUNT(DISTINCT church.church_id) FROM wedding JOIN church ON wedding.church_id = church.church_id WHERE strftime('%Y', church.open_date) = '2016'
SELECT COUNT(*) FROM faculty;
SELECT COUNT(*) FROM faculty;
SELECT DISTINCT actid FROM faculty_participates_in;
SELECT DISTINCT rank FROM faculty;
SELECT DISTINCT room FROM faculty;
SELECT DISTINCT building FROM faculty;
SELECT rank, fname FROM faculty;
SELECT rank, fname FROM faculty;
SELECT faculty.fname, student.lname, faculty.phone FROM faculty JOIN participates_in ON faculty.facid = participates_in.facid JOIN student ON participates_in.stuid = student.stuid WHERE faculty.sex = 'Female';
SELECT fname, lname, phone FROM faculty WHERE sex = 'female';
SELECT facid FROM faculty WHERE sex = 'male';
SELECT facid FROM faculty WHERE sex = 'male';
SELECT COUNT(*) FROM faculty WHERE rank LIKE '%Professor%' AND gender = 'Female';
SELECT COUNT(*) FROM faculty WHERE rank = 'Professor' AND gender = 'Female';
SELECT phone, room, building FROM faculty WHERE lname = 'Prince' AND fname = 'Jerry';
SELECT phone, room, building FROM faculty WHERE fname = 'Jerry Prince';
SELECT COUNT(*) FROM faculty WHERE rank = 'Professor' AND phone LIKE 'NEB%';
SELECT COUNT(*) FROM faculty WHERE rank = 'Professor' AND phone LIKE 'NEB%';
SELECT faculty.fname, student.lname FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid;
SELECT fname FROM faculty;
SELECT faculty.facid, COUNT(*) as num_faculty_members FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid GROUP BY faculty.facid;
SELECT building, COUNT(faculty.facid) as num_faculty FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid GROUP BY building;
SELECT facid, COUNT(*) as count FROM faculty GROUP BY facid ORDER BY count DESC LIMIT 1;
SELECT facid, COUNT(*) as num_faculty FROM faculty GROUP BY facid ORDER BY num_faculty DESC LIMIT 1;
SELECT faculty.facid, COUNT(*) as num_professors FROM faculty GROUP BY faculty.facid HAVING num_professors >= 10;
SELECT building FROM faculty GROUP BY building HAVING COUNT(*) >= 10;
SELECT faculty.rank, COUNT(*) FROM faculty GROUP BY faculty.rank;
SELECT faculty.rank, COUNT(*) FROM faculty GROUP BY faculty.rank;
SELECT faculty.sex, COUNT(*) FROM faculty GROUP BY faculty.sex;
SELECT sex, COUNT(*) FROM faculty GROUP BY sex;
SELECT faculty.rank, COUNT(*) as num_faculty FROM faculty GROUP BY faculty.rank ORDER BY num_faculty ASC LIMIT 1;
SELECT faculty.rank FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid GROUP BY faculty.rank ORDER BY COUNT(*) ASC LIMIT 1;
SELECT gender, COUNT(*) FROM faculty WHERE rank = 'Assistant Professor' GROUP BY gender;
SELECT gender, COUNT(*) FROM faculty WHERE rank = 'Assistant Professor' GROUP BY gender;
SELECT f.fname, f.lname FROM student s JOIN faculty f ON s.advisor = f.facid WHERE s.fname = 'Linda' AND s.lname = 'Smith';
SELECT fname, advisor FROM student WHERE fname = 'Linda' AND stuid IN (SELECT stuid FROM participates_in WHERE actid IN (SELECT actid FROM faculty_participates_in WHERE facid IN (SELECT facid FROM faculty WHERE fname = 'Smith')));
SELECT student.stuid FROM student JOIN participates_in ON student.stuid = participates_in.stuid JOIN faculty_participates_in ON participates_in.actid = faculty_participates_in.actid JOIN faculty ON faculty_participates_in.facid = faculty.facid WHERE faculty.sex = 'professor'
SELECT student.stuid FROM student INNER JOIN participates_in ON student.stuid = participates_in.stuid INNER JOIN faculty_participates_in ON participates_in.actid = faculty_participates_in.actid INNER JOIN faculty ON faculty_participates_in.facid = faculty.facid WHERE student.major = faculty.major;
SELECT student.fname, faculty.fname FROM student JOIN faculty ON student.advisor = faculty.fname WHERE faculty.fname = 'Michael Goodrich';
SELECT student.fname, student.lname FROM student WHERE student.advisor = 'Michael Goodrich';
SELECT faculty.facid, COUNT(participates_in.stuid) FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid GROUP BY faculty.facid;
SELECT faculty.facid, COUNT(student.stuid) FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid GROUP BY faculty.facid;
SELECT faculty.rank, COUNT(student.stuid) FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid GROUP BY faculty.rank;
SELECT faculty.rank, COUNT(student.stuid) FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid GROUP BY faculty.rank;
SELECT f.fname, f.lname FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid JOIN participates_in pi ON fpi.actid = pi.actid JOIN student s ON pi.stuid = s.stuid GROUP BY f.facid ORDER BY COUNT(s.stuid) DESC LIMIT 1;
SELECT f.fname, f.lname FROM faculty f JOIN participates_in pi ON f.facid = pi.facid GROUP BY f.facid ORDER BY COUNT(pi.stuid) DESC LIMIT 1;
SELECT faculty.facid FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid GROUP BY faculty.facid HAVING COUNT(student.stuid) >= 2;
SELECT faculty.facid FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN participates_in ON faculty_participates_in.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid GROUP BY faculty.facid HAVING COUNT(DISTINCT student.stuid) >= 2;
SELECT faculty.facid FROM faculty LEFT JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid WHERE faculty_participates_in.facid IS NULL;
SELECT faculty.facid FROM faculty LEFT JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid WHERE faculty_participates_in.facid IS NULL;
SELECT DISTINCT activity.actid FROM activity;
SELECT actid FROM activity;
SELECT COUNT(*) FROM activity;
SELECT COUNT(*) FROM activity;
SELECT COUNT(DISTINCT facid) FROM faculty_participates_in;
SELECT COUNT(*) FROM faculty_participates_in;
SELECT faculty.facid FROM faculty LEFT JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid WHERE faculty_participates_in.actid IS NULL;
SELECT faculty.facid FROM faculty LEFT JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid WHERE faculty_participates_in.actid IS NULL;
SELECT DISTINCT f.facid FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid JOIN participates_in pi ON fpi.actid = pi.actid JOIN student s ON pi.stuid = s.stuid WHERE s.stuid IN (SELECT stuid FROM student WHERE major IS NOT NULL)
SELECT DISTINCT f.facid FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid JOIN participates_in pi ON fpi.actid = pi.actid JOIN student s ON pi.stuid = s.stuid WHERE s.major = f.facid;
SELECT COUNT(*) FROM participates_in JOIN student ON participates_in.stuid = student.stuid WHERE student.lname = 'Giuliano' AND student.fname = 'Mark';
SELECT COUNT(*) FROM participates_in JOIN student ON participates_in.stuid = student.stuid WHERE student.lname = 'Giuliano' AND student.fname = 'Mark';
SELECT activity.actid FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.lname = 'Giuliano' AND student.lname = 'Mark';
SELECT activity.activity_name FROM activity JOIN participates_in ON activity.actid = participates_in.actid JOIN student ON participates_in.stuid = student.stuid WHERE student.fname = 'Mark' AND student.lname = 'Giuliano';
SELECT faculty.fname, faculty.lname, COUNT(faculty_participates_in.actid) as num_activities FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid GROUP BY faculty.fname, faculty.lname;
SELECT faculty.fname, faculty.lname, COUNT(faculty_participates_in.actid) as num_activities FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid GROUP BY faculty.facid HAVING num_activities >= 1;
SELECT activity.activity_name, COUNT(faculty_participates_in.facid) AS num_faculty FROM activity LEFT JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.activity_name;
SELECT activity.activity_name, COUNT(faculty_participates_in.facid) FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.activity_name;
SELECT f.fname, f.lname FROM faculty f JOIN faculty_participates_in fp ON f.facid = fp.facid GROUP BY f.facid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT f.fname, f.lname FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid GROUP BY f.facid ORDER BY COUNT(fpi.actid) DESC LIMIT 1;
SELECT activity.actid, COUNT(faculty_participates_in.facid) as faculty_count FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.actid ORDER BY faculty_count DESC LIMIT 1;
SELECT activity.activity_name FROM activity JOIN faculty_participates_in ON activity.actid = faculty_participates_in.actid GROUP BY activity.activity_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT student.stuid FROM student LEFT JOIN participates_in ON student.stuid = participates_in.stuid WHERE participates_in.stuid IS NULL;
SELECT student.stuid FROM student LEFT JOIN participates_in ON student.stuid = participates_in.stuid WHERE participates_in.stuid IS NULL;
SELECT student.stuid FROM student JOIN participates_in ON student.stuid = participates_in.stuid WHERE student.age < 20;
SELECT DISTINCT stuid FROM participates_in WHERE stuid IN (SELECT stuid FROM student WHERE age < 20)
SELECT student.fname, student.lname FROM student JOIN participates_in ON student.stuid = participates_in.stuid GROUP BY student.stuid ORDER BY COUNT(participates_in.actid) DESC LIMIT 1;
SELECT student.fname, student.lname FROM student JOIN participates_in ON student.stuid = participates_in.stuid GROUP BY student.stuid ORDER BY COUNT(participates_in.actid) DESC LIMIT 1;
SELECT activity.actid, COUNT(participates_in.stuid) as student_count FROM activity JOIN participates_in ON activity.actid = participates_in.actid GROUP BY activity.actid ORDER BY student_count DESC LIMIT 1;
SELECT activity.actid, COUNT(participates_in.stuid) as num_participants FROM activity JOIN participates_in ON activity.actid = participates_in.actid GROUP BY activity.actid ORDER BY num_participants DESC LIMIT 1;
SELECT f.fname FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid JOIN activity a ON fpi.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking');
SELECT f.fname FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid JOIN activity a ON fpi.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking');
SELECT fname FROM faculty WHERE fname NOT IN ( SELECT fname FROM faculty JOIN faculty_participates_in ON faculty.facid = faculty_participates_in.facid JOIN activity ON faculty_participates_in.actid = activity.actid WHERE activity.actid IN ( SELECT actid FROM activity WHERE actid IN ( SELECT actid FROM activity WHERE actid = 'Canoeing' OR actid = 'Kayaking' ) ) );
SELECT faculty.facid FROM faculty WHERE faculty.facid NOT IN ( SELECT faculty_participates_in.facid FROM faculty_participates_in JOIN activity ON faculty_participates_in.actid = activity.actid WHERE activity.actid IN ('Canoeing', 'Kayaking') )
SELECT f.fname FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid JOIN activity a ON fpi.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking') GROUP BY f.fname HAVING COUNT(DISTINCT a.activity_name) = 2;
SELECT f.fname FROM faculty f JOIN faculty_participates_in fpi ON f.facid = fpi.facid JOIN activity a ON fpi.actid = a.actid WHERE a.activity_name IN ('Canoeing', 'Kayaking') GROUP BY f.fname HAVING COUNT(DISTINCT a.activity_name) = 2;
SELECT DISTINCT participates_in.stuid FROM participates_in JOIN activity ON participates_in.actid = activity.actid WHERE activity.activity_name IN ('Canoeing', 'Kayaking');
SELECT DISTINCT stuid FROM participates_in WHERE actid IN (SELECT actid FROM activity WHERE activity_name IN ('Canoeing', 'Kayaking')) GROUP BY stuid HAVING COUNT(DISTINCT actid) = 2;
SELECT COUNT(*) FROM body_builder;
SELECT people.name, (body_builder.snatch + body_builder.clean_jerk) AS total_score FROM body_builder JOIN people ON body_builder.people_id = people.people_id ORDER BY total_score ASC;
SELECT clean_jerk, total FROM body_builder ORDER BY total ASC;
SELECT AVG(total) FROM body_builder;
SELECT MAX(total) AS highest_total, snatch AS clean_and_jerk FROM body_builder JOIN people ON body_builder.people_id = people.people_id WHERE total = (SELECT MAX(total) FROM body_builder)
SELECT people.name, people.height FROM people ORDER BY people.height ASC;
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder);
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total > 300);
SELECT name FROM people JOIN body_builder ON people.people_id = body_builder.body_builder_id ORDER BY weight DESC LIMIT 1;
SELECT birth_date, birth_place FROM people WHERE people_id IN (SELECT people_id FROM body_builder ORDER BY total DESC LIMIT 1);
SELECT height FROM people WHERE people_id IN (SELECT people_id FROM body_builder WHERE total < 315);
SELECT AVG(total) FROM body_builder WHERE people_id IN (SELECT people_id FROM people WHERE height > 200);
SELECT name FROM people JOIN body_builder ON people.people_id = body_builder.people_id ORDER BY total DESC;
SELECT birth_place, COUNT(*) FROM people GROUP BY birth_place;
SELECT birth_place, COUNT(*) as count FROM people GROUP BY birth_place ORDER BY count DESC LIMIT 1;
SELECT birth_place FROM people GROUP BY birth_place HAVING COUNT(*) >= 2;
SELECT weight, height FROM people ORDER BY height DESC;
SELECT body_builder.*, people.* FROM body_builder INNER JOIN people ON body_builder.people_id = people.people_id;
SELECT name, height, weight, birth_date FROM people WHERE people_id NOT IN (SELECT people_id FROM body_builder);
SELECT COUNT(DISTINCT birth_place) FROM people;
SELECT COUNT(*) FROM people WHERE people_id NOT IN (SELECT people_id FROM body_builder);
SELECT DISTINCT people.weight FROM people JOIN body_builder ON body_builder.people_id = people.people_id WHERE body_builder.snatch > 140 OR people.height > 200;
SELECT SUM(total) FROM body_builder WHERE body_builder_id IN (SELECT people_id FROM people WHERE birth_date LIKE '%January%');
SELECT MIN(total) FROM body_builder;
SELECT COUNT(*) FROM candidate;
SELECT COUNT(*) FROM candidate;
SELECT candidate.people_id, COUNT(*) as count FROM candidate GROUP BY candidate.people_id ORDER BY count DESC LIMIT 1;
SELECT candidate_id, COUNT(*) as num_candidates FROM candidate GROUP BY candidate_id ORDER BY num_candidates DESC LIMIT 1;
SELECT candidate_id, COUNT(*) as support_rate FROM candidate GROUP BY candidate_id ORDER BY support_rate DESC LIMIT 3;
SELECT candidate_id, COUNT(*) as support_rate FROM candidate GROUP BY candidate_id ORDER BY support_rate DESC LIMIT 3;
SELECT people_id FROM candidate ORDER BY oppose_rate ASC LIMIT 1;
SELECT people_id FROM candidate ORDER BY oppose_rate ASC LIMIT 1;
SELECT candidate.consider_rate, candidate.oppose_rate, candidate.unsure_rate FROM candidate JOIN people ON candidate.people_id = people.people_id ORDER BY candidate.unsure_rate ASC;
SELECT candidate.consider_rate, candidate.oppose_rate, candidate.unsure_rate FROM candidate INNER JOIN people ON candidate.people_id = people.people_id ORDER BY candidate.unsure_rate ASC;
SELECT source FROM candidate WHERE oppose_rate = (SELECT MAX(oppose_rate) FROM candidate);
SELECT candidate.oppose_rate, people.name FROM candidate INNER JOIN people ON candidate.people_id = people.people_id;
SELECT name FROM people ORDER BY date ASC;
SELECT name FROM people ORDER BY date_of_birth;
SELECT AVG(height), AVG(weight) FROM people WHERE sex = 'M';
SELECT AVG(height), AVG(weight) FROM people WHERE sex = 'M';
SELECT people.people_id, people.height FROM people WHERE people.height > 200 OR people.height < 190;
SELECT name FROM people WHERE height > 200 OR height < 190;
SELECT people.sex, AVG(people.height) AS average_height, MIN(people.height) AS minimum_height FROM people GROUP BY people.sex;
SELECT people.sex, AVG(people.weight) AS average_weight, MIN(people.weight) AS minimum_weight FROM people GROUP BY people.sex;
SELECT people.name, people.sex FROM candidate JOIN people ON candidate.people_id = people.people_id ORDER BY candidate.support_rate DESC LIMIT 1;
SELECT people.name, people.sex FROM candidate JOIN people ON candidate.people_id = people.people_id ORDER BY candidate.support_rate DESC LIMIT 1;
SELECT p.name FROM people p JOIN candidate c ON p.people_id = c.people_id WHERE (p.sex, c.oppose_rate) IN ( SELECT p.sex, MIN(c.oppose_rate) FROM people p JOIN candidate c ON p.people_id = c.people_id GROUP BY p.sex )
SELECT p.sex, p.name, p.sex FROM people p JOIN (SELECT c.people_id, COUNT(*) as oppose_count FROM candidate c WHERE c.poll_source = 'oppose' GROUP BY c.people_id) oppose_counts ON p.people_id = oppose_counts.people_id ORDER BY oppose_count DESC;
SELECT CASE WHEN people.name LIKE '%Mr.%' THEN 'Male' WHEN people.name LIKE '%Mrs.%' THEN 'Female' ELSE 'Unknown' END AS gender, AVG((candidate.consider_rate - candidate.oppose_rate) / (candidate.consider_rate + candidate.oppose_rate)) AS avg_uncertain_ratio FROM people JOIN candidate ON candidate.people_id = people.people_id GROUP BY gender ORDER BY avg_uncertain_ratio DESC LIMIT 1;
SELECT people.sex FROM candidate JOIN people ON candidate.people_id = people.people_id WHERE candidate.poll_source = 'unsure' ORDER BY candidate.date DESC LIMIT 1;
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate);
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id FROM candidate);
SELECT people.name FROM candidate JOIN people ON candidate.people_id = people.people_id WHERE candidate.oppose_rate > (100 - candidate.oppose_rate);
SELECT name FROM people WHERE people_id IN (SELECT people_id FROM candidate WHERE support_rate < oppose_rate);
SELECT sex, COUNT(*) as count FROM people WHERE weight > 85 GROUP BY sex;
SELECT COUNT(*) FROM people WHERE weight > 85;
SELECT MAX((consider_rate - oppose_rate) / (consider_rate + oppose_rate)) AS support_percentage, MIN(consider_rate) AS lowest_consider_rate, MIN(oppose_rate) AS lowest_oppose_rate FROM candidate;
SELECT MAX(consider_rate) AS max_consider_rate, MIN(consider_rate) AS min_consider_rate, MIN(oppose_rate) AS min_oppose_rate FROM candidate;
SELECT people.name FROM people JOIN candidate ON candidate.people_id = people.people_id WHERE people.sex = 'F' ORDER BY people.name ASC;
SELECT name FROM people WHERE sex = 'F' ORDER BY name ASC;
SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people);
SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people);
SELECT * FROM people;
SELECT * FROM people;
SELECT city_id FROM hosting_city WHERE year = (SELECT MAX(year) FROM hosting_city)
SELECT city.city_id FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id WHERE hosting_city.year = (SELECT MAX(year) FROM hosting_city) LIMIT 1;
SELECT match_id FROM hosting_city WHERE year = 1994;
SELECT match_id FROM match WHERE competition = '1994 FIFA World Cup qualification';
SELECT DISTINCT city.city FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id WHERE hosting_city.year > 2010;
SELECT DISTINCT city.city FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id WHERE hosting_city.year > 2010;
SELECT city.city, COUNT(*) as num_events FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id GROUP BY city.city ORDER BY num_events DESC LIMIT 1;
SELECT city.city FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id GROUP BY city.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT match.venue FROM match JOIN hosting_city ON match.match_id = hosting_city.match_id JOIN city ON hosting_city.host_city = city.city WHERE city.city = 'Nanjing ( Jiangsu )' AND match.year = 1994;
SELECT match.venue FROM match JOIN hosting_city ON match.match_id = hosting_city.match_id JOIN city ON hosting_city.host_city = city.city_id WHERE match.year = 1994 AND city.city = 'Nanjing' AND city.regional_population = 'Jiangsu' AND match.score = 'FIFA World Cup qualification';
SELECT temperature.jan FROM temperature JOIN city ON temperature.city_id = city.city_id WHERE city.city = 'Shanghai' AND city.hanzi = '上海';
SELECT jan FROM temperature WHERE city_id = (SELECT city_id FROM city WHERE city = 'Shanghai');
SELECT year FROM hosting_city WHERE city_id = (SELECT city_id FROM city WHERE city = 'Taizhou ( Zhejiang )');
SELECT year FROM hosting_city WHERE host_city = (SELECT city_id FROM city WHERE city = 'Taizhou ( Zhejiang )');
SELECT Your question seems to be incomplete. It's not clear what the "regional population" refers to. Assuming that there is a column named "population" in the "city" table, the SQL query would be: ```sql SELECT city, population FROM city ORDER BY population DESC LIMIT 3; ``` This query selects the names of the three cities with the highest population from the "city" table. If there is no "population" column in the "city" table, or if the "regional population" is stored in a different way, please provide more details so I can give a more accurate answer.
SELECT city.city, city.hanzi, city.hanyu_pinyin, city.population FROM city ORDER BY city.population DESC LIMIT 3;
SELECT city.city, city.gdp FROM city ORDER BY city.gdp ASC LIMIT 1;
SELECT city, GDP FROM city ORDER BY GDP ASC LIMIT 1;
SELECT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.feb = (SELECT MAX(feb) FROM temperature);
SELECT city.city FROM temperature JOIN city ON temperature.city_id = city.city_id WHERE temperature.feb = (SELECT MAX(feb) FROM temperature WHERE feb IS NOT NULL);
SELECT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.jul OR temperature.mar > temperature.oct;
SELECT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.jul OR temperature.mar > temperature.oct;
SELECT city.city FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.jul;
SELECT DISTINCT city.city FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.mar < temperature.jul;
SELECT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id LEFT JOIN hosting_city ON city.city_id = hosting_city.host_city WHERE temperature.mar < temperature.dec AND hosting_city.host_city IS NULL;
SELECT DISTINCT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id LEFT JOIN hosting_city ON city.city_id = hosting_city.host_city WHERE temperature.mar < temperature.dec AND hosting_city.host_city IS NULL;
SELECT DISTINCT city.city FROM city JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.feb > temperature.jun UNION SELECT DISTINCT city.city FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city;
SELECT DISTINCT city.city FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id JOIN temperature ON city.city_id = temperature.city_id WHERE temperature.feb > temperature.jun UNION SELECT DISTINCT city.city FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id;
SELECT city.city FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city JOIN match ON hosting_city.match_id = match.match_id WHERE match.competition = 'Regional' AND city.population > 10000000;
SELECT city.city FROM city WHERE city.population > 10000000;
SELECT city.city FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city WHERE city.population > 8000000 OR city.population < 5000000;
SELECT city.city FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city WHERE city.population > 8000000 OR city.population < 5000000;
SELECT COUNT(*) as number_of_matches, venue FROM match GROUP BY venue;
SELECT match.match_id, COUNT(*) as number_of_matches FROM match JOIN hosting_city ON match.match_id = hosting_city.match_id GROUP BY match.match_id;
SELECT match.venue FROM match ORDER BY match.date DESC;
SELECT match.venue FROM match ORDER BY match.match_id DESC;
SELECT SUM(regional_population) AS GDP FROM city;
SELECT city.gdp FROM city WHERE city.city_id IN ( SELECT hosting_city.host_city FROM hosting_city GROUP BY hosting_city.host_city ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT city.gdp, city.regional_population FROM city JOIN hosting_city ON city.city_id = hosting_city.host_city GROUP BY city.city_id HAVING COUNT(hosting_city.match_id) > 1;
SELECT city.gdp, city.regional_population FROM hosting_city JOIN city ON hosting_city.host_city = city.city_id GROUP BY city.city_id HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_code = 'ACCT';
SELECT COUNT(*) FROM professor WHERE dept_code IN (SELECT dept_code FROM department WHERE dept_code = 'ACCT');
SELECT COUNT(*) FROM class JOIN employee ON class.prof_num = employee.emp_num WHERE class_code = 'ACCT-211';
SELECT COUNT(*) FROM class WHERE class_code = 'ACCT-211';
SELECT employee.emp_fname, employee.emp_lname FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_code = 'BIOL';
SELECT employee.emp_fname, employee.emp_initial FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_code = 'BIOL';
SELECT employee.emp_fname, employee.emp_initial, employee.emp_lname FROM employee JOIN professor ON professor.emp_num = employee.emp_num JOIN class ON class.prof_num = employee.emp_num JOIN course ON course.crs_code = class.crs_code WHERE course.crs_code = 'ACCT-211';
SELECT employee.emp_fname, employee.emp_bdate FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN class ON professor.emp_num = class.prof_num WHERE class.crs_code = 'ACCT-211';
SELECT COUNT(*) FROM class JOIN employee ON class.prof_num = employee.emp_num WHERE employee.emp_fname = 'Graztevski'
SELECT COUNT(*) FROM class JOIN employee ON class.prof_num = employee.emp_num WHERE employee.emp_lname = 'Graztevski';
SELECT dept_code FROM department WHERE dept_name = 'Accounting';
SELECT school_code FROM department WHERE dept_code = 'ACCT';
SELECT crs_credit, description FROM course WHERE crs_code = 'CIS-220';
SELECT crs_credit FROM course WHERE crs_code = 'CIS-220';
SELECT dept_address FROM department WHERE dept_code = 'HIST';
SELECT dept_address FROM department WHERE dept_code = 'HIST';
SELECT COUNT(DISTINCT class_room) FROM class WHERE crs_code LIKE 'BUS%';
SELECT dept_address FROM department WHERE dept_code = 'BUS';
SELECT dept_code, COUNT(DISTINCT dept_address) as num_locations FROM department GROUP BY dept_code;
SELECT department.dept_address, COUNT(*) FROM department GROUP BY department.dept_address;
SELECT crs_credit, crs_code FROM course WHERE crs_code = 'QM-261';
SELECT crs_credit, crs_code FROM course WHERE crs_code = 'QM-261';
SELECT dept_code, COUNT(*) as num_departments FROM department GROUP BY dept_code;
SELECT COUNT(DISTINCT dept_code) FROM department;
SELECT COUNT(DISTINCT dept_code) as num_departments, school_code FROM department GROUP BY school_code HAVING COUNT(DISTINCT dept_code) < 5;
SELECT COUNT(DISTINCT dept_code) FROM department WHERE dept_address < 5;
SELECT class_code, COUNT(*) as section_count FROM class GROUP BY class_code;
SELECT class.class_code, COUNT(*) as section_count FROM class GROUP BY class.class_code;
SELECT department.dept_code, SUM(course.crs_credit) AS total_credit FROM department JOIN course ON department.dept_code = course.dept_code GROUP BY department.dept_code;
SELECT SUM(crs_credit) FROM course WHERE dept_code = 'your_department_code';
SELECT COUNT(*) FROM class GROUP BY class_code HAVING COUNT(*) >= 2;
SELECT class_section, COUNT(*) as num_classes FROM class GROUP BY class_section HAVING COUNT(*) >= 2;
SELECT department.dept_code, COUNT(class.class_section) as num_classes FROM department JOIN professor ON professor.dept_code = department.dept_code JOIN class ON class.prof_num = professor.emp_num GROUP BY department.dept_code;
SELECT department.dept_name, COUNT(class.class_room) as num_classes FROM department JOIN course ON department.dept_code = course.dept_code JOIN class ON course.crs_code = class.crs_code GROUP BY department.dept_name;
SELECT class_room, COUNT(*) as num_classes FROM class GROUP BY class_room;
SELECT department.dept_name, COUNT(class.class_section) as num_classes FROM department JOIN class ON department.dept_code = class.dept_code GROUP BY department.dept_name;
SELECT department.dept_code, COUNT(professor.emp_num) FROM department JOIN professor ON department.dept_code = professor.dept_code GROUP BY department.dept_code;
SELECT COUNT(DISTINCT prof_num) FROM professor;
SELECT COUNT(employee.emp_num) as count, department.dept_code as code FROM employee JOIN department ON employee.emp_num = department.emp_num GROUP BY department.dept_code ORDER BY count DESC LIMIT 1;
SELECT COUNT(*) as count, emp_num as code FROM department GROUP BY emp_num ORDER BY count DESC LIMIT 1;
SELECT dept_code, COUNT(*) as prof_count FROM professor GROUP BY dept_code ORDER BY prof_count ASC LIMIT 1;
SELECT dept_name FROM department WHERE emp_num IN (SELECT MIN(emp_num) FROM department);
SELECT department.dept_name, COUNT(professor.emp_num) FROM department JOIN professor ON department.dept_code = professor.dept_code WHERE professor.prof_degree = 'Ph.D.' GROUP BY department.dept_name;
SELECT department.dept_name, COUNT(professor.emp_num) FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE professor.prof_extension = 'Ph.D.' GROUP BY department.dept_name;
SELECT department.dept_code, COUNT(student.stu_num) FROM department JOIN student ON student.dept_code = department.dept_code GROUP BY department.dept_code;
SELECT department.dept_code, COUNT(student.stu_num) AS student_count FROM department LEFT JOIN student ON student.dept_code = department.dept_code GROUP BY department.dept_code;
SELECT department.dept_name, SUM(student.stu_hrs) AS total_hours FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.crs_code JOIN department ON student.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT department.dept_name, COUNT(*) as hours_spent FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN department ON student.dept_code = department.dept_code GROUP BY department.dept_name;
SELECT department.dept_name, MAX(enroll.enroll_grade) AS max_gpa, AVG(enroll.enroll_grade) AS avg_gpa, MIN(enroll.enroll_grade) AS min_gpa FROM department JOIN student ON department.dept_code = student.dept_code JOIN enroll ON student.stu_num = enroll.stu_num GROUP BY department.dept_name;
SELECT department.dept_name, MAX(enroll.enroll_grade) AS highest_GPA, MIN(enroll.enroll_grade) AS lowest_GPA, AVG(enroll.enroll_grade) AS average_GPA FROM student JOIN department ON student.dept_code = department.dept_code JOIN enroll ON enroll.stu_num = student.stu_num GROUP BY department.dept_name;
SELECT d.dept_code, AVG(e.enroll_grade) as avg_gpa FROM department d JOIN student s ON d.dept_code = s.dept_code JOIN enroll e ON s.stu_num = e.stu_num GROUP BY d.dept_code ORDER BY avg_gpa DESC LIMIT 1;
SELECT department.dept_code, AVG(enroll.enroll_grade) as average_gpa FROM department JOIN student ON student.dept_code = department.dept_code JOIN enroll ON enroll.stu_num = student.stu_num GROUP BY department.dept_code ORDER BY average_gpa DESC LIMIT 1;
SELECT COUNT(DISTINCT dept_code) FROM department;
SELECT COUNT(DISTINCT school_code) FROM department;
SELECT COUNT(DISTINCT class_section) FROM class;
SELECT COUNT(DISTINCT crs_code) FROM course;
SELECT COUNT(*) FROM course;
SELECT COUNT(DISTINCT crs_code) FROM course;
SELECT COUNT(*) FROM department;
SELECT COUNT(DISTINCT dept_name) FROM department;
SELECT COUNT(*) FROM course JOIN department ON course.dept_code = department.dept_code WHERE department.dept_code = 'CIS';
SELECT COUNT(*) FROM course JOIN department ON course.dept_code = department.dept_code WHERE department.dept_name = 'Computer Information Systems';
SELECT COUNT(*) FROM class WHERE class_code = 'ACCT-211';
SELECT COUNT(DISTINCT class_code) FROM class WHERE crs_code = 'ACCT-211';
SELECT department.dept_code, SUM(course.crs_credit) AS total_credits FROM department JOIN course ON department.dept_code = course.dept_code JOIN class ON course.crs_code = class.crs_code GROUP BY department.dept_code;
SELECT department.dept_code, SUM(course.crs_credit) AS total_credits FROM department JOIN course ON department.dept_code = course.dept_code GROUP BY department.dept_code;
SELECT department.dept_code FROM department JOIN course ON department.dept_code = course.dept_code JOIN class ON course.crs_code = class.crs_code GROUP BY department.dept_code ORDER BY SUM(course.crs_credit) DESC LIMIT 1;
SELECT department.dept_code, SUM(course.crs_credit) AS total_credits FROM department JOIN course ON department.dept_code = course.dept_code GROUP BY department.dept_code ORDER BY total_credits DESC LIMIT 1;
SELECT COUNT(*) FROM enroll WHERE class_code = 'ACCT-211';
SELECT COUNT(*) FROM enroll JOIN class ON enroll.class_code = class.class_code WHERE class.crs_code = 'ACCT-211';
SELECT student.stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll.class_code = 'ACCT-211';
SELECT student.stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code = 'ACCT' AND course.crs_description = '211';
SELECT student.stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.crs_code WHERE class.crs_code = 'ACCT-211' AND enroll.enroll_grade = 'C';
SELECT student.stu_lname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code WHERE class.crs_code = 'ACCT-211' AND enroll.enroll_grade = 'C';
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM professor WHERE prof_extension LIKE '%Ph.D.%';
SELECT COUNT(*) FROM professor WHERE prof_extension LIKE '%Ph.D.%';
SELECT COUNT(DISTINCT enroll.stu_num) FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN professor ON class.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_name = 'Accounting';
SELECT COUNT(DISTINCT enroll.stu_num) FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code JOIN professor ON course.dept_code = professor.dept_code WHERE professor.dept_code = 'ACCT';
SELECT d.dept_code FROM department d JOIN student s ON d.dept_code = s.dept_code JOIN enroll e ON s.stu_num = e.stu_num GROUP BY d.dept_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT department.dept_code, COUNT(student.stu_num) as student_count FROM department JOIN student ON student.dept_code = department.dept_code GROUP BY department.dept_code ORDER BY student_count DESC LIMIT 1;
SELECT dept_code FROM department ORDER BY dept_code;
SELECT dept_code FROM department ORDER BY dept_code ASC;
SELECT course.crs_code FROM course JOIN class ON course.crs_code = class.class_code WHERE class.class_room = 'KLR209';
SELECT class.crs_code FROM class WHERE class.class_section = 'KLR209';
SELECT employee.emp_fname FROM employee JOIN professor ON professor.emp_num = employee.emp_num WHERE employee.emp_jobcode = 'PROF' ORDER BY employee.emp_dob;
SELECT employee.emp_fname FROM employee JOIN professor ON employee.emp_num = professor.emp_num ORDER BY employee.emp_dob;
SELECT employee.emp_lname, professor.prof_extension FROM professor JOIN employee ON professor.emp_num = employee.emp_num ORDER BY employee.emp_lname ASC;
SELECT employee.emp_fname, professor.prof_extension FROM professor JOIN employee ON professor.emp_num = employee.emp_num ORDER BY employee.emp_fname;
SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1;
SELECT employee.emp_fname, employee.emp_lname FROM employee WHERE emp_dob = (SELECT MIN(emp_dob) FROM employee);
SELECT student.stu_fname, student.stu_lname, student.stu_gpa FROM student WHERE student.stu_gpa > 3 ORDER BY student.stu_num ASC LIMIT 1;
SELECT student.stu_fname, student.stu_lname, student.stu_gpa FROM student WHERE student.stu_gpa > 3 ORDER BY student.stu_dob DESC LIMIT 1;
SELECT student.stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll.enroll_grade = 'C';
SELECT student.stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll.enroll_grade = 'C';
SELECT d.dept_code FROM department d JOIN professor p ON d.dept_code = p.dept_code GROUP BY d.dept_code ORDER BY COUNT(p.emp_num) ASC LIMIT 1;
SELECT dept_name FROM department GROUP BY dept_name ORDER BY COUNT(emp_num) ASC LIMIT 1;
SELECT department.dept_code FROM department JOIN professor ON department.dept_code = professor.dept_code WHERE professor.prof_high_degree = 'Ph.D.' GROUP BY department.dept_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT department.dept_code, COUNT(professor.prof_high_degree) as phd_count FROM department JOIN professor ON department.dept_code = professor.dept_code WHERE professor.prof_high_degree = 'Ph.D.' GROUP BY department.dept_code ORDER BY phd_count DESC LIMIT 1;
SELECT DISTINCT employee.emp_fname FROM employee LEFT JOIN professor ON employee.emp_num = professor.emp_num LEFT JOIN class ON professor.emp_num = class.prof_num WHERE class.class_code IS NULL;
SELECT DISTINCT emp_fname FROM employee WHERE emp_num NOT IN (SELECT prof_num FROM class)
SELECT DISTINCT employee.emp_fname FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN department ON professor.dept_code = department.dept_code LEFT JOIN class ON professor.emp_num = class.prof_num WHERE department.dept_code = 'HIST' AND class.prof_num IS NULL;
SELECT DISTINCT emp_fname FROM employee WHERE emp_num NOT IN ( SELECT prof_num FROM class ) AND emp_num IN ( SELECT emp_num FROM professor WHERE dept_code IN ( SELECT dept_code FROM department WHERE dept_code LIKE 'HIST%' ) );
SELECT employee.emp_fname, department.dept_extension FROM professor JOIN department ON professor.dept_code = department.dept_code JOIN employee ON professor.emp_num = employee.emp_num WHERE department.dept_code = 'HIST';
SELECT employee.emp_lname, department.dept_address FROM professor JOIN employee ON professor.emp_num = employee.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE professor.prof_high_degree = 'History'
SELECT department.dept_code, professor.prof_office FROM professor JOIN employee ON professor.emp_num = employee.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE employee.emp_fname = 'Heffington';
SELECT department.dept_code, professor.prof_office FROM professor JOIN department ON professor.dept_code = department.dept_code JOIN employee ON professor.emp_num = employee.emp_num WHERE employee.emp_fname = 'Heffington';
SELECT employee.emp_lname, professor.prof_extension FROM professor JOIN employee ON professor.emp_num = employee.emp_num WHERE professor.prof_extension = 'DRE 102';
SELECT employee.emp_lname, employee.emp_hiredate FROM professor JOIN employee ON professor.emp_num = employee.emp_num WHERE professor.prof_extension = 'DRE 102';
SELECT class_code FROM enroll WHERE stu_num IN (SELECT stu_num FROM student WHERE stu_lname = 'Smithson');
SELECT DISTINCT course.crs_code FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE student.stu_fname = 'Smithson';
SELECT course.crs_credit, course.crs_description FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE student.stu_lname = 'Smithson';
SELECT course.crs_credit, course.crs_desc FROM course JOIN class ON course.crs_code = class.crs_code JOIN enroll ON class.class_code = enroll.class_code JOIN student ON enroll.stu_num = student.stu_num WHERE student.stu_fname = 'Smithson' LIMIT 1;
SELECT COUNT(*) FROM professor WHERE prof_extension LIKE '%Ph.D%' OR prof_extension LIKE '%MA%';
SELECT COUNT(*) FROM professor WHERE prof_extension = 'Ph.D.' OR prof_extension = 'Masters';
SELECT COUNT(*) FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_name IN ('Accounting', 'Biology');
SELECT COUNT(*) FROM professor JOIN department ON professor.dept_code = department.dept_code WHERE department.dept_code IN ('ACC', 'BIO');
SELECT emp_fname FROM employee WHERE emp_num IN ( SELECT prof_num FROM class WHERE class_code IN ('CIS-220', 'QM-261') GROUP BY prof_num HAVING COUNT(DISTINCT class_code) = 2 )
SELECT employee.emp_fname FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN class ON professor.prof_num = class.prof_num JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code = 'CIS' AND course.crs_description IN ('CIS-220', 'QM-261') LIMIT 1;
SELECT student.stu_init FROM student JOIN department ON student.dept_code = department.dept_code JOIN class ON enroll.class_code = class.class_code JOIN enroll ON enroll.stu_num = student.stu_num WHERE department.dept_code IN ('ACCT', 'CIS') LIMIT 1;
SELECT student.stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description IN ('Accounting', 'Computer Information Systems')
SELECT AVG(enroll_grade) FROM enroll INNER JOIN class ON enroll.class_code = class.class_code INNER JOIN course ON class.crs_code = course.crs_code WHERE course.crs_code = 'ACCT-211';
SELECT AVG(enroll_grade) FROM enroll JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code WHERE course.dept_code = 'ACCT' AND course.crs_description = '211';
SELECT student.stu_init, student.stu_gpa, student.stu_phone FROM student ORDER BY student.stu_gpa DESC LIMIT 5;
SELECT student.stu_fname, student.stu_gpa, student.stu_phone FROM student ORDER BY student.stu_gpa DESC LIMIT 5;
SELECT department.dept_name FROM department JOIN student ON department.dept_code = student.dept_code JOIN enroll ON student.stu_num = enroll.stu_num GROUP BY department.dept_name ORDER BY AVG(enroll.enroll_grade) ASC LIMIT 1;
SELECT department.dept_code FROM department JOIN student ON department.dept_code = student.dept_code JOIN enroll ON student.stu_num = enroll.stu_num GROUP BY department.dept_code ORDER BY AVG(enroll.enroll_grade) ASC LIMIT 1;
SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)
SELECT student.stu_fname, student.stu_gpa FROM student WHERE student.stu_gpa < (SELECT AVG(stu_gpa) FROM student)
SELECT dept_address, dept_code FROM department WHERE dept_code IN ( SELECT dept_code FROM student WHERE stu_num IN ( SELECT stu_num FROM enroll ) GROUP BY dept_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT department.dept_address, department.dept_code FROM department JOIN student ON student.dept_code = department.dept_code GROUP BY department.dept_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT dept_name, dept_address, COUNT(*) as num_students FROM department JOIN student ON department.dept_code = student.dept_code GROUP BY dept_name, dept_address ORDER BY num_students DESC LIMIT 3;
SELECT department.dept_name, department.dept_address, COUNT(student.stu_num) as num_students FROM department JOIN student ON department.dept_code = student.dept_code GROUP BY department.dept_name, department.dept_address ORDER BY num_students DESC LIMIT 3;
SELECT employee.emp_lname, department.dept_address FROM professor JOIN department ON professor.dept_code = department.dept_code JOIN employee ON professor.emp_num = employee.emp_num WHERE professor.prof_high_degree = 'Ph.D.' AND department.dept_name = 'History' LIMIT 1;
SELECT employee.emp_lname, department.dept_address FROM professor JOIN department ON professor.dept_code = department.dept_code JOIN employee ON professor.emp_num = employee.emp_num WHERE professor.prof_high_degree = 'Ph.D' AND department.dept_name = 'History';
SELECT employee.emp_initial FROM employee JOIN class ON employee.emp_num = class.prof_num JOIN course ON class.crs_code = course.crs_code WHERE employee.emp_jobcode = 'INSTR' GROUP BY employee.emp_initial, class.crs_code LIMIT 1;
SELECT employee.emp_initial FROM employee JOIN class ON employee.emp_num = class.prof_num JOIN professor ON employee.emp_num = professor.emp_num WHERE class.prof_num IS NOT NULL AND professor.dept_code IS NOT NULL;
SELECT employee.emp_initial FROM employee JOIN class ON employee.emp_num = class.prof_num JOIN course ON class.crs_code = course.crs_code WHERE course.crs_description IS NOT NULL;
SELECT employee.emp_initial FROM employee JOIN class ON employee.emp_num = class.prof_num JOIN course ON class.crs_code = course.crs_code WHERE employee.emp_jobcode = 'TEACHER'
SELECT employee.emp_initial, professor.prof_extension, course.crs_code FROM professor JOIN employee ON professor.emp_num = employee.emp_num JOIN class ON professor.emp_num = class.prof_num JOIN course ON class.crs_code = course.crs_code WHERE professor.prof_high_degree = 'Instructor'
SELECT employee.emp_initial, professor.prof_extension FROM employee JOIN professor ON employee.emp_num = professor.emp_num JOIN class ON professor.emp_num = class.prof_num WHERE employee.emp_jobcode = 'LECTURER' GROUP BY employee.emp_initial, professor.prof_extension;
SELECT employee.emp_lname, professor.prof_office, course.crs_description, department.dept_name FROM professor JOIN employee ON professor.emp_num = employee.emp_num JOIN department ON professor.dept_code = department.dept_code JOIN course ON course.dept_code = department.dept_code;
SELECT employee.emp_lname, professor.prof_office, department.dept_name, course.crs_description FROM professor JOIN employee ON professor.emp_num = employee.emp_num JOIN department ON professor.dept_code = department.dept_code JOIN course ON course.dept_code = department.dept_code;
SELECT student.stu_fname, student.stu_lname, course.crs_code FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code;
SELECT student.stu_fname, student.stu_lname, course.crs_description FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code JOIN course ON class.crs_code = course.crs_code;
SELECT DISTINCT student.stu_fname, student.stu_lname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll.enroll_grade IN ('A', 'C');
SELECT student.stu_lname, student.stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll.enroll_grade IN ('A', 'C');
SELECT p.emp_num, p.prof_high_degree FROM professor p JOIN department d ON p.dept_code = d.dept_code JOIN class c ON p.emp_num = c.prof_num WHERE d.dept_name = 'Accounting' AND c.class_room IS NOT NULL;
SELECT p.prof_first_name, c.class_room FROM professor p JOIN department d ON p.dept_code = d.dept_code JOIN course c ON d.dept_code = c.dept_code JOIN class cl ON c.crs_code = cl.crs_code WHERE d.dept_name = 'Accounting' AND p.prof_high_degree = 'Accounting';
SELECT employee.emp_fname, employee.emp_jobcode FROM professor JOIN department ON professor.dept_code = department.dept_code JOIN employee ON professor.emp_num = employee.emp_num JOIN class ON professor.emp_num = class.prof_num WHERE department.dept_name = 'Computer Info. Systems' GROUP BY employee.emp_fname, employee.emp_jobcode;
SELECT DISTINCT emp_fname, MAX(emp_degree) FROM professor JOIN department ON professor.dept_code = department.dept_code JOIN employee ON professor.emp_num = employee.emp_num WHERE department.dept_name = 'Computer Information Systems'
SELECT student.stu_lname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll.class_code = '10018' AND enroll.enroll_grade = 'A';
SELECT student.stu_lname FROM student JOIN enroll ON student.stu_num = enroll.stu_num WHERE enroll.class_code = '10018' AND enroll.enroll_grade = 'A';
SELECT employee.emp_lname, department.dept_address FROM professor JOIN employee ON professor.emp_num = employee.emp_num JOIN department ON professor.dept_code = department.dept_code WHERE professor.prof_high_degree != 'Ph.D.' AND department.dept_code = 'HIST' LIMIT 1;
SELECT employee.emp_initial, department.dept_address FROM professor JOIN department ON professor.dept_code = department.dept_code JOIN employee ON professor.emp_num = employee.emp_num WHERE professor.prof_high_degree != 'Ph.D.' AND department.dept_name = 'History'
SELECT DISTINCT E.emp_fname FROM professor P JOIN employee E ON P.emp_num = E.emp_num JOIN class C ON P.emp_num = C.prof_num GROUP BY E.emp_fname HAVING COUNT(C.class_code) > 1;
SELECT DISTINCT emp_fname FROM professor JOIN employee ON professor.emp_num = employee.emp_num JOIN class ON professor.emp_num = class.prof_num GROUP BY emp_fname HAVING COUNT(class.class_code) > 1;
SELECT student.stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num GROUP BY student.stu_num HAVING COUNT(enroll.class_code) = 1;
SELECT student.stu_init FROM student JOIN enroll ON student.stu_num = enroll.stu_num GROUP BY student.stu_num HAVING COUNT(enroll.class_code) = 1;
SELECT department.dept_code FROM department JOIN course ON department.dept_code = course.dept_code JOIN class ON course.crs_code = class.crs_code WHERE course.crs_description LIKE '%Statistics%';
SELECT department.dept_code FROM department JOIN course ON department.dept_code = course.dept_code WHERE course.crs_description LIKE '%Statistics%';
SELECT student.stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code WHERE student.stu_fname LIKE 'S%' AND class.crs_code = 'ACCT-211';
SELECT student.stu_fname FROM student JOIN enroll ON student.stu_num = enroll.stu_num JOIN class ON enroll.class_code = class.class_code WHERE student.stu_lname LIKE 'S%' AND class.crs_code = 'ACCT-211';
SELECT DISTINCT document_status_code FROM documents;
SELECT document_status_description FROM ref_document_status WHERE document_status_description = 'working';
SELECT DISTINCT document_type_code FROM ref_document_types;
SELECT document_type_description FROM ref_document_types WHERE document_type_code = 'Paper';
SELECT shipping_agent_description FROM ref_shipping_agents;
SELECT shipping_agent_code FROM ref_shipping_agents WHERE shipping_agent_description = 'UPS';
SELECT DISTINCT role_code FROM employees;
SELECT role_description FROM roles WHERE role_code = 'ED';
SELECT COUNT(*) FROM employees;
SELECT roles.role_description FROM employees JOIN roles ON employees.role_code = roles.role_code WHERE employees.employee_id = 'Koby';
SELECT documents.document_id, documents.receipt_date FROM documents;
SELECT roles.role_description, roles.role_code, COUNT(employees.employee_id) as num_employees FROM roles LEFT JOIN employees ON roles.role_code = employees.role_code GROUP BY roles.role_description, roles.role_code;
SELECT roles.role_description, COUNT(employees.employee_id) as num_employees FROM employees JOIN roles ON employees.role_code = roles.role_code GROUP BY roles.role_description HAVING COUNT(employees.employee_id) > 1;
SELECT ref_document_types.document_type_description FROM documents JOIN ref_document_types ON documents.document_type_code = ref_document_types.document_type_code WHERE documents.document_id = 1;
SELECT COUNT(*) FROM documents WHERE document_status_code = 'done';
SELECT documents.document_type_code FROM documents WHERE document_id = 2;
SELECT documents.document_id FROM documents JOIN ref_document_status ON documents.document_status_code = ref_document_status.document_status_code JOIN ref_document_types ON documents.document_type_code = ref_document_types.document_type_code WHERE ref_document_status.document_status_description = 'done' AND ref_document_types.document_type_description = 'paper';
SELECT ref_shipping_agents.shipping_agent_name FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE documents.document_id = 2;
SELECT COUNT(*) FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE ref_shipping_agents.shipping_agent_name = 'USPS';
SELECT ref_shipping_agents.shipping_agent_description, COUNT(documents.document_id) as num_documents FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code GROUP BY ref_shipping_agents.shipping_agent_description ORDER BY num_documents DESC LIMIT 1;
SELECT receipt_date FROM documents WHERE document_id = 3;
SELECT addresses.address_details FROM documents_mailed JOIN addresses ON documents_mailed.mailed_to_address_id = addresses.address_id WHERE documents_mailed.document_id = 4;
SELECT receipt_date FROM documents WHERE document_id = 7;
SELECT documents.document_id FROM documents JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE documents.document_status_code = 'done' AND documents.document_type_code = 'Paper' AND ref_shipping_agents.shipping_agent_name != 'USPS';
SELECT documents.document_id FROM documents JOIN ref_document_status ON documents.document_status_code = ref_document_status.document_status_code JOIN ref_shipping_agents ON documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code WHERE documents.document_type_code = 'Paper' AND ref_document_status.document_status_description = 'Done' AND ref_shipping_agents.shipping_agent_name = 'USPS';
SELECT document_drafts.draft_details FROM document_drafts JOIN draft_copies ON document_drafts.draft_number = draft_copies.draft_number JOIN circulation_history ON draft_copies.draft_number = circulation_history.draft_number AND draft_copies.copy_number = circulation_history.copy_number JOIN documents ON draft_copies.document_id = documents.document_id WHERE documents.document_id = 7;
SELECT COUNT(*) FROM draft_copies JOIN document_drafts ON draft_copies.draft_number = document_drafts.draft_number JOIN documents ON document_drafts.document_id = documents.document_id WHERE documents.document_id = 2;
SELECT documents.document_id, COUNT(draft_copies.copy_number) as num_draft_copies FROM draft_copies JOIN document_drafts ON draft_copies.draft_number = document_drafts.draft_number JOIN documents ON document_drafts.document_id = documents.document_id GROUP BY documents.document_id ORDER BY num_draft_copies DESC LIMIT 1;
SELECT documents.document_id, COUNT(draft_copies.copy_number) as num_draft_copies FROM documents JOIN draft_copies ON documents.document_id = draft_copies.document_id GROUP BY documents.document_id HAVING num_draft_copies > 1;
SELECT e.employee_name FROM employees e JOIN circulation_history ch ON e.employee_id = ch.employee_id WHERE ch.document_id = 1;
SELECT employee_name FROM employees WHERE employee_id NOT IN (SELECT DISTINCT employee_id FROM circulation_history);
SELECT employees.employee_name, COUNT(DISTINCT draft_copies.draft_number) AS number_of_drafts, COUNT(circulation_history.copy_number) AS number_of_copies FROM employees JOIN circulation_history ON employees.employee_id = circulation_history.employee_id JOIN draft_copies ON circulation_history.draft_number = draft_copies.draft_number AND circulation_history.copy_number = draft_copies.copy_number GROUP BY employees.employee_name ORDER BY number_of_drafts DESC, number_of_copies DESC LIMIT 1;
SELECT documents.document_id, COUNT(DISTINCT circulation_history.employee_id) as num_employees FROM documents JOIN documents_mailed ON documents.document_id = documents_mailed.document_id JOIN circulation_history ON documents_mailed.document_id = circulation_history.document_id GROUP BY documents.document_id;
SELECT COUNT(*) FROM bookings;
SELECT COUNT(*) FROM bookings;
SELECT planned_delivery_date FROM customer_orders WHERE order_id IN (SELECT booking_id FROM bookings);
SELECT bookings.booking_id, customer_orders.planned_delivery_date FROM bookings JOIN customer_orders ON bookings.booking_id = customer_orders.order_id;
SELECT bookings.planned_delivery_date, bookings.actual_delivery_date FROM bookings INNER JOIN customer_orders ON bookings.booking_id = customer_orders.order_id INNER JOIN invoices ON customer_orders.order_id = invoices.order_id INNER JOIN invoice_items ON invoices.invoice_id = invoice_items.invoice_id;
SELECT bookings.booking_id, bookings.actual_delivery_date, customer_orders.actual_delivery_date FROM bookings JOIN customer_orders ON bookings.booking_id = customer_orders.order_id;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM (SELECT customer_name FROM customers UNION SELECT customer_name FROM clients UNION SELECT customer_name FROM performers);
SELECT customers.customer_phone, customers.customer_email_address FROM customers JOIN clients ON customers.customer_email_address = clients.customer_email_address WHERE clients.customer_name = 'Harold';
SELECT customers.customer_phone, customers.customer_email_address FROM customers JOIN clients ON customers.customer_id = clients.customer_id WHERE clients.customer_name = 'Harold';
SELECT stores.store_name FROM stores INNER JOIN drama_workshop_groups ON stores.address_id = drama_workshop_groups.address_id INNER JOIN services ON drama_workshop_groups.workshop_group_id = services.workshop_group_id INNER JOIN bookings_services ON services.service_id = bookings_services.product_id;
SELECT stores.store_name FROM stores JOIN drama_workshop_groups ON stores.address_id = drama_workshop_groups.address_id;
SELECT MIN(quantity), AVG(quantity), MAX(quantity) FROM ( SELECT COUNT(order_items.order_item_id) as quantity FROM invoice_items JOIN order_items ON invoice_items.order_item_id = order_items.order_item_id GROUP BY invoice_items.invoice_id )
SELECT MIN(quantity), AVG(quantity), MAX(quantity) FROM ( SELECT COUNT(order_item_id) as quantity FROM invoice_items GROUP BY invoice_id )
SELECT DISTINCT invoices.payment_method_code FROM invoices;
SELECT DISTINCT invoices.payment_method_code FROM invoices;
SELECT marketing_region_descriptrion FROM marketing_regions WHERE marketing_region_code = 'China';
SELECT marketing_region_descriptrion FROM marketing_regions WHERE marketing_region_code = 'China';
SELECT DISTINCT product_description FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)
SELECT DISTINCT product_description FROM products WHERE product_price > (SELECT AVG(product_price) FROM products)
SELECT product_description FROM products ORDER BY product_price DESC LIMIT 1;
SELECT product_description FROM ( SELECT product_description, product_price FROM products UNION ALL SELECT product_description, product_price FROM services ) ORDER BY product_price DESC LIMIT 1;
SELECT product_description FROM products ORDER BY product_price ASC;
SELECT product_description FROM products ORDER BY product_price ASC;
SELECT customer_phone FROM performers WHERE performer_id = 'Ashley';
SELECT customer_phone FROM performers WHERE customer_name = 'Ashley';
SELECT payment_method_code, COUNT(order_id) FROM invoices GROUP BY payment_method_code;
SELECT payment_method_code, COUNT(DISTINCT order_id) as num_orders FROM invoices GROUP BY payment_method_code;
SELECT payment_method_code FROM invoices GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT payment_method_code FROM invoices GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT addresses.city_town FROM stores JOIN addresses ON stores.address_id = addresses.address_id WHERE stores.store_name = 'FJA Filming';
SELECT addresses.city_town FROM stores JOIN addresses ON stores.address_id = addresses.address_id WHERE stores.store_id = 'FJA Filming'
SELECT addresses.line_2 FROM addresses JOIN stores ON addresses.address_id = stores.address_id JOIN drama_workshop_groups ON addresses.address_id = drama_workshop_groups.address_id WHERE drama_workshop_groups.marketing_region_code = 'CA';
SELECT addresses.state_county FROM stores JOIN addresses ON stores.address_id = addresses.address_id WHERE stores.marketing_region_code = 'CA'
SELECT marketing_region_descriptrion FROM stores JOIN marketing_regions ON stores.marketing_region_code = marketing_regions.marketing_region_code WHERE store_name = 'Rob Dinning';
SELECT marketing_region_descriptrion FROM stores JOIN marketing_regions ON stores.marketing_region_code = marketing_regions.marketing_region_code WHERE store_name = 'Rob Dinning';
SELECT ref_service_types.service_type_description FROM ref_service_types JOIN services ON services.service_type_code = ref_service_types.service_type_code WHERE services.product_price > 100;
SELECT ref_service_types.service_type_description FROM ref_service_types JOIN services ON ref_service_types.service_type_code = services.service_type_code WHERE services.product_price > 100;
SELECT ref_service_types.service_type_code, ref_service_types.parent_service_type_code, COUNT(services.service_id) FROM ref_service_types LEFT JOIN services ON services.service_type_code = ref_service_types.service_type_code GROUP BY ref_service_types.service_type_code, ref_service_types.parent_service_type_code;
SELECT ref_service_types.service_type_code, ref_service_types.parent_service_type_code, COUNT(services.service_id) as service_count FROM services JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code GROUP BY ref_service_types.service_type_code, ref_service_types.parent_service_type_code;
SELECT ref_service_types.service_type_code, COUNT(*) as count FROM services JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code JOIN bookings_services ON services.service_id = bookings_services.product_id JOIN invoice_items ON bookings_services.product_id = invoice_items.product_id AND bookings_services.order_id = invoice_items.order_id GROUP BY ref_service_types.service_type_code ORDER BY count DESC LIMIT 1;
SELECT ref_service_types.service_type_code, services.product_description FROM services JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code JOIN bookings_services ON bookings_services.product_id = services.service_id GROUP BY services.service_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT store_email_address, store_phone FROM services JOIN drama_workshop_groups ON services.workshop_group_id = drama_workshop_groups.workshop_group_id;
SELECT DISTINCT store_email_address, store_phone FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM services);
SELECT DISTINCT store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM services WHERE product_name = 'film');
SELECT DISTINCT d.address_id FROM services s JOIN drama_workshop_groups d ON s.workshop_group_id = d.workshop_group_id WHERE s.product_name = 'film';
SELECT product_description, AVG(product_price) FROM products GROUP BY product_description;
SELECT product_description, AVG(product_price) FROM products GROUP BY product_description;
SELECT product_description FROM products WHERE product_price < (SELECT AVG(product_price) FROM products) AND product_price < 1000000;
SELECT product_description FROM products WHERE product_price < 1000000;
SELECT SUM(order_items.quantity) FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_description LIKE '%photo%';
SELECT SUM(order_quantity) FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE product_description = 'photo';
SELECT order_items.order_id, order_items.order_item_id, order_items.order_quantity, products.product_id, products.product_name, products.product_description FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_description LIKE '%price: 2000%'
SELECT order_items.order_id, order_items.order_item_id, order_items.order_quantity, products.product_id, products.product_name, products.product_description FROM order_items JOIN products ON order_items.product_id = products.product_id WHERE products.product_description LIKE '%price: 2000%'
SELECT customer_orders.planned_delivery_date FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id JOIN invoice_items ON order_items.order_item_id = invoice_items.order_item_id WHERE invoice_items.order_quantity = 1;
SELECT customer_orders.planned_delivery_date FROM customer_orders JOIN order_items ON customer_orders.order_id = order_items.order_id JOIN invoice_items ON order_items.order_item_id = invoice_items.order_item_id WHERE invoice_items.order_quantity = 1;
SELECT customer_orders.planned_delivery_date FROM customer_orders JOIN invoices ON customer_orders.order_id = invoices.order_id JOIN invoice_items ON invoices.invoice_id = invoice_items.invoice_id WHERE invoice_items.order_quantity > 1000;
SELECT customer_orders.planned_delivery_date FROM customer_orders JOIN invoices ON customer_orders.order_id = invoices.order_id JOIN invoice_items ON invoices.invoice_id = invoice_items.invoice_id JOIN products ON invoice_items.product_id = products.product_id WHERE products.product_name = 'price' AND products.product_description > 1000;
SELECT COUNT(DISTINCT currency_code) FROM drama_workshop_groups;
SELECT COUNT(DISTINCT marketing_region_code) FROM drama_workshop_groups;
SELECT workshop_group_id, store_name FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM addresses WHERE city_town = 'Feliciaberg');
SELECT workshop_group_id, store_name FROM drama_workshop_groups WHERE workshop_group_id IN ( SELECT workshop_group_id FROM addresses WHERE city_town = 'Feliciaberg' )
SELECT store_email_address FROM drama_workshop_groups WHERE workshop_group_id IN (SELECT workshop_group_id FROM addresses WHERE city_town = 'Alaska');
SELECT drama_workshop_groups.store_email_address FROM drama_workshop_groups JOIN addresses ON drama_workshop_groups.address_id = addresses.address_id WHERE addresses.state_county LIKE 'Alaska%';
SELECT addresses.city_town, COUNT(drama_workshop_groups.workshop_group_id) as num_workshop_groups FROM addresses JOIN drama_workshop_groups ON addresses.address_id = drama_workshop_groups.address_id GROUP BY addresses.city_town;
SELECT addresses.city_town, COUNT(drama_workshop_groups.workshop_group_id) FROM addresses JOIN drama_workshop_groups ON addresses.address_id = drama_workshop_groups.address_id GROUP BY addresses.city_town;
SELECT marketing_region_name, COUNT(*) as count FROM drama_workshop_groups GROUP BY marketing_region_name ORDER BY count DESC LIMIT 1;
SELECT marketing_region_name FROM drama_workshop_groups GROUP BY marketing_region_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT state_county FROM addresses WHERE address_id IN ( SELECT address_id FROM customers WHERE address_id IS NOT NULL ) AND address_id NOT IN ( SELECT address_id FROM performers WHERE address_id IS NOT NULL );
SELECT DISTINCT addresses.city_town FROM customers JOIN addresses ON customers.address_id = addresses.address_id LEFT JOIN performers ON addresses.address_id = performers.address_id WHERE performers.address_id IS NULL;
SELECT status, COUNT(*) as frequency FROM bookings GROUP BY status ORDER BY frequency DESC LIMIT 1;
SELECT payment_method_code FROM invoices GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT b.booking_id FROM bookings b JOIN invoice_items ii ON b.booking_id = ii.order_id JOIN bookings_services bs ON ii.product_id = bs.product_id AND b.booking_id = bs.order_id JOIN services s ON bs.product_id = s.service_id WHERE b.status_code = 'stop' AND s.service_type_code = 'workshop';
SELECT DISTINCT dwg.store_name FROM bookings b JOIN bookings_services bs ON b.booking_id = bs.order_id JOIN services s ON bs.product_id = s.service_id JOIN drama_workshop_groups dwg ON s.workshop_group_id = dwg.workshop_group_id WHERE b.status_code = 'stop';
SELECT clients.customer_name FROM clients LEFT JOIN bookings ON clients.customer_name = bookings.customer_id WHERE bookings.customer_id IS NULL;
SELECT DISTINCT clients.customer_name FROM clients LEFT JOIN bookings ON clients.customer_name = bookings.customer_id WHERE bookings.customer_id IS NULL;
SELECT AVG(invoice_items.order_quantity) FROM invoice_items JOIN invoices ON invoice_items.invoice_id = invoices.invoice_id JOIN ref_payment_methods ON invoices.payment_method_code = ref_payment_methods.payment_method_code WHERE ref_payment_methods.payment_method_description = 'MasterCard';
SELECT AVG(invoice_items.order_quantity) FROM invoice_items JOIN invoices ON invoice_items.invoice_id = invoices.invoice_id JOIN ref_payment_methods ON invoices.payment_method_code = ref_payment_methods.payment_method_code WHERE ref_payment_methods.payment_method_description = 'MasterCard';
SELECT order_items.order_item_id FROM order_items JOIN invoice_items ON order_items.order_item_id = invoice_items.order_item_id GROUP BY order_items.order_item_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT product_id FROM invoices GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT ref_service_types.parent_service_type_code FROM ref_service_types JOIN services ON services.service_type_code = ref_service_types.service_type_code JOIN products ON services.product_description = products.product_description WHERE products.product_description IN ('photo product', 'film product') GROUP BY ref_service_types.parent_service_type_code HAVING COUNT(DISTINCT products.product_description) = 2;
SELECT ref_service_types.service_type_code FROM services JOIN ref_service_types ON services.service_type_code = ref_service_types.service_type_code JOIN order_items ON services.service_id = order_items.product_id JOIN products ON order_items.product_id = products.product_id WHERE products.product_description IN ('photo product', 'film product') GROUP BY ref_service_types.service_type_code HAVING COUNT(DISTINCT products.product_description) = 2;
SELECT COUNT(*) FROM accounts;
SELECT COUNT(*) FROM accounts;
SELECT COUNT(DISTINCT customers.customer_id) FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.date_account_opened IS NOT NULL;
SELECT COUNT(DISTINCT customers.customer_first_name) FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id;
SELECT accounts.account_id, accounts.other_account_details, accounts.account_name, accounts.other_account_details FROM accounts;
SELECT account_id, other_account_details, account_name, customer_id FROM accounts;
SELECT accounts.account_id, accounts.account_name, accounts.other_account_details FROM accounts JOIN customers ON accounts.customer_id = customers.customer_id WHERE customers.customer_first_name = 'Meaghan';
SELECT accounts.account_id, accounts.account_name, accounts.date_account_opened, accounts.other_account_details FROM accounts JOIN customers ON accounts.customer_id = customers.customer_id WHERE customers.customer_first_name = 'Meaghan';
SELECT accounts.account_name, accounts.other_account_details FROM accounts JOIN customers ON accounts.customer_id = customers.customer_id WHERE customers.customer_last_name = 'Keeling' AND customers.customer_middle_initial = 'M';
SELECT accounts.account_name, accounts.other_account_details FROM accounts JOIN customers ON accounts.customer_id = customers.customer_id WHERE customers.customer_first_name = 'Meaghan' AND customers.customer_last_name = 'Keeling';
SELECT customers.customer_last_name, customers.customer_id FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.account_name = '900';
SELECT customers.customer_first_name, customers.customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.account_name = '900';
SELECT COUNT(*) FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.customer_id IS NULL;
SELECT COUNT(*) FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.account_id IS NULL;
SELECT DISTINCT customers.customer_last_name, customers.phone_number FROM customers INNER JOIN accounts ON customers.customer_id = accounts.customer_id;
SELECT DISTINCT customer_last_name, phone_number FROM customers WHERE customer_id IN (SELECT customer_id FROM accounts);
SELECT customers.customer_id FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.customer_id IS NULL;
SELECT customers.customer_id FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id WHERE accounts.customer_id IS NULL;
SELECT customers.customer_id, COUNT(accounts.account_id) AS number_of_accounts FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id;
SELECT customers.customer_id, COUNT(accounts.account_id) AS number_of_accounts FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id;
SELECT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id ORDER BY COUNT(accounts.account_id) DESC LIMIT 1;
SELECT customers.customer_id, customers.customer_first_name, customers.customer_last_name FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id ORDER BY COUNT(accounts.account_id) DESC LIMIT 1;
SELECT customers.customer_id, customers.customer_first_name, customers.customer_last_name, COUNT(accounts.account_id) AS number_of_accounts FROM customers LEFT JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id;
SELECT customers.customer_first_name, customers.customer_last_name, customers.customer_middle_initial, customers.customer_id, COUNT(accounts.account_id) as account_count FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id;
SELECT customers.customer_first_name, customers.customer_id FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id HAVING COUNT(accounts.account_id) >= 2;
SELECT customers.customer_first_name, customers.customer_id FROM customers JOIN accounts ON customers.customer_id = accounts.customer_id GROUP BY customers.customer_id HAVING COUNT(accounts.account_id) >= 2;
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT customer_gender, COUNT(*) as number_of_customers FROM customers GROUP BY customer_gender;
SELECT gender, COUNT(*) FROM customers GROUP BY gender;
SELECT COUNT(*) FROM financial_transactions;
SELECT COUNT(*) FROM financial_transactions;
SELECT accounts.account_id, COUNT(financial_transactions.transaction_id) as transaction_count FROM accounts LEFT JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.account_id;
SELECT accounts.account_id, COUNT(financial_transactions.transaction_id) as transaction_count FROM accounts LEFT JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.account_id;
SELECT COUNT(*) FROM financial_transactions JOIN accounts ON financial_transactions.account_id = accounts.account_id WHERE accounts.account_name = '337';
SELECT COUNT(*) FROM financial_transactions WHERE account_id IN (SELECT account_id FROM accounts WHERE account_name = '337');
SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM financial_transactions;
SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM financial_transactions;
SELECT transaction_id FROM financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM financial_transactions);
SELECT transaction_id FROM financial_transactions WHERE amount > (SELECT AVG(amount) FROM financial_transactions);
SELECT transaction_type, SUM(transaction_amount) AS total_amount FROM financial_transactions GROUP BY transaction_type;
SELECT transaction_amount, transaction_id FROM financial_transactions GROUP BY transaction_id;
SELECT accounts.account_name, accounts.customer_id, COUNT(financial_transactions.transaction_id) AS number_of_transactions FROM accounts LEFT JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.customer_id, accounts.account_name;
SELECT accounts.account_name, accounts.account_id, COUNT(financial_transactions.transaction_id) AS number_of_transactions FROM accounts LEFT JOIN financial_transactions ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.account_name, accounts.account_id;
SELECT account_id, COUNT(*) as transaction_count FROM financial_transactions GROUP BY account_id ORDER BY transaction_count DESC LIMIT 1;
SELECT accounts.customer_id FROM financial_transactions JOIN invoices ON financial_transactions.invoice_number = invoices.invoice_number JOIN accounts ON financial_transactions.account_id = accounts.account_id GROUP BY accounts.customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT accounts.account_id, accounts.account_name FROM accounts JOIN financial_transactions ON accounts.account_id = financial_transactions.account_id GROUP BY accounts.account_id, accounts.account_name HAVING COUNT(financial_transactions.transaction_id) >= 4;
SELECT accounts.customer_id, accounts.account_name FROM accounts JOIN financial_transactions ON accounts.customer_id = financial_transactions.account_id GROUP BY accounts.customer_id, accounts.account_name HAVING COUNT(financial_transactions.transaction_id) >= 4;
SELECT DISTINCT product_title FROM invoice_line_items;
SELECT DISTINCT product_title FROM invoice_line_items;
SELECT DISTINCT product_name FROM products WHERE parent_product_id IS NOT NULL;
SELECT DISTINCT product_color FROM products;
SELECT invoices.invoice_number, COUNT(financial_transactions.transaction_id) AS transaction_count FROM invoices LEFT JOIN financial_transactions ON financial_transactions.invoice_number = invoices.invoice_number GROUP BY invoices.invoice_number;
SELECT invoices.invoice_number, COUNT(financial_transactions.transaction_id) FROM financial_transactions JOIN invoices ON financial_transactions.invoice_number = invoices.invoice_number GROUP BY invoices.invoice_number;
SELECT invoices.invoice_number, financial_transactions.transaction_date FROM invoices JOIN financial_transactions ON financial_transactions.invoice_number = invoices.invoice_number GROUP BY invoices.invoice_number ORDER BY COUNT(*) DESC LIMIT 1;
SELECT invoices.invoice_number, invoices.invoice_date FROM invoices JOIN financial_transactions ON financial_transactions.invoice_number = invoices.invoice_number GROUP BY invoices.invoice_number, invoices.invoice_date ORDER BY COUNT(financial_transactions.transaction_id) DESC LIMIT 1;
SELECT COUNT(*) FROM invoices;
SELECT COUNT(*) FROM invoices;
SELECT invoices.invoice_date, orders.order_id, orders.order_details FROM invoices JOIN orders ON invoices.order_id = orders.order_id;
SELECT invoices.invoice_date, orders.order_id, order_items.* FROM invoices JOIN orders ON invoices.order_id = orders.order_id JOIN order_items ON order_items.order_id = orders.order_id JOIN invoice_line_items ON invoice_line_items.order_item_id = order_items.order_item_id AND invoice_line_items.invoice_number = invoices.invoice_number;
SELECT orders.order_id, COUNT(DISTINCT invoices.invoice_number) AS number_of_invoices FROM orders JOIN invoices ON orders.order_id = invoices.order_id GROUP BY orders.order_id;
SELECT orders.order_id, COUNT(invoices.invoice_number) AS invoice_count FROM orders LEFT JOIN invoices ON orders.order_id = invoices.order_id GROUP BY orders.order_id;
SELECT orders.order_id, orders.order_details FROM orders JOIN invoices ON orders.order_id = invoices.order_id GROUP BY orders.order_id, orders.order_details HAVING COUNT(DISTINCT invoices.invoice_number) > 2;
SELECT orders.order_id, orders.order_details FROM orders JOIN invoices ON orders.order_id = invoices.order_id GROUP BY orders.order_id, orders.order_details HAVING COUNT(DISTINCT invoices.invoice_number) >= 2;
SELECT customers.customer_last_name, customers.customer_id, customers.phone_number FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY COUNT(orders.order_id) DESC LIMIT 1;
SELECT customers.customer_last_name, customers.customer_id, customers.phone_number FROM customers JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customers.customer_id ORDER BY COUNT(orders.order_id) DESC LIMIT 1;
SELECT products.product_id FROM products LEFT JOIN order_items ON products.product_id = order_items.product_id WHERE order_items.product_id IS NULL;
SELECT p.product_id FROM products p LEFT JOIN order_items oi ON p.product_id = oi.product_id WHERE oi.product_id IS NULL;
SELECT products.product_id, SUM(invoice_line_items.product_quantity) AS total_quantity FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id GROUP BY products.product_id;
SELECT products.product_id, products.product_name, SUM(invoice_line_items.product_quantity) AS total_quantity FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN invoice_line_items ON order_items.order_item_id = invoice_line_items.order_item_id GROUP BY products.product_id, products.product_name;
SELECT orders.order_id, COUNT(order_items.product_id) AS number_of_items FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT order_id, COUNT(order_item_id) FROM order_items GROUP BY order_id;
SELECT product_id, COUNT(DISTINCT order_id) as unique_orders FROM order_items GROUP BY product_id;
SELECT product_id, COUNT(DISTINCT order_id) as order_count FROM order_items GROUP BY product_id;
SELECT products.product_name, COUNT(DISTINCT customers.customer_id) as number_of_customers FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id GROUP BY products.product_name;
SELECT products.product_id, COUNT(DISTINCT customers.customer_id) as num_customers FROM products JOIN order_items ON products.product_id = order_items.product_id JOIN orders ON order_items.order_id = orders.order_id JOIN customers ON orders.customer_id = customers.customer_id GROUP BY products.product_id;
SELECT order_id, COUNT(product_id) AS number_of_products FROM order_items GROUP BY order_id;
SELECT order_id, COUNT(DISTINCT product_id) as product_count FROM order_items GROUP BY order_id;
SELECT orders.order_id, SUM(order_items.product_quantity) AS total_quantity FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT orders.order_id, SUM(order_items.product_quantity) AS total_product_quantity FROM orders JOIN order_items ON orders.order_id = order_items.order_id GROUP BY orders.order_id;
SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items)
SELECT COUNT(*) FROM products WHERE product_id NOT IN (SELECT product_id FROM order_items);
SELECT COUNT(*) FROM addresses WHERE country = 'USA';
SELECT DISTINCT line_1_number_building FROM addresses;
SELECT addresses.country AS state, COUNT(addresses.address_id) AS number_of_addresses FROM addresses GROUP BY addresses.country;
SELECT customers.customer_phone, contacts.first_name FROM customers LEFT JOIN contacts ON customers.customer_id = contacts.customer_id LEFT JOIN customer_address_history ON customers.customer_id = customer_address_history.customer_id WHERE customer_address_history.address_id IS NULL;
SELECT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id GROUP BY customers.customer_name ORDER BY COUNT(customer_orders.order_id) DESC LIMIT 1;
SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(*) >= 2;
SELECT DISTINCT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.order_status_code = 'completed' INTERSECT SELECT DISTINCT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id WHERE customer_orders.order_status_code = 'part';
SELECT customers.customer_name, customers.customer_phone, customer_orders.payment_method_code FROM customers JOIN customer_orders ON customer_orders.customer_id = customers.customer_id ORDER BY customers.customer_number DESC;
SELECT products.product_type_code AS product_name, SUM(order_items.order_quantity) AS total_order_quantity FROM products JOIN order_items ON products.product_id = order_items.product_id GROUP BY products.product_type_code;
SELECT MIN(product_price) AS min_price, MAX(product_price) AS max_price, AVG(product_price) AS avg_price FROM products;
SELECT COUNT(*) FROM products WHERE price > (SELECT AVG(price) FROM products);
SELECT customers.customer_address, addresses.city, customer_address_history.date_from, customer_address_history.date_to FROM customer_address_history JOIN customers ON customer_address_history.customer_id = customers.customer_id JOIN addresses ON customer_address_history.address_id = addresses.address_id WHERE customers.customer_address IS NOT NULL AND addresses.city IS NOT NULL;
SELECT customers.customer_name FROM customers JOIN customer_orders ON customers.customer_id = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id WHERE customer_orders.order_status_code = 'Credit Card' GROUP BY customers.customer_name HAVING COUNT(DISTINCT customer_orders.order_id) > 2;
SELECT customers.customer_name, customers.customer_phone FROM customers JOIN customer_orders ON customers.customer_number = customer_orders.customer_id JOIN order_items ON customer_orders.order_id = order_items.order_id GROUP BY customers.customer_name, customers.customer_phone ORDER BY COUNT(order_items.product_id) DESC LIMIT 1;
SELECT product_name, product_price FROM products WHERE product_price > 1000 OR product_price < 500;
SELECT COUNT(*) FROM head JOIN management ON head.head_id = management.head_id WHERE (strftime('%Y', 'now') - strftime('%Y', head.born_state)) > 56;
SELECT head.name, head.age, head.born_state FROM head JOIN management ON head.head_id = management.head_id ORDER BY head.age;
SELECT creation, name, budget FROM department;
SELECT MAX(budget) AS max_budget, MIN(budget) AS min_budget FROM department;
SELECT AVG(ranking) FROM department WHERE ranking BETWEEN 10 AND 15;
SELECT name FROM head WHERE head_id NOT IN (SELECT head_id FROM management WHERE department_id IN (SELECT department_id FROM department WHERE name LIKE '%California%'));
SELECT DISTINCT strftime('%Y', creation) as year FROM department WHERE department_id IN ( SELECT department_id FROM management WHERE head_id IN ( SELECT head_id FROM head WHERE born_state = 'Alabama' AND temporary_acting = 'Secretary' ) );
SELECT name FROM head WHERE age >= 3;
SELECT SUBSTR(name, -4) AS year_established, COUNT(*) AS num_departments FROM department GROUP BY year_established ORDER BY num_departments DESC LIMIT 1;
SELECT department.name, department.num_employees FROM department JOIN management ON department.department_id = management.department_id JOIN head ON management.head_id = head.head_id WHERE head.temporary_acting = 'Yes';
SELECT COUNT(*) FROM (SELECT DISTINCT status FROM acting);
SELECT COUNT(*) FROM management WHERE head_id IS NULL;
SELECT DISTINCT age FROM head WHERE head_id IN (SELECT head_id FROM management WHERE temporary_acting = 'Yes');
SELECT DISTINCT h1.state FROM department d1 JOIN management m1 ON d1.department_id = m1.department_id JOIN head h1 ON m1.head_id = h1.head_id JOIN department d2 ON d1.department_id = d2.department_id JOIN management m2 ON d2.department_id = m2.department_id JOIN head h2 ON m2.head_id = h2.head_id WHERE d1.name = 'Treasury' AND d2.name = 'Homeland Security' AND h1.state = h2.state;
SELECT department.department_id, department.name, COUNT(management.head_id) as num_heads FROM department JOIN management ON department.department_id = management.department_id GROUP BY department.department_id, department.name HAVING COUNT(management.head_id) > 1;
SELECT head_id, name FROM head WHERE name LIKE '%Ha%';
SELECT vehicle_id FROM vehicles;
SELECT vehicle_id FROM vehicles;
SELECT COUNT(*) FROM vehicles;
SELECT COUNT(*) FROM vehicles;
SELECT * FROM vehicles WHERE vehicle_id = 1;
SELECT vehicles.* FROM vehicles WHERE vehicle_id = 1;
SELECT staff.middle_name, staff.last_name, staff.staff_id FROM staff;
SELECT staff.first_name, staff.middle_name, staff.last_name FROM staff
SELECT date_of_birth FROM staff WHERE last_name = 'Sawayn' AND staff.first_name = 'Janessa';
SELECT date_of_birth FROM staff WHERE last_name = 'Sawayn' AND staff.staff_id IN (SELECT staff_id FROM staff WHERE staff.staff_id = addresses.address_id AND addresses.line_1_number_building = 'Janessa');
SELECT date_joined_staff FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT date_joined_staff FROM staff WHERE last_name = 'Janessa Sawayn';
SELECT date_left_staff FROM staff WHERE last_name = 'Sawayn' AND first_name = 'Janessa';
SELECT date_left_staff FROM staff WHERE last_name = 'Sawayn' AND staff.staff_id IN (SELECT staff_id FROM addresses WHERE line_1_number_building = 'Janessa');
SELECT COUNT(*) FROM staff WHERE nickname = 'Ludie';
SELECT COUNT(*) FROM staff WHERE nickname = 'Ludie';
SELECT nickname FROM staff WHERE last_name = 'Sawayn' AND staff_id IN (SELECT staff_id FROM addresses WHERE line_1_number_building LIKE 'Janessa%');
SELECT staff.first_name FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn';
SELECT COUNT(*) FROM staff;
SELECT COUNT(*) FROM staff;
SELECT addresses.city FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.last_name = 'Sawayn' AND staff.nickname = 'Janessa';
SELECT addresses.line_1_number_building FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.last_name = 'Sawayn' AND staff.nickname = 'Janessa';
SELECT addresses.country, addresses.state_province_county FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.last_name = 'Sawayn' AND staff.nickname = 'Janessa';
SELECT addresses.country, addresses.city FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.last_name = 'Sawayn' AND staff.nickname = 'Janessa';
SELECT SUM(lessons.lesson_time) FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Rylan' AND customers.last_name = 'Goodwin';
SELECT SUM(lessons.lesson_time) FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Rylan' AND customers.last_name = 'Goodwin';
SELECT addresses.zip_postcode FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.last_name = 'Sawayn' AND staff.first_name = 'Janessa';
SELECT addresses.state_province_county FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE staff.last_name = 'Sawayn' AND staff.nickname = 'Janessa';
SELECT COUNT(*) FROM staff INNER JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.state_province_county = 'Georgia';
SELECT COUNT(*) FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.country = 'Georgia';
SELECT staff.last_name, staff.first_name FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.city = 'Damianfort';
SELECT staff.last_name, staff.first_name FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id WHERE addresses.city = 'Damianfort';
SELECT addresses.state_province_county, COUNT(*) as num_staff FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id GROUP BY addresses.state_province_county ORDER BY num_staff DESC LIMIT 1;
SELECT addresses.line_1_number_building, COUNT(*) as employee_count FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id GROUP BY addresses.line_1_number_building ORDER BY employee_count DESC LIMIT 1;
SELECT addresses.city, addresses.country, COUNT(staff.staff_id) as staff_count FROM addresses JOIN staff ON addresses.address_id = staff.staff_address_id GROUP BY addresses.city, addresses.country HAVING COUNT(staff.staff_id) BETWEEN 2 AND 4;
SELECT addresses.state FROM staff JOIN addresses ON staff.staff_address_id = addresses.address_id GROUP BY addresses.state HAVING COUNT(staff.staff_id) BETWEEN 2 AND 4;
SELECT customers.last_name, customers.customer_id FROM customers;
SELECT customers.last_name, customers.first_name FROM customers;
SELECT email_address, birthday FROM customers WHERE first_name = 'Carole';
SELECT email_address, date_of_birth FROM customers WHERE first_name = 'Carole';
SELECT customers.phone_number, customers.email_address FROM customers JOIN ( SELECT customer_payments.customer_id, SUM(customer_payments.amount_payment) AS outstanding_balance FROM customer_payments GROUP BY customer_payments.customer_id HAVING outstanding_balance > 2000 ) AS outstanding_balances ON customers.customer_id = outstanding_balances.customer_id;
SELECT customers.phone_number, customers.email_address FROM customers JOIN ( SELECT customer_id, SUM(amount_payment) AS total_payment FROM customer_payments GROUP BY customer_id HAVING total_payment > 2000 ) outstanding_customers ON customers.customer_id = outstanding_customers.customer_id;
SELECT customers.phone_number, customers.email_address, lessons.lesson_status_code FROM customers JOIN lessons ON lessons.customer_id = customers.customer_id WHERE customers.last_name = 'Kohler' OR customers.first_name = 'Marina';
SELECT lesson_status_code, phone_number, email_address FROM customers JOIN lessons ON customers.customer_id = lessons.customer_id WHERE last_name = 'Kohler' OR first_name = 'Marina';
SELECT customers.date_of_birth FROM customers JOIN lessons ON lessons.customer_id = customers.customer_id WHERE lessons.lesson_status_code = 'Good Customer';
SELECT customers.date_of_birth FROM customers JOIN customer_payments ON customer_payments.customer_id = customers.customer_id WHERE customer_payments.status_code = 'Good Customer';
SELECT MIN(datetime_payment) FROM customer_payments WHERE customer_id IN (SELECT customer_id FROM customers WHERE first_name = 'Carole' AND last_name = 'Bernhard');
SELECT MIN(datetime_payment) FROM customer_payments JOIN customers ON customer_payments.customer_id = customers.customer_id WHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard';
SELECT COUNT(*) FROM customers;
SELECT COUNT(*) FROM customers;
SELECT customer_status_code, COUNT(*) FROM customers GROUP BY customer_status_code;
SELECT customer_status_code, COUNT(*) FROM customers GROUP BY customer_status_code;
SELECT customer_status_code FROM customers GROUP BY customer_status_code ORDER BY COUNT(*) ASC LIMIT 1;
SELECT lesson_status_code, COUNT(*) as num_customers FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id GROUP BY lesson_status_code ORDER BY num_customers ASC LIMIT 1;
SELECT COUNT(*) FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Rylan' AND customers.last_name = 'Goodwin' AND lessons.lesson_status_code = 'completed';
SELECT COUNT(*) FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Ryan' AND customers.last_name = 'Goodwin';
SELECT MAX(amount_payment) AS max_amount, MIN(amount_payment) AS min_amount, AVG(amount_payment) AS avg_amount FROM customer_payments;
SELECT MAX(amount_outstanding), MIN(amount_outstanding), AVG(amount_outstanding) FROM customer_payments;
SELECT customers.last_name, customers.first_name FROM customers WHERE customers.amount_outstanding BETWEEN 1000 AND 3000;
SELECT customers.first_name, customers.last_name FROM customers WHERE customers.amount_outstanding BETWEEN 1000 AND 3000;
SELECT customers.first_name, customers.last_name FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE addresses.city = 'Lockmanfurt';
SELECT customers.first_name, customers.last_name FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE addresses.line_1_number_building = 'Lockmanfurt';
SELECT addresses.country FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard';
SELECT addresses.country FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard';
SELECT addresses.zip_code FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE customers.first_name = 'Carole' AND customers.last_name = 'Bernhard';
SELECT addresses.line_1_number_building FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id WHERE customers.last_name = 'Carole Bernhard';
SELECT addresses.line_1_number_building AS city, COUNT(*) AS customer_count FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id GROUP BY city ORDER BY customer_count DESC LIMIT 1;
SELECT addresses.city FROM customers JOIN addresses ON customers.customer_address_id = addresses.address_id GROUP BY addresses.city ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SUM(cp.amount_payment) FROM customer_payments cp JOIN customers c ON cp.customer_id = c.customer_id WHERE c.first_name = 'Carole' AND c.last_name = 'Bernhard';
SELECT SUM(amount_payment) FROM customer_payments WHERE customer_id IN (SELECT customer_id FROM customers WHERE first_name = 'Carole' AND last_name = 'Bernhard');
SELECT COUNT(*) FROM customers LEFT JOIN customer_payments ON customers.customer_id = customer_payments.customer_id WHERE customer_payments.customer_id IS NULL;
SELECT COUNT(*) FROM customers LEFT JOIN customer_payments ON customers.customer_id = customer_payments.customer_id WHERE customer_payments.customer_id IS NULL;
SELECT customers.last_name, customers.first_name FROM customers JOIN customer_payments ON customer_payments.customer_id = customers.customer_id GROUP BY customers.customer_id HAVING COUNT(customer_payments.payment_method_code) > 2;
SELECT customers.last_name, customers.first_name FROM customers JOIN customer_payments ON customer_payments.customer_id = customers.customer_id GROUP BY customers.customer_id HAVING COUNT(customer_payments.payment_method_code) > 2;
SELECT payment_method, COUNT(*) as number_of_payments FROM customer_payments GROUP BY payment_method;
SELECT payment_method, COUNT(*) FROM customer_payments GROUP BY payment_method;
SELECT COUNT(*) FROM lessons WHERE lesson_status = 'cancelled';
SELECT COUNT(*) FROM lessons WHERE lesson_status = 'cancelled';
SELECT lessons.lesson_id FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.last_name = 'Sawayn' AND staff.first_name = 'Janessa' AND staff.nickname LIKE '%s%';
SELECT lessons.lesson_id FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.nickname = 'Janessa Sawayn' AND staff.nickname LIKE '%s%';
SELECT COUNT(*) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.nickname LIKE '%a%'
SELECT COUNT(*) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name LIKE '%a%';
SELECT SUM(lessons.lesson_time) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.last_name = 'Sawayn' AND staff.nickname = 'Janessa';
SELECT SUM(price) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn';
SELECT AVG(lessons.price) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id WHERE staff.last_name = 'Sawayn' AND staff.nickname = 'Janessa'
SELECT AVG(amount_payment) FROM lessons JOIN staff ON lessons.staff_id = staff.staff_id JOIN customer_payments ON lessons.lesson_id = customer_payments.lesson_id WHERE staff.first_name = 'Janessa' AND staff.last_name = 'Sawayn';
SELECT COUNT(*) FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Ray';
SELECT COUNT(*) FROM lessons JOIN customers ON lessons.customer_id = customers.customer_id WHERE customers.first_name = 'Ray';
SELECT DISTINCT c.last_name FROM customers c JOIN addresses a ON c.customer_address_id = a.address_id JOIN staff s ON a.address_id = s.staff_address_id WHERE c.last_name = s.last_name;
SELECT last_name FROM (SELECT last_name FROM customers UNION SELECT last_name FROM staff) ORDER BY last_name;
SELECT staff.first_name FROM staff LEFT JOIN lessons ON staff.staff_id = lessons.staff_id WHERE lessons.staff_id IS NULL;
SELECT staff.first_name FROM staff LEFT JOIN lessons ON staff.staff_id = lessons.staff_id WHERE lessons.staff_id IS NULL;
SELECT vehicles.vehicle_id, vehicles.vehicle_details FROM lessons JOIN vehicles ON lessons.vehicle_id = vehicles.vehicle_id GROUP BY vehicles.vehicle_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT employee.age, employee.employee_id, employee.city FROM employee ORDER BY employee.age ASC;
SELECT employee.age, employee.employee_id FROM employee ORDER BY employee.age ASC;
SELECT shop.location, COUNT(employee.employee_id) FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.location;
SELECT shop.location, COUNT(employee.employee_id) FROM employee JOIN hiring ON employee.employee_id = hiring.employee_id JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.location;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1;
SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(employee_id) > 1;
SELECT district, COUNT(*) as number_of_shops FROM shop GROUP BY district;
SELECT district, COUNT(*) as number_of_shops FROM shop GROUP BY district;
SELECT manager_name, district FROM shop WHERE name = ( SELECT name FROM shop ORDER BY location DESC LIMIT 1 )
SELECT manager_name, district FROM shop WHERE shop_id = ( SELECT shop_id FROM hiring GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT MIN(product_count), MAX(product_count) FROM shop;
SELECT MIN(product_count), MAX(product_count) FROM shop;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY (SELECT COUNT(*) FROM product WHERE product.shop_id = shop.shop_id) DESC;
SELECT shop.name, shop.location, shop.district FROM shop ORDER BY shop.product_count DESC;
SELECT name FROM shop WHERE shop_id IN (SELECT shop_id FROM hiring GROUP BY shop_id HAVING COUNT(employee_id) > (SELECT AVG(employee_count) FROM (SELECT COUNT(employee_id) as employee_count FROM hiring GROUP BY shop_id)));
SELECT shop.name FROM shop WHERE shop.shop_id IN ( SELECT shop_id FROM hiring GROUP BY shop_id HAVING COUNT(employee_id) > ( SELECT AVG(employee_count) FROM ( SELECT COUNT(employee_id) as employee_count FROM hiring GROUP BY shop_id ) ) )
SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.name ORDER BY COUNT(evaluation.employee_id) DESC LIMIT 1;
SELECT employee.name FROM employee JOIN evaluation ON evaluation.employee_id = employee.employee_id GROUP BY employee.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id ORDER BY evaluation.bonus DESC LIMIT 1;
SELECT employee.name FROM evaluation JOIN employee ON evaluation.employee_id = employee.employee_id ORDER BY evaluation.bonus DESC LIMIT 1;
SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL;
SELECT employee.name FROM employee LEFT JOIN evaluation ON employee.employee_id = evaluation.employee_id WHERE evaluation.employee_id IS NULL;
SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.name FROM hiring JOIN shop ON hiring.shop_id = shop.shop_id GROUP BY shop.name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id WHERE hiring.employee_id IS NULL;
SELECT shop.name, COUNT(hiring.employee_id) as num_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name;
SELECT shop.name, COUNT(employee.employee_id) as number_of_employees FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id GROUP BY shop.name;
SELECT SUM(bonus) FROM evaluation;
SELECT SUM(bonus) FROM evaluation;
SELECT hiring.* FROM hiring INNER JOIN employee ON hiring.employee_id = employee.employee_id INNER JOIN shop ON hiring.shop_id = shop.shop_id INNER JOIN evaluation ON evaluation.employee_id = employee.employee_id;
SELECT * FROM hiring;
SELECT location FROM shop WHERE number_products < 3000 INTERSECT SELECT location FROM shop WHERE number_products > 10000;
SELECT DISTINCT location FROM shop WHERE number_products < 3000 INTERSECT SELECT DISTINCT location FROM shop WHERE number_products > 10000;
SELECT COUNT(DISTINCT district) FROM shop;
SELECT COUNT(DISTINCT district) FROM shop;
SELECT country FROM airlines WHERE abbreviation = 'JetBlue Airways';
SELECT country FROM airlines WHERE abbreviation = 'Jetblue Airways';
SELECT abbreviation FROM airlines WHERE uid = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE uid = 'Jetblue Airways';
SELECT airlines.abbreviation, airlines.uid FROM airlines WHERE airlines.country = 'USA';
SELECT airlines.abbreviation, airlines.country FROM airlines WHERE airlines.country = 'USA';
SELECT airportcode, airportname FROM airports WHERE airportname = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE airportname = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT airline FROM airlines WHERE uid = 'UAL';
SELECT abbreviation, country, uid FROM airlines WHERE abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE country = 'USA';
SELECT COUNT(*) FROM airlines WHERE abbreviation = 'USA';
SELECT country, airportname FROM airports WHERE airportcode = 'ALT';
SELECT country, airportname FROM airports WHERE airportname = 'Alton';
SELECT city FROM airports WHERE airportcode = 'AKO';
SELECT city FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportname = 'Aberdeen';
SELECT airportname FROM airports WHERE airportname LIKE '%Aberdeen%';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE sourceairport = 'APG';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights WHERE destairport = 'ATO';
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'City Aberdeen';
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen');
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'Aberdeen';
SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.sourceairport = source.airportcode JOIN airports AS destination ON flights.destairport = destination.airportcode WHERE source.airportname = 'Aberdeen' AND destination.airportname = 'Ashley';
SELECT COUNT(*) FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen') AND destairport = (SELECT airportcode FROM airports WHERE airportname = 'Ashley');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.uid = airlines.uid WHERE airlines.abbreviation = 'JetBlue Airways';
SELECT COUNT(*) FROM flights WHERE sourceairport IN (SELECT airportcode FROM airports WHERE countryabbrev IN (SELECT abbreviation FROM airlines WHERE uid = 'Jetblue Airways')) OR destairport IN (SELECT airportcode FROM airports WHERE countryabbrev IN (SELECT abbreviation FROM airlines WHERE uid = 'Jetblue Airways'));
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'United' AND airports.airportname = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.abbreviation = 'UA' AND airports.airportname = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'United' AND airports.airportcode = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.sourceairport = airports.airportcode WHERE airlines.abbreviation = 'UA' AND airports.airportname = 'AHD Airport';
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.airline = airlines.uid WHERE airlines.country = 'United States' AND airports.airportname = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.country = 'United States' AND airports.airportname = 'Aberdeen';
SELECT airportname FROM airports WHERE airportcode IN (SELECT destairport FROM flights GROUP BY destairport ORDER BY COUNT(*) DESC LIMIT 1);
SELECT airports.airportname, COUNT(*) as frequency FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY airports.airportname ORDER BY frequency DESC LIMIT 1;
SELECT airports.airportname, COUNT(*) as num_flights FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.airportname ORDER BY num_flights DESC LIMIT 1;
SELECT airports.airportname, COUNT(*) as frequency FROM flights JOIN airports ON flights.sourceairport = airports.airportcode GROUP BY airports.airportname ORDER BY frequency DESC LIMIT 1;
SELECT airports.airportname FROM flights JOIN airports ON flights.destairport = airports.airportcode GROUP BY flights.destairport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT sourceairport, COUNT(*) as num_flights FROM flights GROUP BY sourceairport ORDER BY num_flights DESC LIMIT 1;
SELECT airports.airportname FROM airports JOIN ( SELECT sourceairport, COUNT(*) as flight_count FROM flights GROUP BY sourceairport ORDER BY flight_count ASC LIMIT 1 ) AS subquery ON airports.airportname = subquery.sourceairport;
SELECT airports.airportname FROM airports JOIN ( SELECT flights.destairport, COUNT(*) as flight_count FROM flights GROUP BY flights.destairport ORDER BY flight_count ASC LIMIT 1 ) as least_flights ON airports.airportname = least_flights.destairport;
SELECT a.abbreviation, COUNT(*) as num_flights FROM flights f JOIN airports ap ON f.sourceairport = ap.airportcode JOIN airlines a ON ap.countryabbrev = a.country GROUP BY a.abbreviation ORDER BY num_flights DESC LIMIT 1;
SELECT a.abbreviation, COUNT(*) as num_flights FROM flights f JOIN airports ap ON f.sourceairport = ap.airportcode JOIN airlines a ON ap.countryabbrev = a.country GROUP BY a.abbreviation ORDER BY num_flights DESC LIMIT 1;
SELECT airlines.country, airlines.uid FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.uid ORDER BY COUNT(*) ASC LIMIT 1;
SELECT airlines.country, airlines.airline, COUNT(*) as num_flights FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON airports.countryabbrev = airlines.country GROUP BY airlines.country, airlines.airline ORDER BY num_flights ASC LIMIT 1;
SELECT DISTINCT airlines.abbreviation FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON flights.uid = airlines.uid WHERE flights.sourceairport = 'AHD';
SELECT DISTINCT airlines.uid, airlines.country, airlines.abbreviation FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON airports.countryabbrev = airlines.country WHERE flights.sourceairport = 'AHD';
SELECT DISTINCT airlines.uid, airlines.country, airlines.abbreviation FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT DISTINCT airlines.uid, airlines.country, airlines.abbreviation FROM flights JOIN airports ON flights.destairport = airports.airportcode JOIN airlines ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'AHD';
SELECT DISTINCT a.abbreviation FROM flights f JOIN airports ap ON f.sourceairport = ap.airportcode JOIN airlines a ON ap.countryabbrev = a.country WHERE f.sourceairport IN ('APG', 'CVO') GROUP BY a.abbreviation HAVING COUNT(DISTINCT f.sourceairport) = 2;
SELECT DISTINCT airlines.uid, airlines.country, airlines.abbreviation FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON airports.countryabbrev = airlines.country WHERE flights.sourceairport IN ('APG', 'CVO') GROUP BY airlines.uid, airlines.country, airlines.abbreviation HAVING COUNT(DISTINCT flights.sourceairport) = 2;
SELECT DISTINCT airlines.uid, airlines.country, airlines.abbreviation FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON airports.countryabbrev = airlines.country WHERE flights.sourceairport = 'CVO' AND flights.sourceairport NOT IN ( SELECT flights.sourceairport FROM flights WHERE flights.sourceairport = 'APG' )
SELECT DISTINCT airlines.uid FROM flights JOIN airlines ON flights.uid = airlines.uid JOIN airports ON flights.sourceairport = airports.airportcode WHERE flights.sourceairport = 'CVO' AND flights.sourceairport != 'APG';
SELECT airlines.uid, airlines.country, airlines.abbreviation FROM airlines JOIN flights ON airlines.abbreviation = flights.airline GROUP BY airlines.uid, airlines.country, airlines.abbreviation HAVING COUNT(flights.flightno) >= 10;
SELECT airlines.uid, airlines.country, airlines.abbreviation FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON airports.countryabbrev = airlines.country GROUP BY airlines.uid, airlines.country, airlines.abbreviation HAVING COUNT(*) >= 10;
SELECT airlines.uid FROM flights JOIN airports ON flights.sourceairport = airports.airportcode JOIN airlines ON airports.countryabbrev = airlines.abbreviation GROUP BY airlines.uid HAVING COUNT(*) < 200;
SELECT airlines.uid, airlines.country, airlines.abbreviation FROM airlines JOIN flights ON airlines.abbreviation = flights.sourceairport GROUP BY airlines.uid, airlines.country, airlines.abbreviation HAVING COUNT(*) < 200;
SELECT flights.airline FROM flights JOIN airlines ON flights.airline = airlines.abbreviation WHERE airlines.country = 'United Airlines';
SELECT flights.flightnumber FROM flights JOIN airlines ON flights.airline = airlines.uid WHERE airlines.abbreviation = 'United'
SELECT flight_number FROM flights WHERE sourceairport = 'APG';
SELECT flight_number FROM flights WHERE sourceairport = 'APG';
SELECT flight_number FROM flights WHERE destairport = 'APG';
SELECT flight_number FROM flights WHERE destairport = 'APG';
SELECT flights.flightnumber FROM flights INNER JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'Aberdeen';
SELECT flight_number FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen');
SELECT flights.flightnumber FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'Aberdeen';
SELECT flight_number FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname = 'Aberdeen')
SELECT COUNT(*) FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights WHERE destairport IN (SELECT airportcode FROM airports WHERE airportname IN ('Aberdeen', 'Abilene'));
SELECT airports.airportcode FROM airports LEFT JOIN flights ON airports.airportcode = flights.sourceairport WHERE flights.sourceairport IS NULL AND flights.destairport IS NULL;
SELECT airports.airportname FROM airports LEFT JOIN flights ON airports.airportname = flights.sourceairport OR airports.airportname = flights.destairport WHERE flights.sourceairport IS NULL AND flights.destairport IS NULL;
SELECT COUNT(*) FROM game WHERE date > '2007-12-31';
SELECT game.date, stadium.name FROM game JOIN stadium ON game.stadium_id = stadium.id ORDER BY game.date DESC;
SELECT game.season, game.home_team, game.away_team FROM game;
SELECT stadium.name, MAX(games_count), MIN(games_count), AVG(games_count) FROM ( SELECT stadium.name, COUNT(game.id) as games_count FROM stadium JOIN game ON game.stadium_id = stadium.id GROUP BY stadium.name ) GROUP BY stadium.name;
SELECT AVG(capacity_percentage) FROM stadium WHERE capacity_percentage > 100;
SELECT player, number_of_matches, source FROM injury_accident WHERE source != 'Knee problem';
SELECT game.season FROM injury_accident JOIN game ON injury_accident.game_id = game.id WHERE injury_accident.injury = 'Walter Samuel';
SELECT game.id, game.score, game.date FROM game JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY game.id, game.score, game.date HAVING COUNT(injury_accident.id) >= 2;
SELECT stadium.id, stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY stadium.id, stadium.name ORDER BY COUNT(injury_accident.id) DESC LIMIT 1;
SELECT stadium.id, stadium.name FROM stadium JOIN game ON stadium.id = game.stadium_id JOIN injury_accident ON game.id = injury_accident.game_id GROUP BY stadium.id, stadium.name ORDER BY COUNT(injury_accident.id) DESC LIMIT 1;
SELECT game.date, stadium.name FROM injury_accident JOIN game ON injury_accident.game_id = game.id JOIN stadium ON game.stadium_id = stadium.id WHERE injury_accident.source IN ('Foot injury', 'Knee problem') AND strftime('%Y', game.date) = strftime('%Y', 'now') AND strftime('%m', game.date) IN ('03', '04', '05', '06', '07', '08', '09', '10') AND strftime('%m', game.date) NOT IN ('11', '12', '01', '02')
SELECT COUNT(DISTINCT injury) FROM injury_accident;
SELECT COUNT(*) FROM game LEFT JOIN injury_accident ON game.id = injury_accident.game_id WHERE injury_accident.id IS NULL;
SELECT COUNT(DISTINCT source) FROM injury_accident INNER JOIN game ON injury_accident.game_id = game.id WHERE game.season > 2010;
SELECT stadium.id FROM injury_accident JOIN game ON injury_accident.game_id = game.id JOIN stadium ON game.stadium_id = stadium.id WHERE injury_accident.injury IN ('Walter Samuel', 'Thiago Motta') GROUP BY stadium.id HAVING COUNT(DISTINCT injury_accident.injury) = 2;
SELECT stadium.name, AVG(stadium.total_attendance) AS average_attendance, SUM(stadium.total_attendance) AS total_attendance FROM stadium LEFT JOIN game ON stadium.id = game.stadium_id LEFT JOIN injury_accident ON game.id = injury_accident.game_id WHERE injury_accident.id IS NULL GROUP BY stadium.name;
SELECT stadium.id FROM stadium WHERE stadium.id LIKE '%Bank%';
SELECT stadium.name, COUNT(game.id) as number_of_games FROM stadium LEFT JOIN game ON stadium.id = game.stadium_id GROUP BY stadium.name;
SELECT injury_accident.injured_player, game.date FROM injury_accident JOIN game ON injury_accident.game_id = game.id ORDER BY game.date DESC;
SELECT budget FROM movie WHERE title = 'The Imitation Game';
SELECT producer.birth_year FROM producer JOIN made_by ON made_by.pid = producer.pid JOIN movie ON movie.mid = made_by.msid WHERE movie.title = 'The Imitation Game';
SELECT birth_year FROM actor WHERE name = 'Benedict Cumberbatch';
SELECT birth_year FROM actor WHERE name = 'Benedict Cumberbatch';
SELECT nationality FROM actor WHERE name = 'Christoph Waltz' AND gender = 'Female';
SELECT actor.nationality FROM actor JOIN cast ON actor.aid = cast.aid WHERE actor.name = 'Christoph Waltz';
SELECT movie.title FROM movie JOIN made_by ON movie.mid = made_by.msid JOIN producer ON made_by.pid = producer.pid WHERE producer.birth_city = '2015';
SELECT name FROM actor WHERE birth_year = 'Tehran';
SELECT name FROM actor WHERE birth_year = 'Tehran';
SELECT name FROM actor WHERE birth_year = 'Tehran';
SELECT name FROM actor WHERE birth_city = 'Afghanistan';
SELECT name FROM actor WHERE birth_city = 'Afghanistan';
SELECT DISTINCT aid FROM actor WHERE nationality = 'Afghanistan';
SELECT actor.name FROM actor WHERE strftime('%Y', actor.birth_city) = '1984'
SELECT birth_year FROM actor WHERE aid = 'Kevin Spacey';
SELECT birth_year FROM actor WHERE aid = 'Kevin Spacey';
SELECT birth_city FROM actor WHERE name = 'Kevin Spacey';
SELECT birth_city FROM actor WHERE name = 'Kevin Spacey';
SELECT nationality FROM actor WHERE name = 'Kevin Spacey';
SELECT budget FROM tv_series WHERE title_aka = 'Finding Nemo';
SELECT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.mid JOIN director ON directed_by.did = director.did WHERE director.nationality = 'Steven Spielberg' AND movie.release_year > 2006;
SELECT director.did, director.gender, director.nationality, director.birth_year FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title_aka = 'James Bond';
SELECT director.did, director.gender, director.nationality, director.birth_year FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.msid = movie.mid WHERE movie.title_aka = 'James Bond';
SELECT director.did, director.birth_year, director.gender, director.nationality FROM director JOIN directed_by ON directed_by.did = director.did JOIN made_by ON made_by.pid = directed_by.id JOIN writer ON writer.name = 'James Bond' WHERE writer.name = 'James Bond';
SELECT actor.aid FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.msid = movie.mid WHERE cast.role = 'Alan Turing' AND movie.title_aka = 'The Imitation Game';
SELECT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.id = movie.mid WHERE actor.name = 'Alan Turing' AND movie.title_aka = 'The Imitation Game';
SELECT actor.gender, actor.nationality, actor.birth_city FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.msid = movie.mid WHERE cast.role = 'Alan Turing' AND movie.title_aka = 'The Imitation Game';
SELECT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.msid = movie.msid WHERE actor.name = 'Alan Turing' AND movie.title_aka = 'The Imitation Game';
SELECT actor.aid FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.msid = made_by.msid JOIN classification ON cast.msid = classification.msid WHERE cast.role = 'Alan Turing' AND made_by.pid = 'The Imitation Game';
SELECT genre.gid FROM movie JOIN classification ON movie.mid = classification.msid JOIN genre ON classification.gid = genre.gid WHERE movie.title_aka = 'Jurassic Park';
SELECT director.did FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.mid = movie.mid WHERE movie.title = 'Joy' AND movie.title_aka = '2015';
SELECT movie.title_aka FROM writer JOIN written_by ON writer.wid = written_by.wid JOIN movie ON written_by.mid = movie.mid WHERE writer.name = 'Matt Damon';
SELECT DISTINCT made_by.msid FROM made_by JOIN producer ON made_by.pid = producer.pid JOIN written_by ON made_by.msid = written_by.msid JOIN writer ON written_by.wid = writer.wid WHERE producer.name = 'Woody Allen' AND writer.name = 'Woody Allen';
SELECT movie.title_aka FROM movie JOIN cast ON movie.mid = cast.msid JOIN actor ON cast.id = actor.aid WHERE actor.name = 'Robin Wright';
SELECT movie.title_aka FROM movie JOIN cast ON movie.mid = cast.msid JOIN actor ON cast.id = actor.aid WHERE actor.name = 'Robin Wright';
SELECT m.title_aka FROM movie m JOIN cast c ON m.mid = c.msid JOIN actor a ON c.aid = a.aid WHERE a.name = 'Robin Wright';
SELECT budget FROM movie WHERE title = 'Juno' AND release_year = 2007;
SELECT DISTINCT movie.title FROM movie JOIN classification ON movie.mid = classification.id JOIN genre ON classification.gid = genre.gid WHERE genre.gid = 'Sci-Fi' AND movie.title LIKE '%(2010)%';
SELECT title FROM movie WHERE mid IN ( SELECT mid FROM classification WHERE gid = ( SELECT gid FROM genre WHERE genre = 'Sci-Fi' ) ) AND title LIKE '%(2010)%';
SELECT name FROM actor WHERE birth_city = 'Austin' AND birth_year > 1980;
SELECT actor.name FROM actor WHERE birth_city = 'Austin' AND birth_year > 1980;
SELECT name FROM actor WHERE birth_city = 'Austin' AND birth_year > 1980;
SELECT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.id JOIN director ON directed_by.did = director.did WHERE director.birth_year = 'Los Angeles';
SELECT name FROM actor WHERE birth_year = 1984 AND birth_city = 'New York City';
SELECT movie.title_aka, movie.release_year, movie.mid, movie.budget FROM movie JOIN classification ON movie.mid = classification.msid JOIN genre ON classification.gid = genre.gid WHERE genre.genre = 'Nuclear Weapons';
SELECT DISTINCT movie.title_aka FROM movie JOIN classification ON movie.mid = classification.msid JOIN genre ON classification.gid = genre.gid WHERE genre.genre LIKE '%nuclear weapons%';
SELECT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.msid JOIN director ON directed_by.did = director.did WHERE director.name = 'Alfred Hitchcock';
SELECT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.mid JOIN director ON directed_by.did = director.did JOIN made_by ON movie.mid = made_by.mid WHERE director.name = 'Asghar Farhadi' AND made_by.pid = (SELECT pid FROM made_by JOIN actor ON made_by.pid = actor.pid WHERE actor.name = 'Taraneh Alidoosti');
SELECT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.mid JOIN director ON directed_by.did = director.did JOIN made_by ON movie.mid = made_by.mid JOIN actor ON made_by.pid = actor.pid WHERE director.name = 'Asghar Farhadi' AND actor.name = 'Taraneh Alidoosti';
SELECT COUNT(*) FROM directed_by JOIN director ON directed_by.did = director.did JOIN cast ON directed_by.msid = cast.msid WHERE director.name = 'Asghar Farhadi' AND cast.role = 'Taraneh Alidoosti';
SELECT movie.title_aka FROM movie JOIN directed_by ON movie.mid = directed_by.mid JOIN director ON directed_by.did = director.did JOIN cast ON movie.mid = cast.mid WHERE director.name = 'Asghar Farhadi' AND cast.role = 'Taraneh Alidoosti';
SELECT tv_series.title_aka FROM tv_series JOIN written_by ON tv_series.sid = written_by.id JOIN writer ON written_by.wid = writer.wid WHERE writer.wid = (SELECT wid FROM writer WHERE name = 'Shonda Rhimes');
SELECT actor.aid FROM actor JOIN cast ON actor.aid = cast.aid JOIN tv_series ON cast.msid = tv_series.sid WHERE actor.name = 'Olivia Pope' AND cast.role = 'Scandal';
SELECT writer.wid FROM writer JOIN written_by ON writer.wid = written_by.wid JOIN movie ON written_by.mid = movie.mid WHERE movie.title_aka = 'The Truman Show';
SELECT writer.wid, writer.gender, writer.num_of_episodes, writer.nationality FROM writer JOIN written_by ON writer.wid = written_by.wid JOIN made_by ON written_by.msid = made_by.msid JOIN directed_by ON made_by.msid = directed_by.msid WHERE made_by.pid = (SELECT pid FROM made_by WHERE msid = (SELECT msid FROM written_by WHERE msid = (SELECT msid FROM directed_by WHERE msid = (SELECT msid FROM movie WHERE title = 'The Truman Show'))));
SELECT tv_series.title_aka FROM tv_series JOIN cast ON tv_series.sid = cast.msid JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Scott Foley';
SELECT tv_series.sid FROM tv_series JOIN cast ON tv_series.sid = cast.msid JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Scott Foley';
SELECT director.did FROM director INNER JOIN directed_by ON director.did = directed_by.did INNER JOIN cast ON directed_by.id = cast.id INNER JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Kate Winslet';
SELECT DISTINCT producer.pid FROM producer JOIN made_by ON made_by.pid = producer.pid JOIN cast ON cast.id = made_by.id JOIN actor ON actor.aid = cast.aid WHERE actor.name = 'Kate Winslet'
SELECT director.did, director.birth_year, director.gender, director.nationality FROM director JOIN directed_by ON directed_by.did = director.did JOIN tv_series ON tv_series.sid = directed_by.sid WHERE tv_series.title = 'House of Cards'
SELECT name FROM actor WHERE birth_city = 'Austin' AND nationality = 'female';
SELECT name FROM actor WHERE birth_city = 'Italy' AND birth_year > 1980;
SELECT name FROM actor WHERE gender = 'female' AND birth_city = 'New York City' AND birth_year > 1980;
SELECT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.msid = made_by.msid JOIN movie ON made_by.mid = movie.mid WHERE actor.nationality = 'female' AND movie.title_aka = 'Saving Private Ryan';
SELECT name FROM director WHERE birth_city = 'Afghanistan';
SELECT a.aid, a.gender, a.nationality, a.birth_city FROM actor a JOIN cast c ON a.aid = c.aid JOIN movie m ON c.mid = m.mid WHERE m.title_aka = 'Camp X-Ray';
SELECT DISTINCT actor.name FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.id = made_by.id JOIN movie ON made_by.mid = movie.mid WHERE actor.birth_city = 'Canada' AND movie.title_aka LIKE '%James Bond%';
SELECT movie.title_aka FROM movie JOIN cast ON movie.mid = cast.msid JOIN actor ON cast.id = actor.aid WHERE actor.name = 'Rowan Atkinson' AND cast.role = 'Mr. Bean';
SELECT director.name, director.nationality, director.birth_city, director.birth_year FROM director JOIN directed_by ON director.did = directed_by.did JOIN movie ON directed_by.id = movie.id WHERE movie.title = 'The Past';
SELECT actor.name FROM cast JOIN actor ON cast.aid = actor.aid WHERE cast.role = 'Mr. Bean';
SELECT genre.gid FROM director JOIN directed_by ON director.did = directed_by.did JOIN made_by ON directed_by.id = made_by.msid WHERE director.name = 'Asghar Farhadi';
SELECT movie.title_aka FROM movie JOIN cast ON movie.mid = cast.msid WHERE cast.role = 'Daffy Duck';
SELECT DISTINCT cast.id FROM movie JOIN cast ON movie.mid = cast.msid WHERE movie.title_aka = 'Daddy Long Legs'
SELECT DISTINCT director.did, director.gender, director.nationality, director.birth_city FROM director JOIN directed_by ON directed_by.did = director.did JOIN made_by ON made_by.msid = directed_by.msid JOIN classification ON classification.id = made_by.id WHERE classification.gid = 'Nuclear Weapons'
SELECT COUNT(*) FROM ( SELECT DISTINCT movie.mid FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.id = made_by.id JOIN movie ON made_by.mid = movie.mid WHERE actor.name = 'Jennifer Aniston' AND movie.title_aka > '2010' );
SELECT COUNT(*) FROM cast JOIN movie ON cast.msid = movie.mid WHERE movie.title_aka = 'Saving Private Ryan';
SELECT COUNT(*) FROM cast JOIN movie ON cast.msid = movie.mid WHERE movie.title_aka = 'Saving Private Ryan';
SELECT COUNT(*) FROM directed_by INNER JOIN director ON directed_by.did = director.did WHERE director.name = 'Steven Spielberg';
SELECT COUNT(*) FROM movie WHERE mid IN (SELECT mid FROM made_by WHERE pid IN (SELECT pid FROM producer WHERE birth_year = 2013));
SELECT COUNT(*) FROM movie WHERE title LIKE '%(2013)%';
SELECT YEAR(director.birth_year) AS year, COUNT(*) AS num_of_movies FROM director JOIN directed_by ON director.did = directed_by.did WHERE director.name = 'Woody Allen' GROUP BY year;
SELECT COUNT(DISTINCT cast.msid) FROM cast JOIN actor ON cast.id = actor.id WHERE actor.name = 'Shahab Hosseini'
SELECT COUNT(DISTINCT cast.id) FROM cast JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Shahab Hosseini';
SELECT COUNT(DISTINCT made_by.id) FROM made_by JOIN cast ON made_by.id = cast.id JOIN actor ON cast.aid = actor.aid WHERE actor.name = 'Shahab Hosseini';
SELECT COUNT(DISTINCT cast.msid) FROM actor JOIN cast ON actor.id = cast.id WHERE actor.name = 'Shahab Hosseini'
SELECT COUNT(*) FROM actor WHERE birth_city = 'Los Angeles' AND birth_year > 2000;
SELECT COUNT(DISTINCT cast.id) FROM actor JOIN cast ON cast.aid = actor.aid WHERE actor.name = 'Humphrey Bogart' AND actor.birth_year < 1942;
SELECT YEAR(movie.release_date) AS year, COUNT(*) AS number_of_movies FROM actor JOIN cast ON actor.aid = cast.aid JOIN movie ON cast.id = movie.id WHERE actor.name = 'Brad Pitt' GROUP BY YEAR(movie.release_date);
SELECT COUNT(*) FROM movie WHERE title LIKE '%Iraq War%' AND mid LIKE '%2015%';
SELECT COUNT(*) FROM movie WHERE title LIKE '%Persian%' AND mid > 1990;
SELECT COUNT(*) FROM directed_by JOIN director ON directed_by.did = director.did WHERE director.name = 'Quentin Tarantino' AND directed_by.year > 2010;
SELECT COUNT(*) FROM directed_by JOIN director ON directed_by.did = director.did WHERE director.name = 'Quentin Tarantino' AND directed_by.year < 2010;
SELECT COUNT(*) FROM directed_by JOIN director ON directed_by.id = director.id WHERE director.name = 'Quentin Tarantino' AND directed_by.year < 2002 AND directed_by.year > 2010;
SELECT COUNT(*) FROM actor WHERE gender = 'female' AND birth_year > 1980 AND birth_city = 'New York City';
SELECT COUNT(*) FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.id = made_by.id JOIN company ON made_by.pid = company.id WHERE actor.birth_city = 'Iran' AND company.name = 'Jim Jarmusch'
SELECT COUNT(*) FROM actor JOIN cast ON actor.aid = cast.aid JOIN made_by ON cast.id = made_by.id JOIN company ON made_by.id = company.id WHERE actor.birth_city = 'China' AND company.name = 'Rush Hour 3';
SELECT DISTINCT m.title_aka FROM movie m JOIN cast c1 ON m.mid = c1.msid JOIN actor a1 ON c1.id = a1.aid JOIN cast c2 ON m.mid = c2.msid JOIN actor a2 ON c2.id = a2.aid WHERE a1.name = 'Woody Strode' AND a2.name = 'Jason Robards';
SELECT m.title_aka FROM movie m JOIN cast c ON m.mid = c.msid JOIN actor a ON c.id = a.aid WHERE a.name = 'Woody Strode' INTERSECT SELECT m.title_aka FROM movie m JOIN cast c ON m.mid = c.msid JOIN actor a ON c.id = a.aid WHERE a.name = 'Jason Robards';
SELECT m.title_aka FROM movie m JOIN made_by mb ON m.mid = mb.msid JOIN actor a ON mb.id = a.name WHERE a.name IN ('Woody Strode', 'Jason Robards') GROUP BY m.title_aka HAVING COUNT(DISTINCT a.name) = 2;
SELECT m.title_aka FROM movie m JOIN made_by mb ON m.mid = mb.msid JOIN actor a ON mb.id = a.name WHERE a.name IN ('Jason Robards', 'Woody Strode') GROUP BY m.title_aka HAVING COUNT(DISTINCT a.name) = 2;
SELECT DISTINCT a.aid, a.gender, a.nationality, a.birth_city FROM actor a JOIN cast c ON a.aid = c.aid JOIN made_by m ON c.id = m.id WHERE m.id IN ( SELECT m.id FROM movie m JOIN made_by mb ON m.mid = mb.mid JOIN cast c ON mb.id = c.id JOIN actor a ON c.aid = a.aid WHERE a.nationality = 'Tom Hanks' ) AND a.nationality != 'Tom Hanks';
SELECT m.title_aka FROM movie m JOIN directed_by db ON m.mid = db.mid JOIN director d ON db.did = d.did WHERE m.title_aka = 'Revolutionary Road' AND m.title_aka != 'Revolutionary Road';
SELECT m.title_aka FROM movie m JOIN classification c ON m.mid = c.msid GROUP BY m.mid ORDER BY COUNT(DISTINCT c.gid) DESC LIMIT 1;
SELECT m.title_aka FROM movie m JOIN made_by mb ON m.mid = mb.msid JOIN actor a ON mb.pid = a.aid WHERE a.birth_city = 'China' GROUP BY m.title_aka ORDER BY COUNT(*) DESC LIMIT 1;
SELECT a.aid, a.gender, a.birth_year, a.nationality FROM actor a JOIN directed_by db ON a.aid = db.aid JOIN movie m ON db.mid = m.mid WHERE m.title = ( SELECT title FROM movie WHERE title LIKE '%Quentin Tarantino%' ORDER BY title DESC LIMIT 1 ) OR m.title_aka LIKE '%Quentin Tarantino%' ORDER BY a.birth_year DESC;
SELECT m.title, m.budget FROM movie m JOIN directed_by db ON m.mid = db.msid JOIN writer w ON db.did = w.wid WHERE w.name = 'Quentin Tarantino' ORDER BY m.release_year DESC LIMIT 1;
SELECT title_aka FROM movie WHERE mid IN ( SELECT mid FROM made_by WHERE wid IN ( SELECT wid FROM writer WHERE wid = ( SELECT wid FROM writer WHERE name = 'Jim Jarmusch' ) ) ) ORDER BY release_year DESC LIMIT 1;
SELECT producer.pid, COUNT(director.did) as num_directors FROM producer JOIN made_by ON made_by.pid = producer.pid JOIN directed_by ON directed_by.msid = made_by.msid JOIN director ON director.did = directed_by.did GROUP BY producer.pid ORDER BY num_directors DESC LIMIT 1;
SELECT movie.title_aka FROM movie JOIN cast ON movie.mid = cast.id JOIN actor ON cast.aid = actor.name WHERE actor.name = 'Gabriele Ferzetti' ORDER BY movie.release_year DESC LIMIT 1;
SELECT customer_id FROM customers ORDER BY customer_id ASC;
SELECT customers.customer_id, customers.customer_name FROM customers ORDER BY customers.customer_name ASC;
SELECT policies.policy_type_code FROM customers JOIN policies ON customers.customer_id = policies.customer_id WHERE customers.customer_details = 'Dayana Robel'
SELECT policies.policy_type_code FROM policies JOIN customers ON policies.customer_id = customers.customer_id WHERE customers.customer_details = 'Dayana Robel';
SELECT policy_type_code, COUNT(*) as frequency FROM policies GROUP BY policy_type_code ORDER BY frequency DESC LIMIT 1;
SELECT claim_type_code FROM claim_headers JOIN policies ON claim_headers.policy_id = policies.policy_id GROUP BY claim_type_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT policy_id, COUNT(DISTINCT customer_id) as customer_count FROM policies GROUP BY policy_id HAVING customer_count > 2;
SELECT policy_type_code FROM policies JOIN customers ON policies.customer_id = customers.customer_id GROUP BY policy_type_code HAVING COUNT(DISTINCT customers.customer_id) > 2;
SELECT SUM(amount_claimed) AS total_amount, AVG(amount_claimed) AS average_amount FROM claim_headers;
SELECT SUM(amount_claimed) AS total_amount, AVG(amount_claimed) AS average_amount FROM claim_headers;
SELECT SUM(ch.amount_piad) FROM claim_headers ch JOIN claims_documents cd ON cd.claim_id = ch.claim_header_id WHERE cd.created_by_staff_id = ( SELECT created_by_staff_id FROM claims_documents ORDER BY created_by_staff_id DESC LIMIT 1 )
SELECT SUM(ch.amount_piad) FROM claim_headers ch JOIN claims_documents cd ON ch.claim_header_id = cd.claim_id WHERE cd.created_by_staff_id = (SELECT created_by_staff_id FROM claims_documents ORDER BY created_by_staff_id DESC LIMIT 1)
SELECT customers.customer_details FROM claim_headers JOIN customers ON claim_headers.claim_header_id = customers.claim_header_id WHERE claim_headers.amount_paid = (SELECT MAX(amount_paid) FROM claim_headers);
SELECT customers.* FROM customers JOIN claim_headers ON customers.customer_id = claim_headers.customer_id WHERE claim_headers.amount_paid = ( SELECT MAX(amount_paid) FROM claim_headers );
SELECT customer_details FROM customers WHERE customer_id IN ( SELECT customer_id FROM claim_headers WHERE claim_header_id IN ( SELECT claim_header_id FROM claims_processing WHERE claim_processing_id IN ( SELECT claim_processing_id FROM claims_documents WHERE document_type_code = 'MIN' ) ) );
SELECT customers.* FROM customers JOIN claim_headers ON customers.customer_id = claim_headers.claim_header_id WHERE claim_headers.amount_paid = (SELECT MIN(amount_paid) FROM claim_headers);
SELECT customers.customer_details FROM customers LEFT JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.customer_id IS NULL;
SELECT customers.customer_details FROM customers LEFT JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.customer_id IS NULL;
SELECT COUNT(*) FROM claims_processing_stages;
SELECT COUNT(DISTINCT next_claim_stage_id) FROM claims_processing_stages;
SELECT claim_status_name FROM claims_processing_stages WHERE next_claim_stage_id IN ( SELECT claim_status_code FROM claim_headers GROUP BY claim_status_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT cps.claim_status_description FROM claims_processing_stages cps JOIN claims_processing cp ON cps.claim_stage_id = cp.claim_stage_id GROUP BY cps.claim_status_description ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customers.customer_id, customers.customer_name FROM customers WHERE customers.customer_name LIKE '%Diana%';
SELECT * FROM customers WHERE customer_id LIKE '%Diana%';
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.policy_type_code = 'Deputy'
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.policy_type_code = 'Deputy';
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.policy_type_code IN ('deputy', 'uniformed');
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.policy_type_code IN ('Deputy', 'Uniform');
SELECT customer_details, staff_id FROM customers UNION SELECT staff_id, staff_id FROM staff;
SELECT customers.customer_id, staff.staff_id FROM customers, staff WHERE customers.customer_id = staff.staff_id;
SELECT policy_type, COUNT(*) as count FROM policies GROUP BY policy_type;
SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code;
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id GROUP BY customers.customer_details ORDER BY COUNT(*) DESC LIMIT 1;
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id GROUP BY customers.customer_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT claim_status_name FROM claims_processing_stages WHERE claim_status_name = 'Open';
SELECT claim_status_name FROM claims_processing_stages WHERE claim_status_name = 'Open';
SELECT COUNT(DISTINCT claim_status_code) FROM claim_headers;
SELECT COUNT(DISTINCT claim_status_code) FROM claim_headers;
SELECT customers.customer_details FROM customers JOIN policies ON customers.customer_id = policies.customer_id WHERE policies.start_date = (SELECT MAX(start_date) FROM policies)
SELECT customers.customer_details FROM policies JOIN customers ON policies.customer_id = customers.customer_id WHERE policies.start_date = (SELECT MAX(start_date) FROM policies)
SELECT events.event_details FROM events JOIN services ON events.service_id = services.service_id WHERE services.service_type_code = 'Marriage';
SELECT events.event_details, events.event_id FROM events JOIN participants_in_events ON events.event_id = participants_in_events.event_id GROUP BY events.event_id HAVING COUNT(participants_in_events.participant_id) > 1;
SELECT participants.participant_id, participants.participant_type_code, COUNT(participants_in_events.event_id) as num_events FROM participants LEFT JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id GROUP BY participants.participant_id, participants.participant_type_code;
SELECT participants.participant_id, services.service_type_code, participants.participant_details FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id JOIN events ON participants_in_events.event_id = events.event_id JOIN services ON events.service_id = services.service_id
SELECT COUNT(*) FROM participants INNER JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id INNER JOIN events ON participants_in_events.event_id = events.event_id INNER JOIN services ON events.service_id = services.service_id WHERE services.service_type_code = 'Organizer';
SELECT DISTINCT service_type FROM services ORDER BY service_type ASC;
SELECT services.service_id, events.event_details FROM events JOIN services ON events.service_id = services.service_id;
SELECT COUNT(DISTINCT event_id) FROM participants_in_events JOIN participants ON participants_in_events.participant_id = participants.participant_id WHERE participants.participant_details LIKE '%Dr.%';
SELECT participant_details, COUNT(*) as count FROM participants JOIN participants_in_events ON participants.participant_id = participants_in_events.participant_id GROUP BY participant_details ORDER BY count DESC LIMIT 1;
SELECT services.service_type_code, services.service_id FROM services JOIN events ON services.service_id = events.service_id JOIN participants_in_events ON events.event_id = participants_in_events.event_id GROUP BY services.service_id ORDER BY COUNT(participants_in_events.participant_id) ASC LIMIT 1;
SELECT event_id, COUNT(*) as num_participants FROM participants_in_events GROUP BY event_id ORDER BY num_participants DESC LIMIT 1;
SELECT events.event_id FROM events WHERE events.event_id NOT IN ( SELECT participants_in_events.event_id FROM participants_in_events INNER JOIN participants ON participants_in_events.participant_id = participants.participant_id WHERE participants.participant_type_code = 'Kenyatta Kuhn' );
SELECT DISTINCT services.service_id FROM events JOIN participants_in_events ON events.event_id = participants_in_events.event_id JOIN participants ON participants_in_events.participant_id = participants.participant_id JOIN services ON events.service_id = services.service_id WHERE events.event_details = 'successful' INTERSECT SELECT DISTINCT services.service_id FROM events JOIN participants_in_events ON events.event_id = participants_in_events.event_id JOIN participants ON participants_in_events.participant_id = participants.participant_id JOIN services ON events.service_id = services.service_id WHERE events.event_details = 'failure';
SELECT COUNT(*) FROM events WHERE event_id NOT IN (SELECT event_id FROM participants_in_events);
SELECT DISTINCT participant_id FROM participants_in_events;
SELECT COUNT(*) FROM technician;
SELECT COUNT(*) FROM technician;
SELECT technician.age, technician.technician_id, technician.team, technician.starting_year FROM technician ORDER BY technician.age ASC;
SELECT technician.technician_id, technician.age FROM technician ORDER BY technician.age ASC;
SELECT team, age FROM technician;
SELECT technician.team, technician.name, MIN(machine.making_year) AS starting_year FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id GROUP BY technician.team, technician.name;
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.team != 'NYY';
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.team != 'NYY';
SELECT technician.name FROM technician WHERE technician.age IN (36, 37);
SELECT technician.technician_id FROM technician WHERE technician.age IN (36, 37);
SELECT MIN(age) FROM technician;
SELECT MIN(age) FROM technician;
SELECT technician_id, COUNT(*) as team_size FROM technician GROUP BY technician_id;
SELECT COUNT(*) FROM technician GROUP BY team;
SELECT technician.technician_id, COUNT(*) as technician_count FROM technician GROUP BY technician.technician_id ORDER BY technician_count DESC LIMIT 1;
SELECT technician.technician_id, COUNT(*) as technician_count FROM technician GROUP BY technician.technician_id ORDER BY technician_count DESC
SELECT technician_id, COUNT(*) as technician_count FROM technician GROUP BY technician_id HAVING COUNT(*) >= 2;
SELECT technician.technician_id, technician.name, COUNT(*) as technician_count FROM technician GROUP BY technician.technician_id, technician.name HAVING COUNT(*) >= 2;
SELECT technician.technician_id, machine.machine_series FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE technician.team = machine.team;
SELECT technician.technician_id, machine.machine_series FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE technician.team = machine.team;
SELECT technician.technician_id, technician.team, technician.age, technician.starting_year, machine.quality_rank, machine.class, machine.team, machine.making_year FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id ORDER BY machine.quality_rank ASC;
SELECT technician.technician_id, technician.team, technician.age, technician.starting_year FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id ORDER BY machine.quality_rank ASC;
SELECT technician.name FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id JOIN machine ON repair_assignment.machine_id = machine.machine_id WHERE machine.value_points > 70;
SELECT t.name FROM technician t JOIN repair_assignment ra ON t.technician_id = ra.technician_id JOIN machine m ON ra.machine_id = m.machine_id WHERE m.value_points > 70;
SELECT technician.name, COUNT(repair_assignment.machine_id) FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.name;
SELECT technician.name, COUNT(repair_assignment.machine_id) as machines_assigned FROM technician JOIN repair_assignment ON technician.technician_id = repair_assignment.technician_id GROUP BY technician.name;
SELECT t.name FROM technician t LEFT JOIN repair_assignment ra ON t.technician_id = ra.technician_id WHERE ra.technician_id IS NULL;
SELECT t.name FROM technician t LEFT JOIN repair_assignment ra ON t.technician_id = ra.technician_id WHERE ra.technician_id IS NULL;
SELECT DISTINCT starting_year FROM technician WHERE technician_id IN (SELECT technician_id FROM repair_assignment WHERE machine_id IN (SELECT machine_id FROM machine WHERE team IN ('CLE', 'CWS')))
SELECT DISTINCT starting_year FROM technician WHERE team IN (SELECT team FROM machine WHERE team IN ('CLE', 'CWS'));
SELECT COUNT(*) FROM camera_lens WHERE max_aperture > 15;
SELECT camera_lens.brand, camera_lens.name FROM camera_lens JOIN photos ON camera_lens.id = photos.camera_lens_id JOIN mountain ON photos.mountain_id = mountain.id GROUP BY camera_lens.brand, camera_lens.name ORDER BY MAX(mountain.height) DESC;
SELECT photos.id, photos.color_scheme, photos.name FROM photos;
SELECT MAX(height), AVG(height) FROM mountain;
SELECT AVG(height) FROM mountain WHERE country = 'Morocco';
SELECT name, height, prominence FROM mountain WHERE range != 'Aberdare Range';
SELECT photos.id, camera_lens.name FROM photos JOIN mountain ON photos.mountain_id = mountain.id JOIN camera_lens ON photos.camera_lens_id = camera_lens.id;
SELECT mountain.id, mountain.name FROM photos JOIN mountain ON photos.mountain_id = mountain.id GROUP BY mountain.id, mountain.name HAVING COUNT(photos.id) >= 2;
SELECT camera_lens.name FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id GROUP BY camera_lens.name ORDER BY COUNT(DISTINCT photos.mountain_id) DESC LIMIT 1;
SELECT photos.name FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.name IN ('Sigma', 'Olympus');
SELECT COUNT(DISTINCT name) FROM camera_lens;
SELECT COUNT(*) FROM camera_lens WHERE id NOT IN (SELECT camera_lens_id FROM photos)
SELECT COUNT(DISTINCT camera_lens.id) FROM photos JOIN mountain ON photos.mountain_id = mountain.id JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE mountain.country = 'Ethiopia';
SELECT DISTINCT camera_lens.brand FROM camera_lens JOIN photos ON camera_lens.id = photos.camera_lens_id JOIN mountain ON photos.mountain_id = mountain.id WHERE mountain.name IN ('Toubkal Atlas', 'Lasta Massif') GROUP BY camera_lens.brand HAVING COUNT(DISTINCT mountain.name) = 2;
SELECT mountain.name, mountain.prominence FROM mountain JOIN photos ON mountain.id = photos.mountain_id JOIN camera_lens ON photos.camera_lens_id = camera_lens.id WHERE camera_lens.brand != 'Sigma';
SELECT brand FROM camera_lens WHERE brand LIKE '%Digital%';
SELECT camera_lens.name, COUNT(photos.id) FROM photos JOIN camera_lens ON photos.camera_lens_id = camera_lens.id GROUP BY camera_lens.name ORDER BY COUNT(photos.id) DESC;
SELECT COUNT(*) FROM band;
SELECT COUNT(*) FROM band;
SELECT DISTINCT title FROM albums;
SELECT DISTINCT title FROM albums;
SELECT title FROM albums WHERE title LIKE '%2012%';
SELECT * FROM albums WHERE title LIKE '%2012%';
SELECT DISTINCT performance.stageposition FROM performance JOIN band ON performance.bandmate = band.id WHERE band.firstname = 'Solveig';
SELECT DISTINCT performance.stagePosition FROM performance JOIN band ON performance.bandmate = band.id WHERE band.lastname = 'Solveig';
SELECT COUNT(*) FROM songs;
SELECT COUNT(*) FROM songs;
SELECT songs.songid FROM performance JOIN band ON performance.bandmate = band.id JOIN songs ON performance.songid = songs.songid WHERE band.lastname = 'Heilo';
SELECT songs.songid FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid JOIN band ON albums.aid = band.id WHERE band.lastname = 'Heilo';
SELECT COUNT(*) FROM performance JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Flash';
SELECT COUNT(*) FROM performance WHERE songid IN (SELECT songid FROM songs WHERE title = 'Flash');
SELECT songs.* FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid JOIN band ON albums.id = band.id WHERE band.firstname = 'Marianne';
SELECT songs.songid FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid JOIN band ON albums.id = band.id WHERE band.lastname = 'Marianne';
SELECT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Badlands';
SELECT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Badlands';
SELECT band.firstname, band.lastname FROM performance JOIN band ON performance.bandmate = band.id JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Badlands' AND performance.stageposition = 'Back';
SELECT band.firstname, band.lastname FROM performance JOIN band ON performance.bandmate = band.id JOIN songs ON performance.songid = songs.songid JOIN tracklists ON tracklists.songid = songs.songid WHERE songs.title = 'Badlands' AND tracklists.position = 'Back Stage';
SELECT COUNT(DISTINCT type) FROM albums;
SELECT DISTINCT title FROM albums;
SELECT label, COUNT(*) as album_count FROM albums GROUP BY label ORDER BY album_count DESC LIMIT 1;
SELECT bandmateid, COUNT(*) as album_count FROM instruments GROUP BY bandmateid ORDER BY album_count DESC LIMIT 1;
SELECT firstname FROM band WHERE id IN (SELECT songid FROM tracklists GROUP BY songid ORDER BY COUNT(*) DESC LIMIT 1);
SELECT firstname FROM band WHERE id IN (SELECT songid FROM tracklists GROUP BY songid ORDER BY COUNT(*) DESC LIMIT 1);
SELECT lastname FROM band WHERE id IN ( SELECT bandmate FROM performance WHERE songid IN ( SELECT songid FROM tracklists WHERE albumid IN ( SELECT albumid FROM tracklists GROUP BY albumid HAVING COUNT(songid) = ( SELECT MAX(song_count) FROM ( SELECT COUNT(songid) as song_count FROM tracklists GROUP BY albumid ) ) ) ) GROUP BY bandmate HAVING COUNT(songid) = ( SELECT MAX(song_count) FROM ( SELECT COUNT(songid) as song_count FROM performance GROUP BY bandmate ) ) ) AND id IN ( SELECT bandmate FROM vocals WHERE type = 'backing' );
SELECT lastname FROM band WHERE id IN ( SELECT bandmate FROM performance WHERE songid IN ( SELECT songid FROM tracklists WHERE albumid IN ( SELECT albumid FROM tracklists GROUP BY albumid ORDER BY COUNT(songid) DESC LIMIT 1 ) ) ) AND id IN ( SELECT bandmate FROM vocals WHERE type = 'back' GROUP BY bandmate ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT songid FROM songs WHERE songid LIKE '%the%';
SELECT songid FROM songs WHERE title LIKE '%the%';
SELECT DISTINCT instrument FROM instruments;
SELECT DISTINCT instrument FROM instruments;
SELECT instruments.instrument FROM instruments JOIN band ON band.id = instruments.bandmateid JOIN songs ON songs.songid = instruments.songid WHERE band.lastname = 'Heilo' AND songs.title = 'Le Pop';
SELECT instruments.instrument FROM instruments JOIN band ON band.id = instruments.bandmateid JOIN songs ON songs.songid = instruments.songid WHERE band.lastname = 'Heilo' AND songs.title = 'Le Pop';
SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1;
SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT songs.songid) FROM songs JOIN instruments ON songs.songid = instruments.songid WHERE instruments.instrument = 'drums';
SELECT COUNT(DISTINCT songid) FROM instruments WHERE instruments = 'drums';
SELECT instruments.instrument FROM instruments JOIN songs ON instruments.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT DISTINCT instruments.instrument FROM instruments JOIN songs ON instruments.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(*) FROM instruments WHERE songid IN (SELECT songid FROM songs WHERE title = 'Le Pop');
SELECT COUNT(DISTINCT instruments.instrument) FROM instruments JOIN songs ON instruments.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(*) FROM instruments JOIN band ON instruments.bandmateid = band.id WHERE band.lastname = 'Heilo';
SELECT COUNT(DISTINCT instruments.songid) FROM instruments JOIN band ON instruments.bandmateid = band.id WHERE band.firstname = 'Heilo';
SELECT DISTINCT instruments.instrument FROM instruments JOIN band ON instruments.bandmateid = band.id WHERE band.lastname = 'Heilo';
SELECT DISTINCT instruments.instrument FROM instruments JOIN band ON instruments.bandmateid = band.id WHERE band.lastname = 'Heilo';
SELECT songs.title FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid JOIN vocals ON songs.songid = vocals.songid GROUP BY songs.title ORDER BY COUNT(vocals.bandmate) DESC LIMIT 1;
SELECT songs.title FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid JOIN vocals ON songs.songid = vocals.songid GROUP BY songs.title ORDER BY COUNT(vocals.bandmate) DESC LIMIT 1;
SELECT type FROM vocals GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type FROM vocals GROUP BY type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.type FROM vocals v JOIN band b ON v.bandmate = b.id WHERE b.lastname = 'Heilo' GROUP BY v.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT type, COUNT(*) as count FROM vocals JOIN band ON vocals.bandmate = band.id WHERE band.lastname = 'Heilo' GROUP BY type ORDER BY count DESC LIMIT 1;
SELECT DISTINCT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT DISTINCT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(DISTINCT type) FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Demon Kitty Rag';
SELECT DISTINCT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Demon Kitty Rag';
SELECT COUNT(*) FROM vocals WHERE type = 'lead';
SELECT COUNT(*) FROM vocals WHERE bandmate = 1;
SELECT vocals.type FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE band.firstname = 'Solveig' AND songs.title = 'A Bar in Amsterdam';
SELECT vocals.type FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE band.firstname = 'Solveig' AND songs.title = 'A Bar in Amsterdam';
SELECT songs.title FROM songs LEFT JOIN vocals ON songs.songid = vocals.songid WHERE vocals.type != 'lead' OR vocals.type IS NULL;
SELECT songs.title FROM songs LEFT JOIN vocals ON songs.songid = vocals.songid WHERE vocals.type != 'lead' OR vocals.type IS NULL;
SELECT DISTINCT bandmate FROM vocals;
SELECT DISTINCT vocals.songid FROM vocals;
SELECT title FROM albums WHERE title LIKE '%2010%';
SELECT * FROM albums WHERE title LIKE '%2010%';
SELECT bandmate FROM performance JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT firstname FROM band WHERE id IN (SELECT DISTINCT albumid FROM tracklists GROUP BY albumid HAVING COUNT(*) = (SELECT COUNT(*) FROM tracklists GROUP BY albumid ORDER BY COUNT(*) DESC LIMIT 1));
SELECT band.lastname FROM band JOIN tracklists ON band.id = tracklists.albumid GROUP BY band.id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT instruments.instrument FROM instruments JOIN band ON band.id = instruments.bandmateid JOIN songs ON songs.songid = instruments.songid WHERE band.firstname = 'Heilo' AND songs.title = 'Badlands';
SELECT instruments.instrument FROM instruments JOIN band ON band.id = instruments.bandmateid JOIN songs ON songs.songid = instruments.songid JOIN performance ON performance.songid = songs.songid AND performance.bandmate = band.id WHERE band.lastname = 'Heilo' AND songs.title = 'Badlands';
SELECT COUNT(*) FROM instruments WHERE songid IN (SELECT songid FROM songs WHERE title = 'Badlands');
SELECT COUNT(DISTINCT instrument) FROM instruments WHERE songid = (SELECT songid FROM songs WHERE title = 'Badlands');
SELECT vocals.type FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Badlands';
SELECT DISTINCT type FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Badlands';
SELECT COUNT(DISTINCT vocals.type) FROM vocals JOIN songs ON vocals.songid = songs.songid WHERE songs.title = 'Le Pop';
SELECT COUNT(DISTINCT type) FROM vocals WHERE songid IN (SELECT songid FROM songs WHERE title = 'Le Pop');
SELECT COUNT(DISTINCT songs.songid) FROM songs JOIN vocals ON songs.songid = vocals.songid WHERE vocals.type = 'shared'
SELECT COUNT(DISTINCT songs.songid) FROM songs JOIN vocals ON songs.songid = vocals.songid GROUP BY songs.songid HAVING COUNT(DISTINCT vocals.bandmate) > 1;
SELECT songs.title FROM songs LEFT JOIN vocals ON songs.songid = vocals.songid WHERE vocals.type != 'back vocal' OR vocals.type IS NULL;
SELECT DISTINCT songs.title FROM songs LEFT JOIN vocals ON songs.songid = vocals.songid WHERE vocals.type != 'back vocals' OR vocals.type IS NULL;
SELECT v.type FROM vocals v JOIN band b ON v.bandmate = b.id JOIN performance p ON b.id = p.bandmate WHERE b.firstname = 'Solveig' GROUP BY v.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.type FROM vocals v JOIN band b ON v.bandmate = b.id WHERE b.lastname = 'Solveig' GROUP BY v.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT vocals.type FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE band.lastname = 'Heilo' AND songs.title = 'Der Kapitan';
SELECT DISTINCT vocals.type FROM vocals JOIN band ON vocals.bandmate = band.id JOIN songs ON vocals.songid = songs.songid WHERE band.lastname = 'Heilo' AND songs.title = 'Der Kapitan';
SELECT band.firstname FROM band JOIN performance ON band.id = performance.bandmate GROUP BY performance.bandmate ORDER BY COUNT(performance.songid) DESC LIMIT 1;
SELECT firstname FROM band WHERE id IN ( SELECT bandmate FROM performance GROUP BY bandmate ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT v.type FROM vocals v JOIN band b ON v.bandmate = b.id JOIN performance p ON b.id = p.bandmate WHERE b.firstname = 'Marianne' GROUP BY v.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT v.type FROM vocals v JOIN band b ON v.bandmate = b.id JOIN performance p ON b.id = p.bandmate WHERE b.firstname = 'Marianne' GROUP BY v.type ORDER BY COUNT(*) DESC LIMIT 1;
SELECT band.firstname, band.lastname FROM performance JOIN band ON performance.bandmate = band.id JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Der Kapitan' AND performance.stageposition = 'Back';
SELECT band.firstname, band.lastname FROM band JOIN performance ON band.id = performance.bandmate JOIN songs ON performance.songid = songs.songid WHERE songs.title = 'Der Kapitan' AND performance.stageposition = 'Back';
SELECT songs.title FROM songs LEFT JOIN vocals ON songs.songid = vocals.songid WHERE vocals.type != 'back vocal' OR vocals.type IS NULL;
SELECT songs.title FROM songs LEFT JOIN vocals ON songs.songid = vocals.songid WHERE vocals.type != 'back vocals' OR vocals.type IS NULL;
SELECT songs.title FROM songs JOIN tracklists ON tracklists.songid = songs.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'A Kiss Before You Go: Live in Hamburg';
SELECT songs.title FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.title = 'A Kiss Before You Go: Live in Hamburg';
SELECT songs.* FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.label = 'Universal Music Group';
SELECT songs.title FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.label = 'Universal Music Group';
SELECT COUNT(*) FROM songs JOIN tracklists ON songs.songid = tracklists.songid JOIN albums ON tracklists.albumid = albums.aid WHERE albums.type = 'Studio';
SELECT COUNT(*) FROM albums JOIN tracklists ON tracklists.albumid = albums.aid WHERE albums.type = 'Studio'
SELECT CASE WHEN SUM(p.amount_paid_in_full_yn) > 500 THEN 'Bad' ELSE 'Good' END AS customer_status FROM customers c JOIN discount_coupons dc ON c.coupon_id = dc.coupon_id JOIN payments p ON p.customer_id = c.customer_id WHERE dc.amount = 500;
SELECT customers.customer_id, customers.first_name, COUNT(bookings.booking_id) as booking_count FROM customers JOIN bookings ON customers.customer_id = bookings.customer_id GROUP BY customers.customer_id, customers.first_name;
SELECT p.customer_id, SUM(p.amount_paid) as total_amount FROM payments p JOIN bookings b ON p.booking_id = b.booking_id GROUP BY p.customer_id ORDER BY total_amount DESC LIMIT 1;
SELECT bookings.booking_id, SUM(payments.amount_paid) AS total_refund FROM bookings JOIN payments ON bookings.booking_id = payments.booking_id GROUP BY bookings.booking_id ORDER BY COUNT(payments.payment_id) DESC LIMIT 1;
SELECT product_id FROM products_booked GROUP BY product_id HAVING COUNT(*) = 3;
SELECT products_for_hire.product_name FROM products_booked JOIN products_for_hire ON products_booked.product_id = products_for_hire.product_id JOIN bookings ON products_booked.booking_id = bookings.booking_id WHERE bookings.amount_payable = 102.76;
SELECT bookings.booking_start_date, bookings.booking_end_date FROM bookings JOIN products_booked ON products_booked.booking_id = bookings.booking_id JOIN products_for_hire ON products_for_hire.product_id = products_booked.product_id WHERE products_for_hire.product_name = 'Book collection A';
SELECT product_name FROM view_product_availability JOIN products_for_hire ON view_product_availability.product_id = products_for_hire.product_id WHERE status_date = 1;
SELECT COUNT(DISTINCT product_id) FROM products_for_hire;
SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name;
SELECT AVG(amount_paid) FROM payments;
SELECT MAX(booked_amount) AS max_booked, MIN(booked_amount) AS min_booked, AVG(booked_amount) AS avg_booked FROM products_booked WHERE returned_yn = 'N';
SELECT DISTINCT payment_type FROM payments;
SELECT pfh.product_name, pfh.product_id, pfh.product_type_code, pfh.product_description, SUM(pb.booked_count) AS total_booked, SUM(dc.coupon_amount) AS total_discount, SUM(pb.booked_count) - SUM(dc.coupon_amount) AS total_cost FROM products_for_hire pfh JOIN view_product_availability vpa ON vpa.product_id = pfh.product_id JOIN products_booked pb ON pb.product_id = pfh.product_id LEFT JOIN discount_coupons dc ON dc.date_issued = vpa.status_date WHERE pfh.product_name LIKE '%Book%' GROUP BY pfh.product_id, vpa.status_date;
SELECT COUNT(DISTINCT pfh.product_id) FROM products_for_hire pfh LEFT JOIN products_booked pb ON pfh.product_id = pb.product_id LEFT JOIN bookings b ON pb.booking_id = b.booking_id WHERE pb.booking_id IS NULL AND b.amount_payable <= 200;
SELECT COUNT(DISTINCT discount_coupons.coupon_id) FROM discount_coupons JOIN customers ON discount_coupons.coupon_id = customers.coupon_id JOIN payments ON customers.customer_id = payments.customer_id WHERE payments.amount_paid_in_full_yn = 'Y' AND customers.gender_mf = 'M' AND payments.payment_type_code = 'Credit Card' AND customers.date_became_customer >= '2019-01-01' AND customers.date_became_customer <= '2019-12-31' AND payments.amount_paid_in_full_yn = 'N' AND customers.gender_mf = 'F' AND payments.payment_type_code = 'Cash' AND customers.date_became_customer >= '2019-01-01' AND customers.date_became_customer <= '2019-12-31';
SELECT payment_date FROM payments WHERE amount_paid > 300 OR amount_paid_in_full_yn = 'Check';
SELECT product_name, product_description FROM products_for_hire WHERE product_description LIKE '%Cutlery%' AND daily_hire_cost < 20;
SELECT * FROM restaurant;
SELECT restaurant.address FROM restaurant JOIN type_of_restaurant ON restaurant.resid = type_of_restaurant.resid JOIN restaurant_type ON type_of_restaurant.restypeid = restaurant_type.restypeid WHERE restaurant_type.restypename = 'Subway';
SELECT rating FROM restaurant WHERE address = 'Subway';
SELECT DISTINCT restypedescription FROM restaurant_type;
SELECT restaurant_type.restypedescription FROM restaurant_type JOIN type_of_restaurant ON restaurant_type.restypeid = type_of_restaurant.restypeid JOIN restaurant ON type_of_restaurant.resid = restaurant.resid WHERE restaurant.resname = 'Sandwich';
SELECT restaurant.rating, restaurant.resid FROM restaurant ORDER BY restaurant.rating DESC;
SELECT age FROM student WHERE lname = 'Smith' AND lname = 'Linda';
SELECT sex FROM student WHERE lname = 'Smith' AND lname = 'Linda';
SELECT student.fname, student.lname FROM student WHERE student.major = '600';
SELECT city_code FROM student WHERE lname = 'Smith' AND stuid IN (SELECT stuid FROM visits_restaurant WHERE stuid = student.stuid AND resid IN (SELECT resid FROM restaurant WHERE resid = visits_restaurant.resid));
SELECT COUNT(*) FROM student WHERE stuid = 1121;
SELECT advisor, COUNT(*) as num_students FROM student GROUP BY advisor ORDER BY num_students DESC LIMIT 1;
SELECT major, COUNT(*) as num_students FROM student GROUP BY major ORDER BY num_students ASC LIMIT 1;
SELECT major, COUNT(*) as num_students FROM student GROUP BY major HAVING num_students BETWEEN 2 AND 30;
SELECT student.fname FROM student WHERE student.age > 18 AND student.major = '600';
SELECT student.fname, student.lname FROM student WHERE student.sex = 'F' AND student.age > 18 AND student.major != '600';
SELECT COUNT(*) FROM restaurant_type JOIN type_of_restaurant ON restaurant_type.restypeid = type_of_restaurant.restypeid JOIN restaurant ON type_of_restaurant.resid = restaurant.resid WHERE restaurant_type.restypedescription = 'Sandwich';
SELECT SUM(visits_restaurant.spent) FROM visits_restaurant INNER JOIN student ON visits_restaurant.stuid = student.stuid WHERE student.fname = 'Linda' AND student.lname = 'Smith';
SELECT COUNT(*) FROM visits_restaurant JOIN student ON visits_restaurant.stuid = student.stuid JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE student.fname = 'Linda' AND student.lname = 'Smith' AND restaurant.resname = 'Subway';
SELECT visits_restaurant.time FROM visits_restaurant JOIN student ON visits_restaurant.stuid = student.stuid JOIN restaurant ON visits_restaurant.resid = restaurant.resid WHERE student.fname = 'Linda' AND student.lname = 'Smith' AND restaurant.resname = 'Subway';
SELECT r.address, SUM(v.time) as total_time FROM visits_restaurant v JOIN restaurant r ON v.resid = r.resid GROUP BY r.address ORDER BY total_time ASC LIMIT 1;
SELECT student.fname, student.lname FROM student JOIN visits_restaurant ON student.stuid = visits_restaurant.stuid GROUP BY student.stuid ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT last_name) FROM actor;
SELECT COUNT(DISTINCT last_name) FROM actor;
SELECT first_name, COUNT(*) as count FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY first_name ORDER BY count DESC LIMIT 1;
SELECT first_name, COUNT(*) as count FROM actor GROUP BY first_name ORDER BY count DESC LIMIT 1;
SELECT actor.first_name || ' ' || actor.last_name as full_name, COUNT(*) as film_count FROM actor JOIN film_actor ON film_actor.actor_id = actor.actor_id GROUP BY full_name ORDER BY film_count DESC LIMIT 1;
SELECT CONCAT(first_name, ' ', last_name) as full_name, COUNT(*) as count FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY full_name ORDER BY count DESC LIMIT 1;
SELECT city_id FROM address GROUP BY city_id HAVING COUNT(*) >= 2;
SELECT city_id FROM address GROUP BY city_id HAVING COUNT(*) >= 2;
SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway';
SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway';
SELECT city.city, city.city_id, COUNT(address.address_id) AS num_addresses FROM city JOIN address ON address.city_id = city.city_id GROUP BY city.city, city.city_id ORDER BY num_addresses DESC LIMIT 1;
SELECT city.city, city.city_id, COUNT(address.address_id) as num_addresses FROM city JOIN address ON address.city_id = city.city_id GROUP BY city.city_id ORDER BY num_addresses DESC LIMIT 1;
SELECT COUNT(*) FROM address WHERE district = 'California';
SELECT COUNT(*) FROM address WHERE address LIKE '%California%';
SELECT film.film_id, film.title FROM film JOIN inventory ON film.film_id = inventory.film_id JOIN rental ON inventory.inventory_id = rental.inventory_id WHERE film.rental_rate = 0.99 GROUP BY film.film_id, film.title HAVING COUNT(inventory.inventory_id) < 3;
SELECT film.film_id, film.title FROM film JOIN inventory ON film.film_id = inventory.film_id WHERE film.rental_rate = 0.99 GROUP BY film.film_id, film.title HAVING COUNT(inventory.inventory_id) < 3;
SELECT COUNT(*) FROM city JOIN country ON city.country_id = country.country_id WHERE country.country = 'Australia';
SELECT COUNT(*) FROM city INNER JOIN country ON city.country_id = country.country_id WHERE country.country = 'Australia';
SELECT country FROM city JOIN country ON city.country_id = country.country_id GROUP BY country HAVING COUNT(city) >= 3;
SELECT country FROM city JOIN country ON city.country_id = country.country_id GROUP BY country HAVING COUNT(city_id) >= 3;
SELECT payment.payment_date FROM payment JOIN staff ON payment.staff_id = staff.staff_id WHERE payment.amount > 10 AND staff.first_name = 'Elsa';
SELECT payment.payment_date FROM payment JOIN staff ON payment.staff_id = staff.staff_id WHERE payment.amount > 10 OR staff.first_name = 'Elsa';
SELECT COUNT(*) FROM customer WHERE active = 1;
SELECT COUNT(DISTINCT customer_id) FROM payment WHERE staff_id IS NOT NULL;
SELECT title, MAX(rental_rate) as highest_rental_rate FROM film;
SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1;
SELECT film.title, film.film_id, film.description FROM film JOIN film_actor ON film.film_id = film_actor.film_id GROUP BY film.film_id ORDER BY COUNT(film_actor.actor_id) DESC LIMIT 1;
SELECT f.title, f.film_id, f.description FROM film f JOIN ( SELECT fa.film_id, COUNT(*) as actor_count FROM film_actor fa GROUP BY fa.film_id ORDER BY actor_count DESC LIMIT 1 ) as subquery ON f.film_id = subquery.film_id;
SELECT actor.actor_id, actor.first_name, actor.last_name, COUNT(*) as film_count FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id ORDER BY film_count DESC LIMIT 1;
SELECT actor.first_name || ' ' || actor.last_name AS full_name, actor.actor_id FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT actor.last_name, actor.first_name FROM actor JOIN film_actor ON actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id HAVING COUNT(film_actor.film_id) > 30;
SELECT a.last_name FROM actor a JOIN film_actor fa ON a.actor_id = fa.actor_id GROUP BY a.actor_id HAVING COUNT(fa.film_id) > 30;
SELECT store.store_id, COUNT(*) as item_count FROM inventory JOIN store ON inventory.store_id = store.store_id GROUP BY store.store_id ORDER BY item_count DESC LIMIT 1;
SELECT inventory.store_id, COUNT(*) as item_count FROM inventory GROUP BY inventory.store_id ORDER BY item_count DESC LIMIT 1;
SELECT SUM(payment_id) FROM payment;
SELECT SUM(payment_amount) FROM payment;
SELECT first_name, last_name, customer.customer_id FROM customer JOIN payment ON customer.customer_id = payment.customer_id GROUP BY customer.customer_id ORDER BY SUM(amount) ASC LIMIT 1;
SELECT first_name, last_name, customer.customer_id FROM customer JOIN payment ON payment.customer_id = customer.customer_id GROUP BY customer.customer_id ORDER BY SUM(amount) ASC LIMIT 1;
SELECT c.name FROM film f JOIN film_text ft ON f.film_id = ft.film_id JOIN film_category fc ON f.film_id = fc.film_id JOIN category c ON fc.category_id = c.category_id WHERE ft.title = 'HUNGER ROOF';
SELECT c.name FROM film_category fc JOIN film f ON fc.film_id = f.film_id JOIN category c ON fc.category_id = c.category_id WHERE f.title = 'HUNGER ROOF';
SELECT category.category_id, category.name, COUNT(film.film_id) FROM film JOIN film_category ON film.film_id = film_category.film_id JOIN category ON film_category.category_id = category.category_id GROUP BY category.category_id, category.name;
SELECT category.category_id, category.name, COUNT(film.film_id) as film_count FROM category JOIN film_category ON category.category_id = film_category.category_id JOIN film ON film_category.film_id = film.film_id GROUP BY category.category_id, category.name;
SELECT film.film_id, film.title FROM inventory JOIN film ON inventory.film_id = film.film_id GROUP BY film.film_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT film.title, film.film_id FROM film JOIN inventory ON film.film_id = inventory.film_id GROUP BY film.film_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT f.title, i.inventory_id FROM rental r JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id GROUP BY i.inventory_id, f.title ORDER BY COUNT(*) DESC LIMIT 1;
SELECT f.title, i.inventory_id FROM rental r JOIN inventory i ON r.inventory_id = i.inventory_id JOIN film f ON i.film_id = f.film_id GROUP BY f.title, i.inventory_id ORDER BY COUNT(*) DESC LIMIT 1;
SELECT COUNT(DISTINCT language.name) FROM film JOIN language ON film.language_id = language.language_id;
SELECT COUNT(DISTINCT language.name) FROM film JOIN language ON film.language_id = language.language_id;
SELECT film.description AS title FROM film WHERE film.rating = 'R';
SELECT film.description FROM film WHERE film.rating = 'R';
SELECT city.city_id, city.country_id, city.last_update FROM store JOIN address ON store.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE store.store_id = 1;
SELECT address.address FROM store JOIN address ON store.address_id = address.address_id WHERE store.store_id = 1;
SELECT staff.staff_id, staff.first_name, staff.last_name FROM staff JOIN payment ON staff.staff_id = payment.staff_id GROUP BY staff.staff_id ORDER BY COUNT(payment.payment_id) ASC LIMIT 1;
SELECT first_name, last_name, staff.staff_id FROM staff JOIN ( SELECT staff_id, COUNT(*) as payment_count FROM payment GROUP BY staff_id ORDER BY payment_count ASC LIMIT 1 ) as subquery ON staff.staff_id = subquery.staff_id;
SELECT language.name FROM film JOIN language ON film.language_id = language.language_id WHERE film.title = 'AIRPORT POLLOCK';
SELECT language.name FROM language JOIN film ON film.language_id = language.language_id WHERE film.title = 'AIRPORT POLLOCK';
SELECT COUNT(*) FROM store;
SELECT COUNT(*) FROM store;
SELECT COUNT(DISTINCT rating) FROM film;
SELECT COUNT(DISTINCT rating) FROM film;
SELECT film.title FROM film JOIN film_text ON film.film_id = film_text.film_id WHERE film_text.special_features LIKE '%Deleted Scenes%';
SELECT film.title FROM film JOIN film_text ON film.film_id = film_text.film_id WHERE film_text.special_features LIKE '%Deleted Scenes%';
SELECT COUNT(*) FROM inventory WHERE store_id = 1;
SELECT COUNT(*) FROM inventory WHERE store_id = 1;
SELECT MIN(last_update) FROM payment;
SELECT MIN(last_update) FROM payment;
SELECT customer.email, address.address, city.city FROM customer JOIN address ON customer.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE customer.first_name = 'Linda';
SELECT address.address2, address.district, address.phone, customer.email FROM customer JOIN address ON customer.address_id = address.address_id WHERE customer.first_name = 'Linda';
SELECT film.title FROM film WHERE (film.length > 100 OR film.rating = 'PG') AND film.replacement_cost <= 200;
SELECT title FROM film WHERE length > 100 OR rating = 'PG' AND replacement_cost <= 200;
SELECT customer.first_name, customer.last_name FROM customer JOIN rental ON rental.customer_id = customer.customer_id WHERE rental.rental_date = (SELECT MIN(rental_date) FROM rental);
SELECT first_name || ' ' || last_name AS full_name FROM customer WHERE customer_id IN ( SELECT customer_id FROM rental WHERE rental_id = ( SELECT MIN(rental_id) FROM rental ) );
SELECT staff.last_name FROM staff JOIN rental ON staff.staff_id = rental.staff_id JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'April' AND customer.last_name = 'Burns';
SELECT staff.last_name || ', ' || staff.first_name AS full_name FROM staff JOIN rental ON staff.staff_id = rental.staff_id JOIN customer ON rental.customer_id = customer.customer_id WHERE customer.first_name = 'April' AND customer.last_name = 'Burns';
SELECT store.store_id, COUNT(customer.customer_id) as customer_count FROM store JOIN customer ON customer.store_id = store.store_id GROUP BY store.store_id ORDER BY customer_count DESC LIMIT 1;
SELECT store_id, COUNT(*) as customer_count FROM customer GROUP BY store_id ORDER BY customer_count DESC LIMIT 1;
SELECT MAX(payment_amount) FROM payment;
SELECT MAX(amount) FROM payment;
SELECT city.city_id, city.country_id, city.last_update FROM staff JOIN address ON staff.address_id = address.address_id JOIN city ON address.city_id = city.city_id WHERE staff.last_name = 'Elsa';
SELECT address.address2, address.district, address.phone FROM staff JOIN address ON staff.address_id = address.address_id WHERE staff.last_name = 'Elsa';
SELECT DISTINCT customer.first_name FROM customer LEFT JOIN rental ON customer.customer_id = rental.customer_id WHERE rental.rental_date <= '2005-08-23 02:06:01' OR rental.rental_date IS NULL;
SELECT customer.first_name FROM customer WHERE customer.customer_id NOT IN ( SELECT rental.customer_id FROM rental WHERE rental.rental_date > '2005-08-23 02:06:01' )
SELECT COUNT(*) FROM driver;
SELECT driver.name, driver.age, school.location FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id JOIN school ON school_bus.school_id = school.school_id;
SELECT party, COUNT(*) as number_of_drivers FROM driver GROUP BY party;
SELECT driver.driver_id, driver.age FROM driver ORDER BY driver.age DESC;
SELECT DISTINCT location FROM school;
SELECT location, COUNT(*) as driver_count FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id JOIN school ON school_bus.school_id = school.school_id GROUP BY location ORDER BY driver_count DESC LIMIT 1;
SELECT driver.party FROM driver WHERE driver.age > 40 AND driver.name LIKE '%Hartford%';
SELECT school.location FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id JOIN school ON school_bus.school_id = school.school_id WHERE driver.age > 40 GROUP BY school.location HAVING COUNT(driver.driver_id) >= 2;
SELECT DISTINCT school.location FROM school LEFT JOIN school_bus ON school.school_id = school_bus.school_id LEFT JOIN driver ON school_bus.driver_id = driver.driver_id WHERE driver.age <= 40 OR driver.age IS NULL;
SELECT driver.name FROM driver LEFT JOIN school_bus ON driver.driver_id = school_bus.driver_id WHERE school_bus.driver_id IS NULL;
SELECT school FROM school GROUP BY school HAVING COUNT(*) = 2;
SELECT school.school, driver.name FROM school_bus JOIN school ON school_bus.school_id = school.school_id JOIN driver ON school_bus.driver_id = driver.driver_id;
SELECT MAX(2022 - driver.age) AS max_years, MIN(2022 - driver.age) AS min_years, AVG(2022 - driver.age) AS avg_years FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id;
SELECT school.school, school.type FROM school LEFT JOIN school_bus ON school.school = school_bus.school_id WHERE school_bus.driver_id IS NULL;
SELECT school.type, COUNT(school_bus.driver_id) AS number_of_buses FROM school JOIN school_bus ON school.school_id = school_bus.school_id GROUP BY school.type;
SELECT COUNT(*) FROM driver WHERE age <= 40 AND party = 'Hartford city';
SELECT name FROM driver WHERE age < 40 AND party = 'Hartford';
SELECT driver.name FROM driver JOIN school_bus ON driver.driver_id = school_bus.driver_id ORDER BY school_bus.years_working DESC LIMIT 1;
SELECT COUNT(*) FROM school;
SELECT COUNT(*) FROM school;
SELECT school.location FROM school JOIN school_performance ON school.school_id = school_performance.school_id ORDER BY (class_a + class_aa) ASC;
SELECT school.location FROM school JOIN school_performance ON school.school_id = school_performance.school_id ORDER BY school_performance.class_a + school_performance.class_aa ASC;
SELECT school.location FROM school ORDER BY school.school_id DESC;
SELECT location FROM school ORDER BY enrollment DESC;
SELECT enrollment FROM school WHERE school != 'Catholic';
SELECT school.enrollment FROM school JOIN school_details ON school.school_id = school_details.school_id WHERE school_details.denomination != 'Catholic';
SELECT AVG(enrollment) FROM school;
SELECT AVG(enrollment) FROM school;
SELECT school.location FROM player JOIN school ON player.school_id = school.school_id ORDER BY school.location ASC;
SELECT player.player, school.location FROM player JOIN school ON player.school_id = school.school_id ORDER BY player.player ASC;
SELECT COUNT(DISTINCT player) FROM player;
SELECT COUNT(DISTINCT player) FROM player;
SELECT school.school_id, school.location, player.player, player.age FROM player JOIN school ON player.school_id = school.school_id WHERE player.age = (SELECT MAX(age) FROM player)
SELECT school.school_id, MIN(player.age) FROM player JOIN school ON player.school_id = school.school_id GROUP BY school.school_id ORDER BY MIN(player.age) DESC LIMIT 1;
SELECT school.school_id, school.location, school.enrollment, school.founded FROM player JOIN school ON player.school_id = school.school_id WHERE player.age IN ( SELECT age FROM player ORDER BY age DESC LIMIT 5 ) GROUP BY school.school_id;
SELECT school.school_id, COUNT(player.player_id) as player_count FROM player JOIN school ON player.school_id = school.school_id GROUP BY school.school_id ORDER BY player_count DESC LIMIT 5;
SELECT player.team, school.location FROM player JOIN school ON player.school_id = school.school_id;
SELECT player.team, school.location FROM player INNER JOIN school ON player.school_id = school.school_id;
SELECT school.location FROM player JOIN school ON player.school_id = school.school_id GROUP BY school.location HAVING COUNT(player.player) > 1;
SELECT school.location FROM school JOIN player ON player.school_id = school.school_id GROUP BY school.location HAVING COUNT(player.player) > 1;
SELECT school.school FROM school JOIN player ON player.school_id = school.school_id GROUP BY school.school ORDER BY COUNT(player.player) DESC LIMIT 1;
SELECT school.school FROM school JOIN ( SELECT school_id, COUNT(*) as player_count FROM player GROUP BY school_id ORDER BY player_count DESC LIMIT 1 ) as most_players_school ON school.school_id = most_players_school.school_id;
SELECT school.school, school_details.nickname FROM school INNER JOIN school_details ON school.school_id = school_details.school_id;
SELECT school.school, school.school_id FROM school;
SELECT school_details.division, COUNT(DISTINCT school.school_id) as number_of_schools FROM school JOIN school_details ON school.school_id = school_details.school_id GROUP BY school_details.division;
SELECT denomination, COUNT(*) FROM school JOIN school_details ON school.school_id = school_details.school_id GROUP BY denomination;
SELECT school_details.division, COUNT(*) as number_of_schools FROM school JOIN school_details ON school.school_id = school_details.school_id GROUP BY school_details.division ORDER BY number_of_schools DESC;
SELECT denomination, COUNT(*) as count FROM school JOIN school_details ON school.school_id = school_details.school_id GROUP BY denomination ORDER BY count DESC;
SELECT school_colors FROM school WHERE school_id = ( SELECT school_id FROM school_performance ORDER BY class_a DESC, class_aa DESC LIMIT 1 );
SELECT school_colors FROM school JOIN school_details ON school.school_id = school_details.school_id JOIN school_performance ON school.school_id = school_performance.school_id ORDER BY class_a DESC, class_aa DESC LIMIT 1;
SELECT school.location FROM school LEFT JOIN player ON school.school_id = player.school_id WHERE player.school_id IS NULL;
SELECT school.location FROM school LEFT JOIN player ON player.school_id = school.school_id WHERE player.school_id IS NULL;
SELECT DISTINCT s1.denomination FROM school s1 JOIN school s2 ON s1.school_id = s2.school_id WHERE s1.founded < 1890 AND s2.founded > 1900;
SELECT DISTINCT s.denomination FROM school s JOIN school_details sd ON s.school_id = sd.school_id WHERE s.founded < 1890 INTERSECT SELECT DISTINCT s.denomination FROM school s JOIN school_details sd ON s.school_id = sd.school_id WHERE s.founded > 1900;
SELECT school.school FROM school LEFT JOIN school_details ON school.school_id = school_details.school_id WHERE school_details.division != 1;
SELECT school_details.nickname FROM school_details JOIN school ON school_details.school_id = school.school_id WHERE school_details.division != 1;
SELECT DISTINCT school_details.league FROM school_details JOIN school ON school_details.school_id = school.school_id GROUP BY school_details.league HAVING COUNT(school.school_id) > 1;
SELECT DISTINCT school.school FROM school JOIN school_details ON school.school_id = school_details.school_id GROUP BY school.school HAVING COUNT(school_details.school_id) > 1;
SELECT country.name, league.name FROM country JOIN league ON country.id = league.country_id;
SELECT COUNT(*) FROM league WHERE country_id = (SELECT id FROM country WHERE name = 'England');
SELECT AVG(player_attributes.weight) FROM player_attributes;
SELECT MAX(player_attributes.height), MIN(player_attributes.height) FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id AND player.player_fifa_api_id = player_attributes.player_fifa_api_id;
SELECT player.player_name FROM player_attributes JOIN player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id AND player_attributes.player_api_id = player.player_api_id WHERE player_attributes.overall_rating > (SELECT AVG(overall_rating) FROM player_attributes)
SELECT player.player_name FROM player_attributes JOIN player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id AND player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.dribbling DESC LIMIT 1;
SELECT player.player_name FROM player_attributes JOIN player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id WHERE player_attributes.crossing > 90 AND player_attributes.positioning = 'Right';
SELECT player.player_name FROM player JOIN player_attributes ON player.player_api_id = player_attributes.player_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.overall_rating BETWEEN 85 AND 90;
SELECT preferred_foot, AVG(rating) as average_rating FROM player_attributes JOIN player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id AND player_attributes.player_api_id = player.player_api_id WHERE preferred_foot IN ('right', 'left') GROUP BY preferred_foot;
SELECT preferred_foot, COUNT(*) FROM player_attributes JOIN player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id WHERE overall_rating > 80 GROUP BY preferred_foot;
SELECT player.id FROM player JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player.height >= 180 AND player_attributes.overall_rating > 85;
SELECT player.id FROM player JOIN player_attributes ON player.player_fifa_api_id = player_attributes.player_fifa_api_id WHERE player_attributes.preferred_foot = 'left' AND player_attributes.height >= 180 AND player_attributes.height <= 190;
SELECT player_name, AVG(overall_rating) as avg_rating FROM player_attributes JOIN player ON player_attributes.player_fifa_api_id = player.player_fifa_api_id AND player_attributes.player_api_id = player.player_api_id GROUP BY player_name ORDER BY avg_rating DESC LIMIT 3;
SELECT player.birthday, player.player_api_id, player.player_fifa_api_id, player.id, player_attributes.potential FROM player JOIN player_attributes ON player_attributes.player_fifa_api_id = player.player_fifa_api_id AND player_attributes.player_api_id = player.player_api_id ORDER BY player_attributes.potential DESC LIMIT 5;
SELECT DISTINCT district.city_area FROM district JOIN store_district ON store_district.district_id = district.district_id ORDER BY district.city_area DESC;
SELECT DISTINCT district.city_area FROM district ORDER BY district.city_area DESC;
SELECT store.area_size FROM store JOIN store_product ON store.store_id = store_product.store_id GROUP BY store.area_size HAVING COUNT(store_product.product_id) > 3;
SELECT MAX(area_size) FROM store WHERE store_id IN (SELECT store_id FROM store_product GROUP BY store_id HAVING COUNT(product_id) > 3);
SELECT city_population, headquartered_city FROM district WHERE city_population BETWEEN 200000 AND 2000000;
SELECT district.headquartered_city, district.city_population FROM district WHERE district.city_population BETWEEN 200000 AND 2000000;
SELECT district.headquartered_city FROM district WHERE district.city_area > 10 OR district.city_population > 100000;
SELECT district_id FROM district WHERE city_area > 10 OR city_population > 100000;
SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1;
SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1;
SELECT district_id FROM district ORDER BY city_area ASC LIMIT 1;
SELECT city_area FROM district ORDER BY city_area ASC LIMIT 1;
SELECT SUM(city_population) FROM ( SELECT city_population FROM district ORDER BY district_id DESC LIMIT 3 )
SELECT SUM(city_population) FROM district WHERE district_id IN ( SELECT district_id FROM store_district WHERE store_id IN ( SELECT store_id FROM store ORDER BY ranking DESC LIMIT 3 ) );
SELECT store_name, COUNT(*) as number_of_stores FROM store GROUP BY store_name;
SELECT store_name, COUNT(*) FROM store GROUP BY store_name;
SELECT store.store_name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE district.headquartered_city = 'Khanewal';
SELECT store.store_name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE district.headquartered_city = 'Khanewal';
SELECT store_name FROM store WHERE store_id IN (SELECT store_id FROM store_district WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1));
SELECT store.store_id FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE district.city_population = (SELECT MAX(city_population) FROM district)
SELECT district.district_name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE store.type = 'headquarter' AND store.name = 'Blackville';
SELECT city_name FROM district WHERE district_name = 'Blackville';
SELECT district.headquartered_city, COUNT(store.store_id) FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id GROUP BY district.headquartered_city;
SELECT district.district_name, COUNT(store.store_id) as num_stores FROM district JOIN store_district ON district.district_id = store_district.district_id JOIN store ON store_district.store_id = store.store_id GROUP BY district.district_name;
SELECT district.headquartered_city, COUNT(*) as store_count FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id GROUP BY district.headquartered_city ORDER BY store_count DESC LIMIT 1;
SELECT district.headquartered_city, COUNT(*) as number_of_flagship_stores FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE store.type = 'flagship' GROUP BY district.headquartered_city ORDER BY number_of_flagship_stores DESC LIMIT 1;
SELECT AVG(pages_per_minute) FROM store_product WHERE product_id = 'color';
SELECT AVG(pages) FROM product WHERE interface = 'color';
SELECT product.product_id FROM product JOIN store_product ON product.product_id = store_product.product_id JOIN store ON store_product.store_id = store.store_id WHERE store.store_name = 'Miramichi';
SELECT product_id FROM store JOIN store_product ON store.store_id = store_product.store_id WHERE store.store_name = 'Miramichi';
SELECT product.product FROM product JOIN store_product ON product.product = store_product.product_id JOIN store ON store_product.store_id = store.store_id WHERE product.max_page_size = 'A4' AND product.pages_per_minute < 5;
SELECT product.product FROM product JOIN store_product ON product.product = store_product.product JOIN store ON store_product.store_id = store.store_id WHERE product.max_page_size = 'A4' AND product.pages_per_minute_color < 5;
SELECT product.product FROM product JOIN store_product ON product.product = store_product.product WHERE product.max_page_size = 'A4' OR product.pages_per_minute_color < 5;
SELECT product.product FROM product JOIN store_product ON product.product = store_product.product WHERE product.max_page_size = 'A4' AND product.pages_per_minute_color < 5;
SELECT product_id FROM product WHERE product_id IN (SELECT product_id FROM store_product WHERE product_id IN (SELECT product_id FROM store WHERE store_name LIKE '%Scanner%'));
SELECT product_id FROM product WHERE product_id IN (SELECT product_id FROM store_product WHERE product_id IN (SELECT product_id FROM product WHERE product_name LIKE '%Scanner%'));
SELECT MAX(dimensions) as max_page_size FROM product;
SELECT MAX(page_size) as max_page_size, COUNT(*) as count FROM store GROUP BY page_size ORDER BY count DESC LIMIT 1;
SELECT product FROM product WHERE dimensions NOT IN ( SELECT dimensions FROM product GROUP BY dimensions ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT product FROM product WHERE product_id NOT IN ( SELECT product_id FROM store_product GROUP BY product_id HAVING COUNT(*) = ( SELECT COUNT(*) FROM store_product GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1 ) );
SELECT SUM(district.city_area) FROM district WHERE district.city_area > (SELECT AVG(city_area) FROM district)
SELECT SUM(district.city_area) FROM district WHERE district.city_area > (SELECT AVG(city_area) FROM district)
SELECT DISTINCT d.district_name FROM district d JOIN store_district sd ON d.district_id = sd.district_id JOIN store s ON sd.store_id = s.store_id WHERE s.store_name LIKE '%City Mall%' INTERSECT SELECT DISTINCT d.district_name FROM district d JOIN store_district sd ON d.district_id = sd.district_id JOIN store s ON sd.store_id = s.store_id WHERE s.store_name LIKE '%Village Store%'
SELECT DISTINCT district_name FROM district WHERE district_name IN ( SELECT district_name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE store_name LIKE '%mall%' ) AND district_name IN ( SELECT district_name FROM store JOIN store_district ON store.store_id = store_district.store_id JOIN district ON store_district.district_id = district.district_id WHERE store_name LIKE '%village%' );
SELECT COUNT(*) FROM region;
SELECT COUNT(*) FROM region;
SELECT region.region_id, region.region_name FROM region ORDER BY region.region_id;
SELECT region.region_id, region.region_name FROM region ORDER BY region.region_id;
SELECT region_code FROM region ORDER BY region_code ASC;
SELECT region_code FROM region ORDER BY region_code ASC;
SELECT region_code FROM region WHERE region_code != 'Denmark';
SELECT region_code FROM region WHERE region_code != 'Denmark';
SELECT COUNT(DISTINCT storm_id) FROM storm WHERE death_records > 0;
SELECT COUNT(*) FROM storm WHERE max_speed > 0;
SELECT storm.name, storm.dates_active, storm.number_deaths FROM storm WHERE storm.number_deaths >= 1;
SELECT storm.name, storm.date_active, storm.number_deaths FROM storm WHERE storm.number_deaths >= 1;
SELECT AVG(storm.damage_millions_usd) AS average_damage, MAX(storm.damage_millions_usd) AS max_damage FROM storm WHERE storm.max_speed > 1000;
SELECT AVG(storm.damage_millions_usd) AS average_damage, MAX(storm.damage_millions_usd) AS max_damage FROM storm WHERE storm.max_speed > 1000;
SELECT SUM(number_deaths), SUM(damage_millions_usd) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm);
SELECT SUM(number_deaths), SUM(damage_millions_usd) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)
SELECT storm.name, storm.damage_millions_usd FROM storm ORDER BY storm.damage_millions_usd DESC;
SELECT storm.name, storm.damage_millions_usd FROM storm ORDER BY storm.damage_millions_usd DESC;
SELECT COUNT(DISTINCT region_id) FROM affected_region;
SELECT COUNT(DISTINCT region_id) FROM affected_region;
SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region);
SELECT region_code FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region);
SELECT region.region_code, COUNT(affected_region.storm_id) as storm_count FROM region JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region.region_code;
SELECT region.region_name, COUNT(storm.name) as storm_count FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id GROUP BY region.region_name;
SELECT storm.name, COUNT(affected_region.region_id) as number_of_affected_regions FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.name;
SELECT storm.name, COUNT(affected_region.region_id) as num_regions_affected FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.name;
SELECT storm.name, storm.max_speed FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id WHERE affected_region.number_city_affected = ( SELECT MAX(number_city_affected) FROM affected_region )
SELECT storm.name, storm.max_speed FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id WHERE affected_region.number_city_affected = ( SELECT MAX(number_city_affected) FROM affected_region )
SELECT storm.name FROM storm LEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id WHERE affected_region.storm_id IS NULL;
SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region);
SELECT storm.storm_id, storm.dates_active, storm.max_speed, storm.damage_millions_usd FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.storm_id HAVING COUNT(DISTINCT affected_region.region_id) >= 2 AND SUM(affected_region.number_city_affected) >= 10;
SELECT storm.storm_id, storm.dates_active, storm.max_speed, storm.damage_millions_usd FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.storm_id HAVING COUNT(DISTINCT affected_region.region_id) >= 2 AND SUM(affected_region.number_city_affected) >= 10;
SELECT storm.name FROM storm LEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.name HAVING COUNT(affected_region.region_id) < 2;
SELECT storm.name FROM storm LEFT JOIN affected_region ON storm.storm_id = affected_region.storm_id GROUP BY storm.name HAVING COUNT(affected_region.region_id) < 2;
SELECT region_name FROM region WHERE region_id IN ( SELECT region_id FROM affected_region WHERE storm_id IN ( SELECT storm_id FROM storm WHERE number_deaths >= 10 ) );
SELECT region.region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.number_deaths >= 10;
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = 'Denmark';
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name = 'Denmark';
SELECT region.region_code FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id GROUP BY region.region_code HAVING COUNT(storm.name) >= 2;
SELECT region.region_code FROM region JOIN affected_region ON region.region_id = affected_region.region_id GROUP BY region.region_id HAVING COUNT(DISTINCT affected_region.storm_id) >= 2;
SELECT region.region_name FROM affected_region JOIN region ON affected_region.region_id = region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.number_deaths = (SELECT MAX(number_deaths) FROM storm)
SELECT region.region_name FROM region JOIN affected_region ON region.region_id = affected_region.region_id JOIN storm ON affected_region.storm_id = storm.storm_id WHERE storm.number_deaths = (SELECT MAX(number_deaths) FROM storm)
SELECT storm.name FROM storm JOIN affected_region AS ar1 ON storm.storm_id = ar1.storm_id JOIN region AS r1 ON ar1.region_id = r1.region_id JOIN affected_region AS ar2 ON storm.storm_id = ar2.storm_id JOIN region AS r2 ON ar2.region_id = r2.region_id WHERE r1.region_name = 'Afghanistan' AND r2.region_name = 'Albania';
SELECT storm.name FROM storm JOIN affected_region ON storm.storm_id = affected_region.storm_id JOIN region ON affected_region.region_id = region.region_id WHERE region.region_name IN ('Afghanistan', 'Albania') GROUP BY storm.name HAVING COUNT(DISTINCT region.region_name) = 2;
SELECT COUNT(*) FROM list;
SELECT COUNT(*) FROM list;
SELECT lastname FROM list WHERE classroom = '111';
SELECT lastname FROM list WHERE classroom = '111';
SELECT lastname FROM list WHERE classroom = '108';
SELECT firstname FROM list WHERE classroom = '108';
SELECT firstname FROM list WHERE classroom = '107';
SELECT lastname FROM list WHERE classroom = '107';
SELECT classroom, grade FROM list;
SELECT classroom, lastname, firstname FROM list;
SELECT lastname, firstname FROM list WHERE classroom = '103';
SELECT grade FROM list WHERE classroom = '103';
SELECT classroom, lastname, firstname FROM list WHERE classroom = '105';
SELECT lastname FROM list WHERE classroom = '105';
SELECT DISTINCT classroom FROM list WHERE lastname LIKE 'Grade 4%';
SELECT classroom FROM list WHERE lastname LIKE '%4';
SELECT DISTINCT classroom FROM list WHERE lastname LIKE '%5';
SELECT DISTINCT classroom FROM list WHERE lastname LIKE '%grade 5%';
SELECT lastname FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE grade = 5);
SELECT lastname FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE grade = 5);
SELECT lastname FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE grade = 1);
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.lastname = list.lastname WHERE list.grade = 1;
SELECT lastname FROM teachers WHERE classroom = 110;
SELECT lastname FROM teachers WHERE classroom = 110;
SELECT lastname FROM teachers WHERE classroom = '109';
SELECT lastname FROM teachers WHERE classroom = '109';
SELECT firstname, lastname FROM teachers;
SELECT firstname, lastname FROM teachers;
SELECT list.firstname, teachers.lastname FROM list INNER JOIN teachers ON list.classroom = teachers.classroom;
SELECT lastname FROM list;
SELECT firstname, lastname FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'OTHA MOYER');
SELECT firstname, lastname FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'OTHA MOYER');
SELECT firstname FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'MARROTTE KIRK');
SELECT firstname, lastname FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'MARROTTE' AND lastname = 'KIRK');
SELECT teachers.firstname FROM teachers JOIN list ON teachers.classroom = list.classroom WHERE list.firstname = 'EVELINA BROMLEY';
SELECT teachers.firstname FROM teachers INNER JOIN list ON teachers.classroom = list.classroom WHERE list.firstname = 'EVELINA BROMLEY';
SELECT teachers.firstname FROM teachers WHERE teachers.classroom = (SELECT list.classroom FROM list WHERE list.firstname = 'GELL TAMI');
SELECT lastname FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'GELL TAMI');
SELECT COUNT(*) FROM list WHERE classroom = (SELECT classroom FROM teachers WHERE firstname = 'LORIA' AND lastname = 'ONDERSMA');
SELECT COUNT(*) FROM list WHERE classroom = (SELECT classroom FROM teachers WHERE firstname = 'LORIA ONDERSMA');
SELECT COUNT(*) FROM list WHERE classroom = (SELECT classroom FROM teachers WHERE firstname = 'KAWA' AND lastname = 'GORDON');
SELECT COUNT(*) FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'KAWA GORDON');
SELECT COUNT(*) FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'TARRING' AND lastname = 'LEIA');
SELECT COUNT(*) FROM list WHERE classroom IN (SELECT classroom FROM teachers WHERE firstname = 'TARRING' AND lastname = 'LEIA');
SELECT COUNT(*) FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'CHRISSY NABOZNY');
SELECT COUNT(*) FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'CHRISSY NABOZNY');
SELECT COUNT(*) FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'MADLOCK RAY');
SELECT COUNT(*) FROM teachers WHERE classroom IN (SELECT classroom FROM list WHERE firstname = 'MADLOCK RAY');
SELECT firstname FROM list WHERE grade = 1 AND classroom NOT IN (SELECT classroom FROM teachers WHERE firstname = 'OTHA MOYER');
SELECT firstname, lastname FROM list WHERE grade = 1 AND classroom NOT IN (SELECT classroom FROM teachers WHERE firstname = 'OTHA MOYER');
SELECT lastname FROM list WHERE grade = 3 AND classroom NOT IN ( SELECT classroom FROM teachers WHERE firstname = 'COVIN' AND lastname = 'JEROME' );
SELECT lastname FROM list WHERE grade = 3 AND classroom NOT IN (SELECT classroom FROM teachers WHERE firstname = 'COVIN' AND lastname = 'JEROME');
SELECT grade, COUNT(DISTINCT classroom), COUNT(*) FROM list GROUP BY grade;
SELECT grade, COUNT(DISTINCT classroom), COUNT(*) FROM list GROUP BY grade;
SELECT classroom, COUNT(*) AS number_of_grades FROM list GROUP BY classroom;
SELECT classroom, COUNT(DISTINCT grade) FROM list GROUP BY classroom;
SELECT lastname, COUNT(*) as student_count FROM list GROUP BY lastname ORDER BY student_count DESC LIMIT 1;
SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade, COUNT(*) as student_count FROM list GROUP BY grade;
SELECT classroom, COUNT(*) AS student_count FROM list GROUP BY classroom;
SELECT COUNT(*) FROM list WHERE classroom LIKE '0%';
SELECT classroom, COUNT(*) FROM list WHERE classroom LIKE '0%' GROUP BY classroom;
SELECT classroom, COUNT(*) as total_students FROM list WHERE classroom LIKE '%4' GROUP BY classroom;
SELECT classroom, COUNT(*) as total_students FROM list WHERE classroom LIKE '%4%' GROUP BY classroom;
SELECT firstname FROM teachers WHERE classroom IN ( SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT teachers.firstname, list.lastname FROM teachers JOIN list ON teachers.classroom = list.classroom GROUP BY teachers.firstname ORDER BY COUNT(list.lastname) DESC LIMIT 1;
SELECT COUNT(*) FROM list;
SELECT COUNT(*) FROM list WHERE lastname = 'teachers.lastname';
SELECT course_id, COUNT(*) as num_students FROM student_course_registrations GROUP BY course_id ORDER BY num_students DESC LIMIT 1;
SELECT course_name FROM courses WHERE course_id IN ( SELECT course_id FROM student_course_registrations GROUP BY course_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(course_id) ASC LIMIT 1;
SELECT student_id FROM student_course_registrations GROUP BY student_id HAVING COUNT(course_id) = ( SELECT COUNT(course_id) FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(course_id) ASC LIMIT 1 )
SELECT people.last_name, people.middle_name FROM people JOIN candidates ON people.person_id = candidates.candidate_id;
SELECT people.first_name, people.last_name FROM people INNER JOIN candidates ON people.person_id = candidates.candidate_id;
SELECT DISTINCT student_course_registrations.student_id FROM student_course_registrations LEFT JOIN student_course_attendance ON student_course_registrations.student_id = student_course_attendance.student_id WHERE student_course_attendance.student_id IS NULL;
SELECT DISTINCT student_course_registrations.student_id FROM student_course_registrations LEFT JOIN student_course_attendance ON student_course_registrations.student_id = student_course_attendance.student_id WHERE student_course_attendance.student_id IS NULL;
SELECT DISTINCT student_id FROM student_course_attendance;
SELECT DISTINCT student_course_attendance.student_id FROM student_course_attendance WHERE student_course_attendance.student_id IN ( SELECT student_course_registrations.student_id FROM student_course_registrations )
SELECT students.student_id, courses.course_id, courses.course_description FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_id IN ( SELECT course_id FROM student_course_attendance WHERE student_course_attendance.course_id = student_course_registrations.course_id AND student_course_attendance.student_id = student_course_registrations.student_id )
SELECT people.first_name, people.middle_name, people.last_name, student_course_registrations.course_id, student_course_registrations.registration_date FROM student_course_registrations JOIN students ON student_course_registrations.student_id = students.student_id JOIN people ON students.student_id = people.person_id ORDER BY student_course_registrations.registration_date DESC LIMIT 1;
SELECT students.student_details FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id WHERE student_course_attendance.date_of_attendance = ( SELECT MAX(date_of_attendance) FROM student_course_attendance )
SELECT COUNT(DISTINCT student_course_attendance.student_id) FROM student_course_attendance JOIN courses ON student_course_attendance.course_id = courses.course_id WHERE courses.course_name = 'English';
SELECT COUNT(DISTINCT student_course_attendance.student_id) FROM student_course_attendance JOIN courses ON student_course_attendance.course_id = courses.course_id WHERE courses.course_name LIKE '%English%';
SELECT COUNT(DISTINCT course_id) FROM student_course_attendance WHERE student_id = 171;
SELECT COUNT(*) FROM student_course_attendance WHERE student_id = 171;
SELECT candidates.candidate_id FROM people JOIN candidates ON candidates.candidate_id = people.person_id WHERE people.email = 'stanley.monahan@example.org';
SELECT candidates.candidate_id FROM people JOIN candidates ON people.person_id = candidates.candidate_id WHERE people.email = 'stanley.monahan@example.org';
SELECT candidate_id FROM candidates WHERE candidate_id IN ( SELECT student_id FROM student_course_attendance WHERE date_of_attendance = ( SELECT MAX(date_of_attendance) FROM student_course_attendance ) ) AND candidate_id IN ( SELECT student_id FROM student_course_registrations WHERE registration_date = ( SELECT MAX(registration_date) FROM student_course_registrations ) ) AND candidate_id IN ( SELECT person_id FROM people_addresses WHERE date_to IS NULL );
SELECT candidates.candidate_id FROM student_course_attendance JOIN people_addresses ON student_course_attendance.student_id = people_addresses.person_id JOIN candidates ON people_addresses.person_address_id = candidates.candidate_id ORDER BY date_of_attendance DESC LIMIT 1;
SELECT p.first_name, p.middle_name, p.last_name, COUNT(sc.course_id) AS course_count FROM student_course_registrations sc JOIN students s ON sc.student_id = s.student_id JOIN people p ON s.student_id = p.person_id GROUP BY p.first_name, p.middle_name, p.last_name ORDER BY course_count DESC LIMIT 1;
SELECT first_name, middle_name, last_name, password FROM students JOIN people ON students.student_id = people.person_id WHERE students.student_id IN ( SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT student_id, COUNT(course_id) as number_of_registered_courses FROM student_course_registrations GROUP BY student_id;
SELECT student_id, COUNT(course_id) as num_courses FROM student_course_registrations GROUP BY student_id;
SELECT c.course_name, COUNT(sc.student_id) AS registered_students FROM courses c JOIN student_course_registrations sc ON c.course_id = sc.course_id GROUP BY c.course_name;
SELECT courses.course_id, COUNT(student_course_registrations.student_id) AS number_of_students, courses.course_name FROM courses JOIN student_course_registrations ON courses.course_id = student_course_registrations.course_id GROUP BY courses.course_id, courses.course_name;
SELECT candidate_id FROM candidate_assessments WHERE assessment_outcome_code = 'Pass';
SELECT candidate_id FROM candidate_assessments WHERE assessment_outcome_code = 'Pass';
SELECT people.cell_mobile_number FROM candidate_assessments JOIN candidates ON candidate_assessments.candidate_id = candidates.candidate_id JOIN people ON candidates.candidate_id = people.person_id WHERE candidate_assessments.qualification = 'Fail';
SELECT people.cell_phone_number FROM candidate_assessments JOIN candidates ON candidate_assessments.candidate_id = candidates.candidate_id JOIN people ON candidates.candidate_id = people.person_id WHERE candidate_assessments.qualification = 'Fail';
SELECT student_id FROM student_course_registrations WHERE course_id = 301;
SELECT student_id FROM student_course_registrations WHERE course_id = 301;
SELECT student_id FROM student_course_registrations WHERE course_id = 301 ORDER BY registration_date DESC LIMIT 1;
SELECT student_id FROM student_course_registrations WHERE course_id = 301 ORDER BY registration_date DESC;
SELECT DISTINCT line_2 FROM addresses WHERE address_id IN (SELECT address_id FROM people_addresses WHERE person_id IN (SELECT person_id FROM people));
SELECT DISTINCT city FROM addresses WHERE address_id IN (SELECT address_id FROM people_addresses WHERE person_id IN (SELECT student_id FROM students));
SELECT DISTINCT addresses.city FROM addresses JOIN people_addresses ON addresses.address_id = people_addresses.address_id JOIN people ON people_addresses.person_id = people.person_id JOIN students ON people.person_id = students.student_id;
SELECT DISTINCT addresses.city FROM addresses JOIN people_addresses ON addresses.address_id = people_addresses.address_id JOIN people ON people_addresses.person_id = people.person_id JOIN students ON people.person_id = students.student_id;
SELECT course_description FROM courses ORDER BY course_description ASC;
SELECT course_description FROM courses ORDER BY course_description ASC;
SELECT first_name FROM people ORDER BY first_name ASC;
SELECT first_name FROM people ORDER BY first_name ASC;
SELECT DISTINCT student_id FROM student_course_registrations UNION SELECT DISTINCT student_id FROM student_course_attendance;
SELECT DISTINCT student_id FROM ( SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance )
SELECT DISTINCT course_id FROM ( SELECT course_id FROM student_course_attendance WHERE student_id = 121 UNION SELECT course_id FROM student_course_registrations WHERE student_id = 121 )
SELECT DISTINCT course_id FROM student_course_attendance WHERE student_id = 121 UNION SELECT DISTINCT course_id FROM student_course_registrations WHERE student_id = 121;
SELECT DISTINCT students.* FROM students JOIN student_course_registrations ON students.student_id = student_course_registrations.student_id LEFT JOIN student_course_attendance ON students.student_id = student_course_attendance.student_id WHERE student_course_attendance.student_id IS NULL;
SELECT DISTINCT people.* FROM student_course_registrations LEFT JOIN student_course_attendance ON student_course_registrations.course_id = student_course_attendance.course_id LEFT JOIN students ON student_course_registrations.student_id = students.student_id LEFT JOIN people ON students.student_id = people.person_id WHERE student_course_attendance.course_id IS NULL;
SELECT student_course_registrations.student_id FROM student_course_registrations JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'course statistics' ORDER BY student_course_registrations.registration_date;
SELECT student_course_registrations.student_id FROM student_course_registrations JOIN courses ON student_course_registrations.course_id = courses.course_id WHERE courses.course_name = 'Course Statistics' ORDER BY student_course_registrations.registration_date;
SELECT student_course_attendance.student_id FROM student_course_attendance JOIN courses ON student_course_attendance.course_id = courses.course_id WHERE courses.course_name = 'statistics' ORDER BY student_course_attendance.date_of_attendance;
SELECT student_course_attendance.student_id FROM student_course_attendance JOIN courses ON student_course_attendance.course_id = courses.course_id WHERE courses.course_name LIKE '%Statistics%' ORDER BY student_course_attendance.date_of_attendance;
SELECT COUNT(*) FROM submission;
SELECT COUNT(*) FROM submission;
SELECT author FROM submission ORDER BY score ASC;
SELECT submission.author FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id ORDER BY submission.submission_id ASC;
SELECT submission.college, submission.submission_id FROM submission;
SELECT submission.college, submission.submission_id FROM submission;
SELECT DISTINCT author FROM submission WHERE author IN ('Florida', 'Temple');
SELECT DISTINCT author FROM submission WHERE author IN ('Florida', 'Temple');
SELECT AVG(score) FROM submission;
SELECT AVG(score) FROM submission;
SELECT author FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE result = (SELECT MAX(result) FROM acceptance)
SELECT author FROM submission WHERE submission_id IN ( SELECT submission_id FROM acceptance GROUP BY submission_id ORDER BY COUNT(*) DESC LIMIT 1 );
SELECT college, COUNT(DISTINCT submission_id) as number_of_authors FROM submission GROUP BY college;
SELECT college, COUNT(DISTINCT author) as author_count FROM submission GROUP BY college;
SELECT college, COUNT(*) as count FROM submission GROUP BY college ORDER BY count DESC LIMIT 1;
SELECT author FROM submission GROUP BY author ORDER BY COUNT(*) DESC LIMIT 1;
SELECT DISTINCT college FROM submission WHERE submission_id IN ( SELECT submission_id FROM submission WHERE score > 90 ) AND college IN ( SELECT college FROM submission WHERE score < 80 );
SELECT DISTINCT college FROM submission WHERE submission_id IN ( SELECT submission_id FROM submission WHERE score > 90 ) AND college IN ( SELECT college FROM submission WHERE score < 80 );
SELECT submission.author, acceptance.result FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id;
SELECT submission.author, acceptance.result FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id;
SELECT submission.*, acceptance.result FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id ORDER BY acceptance.result DESC LIMIT 1;
SELECT MAX(submission.scores) FROM submission INNER JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.result = 'accepted';
SELECT submission.college, COUNT(DISTINCT workshop.name) as num_workshops FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id GROUP BY submission.college;
SELECT submission.college, COUNT(DISTINCT workshop.name) as num_workshops FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id JOIN workshop ON acceptance.workshop_id = workshop.workshop_id GROUP BY submission.college;
SELECT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id GROUP BY submission.college HAVING COUNT(DISTINCT acceptance.workshop_id) > 1;
SELECT submission.college FROM submission JOIN acceptance ON submission.submission_id = acceptance.submission_id GROUP BY submission.college HAVING COUNT(DISTINCT acceptance.workshop_id) > 1;
SELECT venue, name FROM workshop ORDER BY venue ASC;
SELECT venue, name FROM workshop ORDER BY venue ASC;
SELECT DISTINCT submission.college FROM submission LEFT JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.submission_id IS NULL;
SELECT DISTINCT submission.college FROM submission LEFT JOIN acceptance ON submission.submission_id = acceptance.submission_id WHERE acceptance.submission_id IS NULL;
SELECT name FROM business WHERE rating > 4.5;
SELECT name FROM business WHERE rating = 3.5;
SELECT uid FROM user WHERE name = 'Michelle';
SELECT DISTINCT city FROM business WHERE name = 'Whataburger';
SELECT DISTINCT neighbourhood_name FROM business INNER JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE name = 'MGM Grand Buffet';
SELECT DISTINCT neighbourhood_name FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE rating < 1.5;
SELECT DISTINCT business.name FROM business WHERE business.name LIKE '%Taj Mahal%';
SELECT review.text FROM review JOIN business ON review.business_id = business.business_id WHERE business.rating < 1;
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE review.rating > 3.5;
SELECT DISTINCT city FROM business WHERE name = 'Taj Mahal';
SELECT review.* FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Niloofar';
SELECT business.business_id, business.name FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.user_id WHERE user.name = 'Niloofar';
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.uid WHERE user.name = 'Niloofar' AND review.rating = 5;
SELECT review.text FROM review JOIN user ON review.user_id = user.uid JOIN business ON review.business_id = business.business_id JOIN category ON category.business_id = business.business_id WHERE user.name = 'Michelle' AND category.category_name = 'Italian';
SELECT COUNT(review.rid) FROM business JOIN review ON review.business_id = business.bid WHERE business.name = 'Cafe Zinho' AND business.state = 'TX';
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id JOIN category ON business.business_id = category.business_id WHERE review.rating = 5 AND category.id = 'Italian'
SELECT DISTINCT neighbourhood.id FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id JOIN category ON category.business_id = business.business_id WHERE category.category_name = 'Italian' AND business.city = 'Madison';
SELECT DISTINCT neighbourhood.id FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id JOIN category ON category.business_id = business.business_id JOIN review ON review.business_id = business.business_id WHERE category.category_name = 'Italian' AND business.city = 'Madison' AND review.rid < 2.5;
SELECT name FROM business WHERE city = 'Pennsylvania';
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Restaurants' AND business.city = 'Pennsylvania';
SELECT review.* FROM review JOIN business ON review.business_id = business.business_id JOIN category ON category.business_id = business.business_id WHERE category.category_name = 'Pet Groomers' GROUP BY review.business_id HAVING COUNT(review.business_id) > 100;
SELECT business_id FROM business WHERE city = 'Los Angeles' AND bid = 'breweries';
SELECT business.business_id, business.name FROM business WHERE business.city = 'Los Angeles' AND business.categories LIKE '%Breweries%';
SELECT business_id, city, state, bid FROM business WHERE city = 'Los Angeles' AND bid = 'brewery';
SELECT u.name FROM user u JOIN review r ON u.uid = r.user_id JOIN business b ON r.business_id = b.business_id WHERE b.name = 'Mesa Grill';
SELECT full_address FROM business WHERE name = 'Walmart' AND state = 'Los Angeles';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id JOIN user ON review.user_id = user.uid WHERE user.name = 'Patrick' AND business.city = 'Dallas';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id JOIN user ON review.user_id = user.uid WHERE user.name = 'Patrick' AND business.city = 'Dallas';
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id JOIN user ON review.user_id = user.uid WHERE user.name = 'Patrick' AND business.category = 'Bars';
SELECT b.name FROM business b JOIN review r ON b.business_id = r.business_id JOIN user u ON r.user_id = u.user_id WHERE u.name = 'Patrick' AND r.rating >= 3;
SELECT user.name FROM user JOIN tip ON user.uid = tip.user_id JOIN business ON business.bid = tip.business_id WHERE business.name = 'Barrio Cafe' AND tip.year = 2015;
SELECT business.business_id, business.name FROM business JOIN review ON business.business_id = review.business_id WHERE business.state = 'Texas' AND review.rating < 2;
SELECT DISTINCT business.business_id, business.name FROM business JOIN review ON business.business_id = review.business_id WHERE business.city = 'Los Angeles' AND review.text LIKE '%Seafood%';
SELECT business.business_id, business.name FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Los Angeles' AND category.category_name = 'Seafood';
SELECT DISTINCT business.business_id, business.name FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Los Angeles' AND category.name = 'Seafood';
SELECT review.* FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Patrick' AND review.rating > 4;
SELECT business.name FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE business.name LIKE '%Apple Store%' AND neighbourhood.id = 'Los Angeles';
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE business.city = 'Dallas' AND business.rating > 4.5;
SELECT neighbourhood.id FROM neighbourhood JOIN business ON business.business_id = neighbourhood.business_id WHERE business.name = 'Flat Top Grill';
SELECT tip.text FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Vintner Grill' AND tip.likes > 9;
SELECT review.* FROM review JOIN business ON review.business_id = business.business_id WHERE business.name = 'Kabob Palace' AND review.year = 2014;
SELECT DISTINCT user_id FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.city = 'Dallas';
SELECT DISTINCT state FROM business WHERE name = 'MGM Grand Buffet' AND state = 'Texas';
SELECT DISTINCT user.name FROM user JOIN tip ON user.uid = tip.user_id JOIN category ON tip.business_id = category.business_id WHERE category.category_name = 'Pet Groomers';
SELECT tip.text FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Cafe Zinho' AND business.state = 'TX';
SELECT DISTINCT user.user_id FROM user JOIN review ON user.user_id = review.user_id JOIN business ON review.business_id = business.business_id JOIN category ON business.business_id = category.business_id WHERE category.category_name = 'Restaurant'
SELECT text FROM tip JOIN business ON tip.business_id = business.bid WHERE business.name = 'Cafe Zinho' AND business.state = 'PA' AND tip.year = 2010;
SELECT DISTINCT user.user_id FROM user JOIN review ON user.user_id = review.user_id JOIN business ON review.business_id = business.business_id WHERE business.name LIKE '%Restaurant%' AND review.year = 2010;
SELECT tip.text FROM tip INNER JOIN review ON tip.user_id = review.user_id WHERE review.year = 2012;
SELECT review.* FROM review JOIN business ON review.business_id = business.business_id WHERE business.rating = 2.5;
SELECT COUNT(*) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.name = 'Madison' AND business.name LIKE '%Escape Game%';
SELECT COUNT(*) FROM business WHERE name LIKE '%Escape Game%' AND city = 'Madison';
SELECT COUNT(*) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.name = 'Madison' AND business.name LIKE '%Escape Game%';
SELECT COUNT(*) FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id JOIN category ON category.business_id = business.business_id WHERE neighbourhood.id = 'Madison' AND category.category_name = 'Escape Games';
SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE category.category_name = 'Escape Games' AND neighbourhood.name = 'Madison';
SELECT COUNT(*) FROM review JOIN business ON review.business_id = business.business_id WHERE review.rid > 3.5 AND business.name LIKE '%Restaurant%';
SELECT SUM(checkin.count) FROM checkin JOIN business ON checkin.business_id = business.bid WHERE business.city = 'Los Angeles' AND business.name LIKE '%Moroccan%';
SELECT SUM(checkin.count) FROM checkin JOIN business ON checkin.business_id = business.bid WHERE checkin.day = 'Friday' AND business.city = 'Los Angeles' AND business.category = 'Moroccan';
SELECT checkin.day, SUM(checkin.count) FROM checkin JOIN business ON checkin.business_id = business.bid JOIN category ON business.bid = category.business_id WHERE business.city = 'Los Angeles' AND category.category_name = 'Moroccan' GROUP BY checkin.day;
SELECT b.state, SUM(c.count) as total_checkins FROM checkin c JOIN business b ON c.business_id = b.business_id JOIN category cat ON b.business_id = cat.business_id WHERE c.day = 'Sunday' AND cat.category_name = 'Italian' GROUP BY b.state;
SELECT COUNT(*) FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Niloofar' AND review.year = 2015;
SELECT AVG(rating) FROM review WHERE user_id = (SELECT user_id FROM user WHERE name = 'Michelle');
SELECT COUNT(*) FROM checkin JOIN business ON checkin.business_id = business.bid WHERE business.name = 'Cafe Zinho' AND checkin.day = 'Friday';
SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.bid WHERE business.name = 'Sushi Too' AND business.city = 'Pittsburgh';
SELECT COUNT(*) FROM business JOIN review ON business.business_id = review.business_id WHERE business.city = 'Pittsburgh' AND review.stars = 4.5;
SELECT COUNT(*) FROM tip WHERE year = 2015;
SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.uid WHERE user.name = 'Niloofar';
SELECT SUM(tip.likes) FROM tip JOIN business ON tip.business_id = business.business_id WHERE business.name = 'Cafe Zinho'
SELECT SUM(tip.likes) FROM tip JOIN user ON tip.user_id = user.uid JOIN business ON tip.business_id = business.business_id WHERE user.name = 'Niloofar' AND business.city = 'Cafe Zinho';
SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.uid WHERE user.name = 'Michelle' AND tip.year = 2010;
SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.uid WHERE user.name = 'Michelle' AND tip.year = 2010;
SELECT COUNT(*) FROM tip JOIN user ON tip.user_id = user.uid WHERE user.name = 'Michelle' AND tip.month = 'April';
SELECT COUNT(*) FROM business WHERE city = 'Texas'
SELECT COUNT(*) FROM business WHERE rating > 3.5 AND city = 'Dallas' AND category = 'Bars';
SELECT COUNT(*) FROM business WHERE rating > 3.5 AND city = 'Dallas' AND category = 'Bars';
SELECT COUNT(DISTINCT review.user_id) FROM business JOIN review ON review.business_id = business.business_id WHERE business.name = 'Texas de Brazil' AND business.city = 'Dallas' AND business.state = 'TX';
SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.bid WHERE business.name = 'Bistro Di Napoli' AND review.year = 2015;
SELECT COUNT(*) FROM business JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.name = 'Hazelwood' AND business.categories LIKE '%Restaurants%';
SELECT COUNT(*) FROM business WHERE name LIKE 'Starbucks%' AND city = 'Dallas'
SELECT COUNT(*) FROM review WHERE business_id IN (SELECT bid FROM business WHERE name = 'Acacia Cafe');
SELECT AVG(checkin.count) FROM checkin JOIN business ON checkin.business_id = business.business_id WHERE business.name = 'Barrio Cafe';
SELECT COUNT(*) FROM business INNER JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.name = 'Stone Meadows' AND business.city = 'Madison';
SELECT COUNT(*) FROM review WHERE user_id IN (SELECT uid FROM user WHERE name = 'Adrienne');
SELECT COUNT(*) FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Michelle' AND review.year = 2014 AND review.month = 'March';
SELECT COUNT(DISTINCT review.business_id) FROM review JOIN user ON review.user_id = user.uid WHERE user.name = 'Michelle' AND review.year = 2010;
SELECT COUNT(DISTINCT review.business_id) FROM review JOIN user ON review.user_id = user.user_id JOIN business ON review.business_id = business.bid WHERE user.name = 'Christine' AND review.year = 2010 AND business.city = 'San Diego';
SELECT COUNT(*) FROM business WHERE name LIKE '%Target%' AND state = 'LA';
SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.bid WHERE business.name = 'Irish Pub' AND business.city = 'Dallas';
SELECT AVG(year) FROM review WHERE year = 2014;
SELECT COUNT(DISTINCT review.user_id) FROM review JOIN business ON review.business_id = business.bid WHERE business.name = 'Vintner Grill' AND review.year = 2010;
SELECT COUNT(review.rid) FROM review JOIN business ON review.business_id = business.business_id JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE neighbourhood.name = 'South Summerlin';
SELECT COUNT(*) FROM user WHERE uid = 'Michelle';
SELECT COUNT(*) FROM business WHERE name = 'restaurant';
SELECT COUNT(DISTINCT business.name) FROM business WHERE business.name = 'Panda Express';
SELECT COUNT(*) FROM tip INNER JOIN user ON tip.user_id = user.user_id WHERE user.name = 'Michelle';
SELECT COUNT(*) FROM checkin JOIN neighbourhood ON checkin.business_id = neighbourhood.business_id JOIN business ON checkin.business_id = business.business_id WHERE neighbourhood.id = 'Brighton Heights';
SELECT COUNT(*) FROM review WHERE strftime('%m', date(year)) = '03';
SELECT strftime('%m', date(year || '-01-01')) AS month, COUNT(*) AS num_tips FROM tip GROUP BY month;
SELECT COUNT(DISTINCT neighbourhood.id) FROM neighbourhood JOIN business ON neighbourhood.business_id = business.bid WHERE business.rating = 5 AND business.city = 'Madison';
SELECT name FROM business WHERE city = 'Texas' AND business_id IN (SELECT business_id FROM category WHERE category_name = 'Moroccan');
SELECT business.name FROM checkin JOIN business ON checkin.business_id = business.bid GROUP BY business.name ORDER BY SUM(checkin.count) DESC LIMIT 1;
SELECT neighbourhood.id, COUNT(*) as num_businesses FROM neighbourhood JOIN business ON neighbourhood.business_id = business.business_id WHERE business.city = 'Madison' GROUP BY neighbourhood.id ORDER BY num_businesses DESC LIMIT 1;
SELECT business.name FROM business JOIN category ON business.bid = category.business_id WHERE business.city = 'Dallas' AND business.rating >= 3.5 AND category.id = 'Mexican';
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id WHERE business.city = 'Dallas' AND business.rating > 3.5 AND category.category_name = 'Mexican'
SELECT DISTINCT business.name FROM business JOIN review ON review.business_id = business.business_id WHERE business.city = 'Dallas' AND review.text LIKE '%Valet Service%';
SELECT business.name FROM business JOIN category ON business.business_id = category.business_id JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE category.category_name = 'Italian' AND neighbourhood.id = 'Meadowood' AND business.city = 'Madison';
SELECT business.name FROM business JOIN review ON business.business_id = review.business_id WHERE business.city = 'Los Angeles' AND business.review_count >= 30 AND business.rating > 3 GROUP BY business.name LIMIT 100;
SELECT COUNT(*) FROM business JOIN category ON business.business_id = category.business_id JOIN neighbourhood ON business.business_id = neighbourhood.business_id WHERE category.id = 'Egyptian' AND neighbourhood.name = 'Edinburgh';
SELECT user.name FROM user JOIN review ON user.uid = review.user_id GROUP BY user.uid HAVING AVG(review.rating) < 3;
SELECT business.name FROM business JOIN review ON business.bid = review.business_id WHERE review.month = 'April' GROUP BY business.name ORDER BY COUNT(review.rid) DESC LIMIT 1;
SELECT business.name, COUNT(category.id) as category_count FROM business JOIN category ON business.bid = category.business_id GROUP BY business.name ORDER BY category_count DESC LIMIT 1;
